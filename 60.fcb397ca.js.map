{"version":3,"file":"60.fcb397ca.js","mappings":"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","sources":["webpack://ads-ui/./src/app/editors/editor-text.tsx","webpack://ads-ui/./src/app/editors/editor-openapi.tsx","webpack://ads-ui/./src/app/editors/editor-proto.tsx","webpack://ads-ui/./src/app/editors/editor-asyncapi.tsx","webpack://ads-ui/./src/app/pages/editor.tsx","webpack://ads-ui/./src/app/pages/editor-federated.tsx"],"sourcesContent":["import React from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport Editor from \"@monaco-editor/react\";\n\n/**\n * Simple text editor.  This is a fallback editor for any text based content\n * we might want to edit.\n */\nexport const TextEditor: DesignEditor = ({content, onChange}: EditorProps) => {\n    let defaultValue: string = \"\";\n    if (typeof content.data === \"string\") {\n        defaultValue = content.data as string;\n    } else {\n        defaultValue = JSON.stringify(content.data as string, null, 4);\n    }\n    return (\n        <Editor\n            className=\"text-editor\"\n            defaultLanguage=\"json\"\n            defaultValue={defaultValue}\n            onChange={onChange}\n            height=\"100%\"\n            options={{\n                automaticLayout: true\n            }}\n        />\n    );\n};\n","import React, {RefObject, useEffect} from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport \"./editor-openapi.css\";\nimport {Config, useConfig} from \"@rhoas/app-services-ui-shared\";\nimport {parseJson, parseYaml, toJsonString, toYamlString} from \"@app/utils\";\nimport {ContentTypes} from \"@app/models\";\n\n\nexport type OpenApiEditorProps = {\n    className?: string;\n} & EditorProps;\n\n\n/**\n * OpenAPI editor.  The actual editor logic is written in Angular as a separate application\n * and loaded via an iframe.  This component is a bridge - it acts as a React component that\n * bridges to the iframe.\n */\nexport const OpenApiEditor: DesignEditor = ({content, onChange, className}: OpenApiEditorProps) => {\n    const ref: RefObject<any> = React.createRef();\n    const cfg: Config = useConfig();\n\n    useEffect(() => {\n        const eventListener: any = (event) => {\n            if (event.data && event.data.type === \"apicurio_onChange\") {\n                let newContent: any = event.data.data.content;\n                if (typeof newContent === \"object\") {\n                    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n                        console.info(\"[OpenApiEditor] New content is 'object', converting to YAML string\");\n                        newContent = toYamlString(newContent);\n                    } else {\n                        console.info(\"[OpenApiEditor] New content is 'object', converting to JSON string\");\n                        newContent = toJsonString(newContent);\n                    }\n                } else if (typeof newContent === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n                    console.info(\"[OpenApiEditor] Converting from JSON string to YAML string.\")\n                    newContent = toYamlString(parseJson(newContent as string));\n                }\n                onChange(newContent);\n            }\n        };\n        window.addEventListener(\"message\", eventListener, false);\n        return () => {\n            window.removeEventListener(\"message\", eventListener, false);\n        };\n    }, []);\n\n    const editorAppUrl = (): string => {\n        return cfg.ads.editorsBasePath;\n    };\n\n    const onEditorLoaded = (): void => {\n        // Now it's OK to post a message to iframe with the content to edit.\n        let value: string;\n        if (typeof content.data === \"object\") {\n            console.info(\"[OpenApiEditor] Loading editor data from 'object' - converting to JSON string.\");\n            value = toJsonString(content.data);\n        } else if (typeof content.data === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n            console.info(\"[OpenApiEditor] Loading editor data from 'string' - converting from YAML to JSON.\");\n            value = toJsonString(parseYaml(content.data as string));\n        } else {\n            console.info(\"[OpenApiEditor] Loading editor data from 'string' without content conversion.\");\n            value = content.data as string;\n        }\n        const message: any = {\n            type: \"apicurio-editingInfo\",\n            // tslint:disable-next-line:object-literal-sort-keys\n            data: {\n                content: {\n                    type: \"OPENAPI\",\n                    value: value\n                },\n                features: {\n                    allowCustomValidations: false,\n                    allowImports: false\n                }\n            }\n        }\n        ref.current.contentWindow.postMessage(message, \"*\");\n    };\n\n    return (\n        <iframe id=\"openapi-editor-frame\"\n                ref={ ref }\n                className={ className ? className : \"editor-openapi-flex-container\" }\n                onLoad={ onEditorLoaded }\n                src={ editorAppUrl() } />\n    );\n};\n","import React from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport Editor from \"@monaco-editor/react\";\n\n/**\n * Protobuf text editor with support for syntax hint and highlight.\n */\nexport const ProtoEditor: DesignEditor = ({content, onChange}: EditorProps) => {\n\n    let defaultValue: string = \"\";\n    if (typeof content.data === \"string\") {\n        defaultValue = content.data as string;\n    } else {\n        defaultValue = JSON.stringify(content.data as string, null, 4);\n    }\n\n    const registerProto = (monaco) => {\n        monaco.languages.register({id: 'protobuf'});\n        monaco.languages.setMonarchTokensProvider('protobuf', {\n            keywords: [\n                'import', 'option', 'message', 'package', 'service',\n                'optional', 'rpc', 'returns', 'return', 'true', 'false', 'required'\n            ],\n            typeKeywords: [\n                'double', 'float', 'int32', 'int64', 'uint32',\n                'uint64', 'sint32', 'sint64', 'fixed32', 'fixed64',\n                'sfixed32', 'sfixed64', 'bool', 'string', 'bytes'\n            ],\n            operators: [\n                '=', '>', '<', '!', '~', '?', ':', '==', '<=', '>=', '!=',\n                '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%',\n                '<<', '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=', '^=',\n                '%=', '<<=', '>>=', '>>>='\n            ],\n            symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n            escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n            tokenizer: {\n                root: [\n                    [/[a-z_$][\\w$]*/, {\n                        cases: {\n                            '@typeKeywords': 'typeKeyword',\n                            '@keywords': 'keyword',\n                            '@default': 'identifier'\n                        }\n                    }],\n                    [/[A-Z][\\w$]*/, 'type.identifier'],\n                    {include: '@whitespace'},\n\n                    // delimiters and operators\n                    [/[{}()\\[\\]]/, '@brackets'],\n                    [/[<>](?!@symbols)/, '@brackets'],\n                    [/@symbols/, {\n                        cases: {\n                            '@operators': 'operator',\n                            '@default': ''\n                        }\n                    }],\n                    // @ annotations.\n                    [/@\\s*[a-zA-Z_$][\\w$]*/, {token: 'annotation', log: 'annotation token: $0'}],\n                    // numbers\n                    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n                    [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n                    [/\\d+/, 'number'],\n                    // delimiter: after number because of .\\d floats\n                    [/[;,.]/, 'delimiter'],\n                    // strings\n                    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n                    [/\"/, {token: 'string.quote', bracket: '@open', next: '@string'}],\n                    // characters\n                    [/'[^\\\\']'/, 'string'],\n                    [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n                    [/'/, 'string.invalid']\n                ],\n                comment: [\n                    [/[^\\/*]+/, 'comment'],\n                    [/\\/\\*/, 'comment', '@push'], // nested comment\n                    [\"\\\\*/\", 'comment', '@pop'],\n                    [/[\\/*]/, 'comment']\n                ],\n                string: [\n                    [/[^\\\\\"]+/, 'string'],\n                    [/@escapes/, 'string.escape'],\n                    [/\\\\./, 'string.escape.invalid'],\n                    [/\"/, {token: 'string.quote', bracket: '@close', next: '@pop'}]\n                ],\n                whitespace: [\n                    [/[ \\t\\r\\n]+/, 'white'],\n                    [/\\/\\*/, 'comment', '@comment'],\n                    [/\\/\\/.*$/, 'comment']\n                ]\n            }\n        });\n        monaco.editor.defineTheme('protobuf', {\n            base: 'vs',\n            inherit: true,\n            rules: [\n                {token: 'keyword', foreground: 'DB2121'},\n                {token: 'typeKeyword', foreground: 'F84842', fontStyle: 'italic'},\n                {token: 'identifier', foreground: '0C5ED7', fontStyle: 'bold'},\n                {token: 'type.identifier', foreground: '00CA8C', fontStyle: 'bold'},\n                {token: 'comment', foreground: '7A7A7A'},\n                {token: 'number', foreground: '000000', fontStyle: 'italic'},\n                {token: 'string', fontStyle: 'italic'}\n            ]\n        });\n    }\n\n    return (\n        <Editor\n            beforeMount={registerProto}\n            className=\"text-editor\"\n            defaultLanguage=\"protobuf\"\n            defaultValue={defaultValue}\n            onChange={onChange}\n            height=\"100%\"\n            options={{\n                automaticLayout: true\n            }}\n        />\n    );\n};\n","import React, {RefObject, useEffect} from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport \"./editor-asyncapi.css\";\nimport {Config, useConfig} from \"@rhoas/app-services-ui-shared\";\nimport {parseJson, parseYaml, toJsonString, toYamlString} from \"@app/utils\";\nimport {ContentTypes} from \"@app/models\";\n\n\nexport type AsyncApiEditorProps = {\n    className?: string;\n} & EditorProps;\n\n\n/**\n * AsyncAPI editor.  The actual editor logic is written in Angular as a separate application\n * and loaded via an iframe.  This component is a bridge - it acts as a React component that\n * bridges to the iframe.\n */\nexport const AsyncApiEditor: DesignEditor = ({content, onChange, className}: AsyncApiEditorProps) => {\n    const ref: RefObject<any> = React.createRef();\n    const cfg: Config = useConfig();\n\n    // TODO we have a lot of common functionality between the asyncapi and openapi editors.  Need to share!\n    useEffect(() => {\n        const eventListener: any = (event) => {\n            if (event.data && event.data.type === \"apicurio_onChange\") {\n                let newContent: any = event.data.data.content;\n                if (typeof newContent === \"object\") {\n                    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n                        console.info(\"[AsyncApiEditor] New content is 'object', converting to YAML string\");\n                        newContent = toYamlString(newContent);\n                    } else {\n                        console.info(\"[AsyncApiEditor] New content is 'object', converting to JSON string\");\n                        newContent = toJsonString(newContent);\n                    }\n                } else if (typeof newContent === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n                    console.info(\"[AsyncApiEditor] Converting from JSON string to YAML string.\")\n                    newContent = toYamlString(parseJson(newContent as string));\n                }\n                onChange(newContent);\n            }\n        };\n        window.addEventListener(\"message\", eventListener, false);\n        return () => {\n            window.removeEventListener(\"message\", eventListener, false);\n        };\n    }, []);\n\n    const editorAppUrl = (): string => {\n        return cfg.ads.editorsBasePath;\n    };\n\n    const onEditorLoaded = (): void => {\n        // Now it's OK to post a message to iframe with the content to edit.\n        let value: string;\n        if (typeof content.data === \"object\") {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'object' - converting to JSON string.\");\n            value = toJsonString(content.data);\n        } else if (typeof content.data === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'string' - converting from YAML to JSON.\");\n            value = toJsonString(parseYaml(content.data as string));\n        } else {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'string' without content conversion.\");\n            value = content.data as string;\n        }\n        const message: any = {\n            type: \"apicurio-editingInfo\",\n            // tslint:disable-next-line:object-literal-sort-keys\n            data: {\n                content: {\n                    type: \"ASYNCAPI\",\n                    value: value\n                },\n                features: {\n                    allowCustomValidations: false,\n                    allowImports: false\n                }\n            }\n        }\n        ref.current.contentWindow.postMessage(message, \"*\");\n    };\n\n    return (\n        <iframe id=\"asyncapi-editor-frame\"\n                ref={ ref }\n                className={ className ? className : \"editor-asyncapi-flex-container\" }\n                onLoad={ onEditorLoaded }\n                src={ editorAppUrl() } />\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./editor.css\";\nimport {PageSection, PageSectionVariants} from \"@patternfly/react-core\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport {ArtifactTypes, Design, DesignContent} from \"@app/models\";\nimport {IsLoading} from \"@app/components\";\nimport {EditorContext} from \"@app/pages/components\";\nimport {OpenApiEditor, ProtoEditor, TextEditor} from \"@app/editors\";\nimport {Navigation, useNavigation} from \"@app/contexts/navigation\";\nimport {AsyncApiEditor} from \"@app/editors/editor-asyncapi\";\n\n\nexport type EditorPageProps = {\n    params: any;\n};\n\n\nexport const EditorPage: FunctionComponent<EditorPageProps> = ({params}: EditorPageProps) => {\n    const [isLoading, setLoading] = useState(true);\n    const [design, setDesign] = useState<Design>();\n    const [designContent, setDesignContent] = useState<DesignContent>();\n    const [currentContent, setCurrentContent] = useState<any>();\n    const [isDirty, setDirty] = useState(false);\n\n    const designsService: DesignsService = useDesignsService();\n\n    const nav: Navigation = useNavigation();\n\n    // Load the design based on the design ID (from the path param).\n    useEffect(() => {\n        setLoading(true);\n        const designId: string = params[\"designId\"];\n\n        designsService.getDesign(designId).then(design => {\n            setDesign(design);\n        }).catch(error => {\n            // TODO handle error\n            console.error(`[EditorPage] Failed to get design with id ${designId}: `, error);\n        })\n    }, [params]);\n\n    // Load the design content\n    useEffect(() => {\n        const designId: string = params[\"designId\"];\n        designsService.getDesignContent(designId).then(content => {\n            setDesignContent(content);\n            setLoading(false);\n            setDirty(false);\n            setCurrentContent(content.data);\n        }).catch(error => {\n            // TODO handle error\n            console.error(`[EditorPage] Failed to get design content with id ${designId}: `, error);\n        });\n    }, [design])\n\n    // Called when the user makes an edit in the editor.\n    const onEditorChange = (value: any): void => {\n        setCurrentContent(value);\n        setDirty(true);\n    }\n\n    // Called when the user makes an edit in the editor.\n    const onSave = (): void => {\n        designsService.updateDesignContent({\n            ...designContent as DesignContent,\n            data: currentContent\n        }).then(() => {\n            setDesign({\n                ...design,\n                modifiedOn: new Date()\n            } as Design);\n        }).catch(error => {\n            // TODO handle error\n            console.error(\"[EditorPage] Failed to save design content: \", error);\n        });\n    };\n\n    // Called when the user makes an edit in the editor.\n    const onCancel = (): void => {\n        nav.navigateTo(\"/\");\n    };\n\n    const textEditor: React.ReactElement = (\n        <TextEditor content={designContent as DesignContent} onChange={onEditorChange} />\n    );\n\n    const protoEditor: React.ReactElement = (\n        <ProtoEditor content={designContent as DesignContent} onChange={onEditorChange} />\n    );\n\n    const openapiEditor: React.ReactElement = (\n        <OpenApiEditor content={designContent as DesignContent} onChange={onEditorChange} />\n    );\n\n    const asyncapiEditor: React.ReactElement = (\n        <AsyncApiEditor content={designContent as DesignContent} onChange={onEditorChange} />\n    );\n\n    const editor = (): React.ReactElement => {\n        if (design?.type === ArtifactTypes.OPENAPI) {\n            return openapiEditor;\n        } else if (design?.type === ArtifactTypes.ASYNCAPI) {\n            return asyncapiEditor;\n        } else if (design?.type === ArtifactTypes.PROTOBUF) {\n            return protoEditor;\n        }\n\n        // TODO create different text editors depending on the content type?  Or assume\n        // that the text editor can configure itself appropriately?\n        return textEditor;\n    };\n\n    return (\n        <IsLoading condition={isLoading}>\n            <PageSection variant={PageSectionVariants.light} id=\"section-context\">\n                <EditorContext design={design as Design} dirty={isDirty} onSave={onSave} onCancel={onCancel} />\n            </PageSection>\n            <PageSection variant={PageSectionVariants.light} id=\"section-editor\">\n                <div className=\"editor-parent\">\n                    {editor()}\n                </div>\n            </PageSection>\n        </IsLoading>\n    );\n}\n","import React from \"react\";\nimport {FederatedProps} from \"@app/contexts\";\nimport {EditorPage, EditorPageProps} from \"@app/pages/editor\";\n\ntype FederatedEditorPageProps = EditorPageProps & FederatedProps;\n\nconst FederatedEditorPage: React.FunctionComponent<FederatedEditorPageProps> = ({params}: FederatedEditorPageProps) => {\n    return (<EditorPage params={params} />);\n}\n\nexport default FederatedEditorPage;\n"],"names":["TextEditor","content","onChange","defaultValue","data","JSON","stringify","className","defaultLanguage","height","options","automaticLayout","OpenApiEditor","ref","cfg","useConfig","useEffect","eventListener","event","type","newContent","contentType","console","info","window","addEventListener","removeEventListener","id","onLoad","value","message","features","allowCustomValidations","allowImports","current","contentWindow","postMessage","src","ads","editorsBasePath","ProtoEditor","beforeMount","monaco","languages","register","setMonarchTokensProvider","keywords","typeKeywords","operators","symbols","escapes","tokenizer","root","cases","include","token","log","bracket","next","comment","string","whitespace","editor","defineTheme","base","inherit","rules","foreground","fontStyle","AsyncApiEditor","EditorPage","params","useState","isLoading","setLoading","design","setDesign","designContent","setDesignContent","currentContent","setCurrentContent","isDirty","setDirty","designsService","nav","designId","getDesign","then","catch","error","getDesignContent","onEditorChange","textEditor","protoEditor","openapiEditor","asyncapiEditor","condition","PageSection","variant","PageSectionVariants","dirty","onSave","updateDesignContent","modifiedOn","Date","onCancel","navigateTo"],"sourceRoot":""}