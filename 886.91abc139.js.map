{"version":3,"file":"886.91abc139.js","mappings":"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","sources":["webpack://ads-ui/./src/app/pages/editor.tsx","webpack://ads-ui/./src/app/pages/editor-federated.tsx"],"sourcesContent":["import React, {FunctionComponent, useEffect, useRef, useState} from \"react\";\nimport \"./editor.css\";\nimport {\n    Button,\n    CodeBlock,\n    CodeBlockCode,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Divider,\n    Drawer,\n    DrawerActions,\n    DrawerCloseButton,\n    DrawerContent,\n    DrawerHead,\n    DrawerPanelBody,\n    DrawerPanelContent,\n    PageSection,\n    PageSectionVariants,\n    Spinner\n} from \"@patternfly/react-core\";\nimport {\n    AlertsService,\n    DesignsService,\n    DownloadService,\n    useAlertsService,\n    useDesignsService,\n    useDownloadService,\n    useRhosrInstanceServiceFactory\n} from \"@app/services\";\nimport {ArtifactTypes, ContentTypes, Design, DesignContent, TestRegistryErrorResponse} from \"@app/models\";\nimport {IsLoading} from \"@app/components\";\nimport {CompareModal, DeleteDesignModal, EditorContext, RenameData, RenameModal} from \"@app/pages/components\";\nimport {OpenApiEditor, ProtoEditor, TextEditor} from \"@app/editors\";\nimport {AsyncApiEditor} from \"@app/editors/editor-asyncapi\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {contentTypeForDesign, convertToValidFilename, fileExtensionForDesign, formatContent} from \"@app/utils\";\nimport {Prompt} from \"react-router-dom\";\nimport {Navigation, useNavigation} from \"@app/contexts/navigation\";\n\n\nexport type EditorPageProps = {\n    params: any;\n    toggleExpandTestRegistryIssuesDrawer: (isExpanded: boolean) => void;\n};\n\n\ninterface TestRegistryRequestParams {\n    registry: Registry\n    groupId: string | undefined\n    artifactId: string\n}\n\n\n// Event listener used to prevent navigation when the editor is dirty\nconst onBeforeUnload = (e): void => {\n    // Cancel the event\n    e.preventDefault();\n    // Chrome requires returnValue to be set\n    e.returnValue = \"\";\n}\n\n\nexport const EditorPage: FunctionComponent<EditorPageProps> = ({params}: EditorPageProps) => {\n    const [isLoading, setLoading] = useState(true);\n    const [design, setDesign] = useState<Design>();\n    const [designContent, setDesignContent] = useState<DesignContent>();\n    const [currentContent, setCurrentContent] = useState<any>();\n    const [isDirty, setDirty] = useState(false);\n    const [testRegistryError, setTestRegistryError] = useState<TestRegistryErrorResponse>();\n    const [testRegistryArgsCache, setTestRegistryArgsCache] = useState<TestRegistryRequestParams>();\n    const [isTestRegistryIssuesLoading, setTestRegistryIssuesIsLoading] = useState(false);\n    const [isTestRegistryIssuesDrawerOpen, setTestRegistryIssuesDrawerIsOpen] = useState(false);\n    const [isRenameModalOpen, setRenameModalOpen] = useState(false);\n    const [isCompareModalOpen, setCompareModalOpen] = useState(false);\n    const [isDeleteModalOpen, setDeleteModalOpen] = useState(false);\n\n    const drawerRef = useRef<HTMLDivElement>();\n\n    const designsService: DesignsService = useDesignsService();\n    const rhosrInstanceFactory = useRhosrInstanceServiceFactory();\n    const downloadSvc: DownloadService = useDownloadService();\n    const navigation: Navigation = useNavigation();\n    const alerts: AlertsService = useAlertsService();\n\n    useEffect(() => {\n        // Cleanup any possible event listener we might still have registered\n        return () => {\n            window.removeEventListener(\"beforeunload\", onBeforeUnload);\n        };\n    }, []);\n\n    // Load the design based on the design ID (from the path param).\n    useEffect(() => {\n        setLoading(true);\n        const designId: string = params[\"designId\"];\n\n        designsService.getDesign(designId).then(design => {\n            setDesign(design);\n        }).catch(error => {\n            // TODO handle error\n            console.error(`[EditorPage] Failed to get design with id ${designId}: `, error);\n        })\n    }, [params]);\n\n    // Add browser hook to prevent navigation and tab closing when the editor is dirty\n    useEffect(() => {\n        if (isDirty) {\n            window.addEventListener(\"beforeunload\", onBeforeUnload);\n        } else {\n            window.removeEventListener(\"beforeunload\", onBeforeUnload);\n        }\n    }, [isDirty]);\n\n    // Load the design content\n    useEffect(() => {\n        const designId: string = params[\"designId\"];\n        designsService.getDesignContent(designId).then(content => {\n            setDesignContent(content);\n            setLoading(false);\n            setDirty(false);\n            setCurrentContent(content.data);\n        }).catch(error => {\n            // TODO handle error\n            console.error(`[EditorPage] Failed to get design content with id ${designId}: `, error);\n        });\n    }, [design])\n\n    // Called when the user makes an edit in the editor.\n    const onEditorChange = (value: any): void => {\n        setCurrentContent(value);\n        setDirty(true);\n    }\n\n    // Called when the user makes an edit in the editor.\n    const onSave = (): void => {\n        designsService.updateDesignContent({\n            ...designContent as DesignContent,\n            data: currentContent\n        }).then(() => {\n            if (design) {\n                design.modifiedOn = new Date();\n                setDesign(design);\n                setDirty(false);\n            }\n            alerts.designSaved(design as Design);\n        }).catch(error => {\n            // TODO handle error\n            console.error(\"[EditorPage] Failed to save design content: \", error);\n        });\n    };\n\n    const onFormat = (): void => {\n        console.info(\"[EditorPage] Formatting content.\");\n        const formattedContent: string = formatContent(currentContent, designContent?.contentType || ContentTypes.APPLICATION_JSON);\n        console.info(\"[EditorPage] New content is: \", formattedContent);\n        setDesignContent({\n            ...designContent as DesignContent,\n            data: formattedContent\n        });\n        setCurrentContent(formattedContent);\n    };\n\n    const onDelete = (): void => {\n        setDeleteModalOpen(true);\n    };\n\n    const onDeleteDesignConfirmed = (design: Design): void => {\n        designsService.deleteDesign(design.id).then(() => {\n            alerts.designDeleted(design as Design);\n            navigation.navigateTo(\"/\");\n        }).catch(error => {\n            console.error(\"[Editor] Design delete failed: \", error);\n            alerts.designDeleteFailed(design as Design, error);\n        });\n        setDeleteModalOpen(false);\n    };\n\n    const onDownload = (): void => {\n        if (design && designContent) {\n            const filename: string = `${convertToValidFilename(design.name)}.${fileExtensionForDesign(design, designContent)}`;\n            const contentType: string = contentTypeForDesign(design, designContent);\n            const theContent: string = typeof currentContent === \"object\" ? JSON.stringify(currentContent, null, 4) : currentContent as string;\n            downloadSvc.downloadToFS(design, theContent, contentType, filename);\n        }\n    };\n\n    const doRenameDesign = (event: RenameData): void => {\n        designsService.renameDesign(design?.id as string, event.name, event.summary).then(() => {\n            if (design) {\n                design.name = event.name;\n                design.summary = event.summary;\n            }\n            setRenameModalOpen(false);\n            alerts.designRenamed(event);\n        }).catch(e => {\n            // TODO error handling\n        });\n    }\n\n    const textEditor: React.ReactElement = (\n        <TextEditor content={designContent as DesignContent} onChange={onEditorChange}/>\n    );\n\n    const protoEditor: React.ReactElement = (\n        <ProtoEditor content={designContent as DesignContent} onChange={onEditorChange}/>\n    );\n\n    const openapiEditor: React.ReactElement = (\n        <OpenApiEditor content={designContent as DesignContent} onChange={onEditorChange}/>\n    );\n\n    const asyncapiEditor: React.ReactElement = (\n        <AsyncApiEditor content={designContent as DesignContent} onChange={onEditorChange}/>\n    );\n\n    const editor = (): React.ReactElement => {\n        if (design?.type === ArtifactTypes.OPENAPI) {\n            return openapiEditor;\n        } else if (design?.type === ArtifactTypes.ASYNCAPI) {\n            return asyncapiEditor;\n        } else if (design?.type === ArtifactTypes.PROTOBUF) {\n            return protoEditor;\n        }\n\n        // TODO create different text editors depending on the content type?  Or assume\n        // that the text editor can configure itself appropriately?\n        return textEditor;\n    };\n\n    const onResizeTestRegistrySidepanel = (newWidth: number, id: string) => {\n        // eslint-disable-next-line no-console\n        console.log(`${id} has new width of: ${newWidth}`);\n    };\n\n    const onCompareContent = () => {\n        setCompareModalOpen(true);\n    }\n\n    const closeCompareEditor = () => {\n        setCompareModalOpen(false);\n    }\n\n    const testArtifactRegistration = (registry: Registry, groupId: string | undefined, artifactId: string) => {\n        setTestRegistryIssuesIsLoading(true);\n        openTestRegistryIssuesPanel();\n        // cache registry used during registry test to allow for a retry from the sidepanel\n        setTestRegistryArgsCache({registry, groupId, artifactId});\n        rhosrInstanceFactory.createFor(registry)\n            .testUpdateArtifactContent(groupId, artifactId, currentContent)\n            .then(() => {\n                // Nothing to do here.\n            }).catch((error: TestRegistryErrorResponse) => {\n            openTestRegistryIssuesPanel(error);\n        });\n    }\n\n    const openTestRegistryIssuesPanel = (error?: TestRegistryErrorResponse) => {\n        setTestRegistryIssuesDrawerIsOpen(true);\n        setTestRegistryError(error);\n        setTestRegistryIssuesIsLoading(false);\n    }\n\n    const closeTestRegistryIssuesPanel = () => {\n        setTestRegistryIssuesDrawerIsOpen(false);\n        setTestRegistryIssuesIsLoading(false);\n        setTestRegistryError(undefined);\n    }\n\n    const renderPanelContent = (error?: TestRegistryErrorResponse) => {\n        return (\n            <DrawerPanelContent isResizable onResize={onResizeTestRegistrySidepanel} minSize=\"35%\"\n                                id=\"test-registry-issues-panel\">\n                <DrawerHead>\n                    <h2 className=\"pf-c-title pf-m-2xl\" tabIndex={isTestRegistryIssuesDrawerOpen ? 0 : -1}\n                        ref={drawerRef as any}>\n                        Test Registration issues\n                    </h2>\n                    <DrawerActions>\n                        <Button variant=\"secondary\" onClick={() => testArtifactRegistration(\n                            testRegistryArgsCache?.registry as Registry,\n                            testRegistryArgsCache?.groupId,\n                            testRegistryArgsCache?.artifactId as string\n                        )\n                        }>Retry</Button>\n                        <DrawerCloseButton onClick={closeTestRegistryIssuesPanel}/>\n                    </DrawerActions>\n                </DrawerHead>\n                <Divider/>\n                <DrawerPanelBody>\n                    {renderPanelBody(error)}\n                </DrawerPanelBody>\n            </DrawerPanelContent>\n        )\n    };\n\n    const renderPanelBody = (error?: TestRegistryErrorResponse) => {\n        if (isTestRegistryIssuesLoading) {\n            return <Spinner className=\"spinner\"/>\n        } else if (error) {\n            return <DescriptionList isHorizontal>\n                {error.name === \"RuleViolationException\" && error.causes?.length > 0 ?\n                    error.causes.map((cause, i) =>\n                        <React.Fragment key={`issue-${i}`}>\n                            <DescriptionListGroup>\n                                <DescriptionListTerm>Code</DescriptionListTerm>\n                                <DescriptionListDescription>{cause.description}</DescriptionListDescription>\n                                <DescriptionListTerm>Context</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                    <pre>{cause.context}</pre>\n                                </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <Divider/>\n                        </React.Fragment>\n                    ) : <CodeBlock>\n                        <CodeBlockCode id=\"code-content\">{error.detail}</CodeBlockCode>\n                    </CodeBlock>}\n            </DescriptionList>\n        }\n\n        return <p>Registry Test completed with no issues.</p>;\n    }\n\n    return (\n        <IsLoading condition={isLoading}>\n            <PageSection variant={PageSectionVariants.light} id=\"section-context\">\n                <EditorContext\n                    design={design as Design}\n                    dirty={isDirty}\n                    onSave={onSave}\n                    onFormat={onFormat}\n                    onDelete={onDelete}\n                    onDownload={onDownload}\n                    onRename={() => setRenameModalOpen(true)}\n                    isPanelOpen={isTestRegistryIssuesDrawerOpen}\n                    onRegistrationTestRegistry={testArtifactRegistration}\n                    onCompareContent={onCompareContent}\n                    onExpandTestRegistryCausesPanel={(error: TestRegistryErrorResponse) => openTestRegistryIssuesPanel(error)}\n                    artifactContent={currentContent}\n                />\n            </PageSection>\n            <PageSection variant={PageSectionVariants.light} id=\"section-editor\">\n                <Drawer isExpanded={isTestRegistryIssuesDrawerOpen} isInline={true} position=\"right\">\n                    <DrawerContent panelContent={renderPanelContent(testRegistryError)}>\n                        <div className=\"editor-parent\">\n                            {editor()}\n                        </div>\n                    </DrawerContent>\n                </Drawer>\n            </PageSection>\n            <CompareModal isOpen={isCompareModalOpen}\n                          onClose={closeCompareEditor}\n                          before={designContent?.data}\n                          after={currentContent} />\n            <RenameModal design={design}\n                         isOpen={isRenameModalOpen}\n                         onRename={doRenameDesign}\n                         onCancel={() => setRenameModalOpen(false)}/>\n            <DeleteDesignModal design={design}\n                               isOpen={isDeleteModalOpen}\n                               onDelete={onDeleteDesignConfirmed}\n                               onDownload={onDownload}\n                               onCancel={() => setDeleteModalOpen(false)}/>\n            <Prompt when={isDirty} message={`You have unsaved changes.  Do you really want to leave?`}/>\n        </IsLoading>\n    );\n}\n","import React from \"react\";\nimport {FederatedProps} from \"@app/contexts\";\nimport {EditorPage, EditorPageProps} from \"@app/pages/editor\";\n\ntype FederatedEditorPageProps = EditorPageProps & FederatedProps;\n\nconst FederatedEditorPage: React.FunctionComponent<FederatedEditorPageProps> = (props: FederatedEditorPageProps) => {\n    return (<EditorPage {...props}/>);\n}\n\nexport default FederatedEditorPage;\n"],"names":["onBeforeUnload","e","preventDefault","returnValue","EditorPage","params","useState","isLoading","setLoading","design","setDesign","designContent","setDesignContent","currentContent","setCurrentContent","isDirty","setDirty","testRegistryError","setTestRegistryError","testRegistryArgsCache","setTestRegistryArgsCache","isTestRegistryIssuesLoading","setTestRegistryIssuesIsLoading","isTestRegistryIssuesDrawerOpen","setTestRegistryIssuesDrawerIsOpen","isRenameModalOpen","setRenameModalOpen","isCompareModalOpen","setCompareModalOpen","isDeleteModalOpen","setDeleteModalOpen","drawerRef","useRef","designsService","rhosrInstanceFactory","downloadSvc","navigation","alerts","useEffect","window","removeEventListener","designId","getDesign","then","catch","error","console","addEventListener","getDesignContent","content","data","onEditorChange","value","onDownload","filename","name","contentType","theContent","JSON","stringify","downloadToFS","textEditor","onChange","protoEditor","openapiEditor","asyncapiEditor","onResizeTestRegistrySidepanel","newWidth","id","log","testArtifactRegistration","registry","groupId","artifactId","openTestRegistryIssuesPanel","createFor","testUpdateArtifactContent","closeTestRegistryIssuesPanel","undefined","renderPanelBody","Spinner","className","DescriptionList","isHorizontal","causes","length","map","cause","i","key","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","description","context","Divider","CodeBlock","CodeBlockCode","detail","condition","PageSection","variant","PageSectionVariants","dirty","onSave","updateDesignContent","modifiedOn","Date","designSaved","onFormat","info","formattedContent","onDelete","onRename","isPanelOpen","onRegistrationTestRegistry","onCompareContent","onExpandTestRegistryCausesPanel","artifactContent","Drawer","isExpanded","isInline","position","DrawerContent","panelContent","DrawerPanelContent","isResizable","onResize","minSize","DrawerHead","tabIndex","ref","DrawerActions","Button","onClick","DrawerCloseButton","DrawerPanelBody","type","isOpen","onClose","before","after","event","renameDesign","summary","designRenamed","onCancel","deleteDesign","designDeleted","navigateTo","designDeleteFailed","Prompt","when","message","props"],"sourceRoot":""}