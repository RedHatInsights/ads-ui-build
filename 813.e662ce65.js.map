{"version":3,"file":"813.e662ce65.js","mappings":"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","sources":["webpack://ads-ui/./src/app/components/if.tsx","webpack://ads-ui/./src/app/components/navlink.tsx","webpack://ads-ui/./src/app/components/artifact-type-icon.tsx","webpack://ads-ui/./src/app/components/is-loading.tsx","webpack://ads-ui/./src/app/components/if-not-empty.tsx","webpack://ads-ui/./src/app/components/list-with-toolbar.tsx","webpack://ads-ui/./src/app/components/toggle-icon.tsx","webpack://ads-ui/./src/app/components/object-select.tsx","webpack://ads-ui/./src/app/contexts/navigation.ts","webpack://ads-ui/./src/app/models/rhosr-instance/artifact-types.model.ts","webpack://ads-ui/./src/app/models/rhosr-instance/content-types.model.ts","webpack://ads-ui/./src/app/pages/components/home/artifact-group.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-name.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-selector.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-item.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/create-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/delete-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/design-list.tsx","webpack://ads-ui/./src/app/pages/components/home/designs.panel.tsx","webpack://ads-ui/./src/app/pages/components/home/import-dropdown.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state-filtered.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/import-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/import-from-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/template-item.tsx","webpack://ads-ui/./src/app/pages/components/home/url-upload.tsx","webpack://ads-ui/./src/app/pages/components/home/design-details-panel.tsx","webpack://ads-ui/./src/app/pages/components/home/design-history.tsx","webpack://ads-ui/./src/app/pages/components/home/design-events.tsx","webpack://ads-ui/./src/app/pages/components/home/design-event-type.tsx","webpack://ads-ui/./src/app/pages/components/home/design-origin-label.tsx","webpack://ads-ui/./src/app/pages/components/editor/dry-run.modal.tsx","webpack://ads-ui/./src/app/pages/components/editor/editor-context.tsx","webpack://ads-ui/./src/app/pages/components/shared/export-to-rhosr.modal.tsx","webpack://ads-ui/./src/app/services/rhosr-instance.ts","webpack://ads-ui/./src/app/services/designs.ts","webpack://ads-ui/./src/app/services/_templates/asyncapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/openapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/json.templates.ts","webpack://ads-ui/./src/app/services/_templates/avro.templates.ts","webpack://ads-ui/./src/app/services/_templates/protobuf.templates.ts","webpack://ads-ui/./src/app/services/templates.ts","webpack://ads-ui/./src/app/services/download.ts","webpack://ads-ui/./src/app/services/url.ts","webpack://ads-ui/./src/app/services/local-storage.ts","webpack://ads-ui/./src/app/services/rhosr.ts","webpack://ads-ui/./src/app/utils/object.utils.ts","webpack://ads-ui/./src/app/utils/content.utils.ts","webpack://ads-ui/./src/app/utils/design.utils.ts","webpack://ads-ui/./src/app/utils/rest.utils.ts"],"sourcesContent":["import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type IfProps = {\n    condition: boolean | (() => boolean);\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const If: FunctionComponent<IfProps> = ({condition, children}: IfProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n\n    return (accept() ? <React.Fragment children={children} /> : <React.Fragment />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {useNavigation, Navigation} from \"@app/contexts/navigation\";\n\nexport type NavLinkProps = {\n    location: string;\n    className?: string;\n    children?: React.ReactNode;\n}\n\nexport const NavLink: FunctionComponent<NavLinkProps> = ({location, className, children}: NavLinkProps) => {\n    const nav: Navigation = useNavigation();\n    return (\n        <a className={className} onClick={() => nav.navigateTo(location)} children={children} />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./artifact-type-icon.css\";\nimport {ArtifactTypes} from \"@app/models\";\n\n/**\n * Properties\n */\nexport type ArtifactTypeIconProps = {\n    type: string;\n    isShowIcon?: boolean; // defaults to true\n    isShowLabel?: boolean; // defaults to false\n}\n\n\nexport const ArtifactTypeIcon: FunctionComponent<ArtifactTypeIconProps> = ({type, isShowIcon, isShowLabel}: ArtifactTypeIconProps) => {\n    const getTitle = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro Schema\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf Schema\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON Schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI Definition\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI Definition\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL Definition\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect Schema\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getLabel = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getClassNames = (): string => {\n        let classes: string = \"artifact-type-icon\";\n        if (isShowLabel) {\n            classes += \" has-label\";\n        }\n        if (isShowIcon !== false) {\n            classes += \" has-icon\";\n            switch (type) {\n                case ArtifactTypes.AVRO:\n                    classes += \" avro-icon24\";\n                    break;\n                case ArtifactTypes.PROTOBUF:\n                    classes += \" protobuf-icon24\";\n                    break;\n                case ArtifactTypes.JSON:\n                    classes += \" json-icon24\";\n                    break;\n                case ArtifactTypes.OPENAPI:\n                    classes += \" oai-icon24\";\n                    break;\n                case ArtifactTypes.ASYNCAPI:\n                    classes += \" aai-icon24\";\n                    break;\n                case ArtifactTypes.GRAPHQL:\n                    classes += \" graphql-icon24\";\n                    break;\n                case ArtifactTypes.KCONNECT:\n                    classes += \" kconnect-icon24\";\n                    break;\n                case ArtifactTypes.WSDL:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XSD:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XML:\n                    classes += \" xml-icon24\";\n                    break;\n            }\n        }\n        return classes;\n    }\n\n    const renderLabel = (): React.ReactNode | undefined => {\n        if (isShowLabel) {\n            return <span>{getLabel()}</span>\n        } else {\n            return undefined;\n        }\n    };\n\n    return (\n        <div className={getClassNames()} title={getTitle()} children={renderLabel()} />\n    );\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Spinner} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IsLoadingProps = {\n    condition: boolean | (() => boolean);\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n}\n\n/**\n * Displays a Spinner control while the condition property is true.  When false, the provided children\n * are displayed.  Useful when displaying content from the results of an async operation such as a REST\n * call.\n */\nexport const IsLoading: FunctionComponent<IsLoadingProps> = ({condition, loadingComponent, children}: IsLoadingProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n    const lc: React.ReactNode = loadingComponent || <Spinner />;\n    return (accept() ? <React.Fragment children={lc} /> : <React.Fragment children={children} />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Button, EmptyState, EmptyStateBody, EmptyStateVariant, Title} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IfNotEmptyProps = {\n    collection?: any[];\n    emptyState?: React.ReactNode;\n    emptyStateTitle?: string;\n    emptyStateMessage?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * provided collection is not empty.  If the provided collection is empty, then\n * an empty state control is displayed instead.\n */\nexport const IfNotEmpty: FunctionComponent<IfNotEmptyProps> = ({collection, emptyState, emptyStateTitle, emptyStateMessage, children}: IfNotEmptyProps) => {\n    const isEmpty = () => {\n        return !collection || collection.length === 0;\n    };\n\n    const empty: React.ReactNode = emptyState || (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{emptyStateTitle || \"None found\"}</Title>\n            <EmptyStateBody>{emptyStateMessage || \"No items found.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    return isEmpty() ?\n        <React.Fragment children={empty}/> :\n        <React.Fragment children={children} />\n};\n","import React, {FunctionComponent} from \"react\";\nimport {IsLoading} from \"@app/components/is-loading\";\nimport {If} from \"@app/components/if\";\nimport {IfNotEmpty} from \"@app/components/if-not-empty\";\n\n/**\n * Properties\n */\nexport type ListWithToolbarProps = {\n    toolbar: React.ReactNode;\n    emptyState: React.ReactNode;\n    filteredEmptyState: React.ReactNode;\n    isLoading: boolean;\n    isFiltered: boolean;\n    isEmpty: boolean;\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const ListWithToolbar: FunctionComponent<ListWithToolbarProps> = (\n    {toolbar, emptyState, filteredEmptyState, isLoading, isEmpty, isFiltered, children}: ListWithToolbarProps) => {\n\n    return (\n        <React.Fragment>\n            <If condition={!isEmpty || isFiltered} children={toolbar} />\n            <IsLoading condition={isLoading}>\n                <If condition={!isEmpty} children={children} />\n                <If condition={isEmpty && isFiltered} children={filteredEmptyState} />\n                <If condition={isEmpty && !isFiltered} children={emptyState} />\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {ChevronRightIcon, ChevronDownIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type ToggleIconProps = {\n    expanded: boolean;\n    onClick: () => void;\n};\n\nexport const ToggleIcon: FunctionComponent<ToggleIconProps> = ({expanded, onClick}: ToggleIconProps) => {\n    return expanded ? (\n        <ChevronDownIcon />\n    ) : (\n        <ChevronRightIcon />\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Select, SelectOption, SelectVariant} from \"@patternfly/react-core\";\nimport {SelectOptionObject} from \"@patternfly/react-core/src/components/Select/SelectOption\";\n\ninterface ObjectSelectOptionObject extends SelectOptionObject {\n    item: any;\n}\n\n/**\n * Properties\n */\nexport type ObjectSelectProps = {\n    value: any;\n    items: any[];\n    onSelect: (value: any) => void;\n    itemToString: (value: any) => string;\n    noSelectionLabel?: string;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline';\n};\n\n/**\n * A generic control that makes it easier to create a <Select> from an array of objects.\n */\nexport const ObjectSelect: FunctionComponent<ObjectSelectProps> = (\n    {value, items, onSelect, itemToString, noSelectionLabel, menuAppendTo}: ObjectSelectProps) => {\n\n    const [isToggled, setToggled] = useState<boolean>(false);\n    const [selectObjects, setSelectObjects] = useState<ObjectSelectOptionObject[]>();\n    const [selections, setSelections] = useState<ObjectSelectOptionObject[]>();\n\n    const onSelectInternal = (event: React.MouseEvent | React.ChangeEvent, value: string | SelectOptionObject): void => {\n        setToggled(false);\n        onSelect((value as ObjectSelectOptionObject).item);\n    };\n\n    useEffect(() => {\n        const theItems: any[] = items || [];\n        const selectObjects: ObjectSelectOptionObject[] = theItems.map((item, index) => {\n            return {\n                item: item,\n                toString: () => {\n                    return itemToString(item)\n                }\n            }\n        });\n        if (noSelectionLabel !== undefined) {\n            const noSelection: ObjectSelectOptionObject = {\n                item: undefined,\n                toString(): string {\n                    return noSelectionLabel;\n                }\n            }\n            setSelectObjects([\n                noSelection, ...selectObjects\n            ]);\n        } else {\n            setSelectObjects(selectObjects);\n        }\n    }, [items]);\n\n    useEffect(() => {\n        const filtered: ObjectSelectOptionObject[]|undefined = selectObjects?.filter(soo => soo.item === value);\n        setSelections(filtered);\n    }, [value]);\n\n    return (\n        <Select menuAppendTo={menuAppendTo} variant={SelectVariant.single} onToggle={setToggled} onSelect={onSelectInternal} isOpen={isToggled} selections={selections}>\n            {\n                selectObjects?.map((soo, index) => (\n                    <SelectOption isPlaceholder={soo.item === undefined} key={index} value={soo} />\n                ))\n            }\n        </Select>\n    )\n};\n","import {Basename, useBasename} from \"@rhoas/app-services-ui-shared\";\nimport {History} from \"history\";\nimport {useHistory} from \"react-router-dom\";\n\nexport const navigateTo: (path: string, basename: Basename, history: History) => void = (path: string, basename: Basename, history: History) => {\n    const to: string = `${basename.getBasename()}${path}`;\n    history.push(to);\n};\n\nexport type Navigation = {\n    navigateTo: (path: string) => void;\n};\n\nexport const useNavigation: () => Navigation = (): Navigation => {\n    const history: History = useHistory();\n    const basename: Basename = useBasename();\n\n    return {\n        navigateTo: (path: string) => {\n            return navigateTo(path, basename, history);\n        }\n    };\n}\n","\nexport class ArtifactTypes {\n\n    public static AVRO: string = \"AVRO\";\n    public static PROTOBUF: string = \"PROTOBUF\";\n    public static JSON: string = \"JSON\";\n    public static OPENAPI: string = \"OPENAPI\";\n    public static ASYNCAPI: string = \"ASYNCAPI\";\n    public static GRAPHQL: string = \"GRAPHQL\";\n    public static KCONNECT: string = \"KCONNECT\";\n    public static WSDL: string = \"WSDL\";\n    public static XSD: string = \"XSD\";\n    public static XML: string = \"XML\";\n\n}\n","\nexport class ContentTypes {\n\n    public static APPLICATION_JSON: string = \"application/json\";\n    public static APPLICATION_YAML: string = \"application/x-yaml\";\n    public static APPLICATION_XML: string = \"application/xml\";\n    public static APPLICATION_PROTOBUF: string = \"application/x-protobuf\";\n    public static APPLICATION_GRAPHQL: string = \"application/graphql\";\n\n    public static TEXT_XML: string = \"text/xml\";\n    public static APPLICATION_WSDL: string = \"application/wsdl+xml\";\n}\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactGroupProps = {\n    groupId: string|undefined;\n}\n\n/**\n * Displays a RHOSR artifact's group.\n */\nexport const ArtifactGroup: FunctionComponent<ArtifactGroupProps> = ({groupId}: ArtifactGroupProps) => {\n    const style = (): string => {\n        return !groupId ? \"nogroup\" : \"group\";\n    };\n\n    return (\n        <span className={style()}>{groupId}</span>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactNameProps = {\n    id: string;\n    name: string;\n}\n\n/**\n * Displays a RHOSR artifact's name.\n */\nexport const ArtifactName: FunctionComponent<ArtifactNameProps> = ({id, name}: ArtifactNameProps) => {\n    return name ? (\n        <React.Fragment>\n            <span className=\"name\">{name}</span>\n            <span className=\"id\">{id}</span>\n        </React.Fragment>\n    ) : (\n        <React.Fragment>\n            <span className=\"name\">{id}</span>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    ArtifactSearchResults,\n    CreateDesignContent,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedArtifact,\n    SearchedVersion\n} from \"@app/models\";\nimport {RhosrInstanceService, RhosrInstanceServiceFactory, useRhosrInstanceServiceFactory} from \"@app/services\";\nimport {ArtifactList, ArtifactListToolbar, ArtifactListToolbarCriteria} from \"@app/pages/components\";\nimport {IfNotEmpty, IsLoading} from \"@app/components\";\n\n/**\n * Properties\n */\nexport type ArtifactSelectorProps = {\n    registries: Registry[];\n    onSelected: (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n};\n\n/**\n * A control that allows the user to find and select a single version of a single artifact from\n * a service registry instance.\n */\nexport const ArtifactSelector: FunctionComponent<ArtifactSelectorProps> = ({registries, onSelected}: ArtifactSelectorProps) => {\n    const [ querying, setQuerying ] = useState(true);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<ArtifactListToolbarCriteria>({\n        filterValue: \"\",\n        ascending: true,\n        filterSelection: \"name\"\n    });\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ artifacts, setArtifacts ] = useState<ArtifactSearchResults|undefined>();\n    const [ rhosrInstance, setRhosrInstance ] = useState<RhosrInstanceService>();\n\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    const onRegistrySelected = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    const onCriteriaChange = (criteria: ArtifactListToolbarCriteria): void =>  {\n        setCriteria(criteria);\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n    };\n\n    const fetchArtifactVersions = (artifact: SearchedArtifact): Promise<SearchedVersion[]> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactVersions(artifact.groupId, artifact.id);\n    };\n\n    const fetchArtifactContent = (artifact: SearchedArtifact, version?: SearchedVersion): Promise<string> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactContent(artifact.groupId, artifact.id, version?.version||\"latest\");\n    };\n\n    const onArtifactSelected = (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        onSelected(registry, artifact, version, content);\n    };\n\n    // Initialization\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, []);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    // Query for artifacts when relevant changes occur.\n    useEffect(() => {\n        if (rhosrInstance) {\n            const gac: GetArtifactsCriteria = {\n                sortAscending: criteria.ascending,\n                type: criteria.filterSelection,\n                value: criteria.filterValue\n            };\n            setQuerying(true);\n            rhosrInstance.getArtifacts(gac, paging).then(results => {\n                setArtifacts(results);\n                setQuerying(false);\n            }).catch(error => {\n                // TODO handle error\n                console.error(\"[RegistryPage] Error searching for artifacts: \", error);\n            });\n        }\n        onSelected(undefined, undefined, undefined);\n    }, [rhosrInstance, criteria, paging]);\n\n    return (\n        <React.Fragment>\n            <ArtifactListToolbar registries={registries} criteria={criteria} paging={paging}\n                                 onRegistrySelected={onRegistrySelected}\n                                 onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange}\n                                 artifacts={artifacts} />\n            <IsLoading condition={querying}>\n                <IfNotEmpty collection={artifacts?.artifacts} emptyStateMessage={`No artifacts found matching the search criteria.`}>\n                    <ArtifactList artifacts={artifacts?.artifacts} fetchArtifactContent={fetchArtifactContent}\n                                  onArtifactSelected={onArtifactSelected}\n                                  fetchArtifactVersions={fetchArtifactVersions} />\n                </IfNotEmpty>\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./artifact-list.css\";\nimport {CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {ArtifactListItem} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type ArtifactListProps = {\n    artifacts?: SearchedArtifact[];\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n    onArtifactSelected: (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactList: FunctionComponent<ArtifactListProps> = (\n    {artifacts, fetchArtifactVersions, fetchArtifactContent, onArtifactSelected}: ArtifactListProps) => {\n\n    const [selectedArtifact, setSelectedArtifact] = useState<SearchedArtifact>();\n\n    const onArtifactSelectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact selected: \", artifact);\n        setSelectedArtifact(artifact);\n    };\n\n    const onArtifactUnselectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact unselected: \", artifact);\n        setSelectedArtifact(undefined);\n        onArtifactSelected(undefined, undefined, undefined);\n    };\n\n    const onArtifactLoaded = (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent): void => {\n        console.debug(\"[ArtifactList] Artifact loaded: \", artifact);\n        console.debug(\"[ArtifactList] Selected Artifact: \", selectedArtifact);\n        if (artifact === selectedArtifact) {\n            onArtifactSelected(artifact, version, content);\n        }\n    };\n\n    return (\n        <div className=\"artifact-list\">\n            {\n                artifacts?.map( (artifact, idx) =>\n                    <ArtifactListItem artifact={artifact} key={idx}\n                                      onSelected={onArtifactSelectedInternal}\n                                      onUnselected={onArtifactUnselectedInternal}\n                                      fetchArtifactVersions={fetchArtifactVersions}\n                                      fetchArtifactContent={fetchArtifactContent}\n                                      onArtifactLoaded={onArtifactLoaded}\n                                      isSelected={selectedArtifact === artifact} />\n                )\n            }\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-item.css\";\nimport {ArtifactTypes, ContentTypes, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Badge, Radio, Spinner} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {ArtifactGroup, ArtifactName} from \"@app/pages/components\";\nimport {isJson, isXml, isYaml} from \"@app/utils\";\n\n/**\n * Properties\n */\nexport type ArtifactListItemProps = {\n    artifact: SearchedArtifact;\n    isSelected: boolean;\n    onSelected: (artifact: SearchedArtifact) => void;\n    onUnselected: (artifact: SearchedArtifact) => void;\n    onArtifactLoaded: (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent) => void;\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactListItem: FunctionComponent<ArtifactListItemProps> = (\n    {artifact, isSelected, onSelected, onUnselected, onArtifactLoaded, fetchArtifactVersions, fetchArtifactContent}: ArtifactListItemProps) => {\n\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [versions, setVersions] = useState<SearchedVersion[]>();\n    const [selectedVersion, setSelectedVersion] = useState<SearchedVersion>();\n    const [content, setContent] = useState<string>();\n    const [isContentLoaded, setContentLoaded] = useState<boolean>(false);\n\n    const labels = (): string[] => {\n        return artifact.labels ? artifact.labels : [];\n    };\n    const statuses = (): string[] => {\n        const rval: string[] = [];\n        if (artifact.state === \"DISABLED\") {\n            rval.push(\"Disabled\");\n        }\n        if (artifact.state === \"DEPRECATED\") {\n            rval.push(\"Deprecated\");\n        }\n        return rval;\n    };\n    const description = (): string => {\n        if (artifact.description) {\n            return artifact.description;\n        }\n        return `An artifact of type ${artifact.type} with no description.`;\n    };\n\n    const shouldLoadVersions = (): boolean => {\n        return versions === undefined || versions.length === 0;\n    };\n\n    const loadVersions = (): void => {\n        setContentLoaded(false);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Loading versions for ${artifact.id}`);\n        fetchArtifactVersions(artifact).then(versions => {\n            setVersions(versions);\n            setLoading(false);\n            onVersionSelect(undefined);\n        }).catch(error => {\n            // TODO handle errors\n        });\n    };\n\n    const onToggleSelected = (event: any): void => {\n        // Bit of a hack - if the user clicks the Version drop-down, don't do the\n        // artifact item toggling behavior.\n        if (event && event.target && event.target.localName === \"button\") {\n            return;\n        }\n\n        if (isSelected) {\n            onUnselected(artifact);\n        } else {\n            if (shouldLoadVersions()) {\n                loadVersions();\n            } else {\n                onVersionSelect(undefined);\n            }\n            onSelected(artifact);\n        }\n    };\n\n    const onVersionSelect = (version?: SearchedVersion): void => {\n        setSelectedVersion(version);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Version selected for ${artifact.id}, loading content. Version: `, version);\n        fetchArtifactContent(artifact, version).then(content => {\n            console.debug(\"[ArtifactListItem] Artifact content successfully fetched for: \", artifact.id)\n            setContent(content);\n            setLoading(false);\n            setContentLoaded(true);\n        }).catch(error => {\n            // TODO handle errors loading the artifact content\n        });\n    };\n\n    // Whenever the content changes, fire the \"onArtifactLoaded\" event.  Do this\n    // from inside useEffect() so that it's not happening from an async callback.\n    useEffect(() => {\n        if (content !== undefined) {\n            let contentType: string;\n            if (isJson(content)) {\n                contentType = ContentTypes.APPLICATION_JSON;\n            } else if (isYaml(content)) {\n                contentType = ContentTypes.APPLICATION_YAML;\n            } else if (isXml(content)) {\n                contentType = ContentTypes.APPLICATION_XML;\n            } else if (artifact.type === ArtifactTypes.PROTOBUF) {\n                contentType = ContentTypes.APPLICATION_PROTOBUF;\n            } else if (artifact.type === ArtifactTypes.GRAPHQL) {\n                contentType = ContentTypes.APPLICATION_GRAPHQL;\n            } else {\n                contentType = ContentTypes.APPLICATION_JSON;\n            }\n            const cdc: CreateDesignContent = {\n                contentType,\n                data: content\n            };\n            onArtifactLoaded(artifact, selectedVersion as SearchedVersion, cdc);\n        }\n    }, [content]);\n\n    return (\n        <div className={`artifact-list-item ${isSelected ? \"selected\" : \"\"} ${isContentLoaded ? \"loaded\" : \"\"}`}\n             onClick={onToggleSelected}>\n            <div className=\"artifact-list-item-radio\">\n                <IsLoading condition={isLoading} loadingComponent={(<Spinner size=\"sm\" />)}>\n                    <Radio id={`artifact-radio-${artifact.id}`} name=\"\" isChecked={isSelected} />\n                </IsLoading>\n            </div>\n            <div className=\"artifact-list-item-icon\">\n                <ArtifactTypeIcon type={artifact.type}/>\n            </div>\n            <div className=\"artifact-list-item-info\">\n                <div className=\"artifact-title\">\n                    <ArtifactGroup groupId={artifact.groupId} />\n                    <ArtifactName id={artifact.id} name={artifact.name} />\n                    {\n                        statuses().map( status =>\n                            <Badge className=\"status-badge\" key={status} isRead={true}>{status}</Badge>\n                        )\n                    }\n                </div>\n                <div className=\"artifact-description\">{description()}</div>\n            </div>\n            <div className=\"artifact-list-item-versions\">\n                <If condition={isSelected}>\n                    <ObjectSelect value={selectedVersion} items={versions as SearchedVersion[]}\n                                  noSelectionLabel=\"latest\" menuAppendTo=\"parent\"\n                                  onSelect={onVersionSelect} itemToString={version => version.version} />\n                </If>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {ArtifactSearchResults, Paging} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {ObjectSelect} from \"@app/components/object-select\";\n\n\nexport interface ArtifactListToolbarCriteria {\n    filterSelection: string;\n    filterValue: string;\n    ascending: boolean;\n}\n\nexport type ArtifactListToolbarProps = {\n    registries: Registry[];\n    criteria: ArtifactListToolbarCriteria;\n    paging: Paging;\n    artifacts?: ArtifactSearchResults;\n    onRegistrySelected: (registry: Registry) => void;\n    onCriteriaChange: (criteria: ArtifactListToolbarCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n}\n\n\nexport const ArtifactListToolbar: FunctionComponent<ArtifactListToolbarProps> = ({registries, criteria, onCriteriaChange, paging,\n                                                                            onPagingChange, artifacts, onRegistrySelected}: ArtifactListToolbarProps) => {\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    const onRegistrySelectInternal = (registry: Registry): void => {\n        setRegistry(registry);\n        onRegistrySelected(registry);\n    };\n\n    const onToggleAscending = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            ascending: !criteria.ascending\n        });\n    };\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    }\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    }\n\n    const totalArtifactCount = (): number => {\n        return artifacts?.count || 0;\n    };\n\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, [registries]);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    return (\n        <Toolbar id=\"artifacts-toolbar-1\" className=\"artifacts-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <ObjectSelect value={registry} items={registries}\n                                  onSelect={onRegistrySelectInternal}\n                                  menuAppendTo=\"parent\"\n                                  itemToString={item => item.name} />\n                </ToolbarItem>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter artifacts\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem className=\"sort-icon-item\">\n                    <Button variant=\"plain\" aria-label=\"edit\" data-testid=\"toolbar-btn-sort\" onClick={onToggleAscending}>\n                        {\n                            criteria.ascending ? <SortAlphaDownIcon/> : <SortAlphaDownAltIcon/>\n                        }\n                    </Button>\n                </ToolbarItem>\n                <ToolbarItem className=\"artifact-paging-item\">\n                    <Pagination\n                        style={{padding: \"5px\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalArtifactCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"artifact-list-pagination\"\n                        className=\"artifact-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Alert,\n    Button,\n    Form,\n    FormGroup, Gallery, GalleryItem,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, CreateDesign, Template} from \"@app/models\";\nimport {TemplatesService, useTemplatesService} from \"@app/services\";\nimport {If} from \"@app/components\";\nimport {TemplateItem} from \"@app/pages/components\";\n\nexport type CreateDesignModalProps = {\n    isOpen: boolean|undefined;\n    onCreate: (event: CreateDesign, template: Template) => void;\n    onCancel: () => void;\n}\n\n\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        }\n    };\n});\n\n\nexport const CreateDesignModal: FunctionComponent<CreateDesignModalProps> = ({isOpen, onCreate, onCancel}: CreateDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState(ArtifactTypes.OPENAPI);\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [templates, setTemplates] = useState<Template[]>();\n    const [template, setTemplate] = useState<Template>();\n\n    const templatesSvc: TemplatesService = useTemplatesService();\n\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setType((selection as any).value);\n        setTypeSelection(selection);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Create button in the modal\n    const doCreate = (): void => {\n        const cd: CreateDesign = {\n            type,\n            name,\n            summary,\n            context: {\n                type: \"create\"\n            }\n        };\n        onCreate(cd, template as Template);\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        if (!template) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, template]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setName(\"\");\n        setSummary(\"\");\n        setType(ArtifactTypes.OPENAPI);\n        if (templates) {\n            setTemplate(templates[0]);\n        } else {\n            setTemplate(undefined);\n        }\n    }, [isOpen]);\n\n    // Whenever the type changes, load the templates for that type. If the type is\n    // OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI) {\n            setVersion(\"3.0.2\");\n        }\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [type]);\n\n    // Whenever the version changes, fetch the templates for the current type and version.\n    useEffect(() => {\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [version]);\n\n    // Whenever the templates changes, auto-select the first one\n    useEffect(() => {\n        if (templates && templates.length > 0) {\n            setTemplate(templates[0]);\n        }\n    }, [templates]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Create a new design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doCreate}>\n                    Create\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <Alert isInline variant=\"warning\" title=\"Warning\" style={{ marginBottom: \"15px\"}}>\n                <p>\n                    All new designs are stored locally in your browser.  Clearing your browser cache or\n                    switching to a new browser <em>might</em> result in loss of data.  Make sure you save your\n                    work locally or in a Red Hat OpenShift Service Registry instance!\n                </p>\n            </Alert>\n\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"create-design-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"create-design-name\"\n                        name=\"create-design-name\"\n                        aria-describedby=\"create-design-name-helper\"\n                        value={name}\n                        onChange={(value) => {setName(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Summary\" fieldId=\"create-design-summary\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"create-design-summary\"\n                        name=\"create-design-summary\"\n                        aria-describedby=\"create-design-summary-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Type\" isRequired={true} fieldId=\"create-design-type\">\n                    <Select\n                        variant={SelectVariant.single}\n                        aria-label=\"Select type\"\n                        onToggle={() => {setTypeToggled(!isTypeToggled)}}\n                        onSelect={(event, selection) => onTypeSelect(selection)}\n                        isOpen={isTypeToggled}\n                        selections={typeSelection}\n                        menuAppendTo=\"parent\"\n                    >\n                        {\n                            TYPE_OPTIONS.map(to => <SelectOption key={(to as any).value} value={to} />)\n                        }\n                    </Select>\n                </FormGroup>\n                <If condition={type === ArtifactTypes.OPENAPI}>\n                    <FormGroup label=\"Version\" isRequired={true} fieldId=\"create-design-version\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select version\"\n                            onToggle={() => {setVersionToggled(!isVersionToggled)}}\n                            onSelect={(event, selection) => onVersionSelect(selection as string)}\n                            isOpen={isVersionToggled}\n                            selections={version}\n                            menuAppendTo=\"parent\"\n                        >\n                            <SelectOption value={\"3.0.2\"} />\n                            <SelectOption value={\"2.0\"} />\n                        </Select>\n                    </FormGroup>\n                </If>\n                <If condition={(templates && templates.length > 1) as boolean}>\n                    <FormGroup label=\"Template\" fieldId=\"create-design-template\">\n                        <Gallery hasGutter minWidths={{default: \"125px\"}} maxWidths={{default: \"125px\"}}>\n                        {\n                            templates?.map(t => (\n                                <GalleryItem key={t.id}>\n                                    <TemplateItem template={t} isSelected={t === template} onSelect={() => {\n                                        setTemplate(t)\n                                    }} />\n                                </GalleryItem>\n                            ))\n                        }\n                        </Gallery>\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, Text, TextContent} from \"@patternfly/react-core\";\nimport {Design} from \"@app/models\";\n\nexport type DeleteDesignModalProps = {\n    design: Design|undefined;\n    isOpen: boolean|undefined;\n    onDelete: (design: Design) => void;\n    onCancel: () => void;\n    onDownload: (design: Design) => void;\n}\n\nexport const DeleteDesignModal: FunctionComponent<DeleteDesignModalProps> = ({design, isOpen, onDelete, onDownload, onCancel}: DeleteDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    // Called when the user clicks the Delete button in the modal\n    const doDelete = (): void => {\n        onDelete(design as Design);\n    };\n\n    const doDownload = (): void => {\n        onDownload(design as Design);\n    };\n\n    useEffect(() => {\n        setValid(false);\n    }, [design, isOpen]);\n\n    return (\n        <Modal\n            variant={ModalVariant.small}\n            title=\"Delete design?\"\n            titleIconVariant=\"warning\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"delete\" variant=\"primary\" isDisabled={!isValid} onClick={doDelete}>\n                    Delete\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent style={{marginBottom: \"15px\"}}>\n                <Text component=\"p\">The following API or schema design will be deleted.</Text>\n            </TextContent>\n\n            <Form>\n                <FormGroup label=\"Name\" fieldId=\"delete-design-name\">\n                    <TextContent>{design?.name}</TextContent>\n                </FormGroup>\n                <FormGroup label=\"Summary\" fieldId=\"delete-design-summary\">\n                    <TextContent>{design?.summary}</TextContent>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-warning\">\n                    <Alert isInline variant=\"info\" title=\"To save your data for future use, download the design.\">\n                        <p style={{lineHeight: \"18px\"}}>\n                            To ensure you data is successfully saved, wait for the download to complete\n                            before deleting the design.\n                        </p>\n                        <Button variant=\"link\" onClick={doDownload} style={{paddingLeft:\"0px\"}}>Download design</Button>\n                    </Alert>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-confirm\">\n                    <Checkbox id=\"valid-checkbox\" name=\"\" label=\"I have downloaded the design or do not need to!\"\n                              isChecked={isValid} onChange={(checked) => setValid(checked)} />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-list.css\";\nimport {Design, DesignsSearchResults, DesignsSort} from \"@app/models\";\nimport {ResponsiveTable} from \"@rhoas/app-services-ui-components\";\nimport {ArtifactTypeIcon, NavLink} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {KebabToggle, Label} from \"@patternfly/react-core\";\nimport {IAction} from \"@patternfly/react-table\";\nimport {ThProps} from \"@patternfly/react-table/src/components/TableComposable/Th\";\nimport {CustomActionsToggleProps} from \"@patternfly/react-table/src/components/Table/ActionsColumn\";\nimport {hasOrigin} from \"@app/utils\";\nimport {DesignOriginLabel} from \"@app/pages/components\";\n\n\nexport type DesignListProps = {\n    designs: DesignsSearchResults;\n    sort: DesignsSort;\n    onSort: (sort: DesignsSort) => void;\n    onEdit: (design: Design) => void;\n    onDelete: (design: Design) => void;\n    onRegister: (design: Design) => void;\n    onDownload: (design: Design) => void;\n    onSelect: (design: Design|undefined) => void;\n}\n\nexport const DesignList: FunctionComponent<DesignListProps> = (\n    {designs, sort, onSort, onEdit, onDelete, onRegister, onDownload, onSelect}: DesignListProps) => {\n\n    const [selectedDesign, setSelectedDesign] = useState<Design>();\n    const [sortByIndex, setSortByIndex] = useState<number>();\n\n    const columns: any[] = [\n        { index: 0, id: \"name\", label: \"Name\", width: 40, sortable: true },\n        { index: 1, id: \"type\", label: \"Type\", width: 15, sortable: false },\n        { index: 2, id: \"modified-on\", label: \"Modified on\", width: 15, sortable: true },\n        { index: 3, id: \"context\", label: \"Origin\", width: 25, sortable: false },\n    ];\n\n    const renderColumnData = (column: Design, colIndex: number): React.ReactNode => {\n        // Name.\n        if (colIndex === 0) {\n            return (\n                <div>\n                    <NavLink className=\"design-title\" location={`/designs/${column.id}/editor`}>{column.name}</NavLink>\n                    <div className=\"design-summary\">{column.summary||\"(A design without a description)\"}</div>\n                </div>\n            );\n        }\n        // Type.\n        if (colIndex === 1) {\n            return <ArtifactTypeIcon type={column.type} isShowLabel={true} />\n        }\n        // Modified on.\n        if (colIndex === 2) {\n            return <Moment date={column.modifiedOn} fromNow={true} />\n        }\n        // Origin.\n        if (colIndex === 3) {\n            return <DesignOriginLabel design={column} />;\n        }\n        return <span />\n    };\n\n    const renderActionsToggle = (props: CustomActionsToggleProps): React.ReactNode => {\n        return <KebabToggle isDisabled={props.isDisabled} isOpen={props.isOpen} onToggle={(value, event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            props.onToggle(value);\n        }} />\n    }\n\n    const actionsFor = (design: any): IAction[] => {\n        return [\n            { title: \"Edit\", onClick: () => onEdit(design) },\n            { title: \"Download\", onClick: () => onDownload(design) },\n            { title: \"Register in Service Registry\", onClick: () => onRegister(design) },\n            { isSeparator: true, },\n            { title: \"Delete\", onClick: () => onDelete(design) }\n        ];\n    }\n\n    const sortParams = (column: any): ThProps[\"sort\"] | undefined => {\n        return column.sortable ? {\n            sortBy: {\n                index: sortByIndex,\n                direction: sort.direction\n            },\n            onSort: (_event, index, direction) => {\n                const sort: DesignsSort = {\n                    by: index === 0 ? \"name\" : \"modified-on\",\n                    direction\n                };\n                onSort(sort);\n            },\n            columnIndex: column.index\n        } : undefined;\n    };\n\n    useEffect(() => {\n        setSortByIndex(sort.by === \"name\" ? 0 : 2);\n    }, [sort]);\n\n    useEffect(() => {\n        onSelect(selectedDesign);\n    }, [selectedDesign]);\n\n    useEffect(() => {\n        setSelectedDesign(undefined);\n    }, [designs]);\n\n    return (\n        <div className=\"design-list\">\n            <ResponsiveTable\n                ariaLabel=\"list of designs\"\n                columns={columns}\n                data={designs.designs}\n                expectedLength={designs.count}\n                onRowClick={(row) => setSelectedDesign(row.row.id === selectedDesign?.id ? undefined : row.row)}\n                renderHeader={({ column, Th, key }) => (\n                    <Th sort={sortParams(column)}\n                        className=\"design-list-header\"\n                        key={`header-${column.id}`}\n                        width={column.width}\n                        modifier=\"truncate\">{column.label}</Th>\n                )}\n                renderCell={({ column, row, colIndex, Td, key }) => (\n                    <Td className=\"design-list-cell\" key={`cell-${colIndex}-${row.id}`} children={renderColumnData(row as Design, colIndex)} />\n                )}\n                renderActions={({row, ActionsColumn}) => (\n                    <ActionsColumn key={`actions-${row['id']}`}\n                                   actionsToggle={renderActionsToggle}\n                                   items={actionsFor(row)}/>\n                )}\n                isRowSelected={({ row }) => row.id === selectedDesign?.id}\n            />\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs.panel.css\";\nimport {Alert, Card, CardBody} from \"@patternfly/react-core\";\nimport {DownloadService, DesignsService, useDownloadService, useDesignsService} from \"@app/services\";\nimport {Design, DesignsSearchCriteria, DesignsSearchResults, DesignsSort, Paging} from \"@app/models\";\nimport {If, ListWithToolbar} from \"@app/components\";\nimport {\n    DeleteDesignModal,\n    DesignList,\n    DesignsEmptyState,\n    DesignsEmptyStateFiltered,\n    DesignsToolbar, ExportToRhosrData, ExportToRhosrModal, ImportFrom\n} from \"@app/pages/components\";\nimport {Navigation, useNavigation} from \"@app/contexts/navigation\";\nimport {contentTypeForDesign, fileExtensionForDesign} from \"@app/utils\";\n\n\nfunction convertToValidFilename(value: string): string {\n    return (value.replace(/[\\/|\\\\:*?\"<>]/g, \"\"));\n}\n\nexport type DesignsPanelProps = {\n    onDesignSelected: (design: Design | undefined) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n}\n\n\nexport const DesignsPanel: FunctionComponent<DesignsPanelProps> = ({onDesignSelected, onCreate, onImport}: DesignsPanelProps) => {\n    const [ isLoading, setLoading ] = useState(false);\n    const [ refresh, setRefresh ] = useState(1);\n    const [ isFiltered, setFiltered ] = useState(false);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<DesignsSearchCriteria>({\n        filterValue: \"\",\n        filterOn: \"name\"\n    });\n    const [ sort, setSort ] = useState<DesignsSort>({\n        by: \"name\",\n        direction: \"asc\"\n    });\n    const [ designs, setDesigns ] = useState<DesignsSearchResults>();\n    const [ designToDelete, setDesignToDelete ] = useState<Design>();\n    const [ isDeleteModalOpen, setDeleteModalOpen ] = useState(false);\n    const [ designToRegister, setDesignToRegister ] = useState<Design>();\n    const [ isRegisterModalOpen, setRegisterModalOpen ] = useState(false);\n\n    const designsSvc: DesignsService = useDesignsService();\n    const downloadSvc: DownloadService = useDownloadService();\n    const nav: Navigation = useNavigation();\n\n    const doRefresh = (): void => {\n        setRefresh(refresh + 1);\n    };\n\n    const onEditDesign = (design: Design): void => {\n        nav.navigateTo(`/designs/${design.id}/editor`);\n    };\n\n    const onDeleteDesign = (design: Design): void => {\n        setDesignToDelete(design);\n        setDeleteModalOpen(true);\n    };\n\n    const onDeleteDesignConfirmed = (design: Design): void => {\n        designsSvc.deleteDesign(design.id).then(() => {\n            doRefresh();\n        }).catch(error => {\n            // TODO handle error\n            console.error(error);\n        });\n        setDeleteModalOpen(false);\n    };\n\n    const onRegisterDesign = (design: Design): void => {\n        setDesignToRegister(design);\n        setRegisterModalOpen(true);\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        // TODO anything to do here other than close the modal?\n        setRegisterModalOpen(false);\n    };\n\n    const onDownloadDesign = (design: Design): void => {\n        designsSvc.getDesignContent(design.id).then(content => {\n            const filename: string = `${convertToValidFilename(design.name)}.${fileExtensionForDesign(design, content)}`;\n            const contentType: string = contentTypeForDesign(design, content);\n            const theContent: string = typeof content.data === \"object\" ? JSON.stringify(content.data, null, 4) : content.data as string;\n            downloadSvc.downloadToFS(design, theContent, contentType, filename);\n        });\n    };\n\n    const onCriteriaChange = (criteria: DesignsSearchCriteria): void =>  {\n        setCriteria(criteria);\n        setPaging({\n            page: 1,\n            pageSize: paging.pageSize\n        });\n        setFiltered(criteria.filterValue != undefined && criteria.filterValue.trim().length > 0);\n        doRefresh();\n    };\n\n    const onSortDesigns = (sort: DesignsSort): void => {\n        setSort(sort);\n        doRefresh();\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n        doRefresh();\n    };\n\n    useEffect(() => {\n        setLoading(true);\n        onDesignSelected(undefined);\n        designsSvc.searchDesigns(criteria, paging, sort).then(designs => {\n            console.debug(\"[DesignsPanel] Designs loaded: \", designs);\n            setDesigns(designs);\n            setLoading(false);\n        }).catch(error => {\n            // TODO need error handling\n            console.error(error);\n        });\n    }, [refresh]);\n\n    const emptyState: React.ReactNode = (\n        <DesignsEmptyState onCreate={onCreate} onImport={onImport} />\n    );\n\n    const emptyStateFiltered: React.ReactNode = (\n        <DesignsEmptyStateFiltered />\n    );\n\n    const toolbar: React.ReactNode = (\n        <DesignsToolbar designs={designs} criteria={criteria} paging={paging}\n                        onCreate={onCreate} onImport={onImport}\n                        onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange} />\n    );\n\n    return (\n        <React.Fragment>\n            <Card isSelectable={false}>\n                <CardBody className=\"panel-body\">\n                    <ListWithToolbar toolbar={toolbar}\n                                     emptyState={emptyState}\n                                     filteredEmptyState={emptyStateFiltered}\n                                     isLoading={isLoading}\n                                     isFiltered={isFiltered}\n                                     isEmpty={!designs || designs.count === 0}>\n                        <Alert className=\"panel-alert\" isInline variant=\"info\" title=\"About your data\" style={{ marginBottom: \"15px\"}}>\n                            <p>\n                                All designs are stored locally in your browser.  Clearing your browser cache or\n                                switching to a new browser <em>might</em> result in loss of data.  Make sure you save your\n                                work locally or in a Red Hat OpenShift Service Registry instance!  In the future your\n                                designs will be saved to a persistent server, stay tuned!\n                            </p>\n                        </Alert>\n                        <DesignList designs={designs as DesignsSearchResults}\n                                    sort={sort}\n                                    onSelect={onDesignSelected}\n                                    onSort={onSortDesigns}\n                                    onEdit={onEditDesign}\n                                    onDownload={onDownloadDesign}\n                                    onRegister={onRegisterDesign}\n                                    onDelete={onDeleteDesign} />\n                    </ListWithToolbar>\n                </CardBody>\n            </Card>\n            <DeleteDesignModal design={designToDelete}\n                              isOpen={isDeleteModalOpen}\n                              onDelete={onDeleteDesignConfirmed}\n                              onDownload={onDownloadDesign}\n                              onCancel={() => setDeleteModalOpen(false)} />\n            <ExportToRhosrModal design={designToRegister as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Dropdown, DropdownItem, DropdownSeparator, KebabToggle, MenuToggle} from \"@patternfly/react-core\";\n\nexport enum ImportFrom {\n    FILE,\n    URL,\n    RHOSR\n};\n\n/**\n * Properties\n */\nexport type ImportDropdownProps = {\n    variant: \"long\"|\"short\";\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * A control to display the Import dropdown on the main page (used to select how to import content\n * into the API Designer).\n */\nexport const ImportDropdown: FunctionComponent<ImportDropdownProps> = ({variant, onImport}: ImportDropdownProps) => {\n    const [isToggled, setToggled] = useState(false);\n\n    const onToggle = (): void => {\n        setToggled(!isToggled);\n    };\n\n    const menuToggle: React.ReactNode = (\n        <MenuToggle variant=\"secondary\" onClick={onToggle} isExpanded={isToggled}>{variant === \"short\" ? \"Import\" : \"Import a schema or API design\"}</MenuToggle>\n    );\n\n    const onMenuSelect: (event?: React.SyntheticEvent<HTMLDivElement>) => void = (event) => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setToggled(false);\n        switch (action) {\n            case \"action-file\":\n                onImport(ImportFrom.FILE);\n                return;\n            case \"action-url\":\n                onImport(ImportFrom.URL);\n                return;\n            case \"action-rhosr\":\n                onImport(ImportFrom.RHOSR);\n                return;\n        }\n    };\n\n    return (\n        <Dropdown\n            onSelect={onMenuSelect}\n            toggle={menuToggle}\n            isOpen={isToggled}\n            isPlain\n            dropdownItems={\n                [\n                    <DropdownItem key=\"action-file\" data-id=\"action-file\">Import from file</DropdownItem>,\n                    <DropdownItem key=\"action-url\" data-id=\"action-url\">Import from URL</DropdownItem>,\n                    <DropdownItem key=\"action-rhosr\" data-id=\"action-rhosr\">Import from Service Registry</DropdownItem>,\n                ]\n            }\n            position=\"right\"\n        />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    Title\n} from \"@patternfly/react-core\";\nimport {AddCircleOIcon} from \"@patternfly/react-icons\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateProps = {\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyState: FunctionComponent<DesignsEmptyStateProps> = ({onCreate, onImport}: DesignsEmptyStateProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No designs\n            </Title>\n            <EmptyStateBody>\n                Create and edit API and schema designs with the API Designer.  To get started,\n                create a new design or import one.\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={onCreate}>Create a schema or API design</Button>\n            <EmptyStateSecondaryActions>\n                <ImportDropdown  variant=\"long\" onImport={onImport} />\n            </EmptyStateSecondaryActions>\n        </EmptyState>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {EmptyState, EmptyStateBody, EmptyStateIcon, Title} from \"@patternfly/react-core\";\nimport {AddCircleOIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateFilteredProps = {\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyStateFiltered: FunctionComponent<DesignsEmptyStateFilteredProps> = ({}: DesignsEmptyStateFilteredProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No matching designs\n            </Title>\n            <EmptyStateBody>\n                No designs matched your filter criteria.  Trying changing your criteria and\n                searching again.\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {DesignsSearchCriteria, DesignsSearchResults, Paging} from \"@app/models\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n\n/**\n * Properties\n */\nexport type DesignsToolbarProps = {\n    criteria: DesignsSearchCriteria;\n    paging: Paging;\n    designs?: DesignsSearchResults;\n    onCriteriaChange: (criteria: DesignsSearchCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n\n/**\n * The toolbar to filter (and paginate) the collection of designs.\n */\nexport const DesignsToolbar: FunctionComponent<DesignsToolbarProps> = (\n    {criteria, paging, designs, onCriteriaChange, onPagingChange, onCreate, onImport}: DesignsToolbarProps) => {\n\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    };\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    };\n\n    const totalDesignCount = (): number => {\n        return designs?.count || 0;\n    };\n\n    return (\n        <Toolbar id=\"designs-toolbar\" className=\"designs-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter designs\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem>\n                    <Button variant=\"primary\" onClick={onCreate}>Create a schema or API design</Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                    <ImportDropdown variant=\"long\" onImport={onImport} />\n                </ToolbarItem>\n                <ToolbarItem className=\"design-paging-item\">\n                    <Pagination\n                        style={{padding: \"0\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalDesignCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"design-list-pagination\"\n                        className=\"design-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Alert,\n    Button, FileUpload, Form,\n    FormGroup,\n    Modal,\n    ModalVariant,\n    Select, SelectOption, SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, ContentTypes, CreateDesign, CreateDesignContent} from \"@app/models\";\nimport {If} from \"@app/components\";\nimport {ImportFrom, UrlUpload} from \"@app/pages/components\";\nimport {isJson, isProto, isWsdl, isXml, isXsd, isYaml, parseJson, parseYaml} from \"@app/utils\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\n\n\nexport type ImportDesignModalProps = {\n    importType: ImportFrom;\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nconst PLACEHOLDER_TYPE_OPTION: SelectOptionObject = {\n    // @ts-ignore\n    value: undefined,\n    label: \"Select a type...\",\n    toString: () => {\n        return \"Select a type...\";\n    },\n    compareTo(selectOption: any): boolean {\n        return selectOption === this;\n    }\n}\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        },\n        compareTo(selectOption: any): boolean {\n            return this.value === selectOption.value;\n        }\n    };\n});\n\n\ntype DetectionInfo = {\n    type?: string;\n    contentType?: string;\n    version?: string;\n    name?: string;\n    summary?: string;\n}\n\n\nexport const ImportDesignModal: FunctionComponent<ImportDesignModalProps> = ({importType, isOpen, onImport, onCancel}: ImportDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    const [designContent, setDesignContent] = useState<string>();\n    const [fileName, setFileName] = useState<string>();\n    const [url, setUrl] = useState<string>();\n\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState<string>();\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [contentType, setContentType] = useState<string>();\n\n    const onFileChange = (value: string | File, fname: string): void => {\n        setDesignContent(value as string);\n        setFileName(fname);\n    };\n\n    const onUrlChange = (value: string|undefined, url: string|undefined): void => {\n        setDesignContent(value);\n        setUrl(url);\n    };\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setTheType((selection as any).value);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        const context: DesignContext = importType === ImportFrom.FILE ? {\n            type: \"file\",\n            file: {\n                fileName: fileName as string\n            }\n        } : {\n            type: \"url\",\n            url: {\n                url: url as string\n            }\n        };\n        const cd: CreateDesign = {\n            type: type as string,\n            name,\n            summary,\n            context\n        };\n        const cdc: CreateDesignContent = {\n            contentType: contentType as string,\n            data: designContent\n        };\n\n        console.debug(\"[ImportDesignModal] Importing design: \", cd);\n        console.debug(\"[ImportDesignModal] Importing content-type: \", contentType);\n        onImport(cd, cdc);\n    };\n\n    const hasDesignContent = (): boolean => {\n        return designContent !== undefined && designContent.trim().length > 0;\n    };\n\n    const title = (): string => {\n        if (importType === ImportFrom.FILE) {\n            return \"Import from file\";\n        } else {\n            return \"Import from URL\";\n        }\n    };\n\n    const detectJsonOrYamlInfo = (contentObj: any, contentType: string): DetectionInfo => {\n        if (contentObj.openapi) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"3.0.2\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.swagger) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"2.0\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.asyncapi) {\n            return {\n                type: ArtifactTypes.ASYNCAPI,\n                contentType: contentType,\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.$schema) {\n            return {\n                type: ArtifactTypes.JSON,\n                contentType: contentType,\n                name: contentObj.title,\n                summary: contentObj.description\n            };\n        }\n\n        return {\n            type: ArtifactTypes.AVRO,\n            contentType: contentType,\n            name: contentObj.name\n        }\n    }\n\n    const detectXmlInfo = (content: string): DetectionInfo => {\n        let type: string = ArtifactTypes.XML;\n        if (isWsdl(content)) {\n            type = ArtifactTypes.WSDL;\n        } else if (isXsd(content)) {\n            type = ArtifactTypes.XSD;\n        }\n        return {\n            type,\n            contentType: ContentTypes.TEXT_XML\n        };\n    }\n\n    const detectProtoInfo = (): DetectionInfo => {\n        return {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            type: ArtifactTypes.PROTOBUF\n        };\n    }\n\n    // Tries to figure out the type and meta-data of the content by parsing it and looking\n    // for key indicators.\n    const detectInfo = (content: string): DetectionInfo => {\n        if (isJson(content)) {\n            return detectJsonOrYamlInfo(parseJson(content), ContentTypes.APPLICATION_JSON);\n        } else if (isYaml(content)) {\n            return detectJsonOrYamlInfo(parseYaml(content), ContentTypes.APPLICATION_YAML);\n        } else if (isXml(content)) {\n            return detectXmlInfo(content);\n        } else if (isProto(content)) {\n            return detectProtoInfo();\n        }\n        console.warn(\"[ImportDesignModal] Failed to detect the type of the content.\");\n        // Default: nothing detected\n        return {\n        };\n\n        // TODO handle parsing of protobuf\n        // TODO handle parsing of GraphQL\n    };\n\n    const setTheType = (newType: string|undefined): void => {\n        if (newType === undefined) {\n            setType(undefined);\n            setTypeSelection(undefined);\n        } else {\n            setType(newType);\n            // @ts-ignore (there really is a value on the option)\n            const newTypeSelection: SelectOptionObject = TYPE_OPTIONS.filter(option => option.value === newType)[0];\n            setTypeSelection(newTypeSelection);\n        }\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!designContent) {\n            valid = false;\n        }\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, designContent]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setDesignContent(undefined);\n        setName(\"\");\n        setSummary(\"\");\n        setFileName(undefined);\n        setTheType(undefined);\n    }, [isOpen]);\n\n    // Whenever the content changes (e.g. loaded from file) try to detect the\n    // type of the content.\n    useEffect(() => {\n        if (designContent && designContent.trim().length > 0) {\n            const info: DetectionInfo = detectInfo(designContent as string);\n            console.debug(\"[ImportDesignModal] Content detection: \", info);\n            console.debug(\"[ImportDesignModal] Version detected: \", info.version || \"\");\n\n            setTheType(info.type);\n            setVersion(info.version || \"\");\n            setName(info.name || \"\");\n            setSummary(info.summary || \"\");\n            setContentType(info.contentType);\n        } else {\n            console.debug(\"[ImportDesignModal] Content empty, resetting form fields.\");\n            setName(\"\");\n            setSummary(\"\");\n            setTheType(undefined);\n            setContentType(undefined);\n        }\n    }, [designContent]);\n\n    // Whenever the type changes to OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI && version === undefined) {\n            setVersion(\"3.0.2\");\n        }\n    }, [type]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title={title()}\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n                    Import\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <Alert isInline variant=\"warning\" title=\"Warning\" style={{marginBottom: \"15px\"}}>\n                <p>\n                    All new designs are stored locally in your browser. Clearing your browser cache or\n                    switching to a new browser <em>might</em> result in loss of data. Make sure you save your\n                    work locally or in a Red Hat OpenShift Service Registry instance!\n                </p>\n            </Alert>\n\n            <Form>\n                <If condition={importType === ImportFrom.FILE}>\n                    <FormGroup label=\"File\" isRequired={true} fieldId=\"import-design-file\">\n                        <FileUpload\n                            isRequired={true}\n                            id=\"design-text-file\"\n                            type=\"text\"\n                            value={designContent}\n                            filename={fileName}\n                            filenamePlaceholder=\"Drag and drop a file or upload one\"\n                            onChange={onFileChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={importType === ImportFrom.URL}>\n                    <FormGroup label=\"URL\" isRequired={true} fieldId=\"import-design-url\">\n                        <UrlUpload\n                            id=\"design-text-url\"\n                            urlPlaceholder=\"Enter a valid and accessible URL\"\n                            onChange={onUrlChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={hasDesignContent}>\n                    <FormGroup label=\"Type\" isRequired={true} fieldId=\"import-design-type\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select type\"\n                            onToggle={() => setTypeToggled(!isTypeToggled)}\n                            onSelect={(event, selection) => onTypeSelect(selection)}\n                            isOpen={isTypeToggled}\n                            selections={typeSelection}\n                            menuAppendTo=\"parent\"\n                        >\n                            {\n                                [\n                                    <SelectOption key={-1} value={PLACEHOLDER_TYPE_OPTION} isPlaceholder={true}/>,\n                                    ...TYPE_OPTIONS.map((to, index) => <SelectOption key={index} value={to}/>)\n                                ]\n                            }\n                        </Select>\n                    </FormGroup>\n                    <If condition={type === ArtifactTypes.OPENAPI}>\n                        <FormGroup label=\"Version\" isRequired={true} fieldId=\"import-design-version\">\n                            <Select\n                                variant={SelectVariant.single}\n                                aria-label=\"Select version\"\n                                onToggle={() => setVersionToggled(!isVersionToggled)}\n                                onSelect={(event, selection) => onVersionSelect(selection as string)}\n                                isOpen={isVersionToggled}\n                                selections={version}\n                                menuAppendTo=\"parent\"\n                            >\n                                <SelectOption key={1} value=\"3.0.2\"/>\n                                <SelectOption key={2} value=\"2.0\"/>\n                            </Select>\n                        </FormGroup>\n                    </If>\n                    <FormGroup label=\"Name\" isRequired={true} fieldId=\"import-design-name\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"import-design-name\"\n                            name=\"import-design-name\"\n                            aria-describedby=\"import-design-name-helper\"\n                            value={name}\n                            onChange={(value) => setName(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Summary\" fieldId=\"import-design-summary\">\n                        <TextArea\n                            type=\"text\"\n                            id=\"import-design-summary\"\n                            name=\"import-design-summary\"\n                            aria-describedby=\"import-design-summary-helper\"\n                            value={summary}\n                            onChange={(value) => setSummary(value)}\n                        />\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Button, Modal, ModalVariant} from \"@patternfly/react-core\";\nimport {CreateDesign, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {RhosrService, useRhosrService} from \"@app/services\";\nimport {IsLoading} from \"@app/components\";\nimport {ArtifactSelector} from \"@app/pages/components\";\n\n\nexport type ImportFromRhosrModalProps = {\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nexport const ImportFromRhosrModal: FunctionComponent<ImportFromRhosrModalProps> = ({isOpen, onImport, onCancel}: ImportFromRhosrModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [isLoading, setLoading] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [design, setDesign] = useState<CreateDesign>();\n    const [designContent, setDesignContent] = useState<CreateDesignContent>();\n\n    const rhosr: RhosrService = useRhosrService();\n\n    // Called when the user selects an artifact from the artifact selector.\n    const onArtifactSelected = (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        if (artifact === undefined) {\n            setDesign(undefined);\n            setDesignContent(undefined);\n        } else {\n            const cd: CreateDesign = {\n                type: artifact.type,\n                name: artifact.name || artifact.id,\n                summary: artifact.description || \"\",\n                context: {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: artifact.groupId as string,\n                        artifactId: artifact.id,\n                        version: version?.version as string\n                    }\n                }\n            };\n            setDesign(cd);\n            setDesignContent(content);\n        }\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        onImport(design as CreateDesign, designContent as CreateDesignContent);\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                setLoading(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[HomePage] Error getting registry list: \", error);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        let valid: boolean = true;\n        if (design === undefined) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [design, designContent]);\n\n    return (\n        <Modal\n            variant={ModalVariant.large}\n            title=\"Import from Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n                    Import\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <IsLoading condition={isLoading}>\n                <ArtifactSelector registries={registries} onSelected={onArtifactSelected} />\n            </IsLoading>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Template} from \"@app/models\";\nimport \"./template-item.css\";\nimport {PlusCircleIcon} from \"@patternfly/react-icons\";\n\nexport type TemplateItemProps = {\n    template: Template;\n    isSelected: boolean;\n    onSelect: (template: Template) => void;\n}\n\nexport const TemplateItem: FunctionComponent<TemplateItemProps> = ({template, isSelected, onSelect}: TemplateItemProps) => {\n    const onClick = (): void => {\n        if (!isSelected) {\n            onSelect(template);\n        }\n    };\n\n    return (\n        <div className={`template-item ${isSelected ? \"selected\" : \"not-selected\"}`} onClick={onClick}>\n            <div className=\"icon\">\n                <PlusCircleIcon />\n            </div>\n            <div className=\"name\">{template.name}</div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./url-upload.css\";\nimport {Button, Spinner, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {If, IsLoading} from \"@app/components\";\nimport {UrlService, useUrlService} from \"@app/services\";\n\n/**\n * Properties\n */\nexport type UrlUploadProps = {\n    id: string|\"url-upload\";\n    urlPlaceholder: string|\"\";\n    onChange: (value: string|undefined, url: string|undefined) => void;\n};\n\n/**\n * A control similar to the FileUpload control from patternfly that allows uploading from\n * a URL instead of a file.\n */\nexport const UrlUpload: FunctionComponent<UrlUploadProps> = ({id, urlPlaceholder, onChange}: UrlUploadProps) => {\n    const [url, setUrl] = useState<string>();\n    const [previewContent, setPreviewContent] = useState<string>();\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [downloadError, setDownloadError] = useState<string>();\n\n    const urlService: UrlService = useUrlService();\n\n    const onTextInputChange = (value: string): void => {\n        setUrl(value);\n    };\n\n    const hasUrl = (): boolean => {\n        return url != undefined && url.trim().length > 0;\n    };\n\n    const hasError = (): boolean => {\n        return downloadError != undefined && downloadError.trim().length > 0;\n    };\n\n    const onDownload = (): void => {\n        setLoading(true);\n        urlService.fetchUrlContent(url as string).then(content => {\n            setDownloadError(undefined);\n            setPreviewContent(content);\n            setLoading(false);\n            onChange(content, url);\n        }).catch(error => {\n            setDownloadError(error.message);\n            setLoading(false);\n        });\n    };\n\n    const onClear = (): void => {\n        setUrl(\"\");\n        setPreviewContent(\"\");\n        onChange(undefined, undefined);\n    };\n\n    const spinner: React.ReactNode = (\n        <div className=\"url-upload-loading\">\n            <Spinner size=\"md\" className=\"spinner\" />\n            <span className=\"spinner-message\">Loading URL content</span>\n        </div>\n    );\n\n    return (\n        <div className=\"url-upload\">\n            <div className=\"url-upload-flex\">\n                <div className=\"url-upload-url\">\n                    <TextInput value={url} type=\"text\" placeholder={urlPlaceholder}\n                               onChange={onTextInputChange} aria-label=\"url input\" />\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onDownload}>Download</Button>\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onClear}>Clear</Button>\n                </div>\n            </div>\n            <div className=\"url-upload-preview\">\n                <IsLoading condition={isLoading} loadingComponent={spinner}>\n                    <If condition={hasError}>\n                        <div className=\"url-upload-error\">\n                            <div>\n                                Error getting content from URL.\n                            </div>\n                            <div>\n                                {downloadError}\n                            </div>\n                        </div>\n                    </If>\n                    <If condition={!hasError()}>\n                        <TextArea value={previewContent} isReadOnly={true}></TextArea>\n                    </If>\n                </IsLoading>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./design-details-panel.css\";\nimport {Design} from \"@app/models\";\nimport {Flex, FlexItem, Form, FormGroup, Tab, Tabs, TabTitleText} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {DesignEvents, DesignHistory, DesignOriginLabel} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignDetailsPanelProps = {\n    design: Design | undefined;\n};\n\n/**\n * Details panel with metadata and history about a single selected design.\n */\nexport const DesignDetailsPanel: FunctionComponent<DesignDetailsPanelProps> = ({design}: DesignDetailsPanelProps) => {\n\n    const [activeTabKey, setActiveTabKey] = useState<string>(\"details\");\n\n    return (\n        <React.Fragment>\n            <Tabs\n                activeKey={activeTabKey}\n                onSelect={(event, eventKey) => {setActiveTabKey(eventKey as string)}}\n                aria-label=\"Design panel detail tabs\"\n            >\n                <Tab eventKey=\"details\" title={<TabTitleText>Details</TabTitleText>}>\n                    <div className=\"design-details-grid\">\n                        <div className=\"design-details-label\">Description</div>\n                        <div className=\"design-details-value\">{design?.summary}</div>\n\n                        <div className=\"design-details-label\">Type</div>\n                        <div className=\"design-details-value\">\n                            <ArtifactTypeIcon type={design?.type as string} isShowLabel={true} isShowIcon={false} />\n                        </div>\n\n                        <div className=\"design-details-label\">Time created</div>\n                        <div className=\"design-details-value\"><Moment date={design?.createdOn} fromNow={true} /></div>\n\n                        <div className=\"design-details-label\">Time updated</div>\n                        <div className=\"design-details-value\"><Moment date={design?.modifiedOn} fromNow={true} /></div>\n\n                        <div className=\"design-details-label\">Origin</div>\n                        <div className=\"design-details-value\">\n                            <DesignOriginLabel design={design} />\n                        </div>\n                    </div>\n                </Tab>\n                <Tab eventKey=\"events\" title={<TabTitleText>Events</TabTitleText>}>\n                    <DesignEvents design={design as Design} />\n                </Tab>\n                <Tab eventKey=\"history\" title={<TabTitleText>History</TabTitleText>}>\n                    <DesignHistory design={design as Design} />\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-history.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport Moment from \"react-moment\";\nimport {IfNotEmpty, IsLoading} from \"@app/components\";\nimport {DesignEventType} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignHistoryProps = {\n    design: Design;\n};\n\nexport const DesignHistory: FunctionComponent<DesignHistoryProps> = ({design}: DesignHistoryProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [events, setEvents] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setEvents(events);\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <IsLoading condition={isLoading}>\n            <IfNotEmpty collection={events}>\n                <div className=\"design-history\">\n                    {\n                        events?.map((event, idx) => (\n                            <React.Fragment key={idx}>\n                                <div key={`${idx}-type`} className=\"event-type\"><DesignEventType event={event} /></div>\n                                <div key={`${idx}-time`} className=\"event-time\"><Moment date={event.on} format=\"MMMM DD, YYYY h:mma\" /></div>\n                            </React.Fragment>\n                        ))\n                    }\n                </div>\n            </IfNotEmpty>\n        </IsLoading>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-events.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport Moment from \"react-moment\";\nimport {ArtifactTypeIcon, If, IfNotEmpty, IsLoading} from \"@app/components\";\nimport {DesignEventType, DesignOriginLabel} from \"@app/pages/components\";\nimport {hasOrigin} from \"@app/utils\";\nimport {Divider} from \"@patternfly/react-core\";\n\n\nexport type DesignEventsProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignEvents: FunctionComponent<DesignEventsProps> = ({design}: DesignEventsProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [exports, setExports] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    const originGroupId = (): string => {\n        return design?.origin.rhosr?.groupId || \"default\";\n    };\n    const originArtifactId = (): string => {\n        return design?.origin.rhosr?.artifactId || \"Unknown\";\n    };\n    const originVersion = (): string => {\n        return design?.origin.rhosr?.version || \"latest\";\n    };\n    const originFilename = (): string => {\n        return design?.origin.file?.fileName || \"\";\n    };\n    const originUrl = (): string => {\n        return design?.origin.url?.url || \"\";\n    };\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setExports(events?.filter(event => event.type === \"download\" || event.type === \"register\"));\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <React.Fragment>\n            <div className=\"design-events-origin\">\n                <div className=\"design-events-origin-label\">Origin</div>\n                <div className=\"design-events-origin-value\">\n                    <DesignOriginLabel design={design} />\n                </div>\n\n                <div className=\"design-events-origin-label\">Time created</div>\n                <div className=\"design-events-origin-value\"><Moment date={design?.createdOn} fromNow={true} /></div>\n\n                <If condition={hasOrigin(design, \"rhosr\")}>\n                    <div className=\"design-events-origin-label\">Group ID</div>\n                    <div className=\"design-events-origin-value\">{originGroupId()}</div>\n\n                    <div className=\"design-events-origin-label\">Artifact ID</div>\n                    <div className=\"design-events-origin-value\">{originArtifactId()}</div>\n\n                    <div className=\"design-events-origin-label\">Version</div>\n                    <div className=\"design-events-origin-value\">{originVersion()}</div>\n                </If>\n\n                <If condition={hasOrigin(design, \"file\")}>\n                    <div className=\"design-events-origin-label\">Filename</div>\n                    <div className=\"design-events-origin-value\">{originFilename()}</div>\n                </If>\n\n                <If condition={hasOrigin(design, \"url\")}>\n                    <div className=\"design-events-origin-label\">URL</div>\n                    <div className=\"design-events-origin-value\">{originUrl()}</div>\n                </If>\n            </div>\n            <Divider className=\"design-events-divider\" />\n            <IsLoading condition={isLoading}>\n                <div className=\"design-events-origin-exports\">\n                    <div className=\"design-events-origin-exports-label\">Exported to</div>\n                    <div></div>\n\n                    <IfNotEmpty collection={exports}>\n                        {\n                            exports?.map((event, idx) => (\n                                <React.Fragment key={idx}>\n                                    <div key={`${idx}-type`} className=\"design-events-origin-exports-item\"><DesignEventType event={event} variant=\"short\" /></div>\n                                    <div key={`${idx}-time`} className=\"design-events-origin-exports-time\"><Moment date={event.on} format=\"MMMM DD, YYYY h:mma\" /></div>\n                                </React.Fragment>\n                            ))\n                        }\n                    </IfNotEmpty>\n                </div>\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {DesignEvent} from \"@app/models\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\n\n\nexport type DesignEventTypeProps = {\n    event: DesignEvent;\n    variant?: \"long\" | \"short\";  // Default is \"long\"\n};\n\n\nexport const DesignEventType: FunctionComponent<DesignEventTypeProps> = ({event, variant}: DesignEventTypeProps) => {\n\n    const typeLabel = (): string => {\n        switch (event.type) {\n            case \"download\":\n                return variant === \"short\" ? \"Local file\" : \"Downloaded to local file system\";\n            case \"create\":\n                return variant === \"short\" ? \"New\" : \"Created new design\";\n            case \"import\":\n                return importTypeLabel();\n            case \"register\":\n                return variant === \"short\" ? \"Service Registry\" : \"Registered in Service Registry\";\n            case \"update\":\n                return variant === \"short\" ? \"Edited\" : \"Modified using the editor\";\n        }\n    };\n\n    const importTypeLabel = (): string => {\n        const context: DesignContext = event.data.context;\n        switch (context.type) {\n            case \"file\":\n                return variant === \"short\" ? \"Local file\" : `Imported from local file ${context.file?.fileName}`;\n            case \"rhosr\":\n                return variant === \"short\" ? \"Service Registry\" : `Imported from Service Registry artifact (${context.rhosr?.groupId||'default'}/${context.rhosr?.artifactId}/${context.rhosr?.version||'latest'})`;\n            case \"url\":\n                return variant === \"short\" ? \"URL\" : `Imported from URL ${context.url?.url}`\n        }\n        return \"Imported content\";\n    };\n\n    return (\n        <span>{typeLabel()}</span>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Design} from \"@app/models\";\nimport {Label} from \"@patternfly/react-core\";\nimport {hasOrigin} from \"@app/utils\";\n\n\nexport type DesignOriginLabelProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignOriginLabel: FunctionComponent<DesignOriginLabelProps> = ({design}: DesignOriginLabelProps) => {\n\n    const label = (): string => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"Local file\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"Service registry\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"URL\";\n            } else if (hasOrigin(design, \"create\")) {\n                return \"New design\";\n            }\n        }\n        return \"n/a\";\n    };\n\n    return (\n        <Label color=\"blue\">{label()}</Label>\n    );\n};\n","import { useRhosrService } from \"@app/services\";\nimport { Button, Dropdown, DropdownItem, DropdownToggle, Form, FormGroup, Modal, ModalVariant, Popover, TextInput } from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport React, { useEffect, useState } from \"react\";\n\nexport interface DryRunArgs {\n\tregistry: Registry\n\tgroup?: string\n\tartifactId: string\n}\n\nexport interface RegistryDryRunFormModalProps {\n\tisOpen?: boolean;\n\tonCancel: () => void;\n\tonSubmit: (registry: Registry, groupId: string | undefined, artifactId: string) => void;\n}\n\ntype ValidatedValue = \"error\" | \"default\" | \"warning\" | \"success\" | undefined;\n\nconst initialFormState = {\n\thasErrors: false,\n\tgroupValue: {\n\t\tvalue: '',\n\t\tvalidated: 'default' as ValidatedValue,\n\t\terrorMessage: \"\"\n\t},\n\tartifactIdValue: {\n\t\tvalue: '',\n\t\tvalidated: 'default' as ValidatedValue,\n\t\terrorMessage: \"\"\n\t}\n}\n\nexport const RegistryDryRunFormModal: React.FunctionComponent<RegistryDryRunFormModalProps> = (props) => {\n\tconst [registryList, setRegistryList] = useState<Registry[]>([]);\n\tconst [registryValue, setRegistryValue] = useState<Registry>();\n\tconst [formState, setFormState] = useState(initialFormState);\n\n\tconst [isRegistryInstanceDropdownOpen, setIsRegistryInstanceDropdownOpen] = useState(false);\n\n\tconst rhosrService = useRhosrService();\n\n\tuseEffect(() => {\n\t\trhosrService.getRegistries().then((results) => {\n\t\t\tsetRegistryList(results);\n\t\t\tsetRegistryValue(results[0]);\n\t\t}).catch((error) => {\n\t\t\tconsole.error(\"[RegistryDryRunForm] Error fetching available registries: \", error);\n\t\t});\n\t}, []);\n\n\tconst onToggleRegistryInstanceDropdown = (isOpen: boolean) => {\n\t\tsetIsRegistryInstanceDropdownOpen(isOpen);\n\t};\n\n\tconst onSelectRegistryInstance: (event?: React.SyntheticEvent<HTMLDivElement>) => void = (event) => {\n\t\t// @ts-ignore\n\t\tconst registryId: string = event?.target.attributes[\"data-id\"].value;\n\t\trhosrService.getRegistry(registryId).then(setRegistryValue).catch(error => {\n\t\t\tconsole.log(`[RegistryDryRunForm] Error fetching registry with ID ${registryId} registries:`, error);\n\t\t});\n\t\tsetIsRegistryInstanceDropdownOpen(false);\n\t}\n\n\tconst registryDropdownItems = (registries: Registry[]) => registries.map((registry => <DropdownItem key={'registry-' + registry.id} data-id={registry.id}>{registry.name}</DropdownItem>));\n\n\tconst setGroupValue = (val: string) => {\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\tgroupValue: {\n\t\t\t\t...formState.groupValue,\n\t\t\t\tvalidated: 'default',\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t})\n\t}\n\n\tconst setArtifactIdValue = (val: string) => {\n\t\tconst hasErrors = !val;\n\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\thasErrors,\n\t\t\tartifactIdValue: {\n\t\t\t\t...formState.artifactIdValue,\n\t\t\t\tvalidated: hasErrors ? 'error' : 'default',\n\t\t\t\terrorMessage: 'Artifact ID is a required field.',\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t});\n\t}\n\n\treturn (\n\t\t<Modal\n\t\t\tvariant={ModalVariant.medium}\n\t\t\ttitle=\"Registration dry-run\"\n\t\t\tisOpen={props.isOpen}\n\t\t\tonClose={props.onCancel}\n\t\t\tactions={[\n\t\t\t\t<Button key=\"confirm\" variant=\"primary\" onClick={() => props.onSubmit(\n\t\t\t\t\tregistryValue as Registry,\n\t\t\t\t\tformState.groupValue.value,\n\t\t\t\t\tformState.artifactIdValue.value\n\t\t\t\t)}>\n\t\t\t\t\tRun dry-run\n\t\t\t\t</Button>,\n\t\t\t\t<Button key=\"cancel\" variant=\"link\" onClick={props.onCancel}>\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t]}\n\t\t>\n\t\t\t<Form>\n\t\t\t\t<FormGroup\n\t\t\t\t\tlabel=\"Registry instance\"\n\t\t\t\t\tlabelIcon={\n\t\t\t\t\t\t<Popover\n\t\t\t\t\t\t\theaderContent=\"TODO title\"\n\t\t\t\t\t\t\tbodyContent=\"TODO body\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\taria-label=\"More info for Registry instance field\"\n\t\t\t\t\t\t\t\tonClick={e => e.preventDefault()}\n\t\t\t\t\t\t\t\taria-describedby=\"modal-with-form-form-registry-instance\"\n\t\t\t\t\t\t\t\tclassName=\"pf-c-form__group-label-help\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<HelpIcon noVerticalAlign />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</Popover>\n\t\t\t\t\t}\n\t\t\t\t\tfieldId=\"modal-with-form-form-registry-instance\"\n\t\t\t\t>\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tonSelect={onSelectRegistryInstance}\n\t\t\t\t\t\tmenuAppendTo=\"parent\"\n\t\t\t\t\t\ttoggle={\n\t\t\t\t\t\t\t<DropdownToggle id=\"toggle-basic\" onToggle={onToggleRegistryInstanceDropdown}>\n\t\t\t\t\t\t\t\t{registryValue ? registryValue.name : 'Select a Registry instance'}\n\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tisOpen={isRegistryInstanceDropdownOpen}\n\t\t\t\t\t\tdropdownItems={registryDropdownItems(registryList)}\n\t\t\t\t\t/>\n\t\t\t\t</FormGroup>\n\t\t\t\t<FormGroup\n\t\t\t\t\tlabel=\"Group\"\n\t\t\t\t\tvalidated={formState.groupValue.validated}\n\t\t\t\t\thelperTextInvalid={formState.groupValue.errorMessage}\n\t\t\t\t\tlabelIcon={\n\t\t\t\t\t\t<Popover\n\t\t\t\t\t\t\theaderContent=\"TODO title\"\n\t\t\t\t\t\t\tbodyContent=\"TODO body\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\taria-label=\"More info for Group field\"\n\t\t\t\t\t\t\t\tonClick={e => e.preventDefault()}\n\t\t\t\t\t\t\t\taria-describedby=\"modal-with-form-form-group\"\n\t\t\t\t\t\t\t\tclassName=\"pf-c-form__group-label-help\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<HelpIcon noVerticalAlign />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</Popover>\n\t\t\t\t\t}\n\t\t\t\t\tfieldId=\"modal-with-form-form-group\"\n\t\t\t\t>\n\t\t\t\t\t<TextInput value={formState.groupValue.value} onChange={setGroupValue} />\n\t\t\t\t</FormGroup>\n\t\t\t\t<FormGroup\n\t\t\t\t\tlabel=\"Artifact ID\"\n\t\t\t\t\tvalidated={formState.artifactIdValue.validated}\n\t\t\t\t\thelperTextInvalid={formState.artifactIdValue.errorMessage}\n\t\t\t\t\tlabelIcon={\n\t\t\t\t\t\t<Popover\n\t\t\t\t\t\t\theaderContent=\"TODO title\"\n\t\t\t\t\t\t\tbodyContent=\"TODO body\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\taria-label=\"More info for Artifact ID field\"\n\t\t\t\t\t\t\t\tonClick={e => e.preventDefault()}\n\t\t\t\t\t\t\t\taria-describedby=\"modal-with-form-form-artifactId\"\n\t\t\t\t\t\t\t\tclassName=\"pf-c-form__group-label-help\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<HelpIcon noVerticalAlign />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</Popover>\n\t\t\t\t\t}\n\t\t\t\t\tisRequired\n\t\t\t\t\tfieldId=\"modal-with-form-form-artifactId\"\n\t\t\t\t>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tid=\"modal-with-form-form-artifactId\"\n\t\t\t\t\t\tvalue={formState.artifactIdValue.value}\n\t\t\t\t\t\tonChange={setArtifactIdValue} />\n\t\t\t\t</FormGroup>\n\t\t\t</Form>\n\t\t</Modal>\n\t);\n}","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./editor-context.css\";\nimport {ArtifactTypes, Design} from \"@app/models\";\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Dropdown,\n    DropdownItem, Gallery, GalleryItem,\n    MenuToggle,\n    Text,\n    TextContent} from \"@patternfly/react-core\";\nimport { If, NavLink, ToggleIcon } from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {ExportToRhosrData, ExportToRhosrModal} from \"@app/pages/components\";\nimport { LocalStorageService, useLocalStorageService } from \"@app/services\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { RegistryDryRunFormModal } from \"./dry-run.modal\";\nimport { DryRunErrorResponse } from \"@app/pages/editor\";\n\n/**\n * Properties\n */\nexport type EditorContextProps = {\n    design: Design;\n    dirty: boolean;\n    artifactContent: string;\n    onSave: () => void;\n    onCancel: () => void;\n    onExpandDryRunCausesPanel: (error: DryRunErrorResponse) => void;\n    onRegistrationDryRun: (registry: Registry, group: string | undefined, artifactId: string) => void;\n    isPanelOpen?: boolean;\n}\n\n/**\n * The context of the design when editing a design on the editor page.\n */\nexport const EditorContext: FunctionComponent<EditorContextProps> = ({ design, dirty, onSave, onRegistrationDryRun, onExpandDryRunCausesPanel }: EditorContextProps) => {\n    const lss: LocalStorageService = useLocalStorageService();\n\n    const [designContext, setDesignContext] = useState<DesignContext>();\n    const [isActionMenuToggled, setActionMenuToggled] = useState(false);\n    const [isExpanded, setExpanded] = useState(lss.getConfigProperty(\"editor-context.isExpanded\", \"false\") === \"true\");\n    const [isRegisterModalOpen, setRegisterModalOpen] = useState(false);\n    const [isDryRunModalOpen, setIsDryRunModalOpen] = useState(false);\n\n    const onActionMenuToggle = (): void => {\n        setActionMenuToggled(!isActionMenuToggled);\n    };\n\n    const onToggleExpand = (): void => {\n        const newExpanded: boolean = !isExpanded;\n        lss.setConfigProperty(\"editor-context.isExpanded\", \"\" + newExpanded);\n        setExpanded(newExpanded);\n    };\n\n    const actionMenuToggle: React.ReactNode = (\n        <MenuToggle variant=\"secondary\" onClick={onActionMenuToggle} isExpanded={isActionMenuToggled}>Actions</MenuToggle>\n    );\n\n    const onActionMenuSelect = (event?: React.SyntheticEvent<HTMLDivElement>): void => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setActionMenuToggled(false);\n        switch (action) {\n            case \"action-compare\":\n                return;\n            case \"action-validate\":\n                return;\n            case \"action-compatibility\":\n                return;\n            case \"action-export-to-rhosr\":\n                setRegisterModalOpen(true);\n                return;\n        }\n    };\n\n    const typeForDisplay = (): string => {\n        switch (design.type) {\n            case ArtifactTypes.OPENAPI:\n                return \"OpenAPI\";\n            case ArtifactTypes.ASYNCAPI:\n                return \"AsyncAPI\";\n            case ArtifactTypes.AVRO:\n                return \"Apache Avro\";\n            case ArtifactTypes.JSON:\n                return \"JSON Schema\";\n            case ArtifactTypes.PROTOBUF:\n                return \"Google Protocol Buffers\";\n        }\n        return \"N/A\";\n    };\n\n    const hasRhosrContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"rhosr\";\n    };\n\n    const hasFileContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"file\";\n    };\n\n    const hasUrlContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"url\";\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        // TODO anything to do here other than close the modal?\n        setRegisterModalOpen(false);\n    };\n\n    useEffect(() => {\n        if (design) {\n            const context: DesignContext|undefined = design.origin;\n            setDesignContext(context);\n        }\n    }, [design]);\n\n    return (\n        <React.Fragment>\n            <RegistryDryRunFormModal isOpen={isDryRunModalOpen} onCancel={() => setIsDryRunModalOpen(false)} onSubmit={(...params) => {\n                onRegistrationDryRun(...params);\n                setIsDryRunModalOpen(false);\n            }} />\n            <div className=\"editor-context\">\n                <div className=\"editor-context-breadcrumbs\">\n                    <Breadcrumb style={{ marginBottom: \"10px\" }}>\n                        <BreadcrumbItem component=\"button\">\n                            <NavLink location=\"/\">Red Hat OpenShift API Designer</NavLink>\n                        </BreadcrumbItem>\n                        <BreadcrumbItem isActive={true}>{design?.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                </div>\n                <div className=\"editor-context-last-modified\">\n                    <span>Last modified:</span>\n                    <Moment date={design.modifiedOn} fromNow={true} />\n                </div>\n                <div className=\"editor-context-actions\">\n                    <Dropdown\n                        onSelect={onActionMenuSelect}\n                        toggle={actionMenuToggle}\n                        style={{ zIndex: 1000 }}\n                        isOpen={isActionMenuToggled}\n                        isPlain\n                        dropdownItems={\n                            [\n                                <DropdownItem key=\"action-export-to-rhosr\" data-id=\"action-export-to-rhosr\">Export to Service Registry</DropdownItem>,\n                                <DropdownItem key=\"action-compare\" data-id=\"action-compare\">Compare differences</DropdownItem>,\n                                <DropdownItem key=\"action-validate\" data-id=\"action-validate\" onClick={() => setIsDryRunModalOpen(true)}>Registration dry-run</DropdownItem>,\n                                <DropdownItem key=\"action-compatibility\" data-id=\"action-compatibility\">Check compatibility</DropdownItem>,\n                            ]\n                        }\n                    />\n                </div>\n                <div className=\"editor-context-save\">\n                    <Button className=\"btn-save\" variant=\"primary\" onClick={onSave} isDisabled={!dirty}>Save</Button>\n                </div>\n                <div className=\"editor-context-toggle\">\n                    <Button className=\"btn-toggle\" variant=\"plain\" onClick={onToggleExpand}>\n                        <ToggleIcon expanded={isExpanded} onClick={() => { setExpanded(!isExpanded) }} />\n                    </Button>\n                </div>\n            </div>\n            <If condition={isExpanded}>\n                <div className=\"editor-context-details\">\n                    <TextContent>\n                        <Text component=\"h1\" className=\"title\">{design?.name}</Text>\n                        <Text component=\"p\" className=\"summary\">{design?.summary || \"(Design or schema with no summary)\"}</Text>\n                    </TextContent>\n                    <Gallery className=\"metadata\" minWidths={{ default: \"300px\" }}>\n                        <GalleryItem className=\"md-property\">\n                            <span className=\"md-name\">Type</span>\n                            <span className=\"md-value\">{typeForDisplay()}</span>\n                        </GalleryItem>\n                        <If condition={hasRhosrContext}>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">Group ID</span>\n                                <span className=\"md-value\">{designContext?.rhosr?.groupId || \"default\"}</span>\n                            </GalleryItem>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">Artifact ID</span>\n                                <span className=\"md-value\">{designContext?.rhosr?.artifactId}</span>\n                            </GalleryItem>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">Version</span>\n                                <span className=\"md-value\">{designContext?.rhosr?.version || \"latest\"}</span>\n                            </GalleryItem>\n                        </If>\n                        <If condition={hasFileContext}>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">Filename</span>\n                                <span className=\"md-value\">{designContext?.file?.fileName}</span>\n                            </GalleryItem>\n                        </If>\n                        <If condition={hasUrlContext}>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">URL</span>\n                                <span className=\"md-value\">{designContext?.url?.url}</span>\n                            </GalleryItem>\n                        </If>\n                    </Gallery>\n                </div>\n            </If>\n            <ExportToRhosrModal design={design as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, Spinner, TextInput} from \"@patternfly/react-core\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    DesignsService,\n    RhosrInstanceService,\n    RhosrInstanceServiceFactory,\n    RhosrService,\n    useDesignsService,\n    useRhosrInstanceServiceFactory,\n    useRhosrService\n} from \"@app/services\";\nimport {If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {CreateOrUpdateArtifactData} from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\nexport type ExportToRhosrData = {\n    design: Design;\n    context: DesignContext;\n};\n\nexport type ExportToRhosrModalProps = {\n    design: Design;\n    isOpen: boolean | undefined;\n    onExported: (event: ExportToRhosrData) => void;\n    onCancel: () => void;\n}\n\n\nexport const ExportToRhosrModal: FunctionComponent<ExportToRhosrModalProps> = (\n    {design, isOpen, onExported, onCancel}: ExportToRhosrModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [isExporting, setExporting] = useState(false);\n    const [isLoadingRegistries, setLoadingRegistries] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [registry, setRegistry] = useState<Registry>();\n    const [group, setGroup] = useState<string>();\n    const [artifactId, setArtifactId] = useState<string>();\n    const [version, setVersion] = useState<string>();\n    const [rhosrInstance, setRhosrInstance] = useState<RhosrInstanceService>();\n\n    const designs: DesignsService = useDesignsService();\n    const rhosr: RhosrService = useRhosrService();\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    // Called when the user clicks \"export\"\n    const doExport = () => {\n        setExporting(true);\n        designs.getDesignContent(design.id).then(content => {\n            const data: CreateOrUpdateArtifactData = {\n                type: design.type,\n                groupId: group,\n                id: artifactId,\n                version: version,\n                content: content.data,\n                contentType: content.contentType\n            };\n            rhosrInstance?.createOrUpdateArtifact(data).then(amd => {\n                const context: DesignContext = {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: amd.groupId as string,\n                        artifactId: amd.id,\n                        version: amd.version\n                    }\n                };\n                const data: ExportToRhosrData = {\n                    design,\n                    context\n                };\n\n                const event: DesignEvent = {\n                    id: design.id,\n                    type: \"register\",\n                    on: new Date(),\n                    data: context.rhosr\n                };\n\n                // Create an event (add to the design's history).\n                designs.createEvent(event).then(() => {\n                    setExporting(false);\n                    onExported(data);\n                }).catch(error => {\n                    // TODO error handling\n                });\n            }).catch(error => {\n                // TODO error handling\n            });\n        }).catch(error => {\n            // TODO error handling\n        });\n    };\n\n    const onRegistrySelect = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setLoadingRegistries(true);\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                if (registries && registries.length > 0) {\n                    setRegistry(registries[0]);\n                }\n                setLoadingRegistries(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[HomePage] Error getting registry list: \", error);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        if (design && design.origin && design.origin.type === \"rhosr\") {\n            const context: DesignContext = design.origin;\n            setGroup(context.rhosr?.groupId);\n            setArtifactId(context.rhosr?.artifactId);\n            setVersion(context.rhosr?.version);\n        } else {\n            setGroup(undefined);\n            setArtifactId(undefined);\n            setVersion(undefined);\n        }\n    }, [design]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!registry) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [registry, group, artifactId, version]);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Export to Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"export\" variant=\"primary\" isDisabled={!isValid || isExporting} onClick={doExport}>\n                    <If condition={isExporting}>\n                        <Spinner size=\"md\" className=\"export-spinner\" />\n                    </If>\n                    Export\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <IsLoading condition={isLoadingRegistries}>\n                <Form>\n                    <FormGroup label=\"Registry Instance\" isRequired={true} fieldId=\"export-registry-instance\">\n                        <ObjectSelect value={registry} items={registries}\n                                      onSelect={onRegistrySelect}\n                                      menuAppendTo=\"parent\"\n                                      itemToString={item => item.name} />\n                    </FormGroup>\n                    <FormGroup label=\"Group\" isRequired={false} fieldId=\"export-group\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-group\"\n                            name=\"export-group\"\n                            placeholder=\"Enter group ID (optional) or leave blank for default group\"\n                            aria-describedby=\"export-group-helper\"\n                            value={group}\n                            onChange={(value) => setGroup(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Artifact Id\" isRequired={false} fieldId=\"export-artifact-id\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-artifact-id\"\n                            name=\"export-artifact-id\"\n                            placeholder=\"Enter artifact ID (optional) or leave blank for generated ID\"\n                            aria-describedby=\"export-artifact-id-helper\"\n                            value={artifactId}\n                            onChange={(value) => setArtifactId(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Version\" isRequired={false} fieldId=\"export-version\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-version\"\n                            name=\"export-version\"\n                            placeholder=\"Enter version (optional) or leave blank for generated version #\"\n                            aria-describedby=\"export-version-helper\"\n                            value={version}\n                            onChange={(value) => setVersion(value)}\n                        />\n                    </FormGroup>\n                </Form>\n            </IsLoading>\n        </Modal>\n    )\n};\n","import { Auth, useAuth } from \"@rhoas/app-services-ui-shared\";\nimport {\n    ArtifactMetaData,\n    ArtifactSearchResults,\n    ContentTypes,\n    CreateArtifactData,\n    CreateVersionData,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedVersion,\n    VersionMetaData\n} from \"@app/models\";\nimport { createEndpoint, createHref, createOptions, httpGet, httpPut, httpPostWithReturn } from \"@app/utils/rest.utils\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { isJson, isXml, isYaml } from \"@app/utils\";\nimport { CreateOrUpdateArtifactData } from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\n\n/**\n * Determines the content type of the given content.\n * @param type\n * @param content\n */\nfunction determineContentType(type: string, content: string): string {\n    switch (type) {\n        case \"PROTOBUF\":\n            return ContentTypes.APPLICATION_PROTOBUF;\n        case \"WSDL\":\n        case \"XSD\":\n        case \"XML\":\n            return ContentTypes.APPLICATION_XML;\n        case \"GRAPHQL\":\n            return ContentTypes.APPLICATION_GRAPHQL;\n    }\n    if (isJson(content)) {\n        return ContentTypes.APPLICATION_JSON;\n    } else if (isXml(content)) {\n        return ContentTypes.APPLICATION_XML;\n    } else if (isYaml(content)) {\n        return ContentTypes.APPLICATION_YAML;\n    } else {\n        return \"application/octet-stream\";\n    }\n}\n\n\nfunction normalizeGroupId(groupId: string | undefined): string {\n    return groupId || \"default\";\n}\n\n\nasync function createArtifact(auth: Auth, basePath: string, data: CreateArtifactData): Promise<ArtifactMetaData> {\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts\", { groupId: data.groupId });\n    const headers: any = {};\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function createOrUpdateArtifact(auth: Auth, basePath: string, data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData> {\n    const endpoint: string = createEndpoint(basePath,\n        \"/groups/:groupId/artifacts\",\n        { groupId: data.groupId || \"default\" },\n        { ifExists: \"UPDATE\" }\n    );\n    const headers: any = {};\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    if (data.version) {\n        headers[\"X-Registry-Version\"] = data.version;\n    }\n    headers[\"Content-Type\"] = data.contentType;\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n};\n\n\nasync function createArtifactVersion(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData> {\n    groupId = normalizeGroupId(groupId);\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId: groupId || \"default\",\n        artifactId\n    });\n    const headers: any = {};\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, VersionMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function getArtifacts(auth: Auth, basePath: string, criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults> {\n    console.debug(\"[RhosrInstanceService] Getting artifacts: \", criteria, paging);\n    const start: number = (paging.page - 1) * paging.pageSize;\n    const end: number = start + paging.pageSize;\n    const queryParams: any = {\n        limit: end,\n        offset: start,\n        order: criteria.sortAscending ? \"asc\" : \"desc\",\n        orderby: \"name\"\n    };\n    if (criteria.value) {\n        if (criteria.type == \"everything\") {\n            queryParams[\"name\"] = criteria.value;\n            queryParams[\"description\"] = criteria.value;\n            queryParams[\"labels\"] = criteria.value;\n        } else {\n            queryParams[criteria.type] = criteria.value;\n        }\n    }\n    const endpoint: string = createEndpoint(basePath, \"/search/artifacts\", {}, queryParams);\n    return httpGet<ArtifactSearchResults>(endpoint, undefined, (data) => {\n        const results: ArtifactSearchResults = {\n            artifacts: data.artifacts,\n            count: data.count,\n            page: paging.page,\n            pageSize: paging.pageSize\n        };\n        return results;\n    });\n}\n\n\nasync function getArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, version: string): Promise<string> {\n    groupId = normalizeGroupId(groupId);\n\n    let endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions/:version\", {\n        groupId,\n        artifactId,\n        version\n    });\n    if (version === \"latest\") {\n        endpoint = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId\", { groupId, artifactId });\n    }\n\n    const options: any = createOptions({\n        \"Accept\": \"*\"\n    });\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\nasync function getArtifactVersions(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]> {\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Getting the list of versions for artifact: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId,\n        artifactId\n    }, {\n        limit: 500,\n        offset: 0\n    });\n    return httpGet<SearchedVersion[]>(endpoint, undefined, (data) => {\n        return data.versions;\n    });\n}\n\nasync function testUpdateArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, content: string): Promise<void> {\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Testing updating of artifact content: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/test\", {\n        groupId,\n        artifactId\n    });\n    return httpPut<any>(endpoint, content);\n}\n\n\n/**\n * The RHOSR Instance service interface.\n */\nexport interface RhosrInstanceService {\n    createArtifact(data: CreateArtifactData): Promise<ArtifactMetaData>;\n    createArtifactVersion(groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData>;\n    createOrUpdateArtifact(data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData>;\n    getArtifacts(criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults>;\n    getArtifactContent(groupId: string | undefined, artifactId: string, version: string): Promise<string>;\n    getArtifactVersions(groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]>;\n    testUpdateArtifactContent(groupId: string | undefined, artifactId: string, content: string): Promise<void>;\n}\n\n/**\n * Factory for creating RHOSR instance services.\n */\nexport interface RhosrInstanceServiceFactory {\n    createFor(registry: Registry): RhosrInstanceService;\n}\n\n\n/**\n * React hook to get the RHOSR instance service.\n */\nexport const useRhosrInstanceServiceFactory: () => RhosrInstanceServiceFactory = (): RhosrInstanceServiceFactory => {\n    const auth: Auth = useAuth();\n\n    return {\n        createFor: (registry) => {\n            const instanceUrl: string = createHref(registry.registryUrl as string, \"/apis/registry/v2\");\n            return {\n                createArtifact: (data) => createArtifact(auth, instanceUrl, data),\n                createArtifactVersion: (groupId, artifactId, data) => createArtifactVersion(auth, instanceUrl, groupId, artifactId, data),\n                createOrUpdateArtifact: (data: CreateOrUpdateArtifactData) => createOrUpdateArtifact(auth, instanceUrl, data),\n                getArtifacts: (criteria, paging) => getArtifacts(auth, instanceUrl, criteria, paging),\n                getArtifactContent: (groupId, artifactId, version) => getArtifactContent(auth, instanceUrl, groupId, artifactId, version),\n                getArtifactVersions: (groupId, artifactId) => getArtifactVersions(auth, instanceUrl, groupId, artifactId),\n                testUpdateArtifactContent: (groupId, artifactId, content) => testUpdateArtifactContent(auth, instanceUrl, groupId, artifactId, content)\n\n            };\n        }\n    };\n};\n","import {\n    CreateDesign,\n    CreateDesignContent,\n    Design,\n    DesignContent,\n    DesignEvent,\n    DesignsSearchCriteria,\n    DesignsSearchResults,\n    DesignsSort,\n    Paging\n} from \"@app/models\";\nimport Dexie from \"dexie\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {cloneObject} from \"@app/utils\";\n\n\nconst db = new Dexie(\"designsDB\");\ndb.version(4).stores({\n    designs: \"++id, type, name, createdOn, modifiedOn\", // Primary key and indexed props\n    content: \"++id\",\n    events: \"++eventId, id, type, on\"\n});\n\n\nasync function createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design> {\n    const id: string = uuidv4();\n    const newDesign: Design = {\n        id,\n        name: cd.name,\n        summary: cd.summary,\n        type: cd.type,\n        createdOn: new Date(),\n        modifiedOn: new Date(),\n        origin: cloneObject(cd.context)\n    };\n    const newDesignContent: DesignContent = {\n        id,\n        contentType: cdc.contentType,\n        data: cdc.data\n    };\n    const newEvent: DesignEvent = {\n        id,\n        type: \"create\",\n        on: new Date(),\n        data: {}\n    };\n    if (cd.context) {\n        newEvent.data.context = cloneObject(cd.context);\n        if (cd.context.type !== \"create\") {\n            newEvent.type = \"import\";\n        }\n    }\n    // Make sure the ID is properly set always.\n    newEvent.id = id;\n\n    return Promise.all([\n        // @ts-ignore\n        db.designs.add(newDesign),\n        // @ts-ignore\n        db.content.add(newDesignContent),\n        createEvent(newEvent)\n    ]).then(() => newDesign);\n}\n\nasync function getDesigns(): Promise<Design[]> {\n    // @ts-ignore\n    return db.designs.toArray();\n}\n\nasync function searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults> {\n    console.debug(\"[DesignsService] Searching for designs: \", criteria, paging);\n    const accept = (design: Design): boolean => {\n        let matches: boolean = false;\n        if (!criteria.filterValue || criteria.filterValue.trim().length === 0) {\n            matches = true;\n        } else if (design.name.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.summary && design.summary.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        }\n        return matches;\n    };\n\n    return getDesigns().then(designs => {\n        // TODO Explore whether we can use dexie to filter and page the results.\n\n        // filter and sort the results\n        const filteredDesigns: Design[] = designs.filter(accept).sort((design1, design2) => {\n            let rval: number = sort.by === \"name\" ? (\n                design1.name.localeCompare(design2.name)\n            ) : (\n                design2.modifiedOn.getTime() - design1.modifiedOn.getTime()\n            );\n            if (sort.direction !== \"asc\") {\n                rval *= -1;\n            }\n            return rval;\n        });\n        // get the total count\n        const totalCount: number = filteredDesigns.length;\n        // get the subset of results based on paging\n        const start: number = (paging.page - 1) * paging.pageSize;\n        const end: number = start + paging.pageSize;\n        const pagedDesigns: Design[] = filteredDesigns.slice(start, end);\n        return {\n            designs: pagedDesigns,\n            page: paging.page,\n            pageSize: paging.pageSize,\n            count: totalCount\n        }\n    });\n}\n\n\nasync function getDesign(id: string): Promise<Design> {\n    // @ts-ignore\n    return db.designs.where(\"id\").equals(id).first();\n}\n\nasync function deleteDesign(id: string): Promise<void> {\n    return Promise.all([\n        // @ts-ignore\n        db.designs.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.content.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.events.where(\"id\").equals(id).delete(),\n    ]).then(r => {});\n}\n\nasync function getDesignContent(id: string): Promise<DesignContent> {\n    // @ts-ignore\n    return db.content.where(\"id\").equals(id).first();\n}\n\nasync function updateDesignContent(content: DesignContent): Promise<void> {\n    const newEvent: DesignEvent = {\n        id: content.id,\n        type: \"update\",\n        on: new Date(),\n        data: {}\n    };\n\n    return Promise.all([\n        // @ts-ignore\n        db.content.update(content.id, {\n            data: content.data\n        }),\n        // @ts-ignore\n        db.designs.update(content.id, {\n            modifiedOn: new Date()\n        }),\n        createEvent(newEvent)\n    ]).then(() => {});\n}\n\n\nasync function getEvents(id: string): Promise<DesignEvent[]> {\n    // @ts-ignore\n    return db.events.where(\"id\").equals(id).reverse().sortBy(\"on\");\n}\n\n\nasync function createEvent(event: DesignEvent): Promise<void> {\n    event.eventId = uuidv4();\n    // @ts-ignore\n    return db.events.add(event);\n}\n\n\n/**\n * The Designs Service interface.\n */\nexport interface DesignsService {\n    createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design>;\n    getDesigns(): Promise<Design[]>;\n    getDesign(id: string): Promise<Design>;\n    searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults>;\n    deleteDesign(id: string): Promise<void>;\n    getDesignContent(id: string): Promise<DesignContent>;\n    updateDesignContent(content: DesignContent): Promise<void>;\n    getEvents(id: string): Promise<DesignEvent[]>;\n    createEvent(event: DesignEvent): Promise<void>;\n}\n\n\n/**\n * React hook to get the Designs service.\n */\nexport const useDesignsService: () => DesignsService = (): DesignsService => {\n    return {\n        createDesign,\n        getDesigns,\n        searchDesigns,\n        getDesign,\n        deleteDesign,\n        getDesignContent,\n        updateDesignContent,\n        getEvents,\n        createEvent\n    };\n};\n","import {ContentTypes, Template} from \"@app/models\";\nimport ASYNCAPI_2_BLANK from \"./asyncapi/asyncapi-2-blank.json\";\nimport ASYNCAPI_2_STREETLIGHTS from \"./asyncapi/asyncapi-2-streetlights.json\";\n\nexport const ASYNCAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"asyncapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_BLANK\n        }\n    },\n    {\n        id: \"asyncapi_2_streetlights\",\n        name: \"Street Lights Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_STREETLIGHTS\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport OPENAPI_3_BLANK from \"./openapi/openapi-3-blank.json\";\nimport OPENAPI_3_PETSTORE from \"./openapi/openapi-3-petstore.json\";\nimport OPENAPI_3_USPTO from \"./openapi/openapi-3-uspto.json\";\nimport OPENAPI_2_BLANK from \"./openapi/openapi-2-blank.json\";\nimport OPENAPI_2_PETSTORE from \"./openapi/openapi-2-petstore.json\";\n\n\nexport const OPENAPI_3_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_3_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_BLANK\n        }\n    },\n    {\n        id: \"openapi_3_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_PETSTORE\n        }\n    },\n    {\n        id: \"openapi_3_uspto\",\n        name: \"USPTO Dataset API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_USPTO\n        }\n    }\n]\n\nexport const OPENAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_BLANK\n        }\n    },\n    {\n        id: \"openapi_2_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_PETSTORE\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport JSON_BLANK from \"./json/json-blank.json\";\n\nexport const JSON_TEMPLATES: Template[] = [\n    {\n        id: \"json_blank\",\n        name: \"Blank JSON Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: JSON_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport AVRO_BLANK from \"./avro/avro-blank.json\";\n\nexport const AVRO_TEMPLATES: Template[] = [\n    {\n        id: \"avro_blank\",\n        name: \"Blank Avro Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: AVRO_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport PROTOBUF_BLANK from \"./protobuf/protobuf-blank.json\";\n\nexport const PROTOBUF_TEMPLATES: Template[] = [\n    {\n        id: \"protobuf_blank\",\n        name: \"Blank Protobuf Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            data: PROTOBUF_BLANK.template\n        }\n    }\n]\n","import {Template} from \"@app/models/templates/template.model\";\nimport {\n    ASYNCAPI_2_TEMPLATES,\n    AVRO_TEMPLATES,\n    JSON_TEMPLATES,\n    OPENAPI_2_TEMPLATES,\n    OPENAPI_3_TEMPLATES,\n    PROTOBUF_TEMPLATES\n} from \"@app/services/_templates\";\nimport {ArtifactTypes} from \"@app/models\";\n\n\nasync function getTemplatesFor(type: string, version?: string): Promise<Template[]> {\n    if (type === ArtifactTypes.AVRO) {\n        return Promise.resolve(AVRO_TEMPLATES);\n    }\n    if (type === ArtifactTypes.PROTOBUF) {\n        return Promise.resolve(PROTOBUF_TEMPLATES);\n    }\n    if (type === ArtifactTypes.JSON) {\n        return Promise.resolve(JSON_TEMPLATES);\n    }\n    if (type === ArtifactTypes.ASYNCAPI) {\n        return Promise.resolve(ASYNCAPI_2_TEMPLATES);\n    }\n    if (type === ArtifactTypes.OPENAPI) {\n        if (version && version.startsWith(\"3\")) {\n            return Promise.resolve(OPENAPI_3_TEMPLATES);\n        } else {\n            return Promise.resolve(OPENAPI_2_TEMPLATES);\n        }\n    }\n    return Promise.reject(`No templates found for type ${type} and version ${version}.`);\n}\n\n\n/**\n * The Templates Service interface.\n */\nexport interface TemplatesService {\n    getTemplatesFor(type: string, version?: string): Promise<Template[]>;\n}\n\n\n/**\n * React hook to get the Templates service.\n */\nexport const useTemplatesService: () => TemplatesService = (): TemplatesService => {\n    return {\n        getTemplatesFor\n    };\n};\n","/**\n * Downloads the given content to the filesystem using the given content type and\n * file name.\n * @param content\n * @param contentType\n * @param filename\n */\nimport {DesignsService, useDesignsService} from \"@app/services/designs\";\nimport {Design, DesignEvent} from \"@app/models\";\n\n\nasync function downloadToFS(designsSvc: DesignsService, design: Design, content: string, contentType: string, filename: string): Promise<void> {\n    console.info(\"[DownloadService] Downloading a design.\");\n    const _w: any = window;\n\n    if (_w.chrome !== undefined) {\n        // Chrome version\n        let link = document.createElement('a');\n        let blob = new Blob([content], { type: contentType });\n        link.href = _w.URL.createObjectURL(blob);\n        link.download = filename;\n        link.click();\n    } else if (_w.navigator !== undefined && _w.navigator.msSaveBlob !== undefined) {\n        // IE version\n        let blob = new Blob([content], { type: contentType });\n        _w.navigator.msSaveBlob(blob, filename);\n    } else {\n        // Firefox version\n        let file = new File([content], filename, { type: 'application/force-download' });\n        _w.open(URL.createObjectURL(file));\n    }\n\n    // Create an event for this download\n    const event: DesignEvent = {\n        id: design.id,\n        type: \"download\",\n        on: new Date(),\n        data: {\n            filename\n        }\n    };\n    designsSvc.createEvent(event);\n}\n\n\n/**\n * The Download Service interface.\n */\nexport interface DownloadService {\n    downloadToFS(design: Design, content: string, contentType: string, filename: string): Promise<void>;\n}\n\n\n/**\n * React hook to get the Download service.\n */\nexport const useDownloadService: () => DownloadService = (): DownloadService => {\n    // Note: inject the designs services so that events can be created.\n    const designsSvc: DesignsService = useDesignsService();\n    return {\n        downloadToFS: (design: Design, content: string, contentType: string, filename: string): Promise<void> => {\n            return downloadToFS(designsSvc, design, content, contentType, filename);\n        }\n    };\n};\n","import {createOptions, httpGet} from \"@app/utils\";\n\nasync function fetchUrlContent(url: string): Promise<string> {\n    console.info(\"[UrlService] Fetching content from a URL: \", url);\n\n    let endpoint: string = url;\n    const options: any = createOptions({\n        \"Accept\": \"*\"\n    });\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\n/**\n * The URL Service interface.\n */\nexport interface UrlService {\n    fetchUrlContent(url: string): Promise<string>;\n}\n\n\n/**\n * React hook to get the URL service.\n */\nexport const useUrlService: () => UrlService = (): UrlService => {\n    return {\n        fetchUrlContent\n    };\n};\n","\nfunction setConfigProperty(propertyName: string, propertyValue: string): void {\n    console.info(`[LocalStorageService] Setting config property ${propertyName} to value ${propertyValue}.`);\n    localStorage.setItem(\"apicurio-studio.\" + propertyName, propertyValue);\n}\n\nfunction getConfigProperty(propertyName: string, defaultValue: string): string {\n    console.info(`[LocalStorageService] Getting config property ${propertyName}`);\n    const value: string|null = localStorage.getItem(\"apicurio-studio.\" + propertyName);\n    return value !== null ? value : defaultValue;\n}\n\n\n/**\n * The Local Storage Service interface.\n */\nexport interface LocalStorageService {\n    setConfigProperty(propertyName: string, propertyValue: string): void;\n    getConfigProperty(propertyName: string, defaultValue: string): string;\n}\n\n\n/**\n * React hook to get the LocalStorage service.\n */\nexport const useLocalStorageService: () => LocalStorageService = (): LocalStorageService => {\n    return {\n        setConfigProperty,\n        getConfigProperty\n    };\n};\n","import {Configuration, Registry, RegistriesApi, RegistryList} from '@rhoas/registry-management-sdk';\nimport {Auth, useAuth, Config, useConfig} from \"@rhoas/app-services-ui-shared\";\n\n\nconst RHOSR_MOCK_DATA: Registry[] = [\n    {\n        id: \"1\",\n        name: \"Local Registry 1 (localhost:8081)\",\n        registryUrl: \"http://localhost:8081/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"2\",\n        name: \"Local Registry 2 (localhost:8082)\",\n        registryUrl: \"http://localhost:8082/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n]\n\nconst RHOSR_MOCK_DATA_OF: Registry[] = [\n    {\n        id: \"101\",\n        name: \"Operate First Registry 1\",\n        registryUrl: \"http://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"201\",\n        name: \"Operate First Registry 2\",\n        registryUrl: \"http://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n]\n\n\n/**\n * Async function to get the RHOSR instances.  Uses a provided auth token and API\n * base path to create a RHOSR SDK instance.\n * @param auth the application auth\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistries(auth: Auth, basePath: string): Promise<Registry[]> {\n    console.debug(\"[RhosrService] Getting a list of registries from: \", basePath);\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistries().then(res => {\n        const registries: RegistryList = res?.data;\n        return registries.items;\n    });\n}\n\n/**\n * Gets information about a single registry instances by its unique ID.\n * @param id the registry instance ID\n * @param auth the application auth\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistry(id: string, auth: Auth, basePath: string): Promise<Registry> {\n    console.debug(\"[RhosrService] Getting a single registry from: \", basePath);\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistry(id).then(res => {\n        return res?.data;\n    });\n}\n\n\n/**\n * The RHOSR Service interface.\n */\nexport interface RhosrService {\n    getRegistries(): Promise<Registry[]>;\n    getRegistry(id: string): Promise<Registry>;\n}\n\n\n/**\n * A mock version of the RHOSR service.\n */\nfunction createMockService(mockData: Registry[]): RhosrService {\n    return {\n        getRegistries(): Promise<Registry[]> {\n            return Promise.resolve(mockData);\n        },\n        getRegistry(id: string): Promise<Registry> {\n            const matching: Registry[] = mockData.filter(registry => registry.id === id);\n            if (matching && matching.length > 0) {\n                return Promise.resolve(matching[0]);\n            } else {\n                return Promise.resolve({} as Registry);\n            }\n        }\n    };\n}\n\n\n/**\n * React hook to get the RHOSR service.\n */\nexport const useRhosrService: () => RhosrService = (): RhosrService => {\n    const auth: Auth = useAuth();\n    const cfg: Config = useConfig();\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"local-mock\")) {\n        console.warn(\"[RhosrService] RHOSR mocking enabled.\");\n        return createMockService(RHOSR_MOCK_DATA);\n    }\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"operate-first-mock\")) {\n        console.warn(\"[RhosrService] RHOSR mocking enabled (Operate First).\");\n        return createMockService(RHOSR_MOCK_DATA_OF);\n    }\n\n    return {\n        getRegistries: () => getRegistries(auth, cfg.srs.apiBasePath),\n        getRegistry: (id) => getRegistry(id, auth, cfg.srs.apiBasePath),\n    };\n};\n","/**\n * Clones an object by stringifying it and then parsing it.  Not efficient\n * but effective.  Use sparingly.\n * @param object\n */\nexport function cloneObject(object: any): any {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Function to search a JS object for a property value that matches a criteria (from) and\n * replaces it with a new value (to);\n * @param object\n * @param from\n * @param to\n */\nexport function propertyReplace(object: any, from: string, to: string): void {\n    Object.keys(object).forEach(key => {\n        let value: any = object[key];\n        if (typeof value === \"object\") {\n            propertyReplace(value, from, to);\n        } else if (value === from) {\n            object[key] = to;\n        }\n    })\n}\n","import YAML from \"yaml\";\nimport {IParserResult, parse} from \"protobufjs\";\nimport {ArtifactTypes, ContentTypes, Design, DesignContent} from \"@app/models\";\n\n/**\n * Returns true if the given content is JSON formatted.\n * @param content the content to check\n */\nexport function isJson(content: string): boolean {\n    try {\n        JSON.parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nexport function parseJson(content: string): any {\n    return JSON.parse(content);\n}\nexport function toJsonString(content: any): string {\n    return JSON.stringify(content, null, 4);\n}\n\n\n/**\n * Returns true if the given content is YAML formatted.\n * @param content the content to check\n */\nexport function isYaml(content: string): boolean {\n    try {\n        const result: any = YAML.parse(content);\n        if (typeof result === \"object\") {\n            return true;\n        }\n    } catch (e) {\n    }\n    return false;\n}\nexport function parseYaml(content: string): any {\n    return YAML.parse(content);\n}\nexport function toYamlString(content: any): string {\n    return YAML.stringify(content, null, 4);\n}\n\n/**\n * Returns true if the given content is XML formatted.\n * @param content the content to check\n */\nexport function isXml(content: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isXmlWithRootNode(content: string, namespace: string, localName: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError &&\n               dom.documentElement.namespaceURI === namespace &&\n               dom.documentElement.localName === localName;\n    } catch (e) {\n        return false;\n    }\n}\nexport function isWsdl(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://schemas.xmlsoap.org/wsdl/\", \"definitions\");\n}\nexport function isXsd(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://www.w3.org/2001/XMLSchema\", \"schema\");\n}\n\n\n/**\n * Returns true if the given content is PROTO formatted.\n * @param content the content to check\n */\nexport function isProto(content: string): boolean {\n    try {\n        const result: IParserResult = parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n\nexport function fileExtensionForDesign(design: Design, content: DesignContent): string {\n    // If the design was originally imported from a file, let's just use the extension\n    // from that file.\n    if (design.origin && design.origin.type === \"file\") {\n        const filename: string = design.origin.file?.fileName as string;\n        if (filename.indexOf(\".\") > 0) {\n            const split: string[] = filename.split(\".\");\n            return split[split.length - 1];\n        }\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return \"proto\";\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return \"wsdl\";\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return \"xsd\";\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return \"xml\";\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return \"graphql\";\n    }\n\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_JSON) {\n        return \"json\";\n    }\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_YAML) {\n        return \"yaml\";\n    }\n\n    return \"txt\";\n}\n\nexport function contentTypeForDesign(design: Design, content: DesignContent): string {\n    if (content.contentType) {\n        return content.contentType;\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return ContentTypes.APPLICATION_PROTOBUF;\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return ContentTypes.APPLICATION_WSDL;\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return ContentTypes.APPLICATION_GRAPHQL;\n    }\n\n    return ContentTypes.APPLICATION_JSON;\n}\n","import {Design} from \"@app/models\";\nimport {DesignContext, DesignContextType} from \"@app/models/designs/design-context.model\";\n\nexport function hasOrigin(design: Design|undefined, contextType: DesignContextType): boolean {\n    return design?.origin?.type === contextType;\n};\n","import {ContentTypes} from \"@app/models/rhosr-instance\";\nimport axios, {AxiosRequestConfig} from \"axios\";\n\nconst AXIOS = axios.create();\n\n\nfunction createAxiosConfig(method: string, url: string, options: any, data?: any): AxiosRequestConfig {\n    if (typeof data === \"string\") {\n        data = new Blob([data]);\n    }\n    return {\n        ...{\n            data,\n            method,\n            url,\n            validateStatus: (status) => {\n                return status >= 200 && status < 300;\n            }\n        }, ...options\n    };\n}\n\n\nfunction unwrapErrorData(error: any): any {\n    console.debug(\"Error detected, unwrapping...\");\n    if (error && error.response && error.response.data) {\n        return {\n            message: error.message,\n            ...error.response.data,\n            status: error.response.status\n        }\n    } else if (error && error.response) {\n        return {\n            message: error.message,\n            status: error.response.status\n        }\n    } else if (error) {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: error.message,\n            status: 500\n        }\n    } else {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: \"Unknown error\",\n            status: 500\n        }\n    }\n}\n\n/**\n * Creates an endpoint to use when making a REST call.  Supports path params and query params.\n * @param baseHref\n * @param path\n * @param params\n * @param queryParams\n */\nexport function createEndpoint(baseHref: string, path: string, params?: any, queryParams?: any): string {\n    if (params) {\n        Object.keys(params).forEach(key => {\n            const value: string = encodeURIComponent(params[key]);\n            path = path.replace(\":\" + key, value);\n        });\n    }\n    let rval: string = createHref(baseHref, path);\n    if (queryParams) {\n        let first: boolean = true;\n        for (const key in queryParams) {\n            if (queryParams[key]) {\n                const value: string = encodeURIComponent(queryParams[key]);\n                if (first) {\n                    rval = rval + \"?\" + key;\n                } else {\n                    rval = rval + \"&\" + key;\n                }\n                if (value !== null && value !== undefined) {\n                    rval = rval + \"=\" + value;\n                }\n                first = false;\n            }\n        }\n    }\n    return rval;\n}\n\n/**\n * Creates the request options used by the HTTP service when making API calls.\n * @param headers\n */\nexport function createOptions(headers: { [header: string]: string }): AxiosRequestConfig {\n    const options: AxiosRequestConfig = {headers};\n    return options;\n}\n\n\n/**\n * Performs an HTTP GET operation to the given URL with the given options.  Returns\n * a Promise to the HTTP response data.\n */\nexport function httpGet<T>(url: string, options?: AxiosRequestConfig, successCallback?: (value: any) => T): Promise<T> {\n    console.info(\"[BaseService] Making a GET request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Accept\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"get\", url, options);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: T = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n * @param successCallback\n * @param progressCallback\n */\nexport function httpPost<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void,\n                            progressCallback?: (progressEvent: any) => void): Promise<void> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    if (progressCallback) {\n        const fiftyMB: number = 50 * 1024 * 1024;\n        config.onUploadProgress = progressCallback;\n        config.maxContentLength = fiftyMB;\n        config.maxBodyLength = fiftyMB;\n    }\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPostWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: any) => O): Promise<O> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n */\nexport function httpPut<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void): Promise<void> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPutWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: O) => O): Promise<O> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP DELETE operation to the given URL with the given body and options.\n * @param url\n * @param options\n */\nexport function httpDelete<T>(url: string, options?: AxiosRequestConfig, successCallback?: () => T): Promise<T> {\n    console.info(\"[BaseService] Making a DELETE request to: \", url);\n\n    if (!options) {\n        options = {};\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"delete\", url, options);\n// @ts-ignore\n    return AXIOS.request(config)\n        .then(() => {\n            return successCallback ? successCallback() : null;\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\nexport function createHref(baseHref: string, path: string): string {\n    let url: string =  baseHref;\n    if (url.endsWith(\"/\")) {\n        url = url.substring(0, url.length - 1);\n    }\n    url += path;\n    return url;\n}\n\n"],"names":["If","condition","children","NavLink","location","className","nav","onClick","navigateTo","ArtifactTypeIcon","type","isShowIcon","isShowLabel","classes","getClassNames","title","getTitle","getLabel","IsLoading","loadingComponent","lc","Spinner","IfNotEmpty","collection","emptyState","emptyStateTitle","emptyStateMessage","empty","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","EmptyStateBody","length","ListWithToolbar","toolbar","filteredEmptyState","isLoading","isEmpty","isFiltered","ToggleIcon","expanded","ChevronDownIcon","ChevronRightIcon","ObjectSelect","value","items","onSelect","itemToString","noSelectionLabel","menuAppendTo","useState","isToggled","setToggled","selectObjects","setSelectObjects","selections","setSelections","useEffect","map","item","index","toString","undefined","noSelection","filtered","filter","soo","Select","SelectVariant","onToggle","event","isOpen","SelectOption","isPlaceholder","key","useNavigation","history","useHistory","basename","useBasename","path","to","getBasename","push","AVRO","PROTOBUF","JSON","OPENAPI","ASYNCAPI","GRAPHQL","KCONNECT","WSDL","XSD","XML","APPLICATION_JSON","APPLICATION_YAML","APPLICATION_XML","APPLICATION_PROTOBUF","APPLICATION_GRAPHQL","TEXT_XML","APPLICATION_WSDL","ArtifactGroup","groupId","ArtifactName","id","name","ArtifactSelector","registries","onSelected","querying","setQuerying","pageSize","page","paging","setPaging","filterValue","ascending","filterSelection","criteria","setCriteria","registry","setRegistry","artifacts","setArtifacts","rhosrInstance","setRhosrInstance","rhosrInstanceFactory","createFor","gac","sortAscending","getArtifacts","then","results","catch","error","console","ArtifactListToolbar","onRegistrySelected","onCriteriaChange","onPagingChange","ArtifactList","fetchArtifactContent","artifact","version","getArtifactContent","onArtifactSelected","content","fetchArtifactVersions","getArtifactVersions","selectedArtifact","setSelectedArtifact","onArtifactSelectedInternal","debug","onArtifactUnselectedInternal","onArtifactLoaded","idx","ArtifactListItem","onUnselected","isSelected","rval","setLoading","versions","setVersions","selectedVersion","setSelectedVersion","setContent","isContentLoaded","setContentLoaded","onVersionSelect","contentType","data","target","localName","Radio","isChecked","state","status","Badge","isRead","description","setFilterValue","Toolbar","ToolbarContent","ToolbarItem","SearchInput","onChange","onSearch","onClear","Button","SortAlphaDownIcon","SortAlphaDownAltIcon","Pagination","style","padding","dropDirection","isCompact","itemCount","count","perPage","onSetPage","newPage","onPerPageSelect","newPerPage","widgetId","TYPE_OPTIONS","label","CreateDesignModal","onCreate","onCancel","isValid","setValid","setName","summary","setSummary","setType","typeSelection","setTypeSelection","isTypeToggled","setTypeToggled","setVersion","isVersionToggled","setVersionToggled","templates","setTemplates","template","setTemplate","templatesSvc","valid","getTemplatesFor","Modal","ModalVariant","onClose","actions","isDisabled","context","Alert","isInline","marginBottom","Form","FormGroup","isRequired","fieldId","TextInput","TextArea","selection","onTypeSelect","Gallery","hasGutter","minWidths","default","maxWidths","t","GalleryItem","TemplateItem","DeleteDesignModal","design","onDelete","onDownload","titleIconVariant","TextContent","Text","component","lineHeight","paddingLeft","Checkbox","checked","DesignList","designs","sort","onSort","onEdit","onRegister","selectedDesign","setSelectedDesign","sortByIndex","setSortByIndex","renderColumnData","column","colIndex","date","modifiedOn","fromNow","DesignOriginLabel","renderActionsToggle","props","KebabToggle","preventDefault","stopPropagation","sortParams","sortable","sortBy","direction","_event","by","columnIndex","ResponsiveTable","ariaLabel","columns","width","expectedLength","onRowClick","row","renderHeader","Th","modifier","renderCell","Td","renderActions","ActionsColumn","actionsToggle","isSeparator","isRowSelected","ImportFrom","DesignsPanel","onDesignSelected","onImport","refresh","setRefresh","setFiltered","filterOn","setSort","setDesigns","designToDelete","setDesignToDelete","isDeleteModalOpen","setDeleteModalOpen","designToRegister","setDesignToRegister","isRegisterModalOpen","setRegisterModalOpen","designsSvc","downloadSvc","doRefresh","onDownloadDesign","getDesignContent","filename","replace","theContent","stringify","downloadToFS","searchDesigns","DesignsEmptyState","emptyStateFiltered","DesignsEmptyStateFiltered","DesignsToolbar","trim","Card","isSelectable","CardBody","deleteDesign","ExportToRhosrModal","onExported","EmptyStateIcon","icon","AddCircleOIcon","EmptyStateSecondaryActions","ImportDropdown","PLACEHOLDER_TYPE_OPTION","compareTo","selectOption","this","ImportDesignModal","importType","designContent","setDesignContent","fileName","setFileName","url","setUrl","setContentType","detectJsonOrYamlInfo","contentObj","openapi","info","swagger","asyncapi","$schema","detectInfo","detectXmlInfo","warn","setTheType","newType","newTypeSelection","option","FILE","file","cd","cdc","FileUpload","filenamePlaceholder","fname","URL","UrlUpload","urlPlaceholder","menuToggle","MenuToggle","isExpanded","Dropdown","action","attributes","RHOSR","toggle","isPlain","dropdownItems","DropdownItem","position","ImportFromRhosrModal","setRegistries","setDesign","rhosr","getRegistries","a","b","name1","name2","localeCompare","instanceId","artifactId","PlusCircleIcon","previewContent","setPreviewContent","downloadError","setDownloadError","urlService","hasUrl","hasError","spinner","placeholder","fetchUrlContent","message","isReadOnly","DesignDetailsPanel","activeTabKey","setActiveTabKey","Tabs","activeKey","eventKey","Tab","TabTitleText","createdOn","DesignEvents","DesignHistory","events","setEvents","designsService","getEvents","DesignEventType","on","format","exports","setExports","origin","originGroupId","originArtifactId","originVersion","originFilename","originUrl","Divider","importTypeLabel","typeLabel","Label","color","initialFormState","hasErrors","groupValue","validated","errorMessage","artifactIdValue","RegistryDryRunFormModal","registryList","setRegistryList","registryValue","setRegistryValue","formState","setFormState","isRegistryInstanceDropdownOpen","setIsRegistryInstanceDropdownOpen","rhosrService","onSubmit","labelIcon","Popover","headerContent","bodyContent","e","HelpIcon","noVerticalAlign","registryId","getRegistry","log","DropdownToggle","helperTextInvalid","val","EditorContext","dirty","onSave","onRegistrationDryRun","lss","designContext","setDesignContext","isActionMenuToggled","setActionMenuToggled","getConfigProperty","setExpanded","isDryRunModalOpen","setIsDryRunModalOpen","actionMenuToggle","params","Breadcrumb","BreadcrumbItem","isActive","zIndex","newExpanded","setConfigProperty","typeForDisplay","isExporting","setExporting","isLoadingRegistries","setLoadingRegistries","group","setGroup","setArtifactId","createOrUpdateArtifact","amd","Date","createEvent","determineContentType","normalizeGroupId","useRhosrInstanceServiceFactory","useAuth","instanceUrl","registryUrl","createArtifact","auth","basePath","Promise","endpoint","headers","createArtifactVersion","ifExists","start","end","queryParams","limit","offset","order","orderby","options","maxContentLength","responseType","transformResponse","testUpdateArtifactContent","db","createDesign","newDesign","newDesignContent","newEvent","all","add","getDesigns","toArray","accept","matches","toLowerCase","indexOf","filteredDesigns","design1","design2","getTime","totalCount","slice","getDesign","where","equals","first","delete","r","updateDesignContent","update","reverse","eventId","stores","useDesignsService","ASYNCAPI_2_TEMPLATES","OPENAPI_3_TEMPLATES","OPENAPI_2_TEMPLATES","JSON_TEMPLATES","AVRO_TEMPLATES","PROTOBUF_TEMPLATES","resolve","startsWith","reject","useTemplatesService","useDownloadService","_w","window","chrome","link","document","createElement","blob","Blob","href","createObjectURL","download","click","navigator","msSaveBlob","File","open","useUrlService","propertyName","propertyValue","localStorage","setItem","defaultValue","getItem","useLocalStorageService","RHOSR_MOCK_DATA","created_at","updated_at","instance_type","RHOSR_MOCK_DATA_OF","createMockService","mockData","matching","useRhosrService","cfg","useConfig","srs","apiBasePath","getToken","token","RegistriesApi","Configuration","accessToken","res","cloneObject","object","parse","propertyReplace","from","Object","keys","forEach","isJson","parseJson","toJsonString","isYaml","parseYaml","toYamlString","isXml","DOMParser","parseFromString","getElementsByTagName","isXmlWithRootNode","namespace","dom","documentElement","namespaceURI","isWsdl","isXsd","isProto","fileExtensionForDesign","split","contentTypeForDesign","hasOrigin","contextType","AXIOS","createAxiosConfig","method","validateStatus","unwrapErrorData","response","createEndpoint","baseHref","encodeURIComponent","createHref","createOptions","httpGet","successCallback","config","request","httpPostWithReturn","body","httpPut","endsWith","substring"],"sourceRoot":""}