{"version":3,"file":"841.c1377670.js","mappings":"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","sources":["webpack://ads-ui/./src/app/components/if.tsx","webpack://ads-ui/./src/app/components/navlink.tsx","webpack://ads-ui/./src/app/components/artifact-type-icon.tsx","webpack://ads-ui/./src/app/components/is-loading.tsx","webpack://ads-ui/./src/app/components/if-not-empty.tsx","webpack://ads-ui/./src/app/components/list-with-toolbar.tsx","webpack://ads-ui/./src/app/components/toggle-icon.tsx","webpack://ads-ui/./src/app/components/design-description.tsx","webpack://ads-ui/./src/app/components/registry-navlink.tsx","webpack://ads-ui/./src/app/components/service-preview-warning.tsx","webpack://ads-ui/./src/app/components/rhosr-empty-state.tsx","webpack://ads-ui/./src/app/components/date-time.tsx","webpack://ads-ui/./src/app/components/object-select.tsx","webpack://ads-ui/./src/app/contexts/navigation.ts","webpack://ads-ui/./src/app/editors/editor-asyncapi.tsx","webpack://ads-ui/./src/app/editors/editor-text.tsx","webpack://ads-ui/./src/app/editors/editor-openapi.tsx","webpack://ads-ui/./src/app/editors/editor-proto.tsx","webpack://ads-ui/./src/app/editors/editor-compare.tsx","webpack://ads-ui/./src/app/models/rhosr-instance/artifact-types.model.ts","webpack://ads-ui/./src/app/models/rhosr-instance/content-types.model.ts","webpack://ads-ui/./src/app/pages/components/home/import-dropdown.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-group.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-name.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-selector.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-item.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/create-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/delete-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/design-list.tsx","webpack://ads-ui/./src/app/pages/components/home/designs.panel.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state-filtered.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/import-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/import-from-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/template-item.tsx","webpack://ads-ui/./src/app/pages/components/home/url-upload.tsx","webpack://ads-ui/./src/app/pages/components/home/design-details-panel.tsx","webpack://ads-ui/./src/app/pages/components/home/design-history.tsx","webpack://ads-ui/./src/app/pages/components/home/design-events.tsx","webpack://ads-ui/./src/app/pages/components/home/design-event-type.tsx","webpack://ads-ui/./src/app/pages/components/home/design-origin-label.tsx","webpack://ads-ui/./src/app/pages/components/editor/editor-context.tsx","webpack://ads-ui/./src/app/pages/components/editor/test-registry.modal.tsx","webpack://ads-ui/./src/app/pages/components/editor/compare-modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/export-to-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/rename.modal.tsx","webpack://ads-ui/./src/app/services/rhosr-instance.ts","webpack://ads-ui/./src/app/services/designs.ts","webpack://ads-ui/./src/app/services/_templates/asyncapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/openapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/json.templates.ts","webpack://ads-ui/./src/app/services/_templates/avro.templates.ts","webpack://ads-ui/./src/app/services/_templates/protobuf.templates.ts","webpack://ads-ui/./src/app/services/templates.ts","webpack://ads-ui/./src/app/services/download.ts","webpack://ads-ui/./src/app/services/url.ts","webpack://ads-ui/./src/app/services/alerts.tsx","webpack://ads-ui/./src/app/services/local-storage.ts","webpack://ads-ui/./src/app/services/rhosr.ts","webpack://ads-ui/./src/app/utils/object.utils.ts","webpack://ads-ui/./src/app/utils/content.utils.ts","webpack://ads-ui/./src/app/utils/design.utils.ts","webpack://ads-ui/./src/app/utils/rest.utils.ts"],"sourcesContent":["import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type IfProps = {\n    condition: boolean | (() => boolean);\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const If: FunctionComponent<IfProps> = ({condition, children}: IfProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n\n    return (accept() ? <React.Fragment children={children} /> : <React.Fragment />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Basename, useBasename} from \"@rhoas/app-services-ui-shared\";\n\nexport type NavLinkProps = {\n    location: string;\n    title?: string;\n    className?: string;\n    children?: React.ReactNode;\n}\n\nexport const NavLink: FunctionComponent<NavLinkProps> = ({location, title, className, children}: NavLinkProps) => {\n\n    const basename: Basename = useBasename();\n    const to: string = `${basename.getBasename()}${location}`;\n\n    return (\n        <Link className={className} title={title} to={to} children={children} />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./artifact-type-icon.css\";\nimport {ArtifactTypes} from \"@app/models\";\n\n/**\n * Properties\n */\nexport type ArtifactTypeIconProps = {\n    type: string;\n    isShowIcon?: boolean; // defaults to true\n    isShowLabel?: boolean; // defaults to false\n}\n\n\nexport const ArtifactTypeIcon: FunctionComponent<ArtifactTypeIconProps> = ({type, isShowIcon, isShowLabel}: ArtifactTypeIconProps) => {\n    const getTitle = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro Schema\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf Schema\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON Schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI Definition\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI Definition\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL Definition\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect Schema\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getLabel = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getClassNames = (): string => {\n        let classes: string = \"artifact-type-icon\";\n        if (isShowLabel) {\n            classes += \" has-label\";\n        }\n        if (isShowIcon !== false) {\n            classes += \" has-icon\";\n            switch (type) {\n                case ArtifactTypes.AVRO:\n                    classes += \" avro-icon24\";\n                    break;\n                case ArtifactTypes.PROTOBUF:\n                    classes += \" protobuf-icon24\";\n                    break;\n                case ArtifactTypes.JSON:\n                    classes += \" json-icon24\";\n                    break;\n                case ArtifactTypes.OPENAPI:\n                    classes += \" oai-icon24\";\n                    break;\n                case ArtifactTypes.ASYNCAPI:\n                    classes += \" aai-icon24\";\n                    break;\n                case ArtifactTypes.GRAPHQL:\n                    classes += \" graphql-icon24\";\n                    break;\n                case ArtifactTypes.KCONNECT:\n                    classes += \" kconnect-icon24\";\n                    break;\n                case ArtifactTypes.WSDL:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XSD:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XML:\n                    classes += \" xml-icon24\";\n                    break;\n            }\n        }\n        if (isShowIcon && !isShowLabel) {\n            classes += \" icon-only\";\n        }\n        return classes;\n    }\n\n    const renderLabel = (): React.ReactNode | undefined => {\n        if (isShowLabel) {\n            return <span>{getLabel()}</span>\n        } else {\n            return undefined;\n        }\n    };\n\n    return (\n        <div className={getClassNames()} title={getTitle()} children={renderLabel()} />\n    );\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Spinner} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IsLoadingProps = {\n    condition: boolean | (() => boolean);\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n}\n\n/**\n * Displays a Spinner control while the condition property is true.  When false, the provided children\n * are displayed.  Useful when displaying content from the results of an async operation such as a REST\n * call.\n */\nexport const IsLoading: FunctionComponent<IsLoadingProps> = ({condition, loadingComponent, children}: IsLoadingProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n    const lc: React.ReactNode = loadingComponent || <Spinner />;\n    return (accept() ? <React.Fragment children={lc} /> : <React.Fragment children={children} />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Button, EmptyState, EmptyStateBody, EmptyStateVariant, Title} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IfNotEmptyProps = {\n    collection?: any[];\n    emptyState?: React.ReactNode;\n    emptyStateTitle?: string;\n    emptyStateMessage?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * provided collection is not empty.  If the provided collection is empty, then\n * an empty state control is displayed instead.\n */\nexport const IfNotEmpty: FunctionComponent<IfNotEmptyProps> = ({collection, emptyState, emptyStateTitle, emptyStateMessage, children}: IfNotEmptyProps) => {\n    const isEmpty = () => {\n        return !collection || collection.length === 0;\n    };\n\n    const empty: React.ReactNode = emptyState || (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{emptyStateTitle || \"None found\"}</Title>\n            <EmptyStateBody>{emptyStateMessage || \"No items found.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    return isEmpty() ?\n        <React.Fragment children={empty}/> :\n        <React.Fragment children={children} />\n};\n","import React, {FunctionComponent} from \"react\";\nimport {IsLoading} from \"@app/components/is-loading\";\nimport {If} from \"@app/components/if\";\nimport {IfNotEmpty} from \"@app/components/if-not-empty\";\n\n/**\n * Properties\n */\nexport type ListWithToolbarProps = {\n    toolbar: React.ReactNode;\n    alwaysShowToolbar?: boolean;\n    emptyState: React.ReactNode;\n    filteredEmptyState: React.ReactNode;\n    isLoading: boolean;\n    isFiltered: boolean;\n    isEmpty: boolean;\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const ListWithToolbar: FunctionComponent<ListWithToolbarProps> = (\n    {toolbar, alwaysShowToolbar, emptyState, filteredEmptyState, isLoading, loadingComponent, isEmpty, isFiltered, children}: ListWithToolbarProps) => {\n\n    return (\n        <React.Fragment>\n            <If condition={alwaysShowToolbar || !isEmpty || isFiltered} children={toolbar} />\n            <IsLoading condition={isLoading} loadingComponent={loadingComponent}>\n                <If condition={!isEmpty} children={children} />\n                <If condition={isEmpty && isFiltered} children={filteredEmptyState} />\n                <If condition={isEmpty && !isFiltered} children={emptyState} />\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {ChevronRightIcon, ChevronDownIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type ToggleIconProps = {\n    expanded: boolean;\n    onClick: () => void;\n};\n\nexport const ToggleIcon: FunctionComponent<ToggleIconProps> = ({expanded, onClick}: ToggleIconProps) => {\n    return expanded ? (\n        <ChevronDownIcon />\n    ) : (\n        <ChevronRightIcon />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./design-description.css\";\nimport {Truncate} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type DesignDescriptionProps = {\n    description: string | undefined;\n    truncate?: boolean;\n    className?: string;\n}\n\n\nexport const DesignDescription: FunctionComponent<DesignDescriptionProps> = ({description, truncate, className}: DesignDescriptionProps) => {\n    let classes: string = \"\";\n    if (className) {\n        classes = className;\n    }\n    if (!description) {\n        classes = classes + \" no-description\";\n    }\n    return truncate ? (\n        <div>\n            <Truncate className={classes} content={description || \"No description.\"} tooltipPosition=\"top\" />\n        </div>\n    ) : (\n        <div className={classes}>{description || \"No description.\"}</div>\n    );\n}\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {RhosrService, useRhosrService} from \"@app/services\";\nimport {stripTrailingSlash} from \"@app/utils\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\n\n/**\n * Properties\n */\nexport type RegistryNavLinkProps = {\n    registry?: Registry;\n    context: DesignContext | undefined;\n    children?: React.ReactNode;\n};\n\n/**\n * A navigation link to an artifact in a service registry instance.  The context passed to this\n * component must be of type \"rhosr\".\n */\nexport const RegistryNavLink: FunctionComponent<RegistryNavLinkProps> = ({registry, context, children}: RegistryNavLinkProps) => {\n    const [href, setHref] = useState<string>();\n\n    const rhosr: RhosrService | undefined = registry === undefined ? useRhosrService() : undefined;\n\n    const setHrefFrom = (registry: Registry, context: DesignContext): void => {\n        const group: string = context.rhosr?.groupId || \"default\";\n        const id: string = context.rhosr?.artifactId as string;\n        setHref(`${stripTrailingSlash(registry.browserUrl)}/artifacts/${group}/${id}`);\n    };\n\n    useEffect(() => {\n        setHref(undefined);\n        if (context?.type === \"rhosr\") {\n            if (registry) {\n                setHrefFrom(registry, context);\n            } else {\n                (rhosr as RhosrService).getRegistry(context.rhosr?.instanceId as string).then(registry => {\n                    setHrefFrom(registry, context);\n                });\n            }\n        }\n    }, [context]);\n\n    return (\n        href ? <a href={href} children={children} /> : <span children={children} />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Alert} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type ServicePreviewWarningProps = {\n};\n\nexport const ServicePreviewWarning: FunctionComponent<ServicePreviewWarningProps> = ({}: ServicePreviewWarningProps) => {\n    return (\n        <Alert isInline variant=\"warning\" title=\"Service Preview: Data is stored locally in your browser\" style={{ marginBottom: \"15px\"}}>\n            <p>\n                In the Service Preview release of OpenShift API Designer, all designs are stored locally in your\n                browser. Clearing your browser cache or switching to a new browser might result in loss of data.\n                Make sure you save your work by downloading your designs locally or by exporting them to a Red Hat\n                OpenShift Service Registry instance.\n            </p>\n        </Alert>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {EmptyState, EmptyStateBody, EmptyStateIcon, Title} from \"@patternfly/react-core\";\nimport {AddCircleOIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type RhosrEmptyStateProps = {\n};\n\nexport const RhosrEmptyState: FunctionComponent<RhosrEmptyStateProps> = ({}: RhosrEmptyStateProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No Service Registry instances\n            </Title>\n            <EmptyStateBody>\n                To save a design as an artifact in Service Registry,\n                you must create a Service Registry instance first.\n            </EmptyStateBody>\n            <a href=\"/application-services/service-registry\">Create Service Registry instance</a>\n        </EmptyState>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport Moment from \"react-moment\";\n\ntype dateTypes = string|number|Array<string|number|object>|object;\n\n/**\n * Properties\n */\nexport type DateTimeProps = {\n    date: dateTypes|undefined;\n};\n\nexport const DateTime: FunctionComponent<DateTimeProps> = ({date}: DateTimeProps) => {\n    return <Moment date={date} format=\"DD MMM YYYY, hh:mm UTC\" utc={true} />;\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Select, SelectOption, SelectVariant} from \"@patternfly/react-core\";\nimport {SelectOptionObject} from \"@patternfly/react-core/src/components/Select/SelectOption\";\n\ninterface ObjectSelectOptionObject extends SelectOptionObject {\n    item: any;\n}\n\n/**\n * Properties\n */\nexport type ObjectSelectProps = {\n    value: any;\n    items: any[];\n    onSelect: (value: any) => void;\n    itemToString: (value: any) => string;\n    noSelectionLabel?: string;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline';\n    variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n};\n\n/**\n * A generic control that makes it easier to create a <Select> from an array of objects.\n */\nexport const ObjectSelect: FunctionComponent<ObjectSelectProps> = (\n    {value, items, onSelect, itemToString, noSelectionLabel, menuAppendTo, variant}: ObjectSelectProps) => {\n\n    const [isToggled, setToggled] = useState<boolean>(false);\n    const [selectObjects, setSelectObjects] = useState<ObjectSelectOptionObject[]>();\n    const [selections, setSelections] = useState<ObjectSelectOptionObject[]>();\n\n    const onSelectInternal = (event: React.MouseEvent | React.ChangeEvent, value: string | SelectOptionObject): void => {\n        setToggled(false);\n        onSelect((value as ObjectSelectOptionObject).item);\n    };\n\n    useEffect(() => {\n        const theItems: any[] = items || [];\n        const selectObjects: ObjectSelectOptionObject[] = theItems.map((item, index) => {\n            return {\n                item: item,\n                toString: () => {\n                    return itemToString(item)\n                }\n            }\n        });\n        if (noSelectionLabel !== undefined) {\n            const noSelection: ObjectSelectOptionObject = {\n                item: undefined,\n                toString(): string {\n                    return noSelectionLabel;\n                }\n            }\n            setSelectObjects([\n                noSelection, ...selectObjects\n            ]);\n        } else {\n            setSelectObjects(selectObjects);\n        }\n    }, [items]);\n\n    useEffect(() => {\n        const filtered: ObjectSelectOptionObject[]|undefined = selectObjects?.filter(soo => soo.item === value);\n        setSelections(filtered);\n    }, [value]);\n\n    return (\n        <Select menuAppendTo={menuAppendTo} variant={variant || SelectVariant.single} onToggle={setToggled} onSelect={onSelectInternal} isOpen={isToggled} selections={selections}>\n            {\n                selectObjects?.map((soo, index) => (\n                    <SelectOption isPlaceholder={soo.item === undefined} key={index} value={soo} />\n                ))\n            }\n        </Select>\n    )\n};\n","import {Basename, useBasename} from \"@rhoas/app-services-ui-shared\";\nimport {History} from \"history\";\nimport {useHistory} from \"react-router-dom\";\n\nexport const navigateTo: (path: string, basename: Basename, history: History) => void = (path: string, basename: Basename, history: History) => {\n    const to: string = `${basename.getBasename()}${path}`;\n    setTimeout(() => {\n        history.push(to);\n    }, 50);\n};\n\nexport type Navigation = {\n    navigateTo: (path: string) => void;\n};\n\nexport const useNavigation: () => Navigation = (): Navigation => {\n    const history: History = useHistory();\n    const basename: Basename = useBasename();\n\n    return {\n        navigateTo: (path: string) => {\n            return navigateTo(path, basename, history);\n        }\n    };\n}\n","import React, {RefObject, useEffect} from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport \"./editor-asyncapi.css\";\nimport {Config, useConfig} from \"@rhoas/app-services-ui-shared\";\nimport {parseJson, parseYaml, toJsonString, toYamlString} from \"@app/utils\";\nimport {ContentTypes} from \"@app/models\";\n\n\nexport type AsyncApiEditorProps = {\n    className?: string;\n} & EditorProps;\n\n\n/**\n * AsyncAPI editor.  The actual editor logic is written in Angular as a separate application\n * and loaded via an iframe.  This component is a bridge - it acts as a React component that\n * bridges to the iframe.\n */\nexport const AsyncApiEditor: DesignEditor = ({content, onChange, className}: AsyncApiEditorProps) => {\n    const ref: RefObject<any> = React.createRef();\n    const cfg: Config = useConfig();\n\n    // TODO we have a lot of common functionality between the asyncapi and openapi editors.  Need to share!\n    useEffect(() => {\n        const eventListener: any = (event) => {\n            if (event.data && event.data.type === \"apicurio_onChange\") {\n                let newContent: any = event.data.data.content;\n                if (typeof newContent === \"object\") {\n                    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n                        console.info(\"[AsyncApiEditor] New content is 'object', converting to YAML string\");\n                        newContent = toYamlString(newContent);\n                    } else {\n                        console.info(\"[AsyncApiEditor] New content is 'object', converting to JSON string\");\n                        newContent = toJsonString(newContent);\n                    }\n                } else if (typeof newContent === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n                    console.info(\"[AsyncApiEditor] Converting from JSON string to YAML string.\")\n                    newContent = toYamlString(parseJson(newContent as string));\n                }\n                onChange(newContent);\n            }\n        };\n        window.addEventListener(\"message\", eventListener, false);\n        return () => {\n            window.removeEventListener(\"message\", eventListener, false);\n        };\n    }, []);\n\n    const editorAppUrl = (): string => {\n        return cfg.ads.editorsBasePath;\n    };\n\n    const onEditorLoaded = (): void => {\n        // Now it's OK to post a message to iframe with the content to edit.\n        let value: string;\n        if (typeof content.data === \"object\") {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'object' - converting to JSON string.\");\n            value = toJsonString(content.data);\n        } else if (typeof content.data === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'string' - converting from YAML to JSON.\");\n            value = toJsonString(parseYaml(content.data as string));\n        } else {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'string' without content conversion.\");\n            value = content.data as string;\n        }\n        const message: any = {\n            type: \"apicurio-editingInfo\",\n            // tslint:disable-next-line:object-literal-sort-keys\n            data: {\n                content: {\n                    type: \"ASYNCAPI\",\n                    value: value\n                },\n                features: {\n                    allowCustomValidations: false,\n                    allowImports: false\n                }\n            }\n        }\n        ref.current.contentWindow.postMessage(message, \"*\");\n    };\n\n    return (\n        <iframe id=\"asyncapi-editor-frame\"\n                ref={ ref }\n                className={ className ? className : \"editor-asyncapi-flex-container\" }\n                onLoad={ onEditorLoaded }\n                src={ editorAppUrl() } />\n    );\n};\n","import React, {MutableRefObject, useEffect, useRef, useState} from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport Editor from \"@monaco-editor/react\";\nimport {ContentTypes, DesignContent} from \"@app/models\";\nimport {editor} from \"monaco-editor\";\nimport IStandaloneCodeEditor = editor.IStandaloneCodeEditor;\n\n\nexport const contentToString = (content: DesignContent): string => {\n    let value: string = \"\";\n    if (typeof content.data === \"string\") {\n        value = content.data as string;\n    } else {\n        value = JSON.stringify(content.data as string, null, 4);\n    }\n    return value;\n}\n\n\nexport const contentToLanguage = (content: DesignContent): string => {\n    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n        return \"yaml\";\n    } else if (content.contentType === ContentTypes.APPLICATION_XML) {\n        return \"xml\";\n    } else if (content.contentType === ContentTypes.TEXT_XML) {\n        return \"xml\";\n    } else if (content.contentType === ContentTypes.APPLICATION_WSDL) {\n        return \"xml\";\n    }\n    return \"json\";\n};\n\n\n/**\n * Simple text editor.  This is a fallback editor for any text based content\n * we might want to edit.\n */\nexport const TextEditor: DesignEditor = ({content, onChange}: EditorProps) => {\n    const defaultValue: string = contentToString(content);\n    const defaultLanguage: string = contentToLanguage(content);\n\n    const [value, setValue] = useState<string>(defaultValue);\n    const [language, setLanguage] = useState<string>(defaultLanguage);\n\n    const editorRef: MutableRefObject<IStandaloneCodeEditor|undefined> = useRef<IStandaloneCodeEditor>();\n\n    useEffect(() => {\n        const contentString: string = contentToString(content);\n        const lang: string = contentToLanguage(content);\n\n        setValue(contentString);\n        setLanguage(lang);\n\n        if (editorRef.current) {\n            editorRef.current?.setValue(contentString);\n        }\n    }, [content]);\n\n    return (\n        <Editor\n            className=\"text-editor\"\n            language={language}\n            value={value}\n            onChange={onChange}\n            options={{\n                automaticLayout: true,\n                wordWrap: 'on'\n            }}\n            onMount={(editor, monaco) => {\n                editorRef.current = editor;\n            }}\n        />\n    );\n};\n","import React, {RefObject, useEffect} from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport \"./editor-openapi.css\";\nimport {Config, useConfig} from \"@rhoas/app-services-ui-shared\";\nimport {parseJson, parseYaml, toJsonString, toYamlString} from \"@app/utils\";\nimport {ContentTypes} from \"@app/models\";\n\n\nexport type OpenApiEditorProps = {\n    className?: string;\n} & EditorProps;\n\n\n/**\n * OpenAPI editor.  The actual editor logic is written in Angular as a separate application\n * and loaded via an iframe.  This component is a bridge - it acts as a React component that\n * bridges to the iframe.\n */\nexport const OpenApiEditor: DesignEditor = ({content, onChange, className}: OpenApiEditorProps) => {\n    const ref: RefObject<any> = React.createRef();\n    const cfg: Config = useConfig();\n\n    useEffect(() => {\n        console.info(\"[OpenApiEditor] URL location of ads-editors: \", cfg.ads.editorsBasePath);\n\n        const eventListener: any = (event) => {\n            if (event.data && event.data.type === \"apicurio_onChange\") {\n                let newContent: any = event.data.data.content;\n                if (typeof newContent === \"object\") {\n                    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n                        console.info(\"[OpenApiEditor] New content is 'object', converting to YAML string\");\n                        newContent = toYamlString(newContent);\n                    } else {\n                        console.info(\"[OpenApiEditor] New content is 'object', converting to JSON string\");\n                        newContent = toJsonString(newContent);\n                    }\n                } else if (typeof newContent === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n                    console.info(\"[OpenApiEditor] Converting from JSON string to YAML string.\")\n                    newContent = toYamlString(parseJson(newContent as string));\n                }\n                onChange(newContent);\n            }\n        };\n        window.addEventListener(\"message\", eventListener, false);\n        return () => {\n            window.removeEventListener(\"message\", eventListener, false);\n        };\n    }, []);\n\n    const editorAppUrl = (): string => {\n        return cfg.ads.editorsBasePath;\n    };\n\n    const onEditorLoaded = (): void => {\n        // Now it's OK to post a message to iframe with the content to edit.\n        let value: string;\n        if (typeof content.data === \"object\") {\n            console.info(\"[OpenApiEditor] Loading editor data from 'object' - converting to JSON string.\");\n            value = toJsonString(content.data);\n        } else if (typeof content.data === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n            console.info(\"[OpenApiEditor] Loading editor data from 'string' - converting from YAML to JSON.\");\n            value = toJsonString(parseYaml(content.data as string));\n        } else {\n            console.info(\"[OpenApiEditor] Loading editor data from 'string' without content conversion.\");\n            value = content.data as string;\n        }\n        const message: any = {\n            type: \"apicurio-editingInfo\",\n            // tslint:disable-next-line:object-literal-sort-keys\n            data: {\n                content: {\n                    type: \"OPENAPI\",\n                    value: value\n                },\n                features: {\n                    allowCustomValidations: false,\n                    allowImports: false\n                }\n            }\n        }\n        ref.current.contentWindow.postMessage(message, \"*\");\n    };\n\n    return (\n        <iframe id=\"openapi-editor-frame\"\n                ref={ ref }\n                className={ className ? className : \"editor-openapi-flex-container\" }\n                onLoad={ onEditorLoaded }\n                src={ editorAppUrl() } />\n    );\n};\n","import React, {MutableRefObject, useEffect, useRef, useState} from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport Editor from \"@monaco-editor/react\";\nimport {contentToString} from \"@app/editors/editor-text\";\nimport {editor} from \"monaco-editor\";\nimport IStandaloneCodeEditor = editor.IStandaloneCodeEditor;\n\n/**\n * Protobuf text editor with support for syntax hint and highlight.\n */\nexport const ProtoEditor: DesignEditor = ({content, onChange}: EditorProps) => {\n    const defaultValue: string = contentToString(content);\n    const [value, setValue] = useState<string>(defaultValue);\n\n    const editorRef: MutableRefObject<IStandaloneCodeEditor|undefined> = useRef<IStandaloneCodeEditor>();\n\n    useEffect(() => {\n        const contentString: string = contentToString(content);\n        setValue(contentString);\n\n        if (editorRef.current) {\n            editorRef.current?.setValue(contentString);\n        }\n    }, [content]);\n\n    const registerProto = (monaco) => {\n        monaco.languages.register({id: 'protobuf'});\n        monaco.languages.setMonarchTokensProvider('protobuf', {\n            keywords: [\n                'import', 'option', 'message', 'package', 'service',\n                'optional', 'rpc', 'returns', 'return', 'true', 'false', 'required'\n            ],\n            typeKeywords: [\n                'double', 'float', 'int32', 'int64', 'uint32',\n                'uint64', 'sint32', 'sint64', 'fixed32', 'fixed64',\n                'sfixed32', 'sfixed64', 'bool', 'string', 'bytes'\n            ],\n            operators: [\n                '=', '>', '<', '!', '~', '?', ':', '==', '<=', '>=', '!=',\n                '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%',\n                '<<', '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=', '^=',\n                '%=', '<<=', '>>=', '>>>='\n            ],\n            symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n            escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n            tokenizer: {\n                root: [\n                    [/[a-z_$][\\w$]*/, {\n                        cases: {\n                            '@typeKeywords': 'typeKeyword',\n                            '@keywords': 'keyword',\n                            '@default': 'identifier'\n                        }\n                    }],\n                    [/[A-Z][\\w$]*/, 'type.identifier'],\n                    {include: '@whitespace'},\n\n                    // delimiters and operators\n                    [/[{}()\\[\\]]/, '@brackets'],\n                    [/[<>](?!@symbols)/, '@brackets'],\n                    [/@symbols/, {\n                        cases: {\n                            '@operators': 'operator',\n                            '@default': ''\n                        }\n                    }],\n                    // @ annotations.\n                    [/@\\s*[a-zA-Z_$][\\w$]*/, {token: 'annotation', log: 'annotation token: $0'}],\n                    // numbers\n                    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n                    [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n                    [/\\d+/, 'number'],\n                    // delimiter: after number because of .\\d floats\n                    [/[;,.]/, 'delimiter'],\n                    // strings\n                    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n                    [/\"/, {token: 'string.quote', bracket: '@open', next: '@string'}],\n                    // characters\n                    [/'[^\\\\']'/, 'string'],\n                    [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n                    [/'/, 'string.invalid']\n                ],\n                comment: [\n                    [/[^\\/*]+/, 'comment'],\n                    [/\\/\\*/, 'comment', '@push'], // nested comment\n                    [\"\\\\*/\", 'comment', '@pop'],\n                    [/[\\/*]/, 'comment']\n                ],\n                string: [\n                    [/[^\\\\\"]+/, 'string'],\n                    [/@escapes/, 'string.escape'],\n                    [/\\\\./, 'string.escape.invalid'],\n                    [/\"/, {token: 'string.quote', bracket: '@close', next: '@pop'}]\n                ],\n                whitespace: [\n                    [/[ \\t\\r\\n]+/, 'white'],\n                    [/\\/\\*/, 'comment', '@comment'],\n                    [/\\/\\/.*$/, 'comment']\n                ]\n            }\n        });\n        monaco.editor.defineTheme('protobuf', {\n            base: 'vs',\n            inherit: true,\n            rules: [\n                {token: 'keyword', foreground: 'DB2121'},\n                {token: 'typeKeyword', foreground: 'F84842', fontStyle: 'italic'},\n                {token: 'identifier', foreground: '0C5ED7', fontStyle: 'bold'},\n                {token: 'type.identifier', foreground: '00CA8C', fontStyle: 'bold'},\n                {token: 'comment', foreground: '7A7A7A'},\n                {token: 'number', foreground: '000000', fontStyle: 'italic'},\n                {token: 'string', fontStyle: 'italic'}\n            ]\n        });\n    }\n\n    return (\n        <Editor\n            beforeMount={registerProto}\n            className=\"text-editor\"\n            defaultLanguage=\"protobuf\"\n            defaultValue={value}\n            onChange={onChange}\n            height=\"100%\"\n            options={{\n                automaticLayout: true\n            }}\n            onMount={(editor, monaco) => {\n                editorRef.current = editor;\n            }}\n        />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {DiffEditor} from \"@monaco-editor/react\";\nimport {editor} from \"monaco-editor\";\nimport IDiffEditorConstructionOptions = editor.IDiffEditorConstructionOptions;\nimport {contentToString} from \"@app/utils\";\n\n\nexport type EditorCompareProps = {\n    before: any;\n    after: any;\n    contentOptions: IDiffEditorConstructionOptions;\n};\n\n\n/**\n * Compare text editor.  This is a compare editor for any text based content\n * we might want to edit.\n */\nexport const EditorCompare: FunctionComponent<EditorCompareProps> = ({before, after, contentOptions}: EditorCompareProps) => {\n    const beforeValue: string = contentToString(before);\n    const afterValue: string = contentToString(after);\n\n    return (\n        <DiffEditor\n            className=\"text-editor\"\n            original={beforeValue}\n            modified={afterValue}\n            options={contentOptions}\n        />\n    );\n};\n","\nexport class ArtifactTypes {\n\n    public static AVRO: string = \"AVRO\";\n    public static PROTOBUF: string = \"PROTOBUF\";\n    public static JSON: string = \"JSON\";\n    public static OPENAPI: string = \"OPENAPI\";\n    public static ASYNCAPI: string = \"ASYNCAPI\";\n    public static GRAPHQL: string = \"GRAPHQL\";\n    public static KCONNECT: string = \"KCONNECT\";\n    public static WSDL: string = \"WSDL\";\n    public static XSD: string = \"XSD\";\n    public static XML: string = \"XML\";\n\n}\n","\nexport class ContentTypes {\n\n    public static APPLICATION_JSON: string = \"application/json\";\n    public static APPLICATION_YAML: string = \"application/x-yaml\";\n    public static APPLICATION_XML: string = \"application/xml\";\n    public static APPLICATION_PROTOBUF: string = \"application/x-protobuf\";\n    public static APPLICATION_GRAPHQL: string = \"application/graphql\";\n\n    public static TEXT_XML: string = \"text/xml\";\n    public static APPLICATION_WSDL: string = \"application/wsdl+xml\";\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./import-dropdown.css\";\nimport {Dropdown, DropdownItem, DropdownToggle} from \"@patternfly/react-core\";\n\nexport enum ImportFrom {\n    FILE,\n    URL,\n    RHOSR\n};\n\n/**\n * Properties\n */\nexport type ImportDropdownProps = {\n    variant: \"long\"|\"short\";\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * A control to display the Import dropdown on the main page (used to select how to import content\n * into the API Designer).\n */\nexport const ImportDropdown: FunctionComponent<ImportDropdownProps> = ({variant, onImport}: ImportDropdownProps) => {\n    const [isToggled, setToggled] = useState(false);\n\n    const onToggle = (value: boolean): void => {\n        setToggled(value);\n    };\n\n    const toggle: React.ReactNode = (\n        <DropdownToggle id=\"import-toggle\" toggleVariant=\"secondary\" onToggle={onToggle}>\n            {variant === \"short\" ? \"Import\" : \"Import design\"}\n        </DropdownToggle>\n    );\n\n    const onMenuSelect: (event?: React.SyntheticEvent<HTMLDivElement>) => void = (event) => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setToggled(false);\n        switch (action) {\n            case \"action-file\":\n                onImport(ImportFrom.FILE);\n                return;\n            case \"action-url\":\n                onImport(ImportFrom.URL);\n                return;\n            case \"action-rhosr\":\n                onImport(ImportFrom.RHOSR);\n                return;\n        }\n    };\n\n    return (\n        <Dropdown\n            onSelect={onMenuSelect}\n            toggle={toggle}\n            isOpen={isToggled}\n            isPlain\n            dropdownItems={\n                [\n                    <DropdownItem key=\"action-rhosr\" data-id=\"action-rhosr\">Import from Service Registry</DropdownItem>,\n                    <DropdownItem key=\"action-url\" data-id=\"action-url\">Import from URL</DropdownItem>,\n                    <DropdownItem key=\"action-file\" data-id=\"action-file\">Import from file</DropdownItem>,\n                ]\n            }\n            position=\"right\"\n        />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactGroupProps = {\n    groupId: string|undefined;\n}\n\n/**\n * Displays a RHOSR artifact's group.\n */\nexport const ArtifactGroup: FunctionComponent<ArtifactGroupProps> = ({groupId}: ArtifactGroupProps) => {\n    const style = (): string => {\n        return !groupId ? \"nogroup\" : \"group\";\n    };\n\n    return (\n        <span className={style()}>{groupId}</span>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactNameProps = {\n    id: string;\n    name: string;\n}\n\n/**\n * Displays a RHOSR artifact's name.\n */\nexport const ArtifactName: FunctionComponent<ArtifactNameProps> = ({id, name}: ArtifactNameProps) => {\n    return name ? (\n        <React.Fragment>\n            <span className=\"name\">{name}</span>\n            <span className=\"id\">{id}</span>\n        </React.Fragment>\n    ) : (\n        <React.Fragment>\n            <span className=\"name\">{id}</span>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    ArtifactSearchResults,\n    CreateDesignContent,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedArtifact,\n    SearchedVersion\n} from \"@app/models\";\nimport {RhosrInstanceService, RhosrInstanceServiceFactory, useRhosrInstanceServiceFactory} from \"@app/services\";\nimport {ArtifactList, ArtifactListToolbar, ArtifactListToolbarCriteria} from \"@app/pages/components\";\nimport {IfNotEmpty, IsLoading, ListWithToolbar} from \"@app/components\";\nimport {EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type ArtifactSelectorProps = {\n    registries: Registry[];\n    onSelected: (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n};\n\n/**\n * A control that allows the user to find and select a single version of a single artifact from\n * a service registry instance.\n */\nexport const ArtifactSelector: FunctionComponent<ArtifactSelectorProps> = ({registries, onSelected}: ArtifactSelectorProps) => {\n    const [ querying, setQuerying ] = useState(true);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<ArtifactListToolbarCriteria>({\n        filterValue: \"\",\n        ascending: true,\n        filterSelection: \"name\"\n    });\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ artifacts, setArtifacts ] = useState<ArtifactSearchResults|undefined>();\n    const [ rhosrInstance, setRhosrInstance ] = useState<RhosrInstanceService>();\n\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    const onRegistrySelected = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    const onCriteriaChange = (criteria: ArtifactListToolbarCriteria): void =>  {\n        setCriteria(criteria);\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n    };\n\n    const fetchArtifactVersions = (artifact: SearchedArtifact): Promise<SearchedVersion[]> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactVersions(artifact.groupId, artifact.id);\n    };\n\n    const fetchArtifactContent = (artifact: SearchedArtifact, version?: SearchedVersion): Promise<string> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactContent(artifact.groupId, artifact.id, version?.version||\"latest\");\n    };\n\n    const onArtifactSelected = (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        onSelected(registry, artifact, version, content);\n    };\n\n    // Initialization\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, []);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    // Query for artifacts when relevant changes occur.\n    useEffect(() => {\n        if (rhosrInstance) {\n            const gac: GetArtifactsCriteria = {\n                sortAscending: criteria.ascending,\n                type: criteria.filterSelection,\n                value: criteria.filterValue\n            };\n            setQuerying(true);\n            rhosrInstance.getArtifacts(gac, paging).then(results => {\n                setArtifacts(results);\n                setQuerying(false);\n            }).catch(error => {\n                // TODO handle error\n                console.error(\"[RegistryPage] Error searching for artifacts: \", error);\n                setArtifacts({\n                    artifacts: [],\n                    count: 0,\n                    page: 1,\n                    pageSize: 20\n                });\n                setQuerying(false);\n            });\n        }\n        onSelected(undefined, undefined, undefined);\n    }, [rhosrInstance, criteria, paging]);\n\n    const toolbar: React.ReactNode = (\n        <ArtifactListToolbar registries={registries} criteria={criteria} paging={paging}\n                             onRegistrySelected={onRegistrySelected}\n                             menuAppendTo={document.getElementById('artifact-selector')}\n                             onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange}\n                             artifacts={artifacts} />\n    );\n\n    const emptyState: React.ReactNode = (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n            <EmptyStateBody>{\"No artifacts found in the registry instance.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    const filteredEmptyState: React.ReactNode = (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n            <EmptyStateBody>{\"No artifacts matched the filter criteria.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    const loadingComponent: React.ReactNode = (\n        <Spinner size=\"lg\" style={{marginTop: \"10px\"}} />\n    );\n\n    return (\n        <div id=\"artifact-selector\">\n            <ListWithToolbar toolbar={toolbar}\n                alwaysShowToolbar={true}\n                emptyState={emptyState}\n                filteredEmptyState={filteredEmptyState}\n                isFiltered={criteria.filterValue !== \"\"}\n                isLoading={querying}\n                loadingComponent={loadingComponent}\n                isEmpty={!artifacts || artifacts.count === 0}\n            >\n                <ArtifactList artifacts={artifacts?.artifacts} fetchArtifactContent={fetchArtifactContent}\n                    onArtifactSelected={onArtifactSelected}\n                    fetchArtifactVersions={fetchArtifactVersions} />\n            </ListWithToolbar>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./artifact-list.css\";\nimport {CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {ArtifactListItem} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type ArtifactListProps = {\n    artifacts?: SearchedArtifact[];\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n    onArtifactSelected: (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactList: FunctionComponent<ArtifactListProps> = (\n    {artifacts, fetchArtifactVersions, fetchArtifactContent, onArtifactSelected}: ArtifactListProps) => {\n\n    const [selectedArtifact, setSelectedArtifact] = useState<SearchedArtifact>();\n\n    const onArtifactSelectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact selected: \", artifact);\n        setSelectedArtifact(artifact);\n    };\n\n    const onArtifactUnselectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact unselected: \", artifact);\n        setSelectedArtifact(undefined);\n        onArtifactSelected(undefined, undefined, undefined);\n    };\n\n    const onArtifactLoaded = (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent): void => {\n        console.debug(\"[ArtifactList] Artifact loaded: \", artifact);\n        console.debug(\"[ArtifactList] Selected Artifact: \", selectedArtifact);\n        if (artifact === selectedArtifact) {\n            onArtifactSelected(artifact, version, content);\n        }\n    };\n\n    return (\n        <div className=\"artifact-list\">\n            {\n                artifacts?.map( (artifact, idx) =>\n                    <ArtifactListItem artifact={artifact} key={idx}\n                                      onSelected={onArtifactSelectedInternal}\n                                      onUnselected={onArtifactUnselectedInternal}\n                                      fetchArtifactVersions={fetchArtifactVersions}\n                                      fetchArtifactContent={fetchArtifactContent}\n                                      onArtifactLoaded={onArtifactLoaded}\n                                      isSelected={selectedArtifact === artifact} />\n                )\n            }\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-item.css\";\nimport {ArtifactTypes, ContentTypes, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Badge, Radio, Spinner} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {ArtifactGroup, ArtifactName} from \"@app/pages/components\";\nimport {isJson, isXml, isYaml} from \"@app/utils\";\n\n/**\n * Properties\n */\nexport type ArtifactListItemProps = {\n    artifact: SearchedArtifact;\n    isSelected: boolean;\n    onSelected: (artifact: SearchedArtifact) => void;\n    onUnselected: (artifact: SearchedArtifact) => void;\n    onArtifactLoaded: (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent) => void;\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactListItem: FunctionComponent<ArtifactListItemProps> = (\n    {artifact, isSelected, onSelected, onUnselected, onArtifactLoaded, fetchArtifactVersions, fetchArtifactContent}: ArtifactListItemProps) => {\n\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [versions, setVersions] = useState<SearchedVersion[]>();\n    const [selectedVersion, setSelectedVersion] = useState<SearchedVersion>();\n    const [content, setContent] = useState<string>();\n    const [isContentLoaded, setContentLoaded] = useState<boolean>(false);\n\n    const labels = (): string[] => {\n        return artifact.labels ? artifact.labels : [];\n    };\n    const statuses = (): string[] => {\n        const rval: string[] = [];\n        if (artifact.state === \"DISABLED\") {\n            rval.push(\"Disabled\");\n        }\n        if (artifact.state === \"DEPRECATED\") {\n            rval.push(\"Deprecated\");\n        }\n        return rval;\n    };\n    const description = (): string => {\n        if (artifact.description) {\n            return artifact.description;\n        }\n        return `An artifact of type ${artifact.type} with no description.`;\n    };\n\n    const shouldLoadVersions = (): boolean => {\n        return versions === undefined || versions.length === 0;\n    };\n\n    const loadVersions = (): void => {\n        setContentLoaded(false);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Loading versions for ${artifact.id}`);\n        fetchArtifactVersions(artifact).then(versions => {\n            setVersions(versions);\n            setLoading(false);\n            onVersionSelect(undefined);\n        }).catch(error => {\n            // TODO handle errors\n        });\n    };\n\n    const onToggleSelected = (event: any): void => {\n        // Bit of a hack - if the user clicks the Version drop-down, don't do the\n        // artifact item toggling behavior.\n        if (event && event.target && event.target.localName === \"button\") {\n            return;\n        }\n\n        if (isSelected) {\n            onUnselected(artifact);\n        } else {\n            if (shouldLoadVersions()) {\n                loadVersions();\n            } else {\n                onVersionSelect(undefined);\n            }\n            onSelected(artifact);\n        }\n    };\n\n    const onVersionSelect = (version?: SearchedVersion): void => {\n        setSelectedVersion(version);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Version selected for ${artifact.id}, loading content. Version: `, version);\n        fetchArtifactContent(artifact, version).then(content => {\n            console.debug(\"[ArtifactListItem] Artifact content successfully fetched for: \", artifact.id)\n            setContent(content);\n            setLoading(false);\n            setContentLoaded(true);\n        }).catch(error => {\n            // TODO handle errors loading the artifact content\n        });\n    };\n\n    // Whenever the content changes, fire the \"onArtifactLoaded\" event.  Do this\n    // from inside useEffect() so that it's not happening from an async callback.\n    useEffect(() => {\n        if (content !== undefined) {\n            let contentType: string;\n            if (isJson(content)) {\n                contentType = ContentTypes.APPLICATION_JSON;\n            } else if (isYaml(content)) {\n                contentType = ContentTypes.APPLICATION_YAML;\n            } else if (isXml(content)) {\n                contentType = ContentTypes.APPLICATION_XML;\n            } else if (artifact.type === ArtifactTypes.PROTOBUF) {\n                contentType = ContentTypes.APPLICATION_PROTOBUF;\n            } else if (artifact.type === ArtifactTypes.GRAPHQL) {\n                contentType = ContentTypes.APPLICATION_GRAPHQL;\n            } else {\n                contentType = ContentTypes.APPLICATION_JSON;\n            }\n            const cdc: CreateDesignContent = {\n                contentType,\n                data: content\n            };\n            onArtifactLoaded(artifact, selectedVersion as SearchedVersion, cdc);\n        }\n    }, [content]);\n\n    return (\n        <div className={`artifact-list-item ${isSelected ? \"selected\" : \"\"} ${isContentLoaded ? \"loaded\" : \"\"}`}\n             onClick={onToggleSelected}>\n            <div className=\"artifact-list-item-radio\">\n                <IsLoading condition={isLoading} loadingComponent={(<Spinner size=\"sm\" />)}>\n                    <Radio id={`artifact-radio-${artifact.id}`} name=\"\" isChecked={isSelected} />\n                </IsLoading>\n            </div>\n            <div className=\"artifact-list-item-icon\">\n                <ArtifactTypeIcon type={artifact.type}/>\n            </div>\n            <div className=\"artifact-list-item-info\">\n                <div className=\"artifact-title\">\n                    <ArtifactGroup groupId={artifact.groupId} />\n                    <ArtifactName id={artifact.id} name={artifact.name} />\n                    {\n                        statuses().map( status =>\n                            <Badge className=\"status-badge\" key={status} isRead={true}>{status}</Badge>\n                        )\n                    }\n                </div>\n                <div className=\"artifact-description\">{description()}</div>\n            </div>\n            <div className=\"artifact-list-item-versions\">\n                <If condition={isSelected}>\n                    <ObjectSelect value={selectedVersion} items={versions as SearchedVersion[]}\n                                  noSelectionLabel=\"latest\" menuAppendTo=\"parent\"\n                                  onSelect={onVersionSelect} itemToString={version => version.version} />\n                </If>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    SelectVariant,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {ArtifactSearchResults, Paging} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {ObjectSelect} from \"@app/components/object-select\";\n\n\nexport interface ArtifactListToolbarCriteria {\n    filterSelection: string;\n    filterValue: string;\n    ascending: boolean;\n}\n\nexport type ArtifactListToolbarProps = {\n    registries: Registry[];\n    criteria: ArtifactListToolbarCriteria;\n    paging: Paging;\n    artifacts?: ArtifactSearchResults;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline' | undefined | null;\n    onRegistrySelected: (registry: Registry) => void;\n    onCriteriaChange: (criteria: ArtifactListToolbarCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n}\n\n\nexport const ArtifactListToolbar: FunctionComponent<ArtifactListToolbarProps> = ({registries, criteria, onCriteriaChange, paging,\n                                                                            onPagingChange, artifacts, onRegistrySelected, menuAppendTo}: ArtifactListToolbarProps) => {\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    const onRegistrySelectInternal = (registry: Registry): void => {\n        setRegistry(registry);\n        onRegistrySelected(registry);\n    };\n\n    const onToggleAscending = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            ascending: !criteria.ascending\n        });\n    };\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    }\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    }\n\n    const totalArtifactCount = (): number => {\n        return artifacts?.count || 0;\n    };\n\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, [registries]);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    return (\n        <Toolbar id=\"artifacts-toolbar-1\" className=\"artifacts-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <ObjectSelect value={registry} items={registries}\n                                  variant={SelectVariant.single}\n                                  onSelect={onRegistrySelectInternal}\n                                  menuAppendTo={menuAppendTo || 'parent'}\n                                  itemToString={item => item.name} />\n                </ToolbarItem>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter artifacts\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem className=\"sort-icon-item\">\n                    <Button variant=\"plain\" aria-label=\"edit\" data-testid=\"toolbar-btn-sort\" onClick={onToggleAscending}>\n                        {\n                            criteria.ascending ? <SortAlphaDownIcon/> : <SortAlphaDownAltIcon/>\n                        }\n                    </Button>\n                </ToolbarItem>\n                <ToolbarItem className=\"artifact-paging-item\">\n                    <Pagination\n                        style={{padding: \"5px\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalArtifactCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"artifact-list-pagination\"\n                        className=\"artifact-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Gallery,\n    GalleryItem,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, CreateDesign, Template} from \"@app/models\";\nimport {TemplatesService, useTemplatesService} from \"@app/services\";\nimport {If, ServicePreviewWarning} from \"@app/components\";\nimport {TemplateItem} from \"@app/pages/components\";\n\nexport type CreateDesignModalProps = {\n    isOpen: boolean|undefined;\n    onCreate: (event: CreateDesign, template: Template) => void;\n    onCancel: () => void;\n}\n\n\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        }\n    };\n});\n\n\nexport const CreateDesignModal: FunctionComponent<CreateDesignModalProps> = ({isOpen, onCreate, onCancel}: CreateDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState(ArtifactTypes.OPENAPI);\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [templates, setTemplates] = useState<Template[]>();\n    const [template, setTemplate] = useState<Template>();\n\n    const templatesSvc: TemplatesService = useTemplatesService();\n\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setType((selection as any).value);\n        setTypeSelection(selection);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Create button in the modal\n    const doCreate = (): void => {\n        const cd: CreateDesign = {\n            type,\n            name,\n            summary,\n            context: {\n                type: \"create\"\n            }\n        };\n        onCreate(cd, template as Template);\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        if (!template) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, template]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setName(\"\");\n        setSummary(\"\");\n        setType(ArtifactTypes.OPENAPI);\n        if (templates) {\n            setTemplate(templates[0]);\n        } else {\n            setTemplate(undefined);\n        }\n    }, [isOpen]);\n\n    // Whenever the type changes, load the templates for that type. If the type is\n    // OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI) {\n            setVersion(\"3.0.2\");\n        }\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [type]);\n\n    // Whenever the version changes, fetch the templates for the current type and version.\n    useEffect(() => {\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [version]);\n\n    // Whenever the templates changes, auto-select the first one\n    useEffect(() => {\n        if (templates && templates.length > 0) {\n            setTemplate(templates[0]);\n        }\n    }, [templates]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Create a design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doCreate}>\n                    Create\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <ServicePreviewWarning />\n\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"create-design-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"create-design-name\"\n                        name=\"create-design-name\"\n                        aria-describedby=\"create-design-name-helper\"\n                        value={name}\n                        onChange={(value) => {setName(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"create-design-description\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"create-design-description\"\n                        name=\"create-design-description\"\n                        aria-describedby=\"create-design-description-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Type\" isRequired={true} fieldId=\"create-design-type\">\n                    <Select\n                        variant={SelectVariant.single}\n                        aria-label=\"Select type\"\n                        onToggle={() => {setTypeToggled(!isTypeToggled)}}\n                        onSelect={(event, selection) => onTypeSelect(selection)}\n                        isOpen={isTypeToggled}\n                        selections={typeSelection}\n                        menuAppendTo=\"parent\"\n                    >\n                        {\n                            TYPE_OPTIONS.map(to => <SelectOption key={(to as any).value} value={to} />)\n                        }\n                    </Select>\n                </FormGroup>\n                <If condition={type === ArtifactTypes.OPENAPI}>\n                    <FormGroup label=\"Version\" isRequired={true} fieldId=\"create-design-version\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select version\"\n                            onToggle={() => {setVersionToggled(!isVersionToggled)}}\n                            onSelect={(event, selection) => onVersionSelect(selection as string)}\n                            isOpen={isVersionToggled}\n                            selections={version}\n                            menuAppendTo=\"parent\"\n                        >\n                            <SelectOption value={\"3.0.2\"} />\n                            <SelectOption value={\"2.0\"} />\n                        </Select>\n                    </FormGroup>\n                </If>\n                <If condition={(templates && templates.length > 1) as boolean}>\n                    <FormGroup label=\"Template\" fieldId=\"create-design-template\">\n                        <Gallery hasGutter minWidths={{default: \"125px\"}} maxWidths={{default: \"125px\"}}>\n                        {\n                            templates?.map(t => (\n                                <GalleryItem key={t.id}>\n                                    <TemplateItem template={t} isSelected={t === template} onSelect={() => {\n                                        setTemplate(t)\n                                    }} />\n                                </GalleryItem>\n                            ))\n                        }\n                        </Gallery>\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, Text, TextContent} from \"@patternfly/react-core\";\nimport {Design} from \"@app/models\";\n\nexport type DeleteDesignModalProps = {\n    design: Design|undefined;\n    isOpen: boolean|undefined;\n    onDelete: (design: Design) => void;\n    onCancel: () => void;\n    onDownload: (design: Design) => void;\n}\n\nexport const DeleteDesignModal: FunctionComponent<DeleteDesignModalProps> = ({design, isOpen, onDelete, onDownload, onCancel}: DeleteDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    // Called when the user clicks the Delete button in the modal\n    const doDelete = (): void => {\n        onDelete(design as Design);\n    };\n\n    const doDownload = (): void => {\n        onDownload(design as Design);\n    };\n\n    useEffect(() => {\n        setValid(false);\n    }, [design, isOpen]);\n\n    return (\n        <Modal\n            variant={ModalVariant.small}\n            title=\"Delete design?\"\n            titleIconVariant=\"warning\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"delete\" variant=\"primary\" isDisabled={!isValid} onClick={doDelete}>\n                    Delete\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent style={{marginBottom: \"15px\"}}>\n                <Text component=\"p\">The following API or schema design will be deleted.</Text>\n            </TextContent>\n\n            <Form>\n                <FormGroup label=\"Name\" fieldId=\"delete-design-name\">\n                    <TextContent>{design?.name}</TextContent>\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"delete-design-description\">\n                    <TextContent>{design?.summary}</TextContent>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-warning\">\n                    <Alert isInline variant=\"info\" title=\"To save your data for future use, download the design.\">\n                        <p style={{lineHeight: \"18px\"}}>\n                            To ensure your data is successfully saved, wait for the download to complete\n                            before deleting the design.\n                        </p>\n                        <Button variant=\"link\" onClick={doDownload} style={{paddingLeft:\"0px\"}}>Download design</Button>\n                    </Alert>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-confirm\">\n                    <Checkbox id=\"valid-checkbox\" name=\"\" label=\"I have downloaded the design or do not need to!\"\n                              isChecked={isValid} onChange={(checked) => setValid(checked)} />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-list.css\";\nimport {Design, DesignsSearchResults, DesignsSort} from \"@app/models\";\nimport {ResponsiveTable} from \"@rhoas/app-services-ui-components\";\nimport {ArtifactTypeIcon, DesignDescription, NavLink} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {KebabToggle, Truncate} from \"@patternfly/react-core\";\nimport {IAction} from \"@patternfly/react-table\";\nimport {ThProps} from \"@patternfly/react-table/src/components/TableComposable/Th\";\nimport {CustomActionsToggleProps} from \"@patternfly/react-table/src/components/Table/ActionsColumn\";\nimport {DesignOriginLabel} from \"@app/pages/components\";\n\n\nexport type DesignListProps = {\n    designs: DesignsSearchResults;\n    selectedDesign: Design | undefined;\n    sort: DesignsSort;\n    onSort: (sort: DesignsSort) => void;\n    onRename: (design: Design) => void;\n    onEdit: (design: Design) => void;\n    onDelete: (design: Design) => void;\n    onRegister: (design: Design) => void;\n    onDownload: (design: Design) => void;\n    onSelect: (design: Design|undefined) => void;\n}\n\nexport const DesignList: FunctionComponent<DesignListProps> = (\n    {designs, selectedDesign, sort, onSort, onEdit, onRename, onDelete, onRegister, onDownload, onSelect}: DesignListProps) => {\n\n    const [sortByIndex, setSortByIndex] = useState<number>();\n\n    const columns: any[] = [\n        { index: 0, id: \"name\", label: \"Name\", width: 40, sortable: true },\n        { index: 1, id: \"type\", label: \"Type\", width: 15, sortable: false },\n        { index: 2, id: \"modified-on\", label: \"Time updated\", width: 15, sortable: true },\n        { index: 3, id: \"context\", label: \"Origin\", width: 25, sortable: false },\n    ];\n\n    const renderColumnData = (column: Design, colIndex: number): React.ReactNode => {\n        // Name.\n        if (colIndex === 0) {\n            return (\n                <div>\n                    <NavLink className=\"design-title\"\n                             location={`/designs/${column.id}/editor`}>\n                        <Truncate content={column.name} tooltipPosition=\"top\" />\n                    </NavLink>\n                    <DesignDescription className=\"design-summary\"\n                                       description={column.summary}\n                                       truncate={true} />\n                </div>\n            );\n        }\n        // Type.\n        if (colIndex === 1) {\n            return <ArtifactTypeIcon type={column.type} isShowLabel={true} />\n        }\n        // Modified on.\n        if (colIndex === 2) {\n            return <Moment date={column.modifiedOn} fromNow={true} />\n        }\n        // Origin.\n        if (colIndex === 3) {\n            return <DesignOriginLabel design={column} />;\n        }\n        return <span />\n    };\n\n    const renderActionsToggle = (props: CustomActionsToggleProps): React.ReactNode => {\n        return <KebabToggle isDisabled={props.isDisabled} isOpen={props.isOpen} onToggle={(value, event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            props.onToggle(value);\n        }} />\n    }\n\n    const actionsFor = (design: any): IAction[] => {\n        return [\n            { title: \"View details\", onClick: () => onSelect(design) },\n            { isSeparator: true, },\n            { title: \"Edit design\", onClick: () => onEdit(design) },\n            { title: \"Rename design\", onClick: () => onRename(design) },\n            { title: \"Export to Service Registry\", onClick: () => onRegister(design) },\n            { title: \"Download design\", onClick: () => onDownload(design) },\n            { isSeparator: true, },\n            { title: \"Delete design\", onClick: () => onDelete(design) }\n        ];\n    }\n\n    const sortParams = (column: any): ThProps[\"sort\"] | undefined => {\n        return column.sortable ? {\n            sortBy: {\n                index: sortByIndex,\n                direction: sort.direction\n            },\n            onSort: (_event, index, direction) => {\n                const sort: DesignsSort = {\n                    by: index === 0 ? \"name\" : \"modified-on\",\n                    direction\n                };\n                onSort(sort);\n            },\n            columnIndex: column.index\n        } : undefined;\n    };\n\n    useEffect(() => {\n        setSortByIndex(sort.by === \"name\" ? 0 : 2);\n    }, [sort]);\n\n    return (\n        <div className=\"design-list\">\n            <ResponsiveTable\n                ariaLabel=\"list of designs\"\n                columns={columns}\n                data={designs.designs}\n                expectedLength={designs.count}\n                minimumColumnWidth={350}\n                onRowClick={(row) => onSelect(row.row.id === selectedDesign?.id ? undefined : row.row)}\n                renderHeader={({ column, Th, key }) => (\n                    <Th sort={sortParams(column)}\n                        className=\"design-list-header\"\n                        key={`header-${column.id}`}\n                        width={column.width}\n                        modifier=\"truncate\">{column.label}</Th>\n                )}\n                renderCell={({ column, row, colIndex, Td, key }) => (\n                    <Td className=\"design-list-cell\" key={`cell-${colIndex}-${row.id}`} children={renderColumnData(row as Design, colIndex)} />\n                )}\n                renderActions={({row, ActionsColumn}) => (\n                    <ActionsColumn key={`actions-${row['id']}`}\n                                   actionsToggle={renderActionsToggle}\n                                   items={actionsFor(row)}/>\n                )}\n                isRowSelected={({ row }) => row.id === selectedDesign?.id}\n            />\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs.panel.css\";\nimport {Alert, AlertActionCloseButton, Card, CardBody} from \"@patternfly/react-core\";\nimport {\n    AlertsService,\n    DesignsService,\n    DownloadService, LocalStorageService, useAlertsService,\n    useDesignsService,\n    useDownloadService,\n    useLocalStorageService\n} from \"@app/services\";\nimport {Design, DesignsSearchCriteria, DesignsSearchResults, DesignsSort, Paging} from \"@app/models\";\nimport {If, ListWithToolbar, RegistryNavLink} from \"@app/components\";\nimport {\n    DeleteDesignModal,\n    DesignList,\n    DesignsEmptyState,\n    DesignsEmptyStateFiltered,\n    DesignsToolbar,\n    ExportToRhosrData,\n    ExportToRhosrModal,\n    ImportFrom,\n    RenameData,\n    RenameModal\n} from \"@app/pages/components\";\nimport {Navigation, useNavigation} from \"@app/contexts/navigation\";\nimport {contentTypeForDesign, convertToValidFilename, fileExtensionForDesign} from \"@app/utils\";\nimport {AlertVariant, useAlert} from \"@rhoas/app-services-ui-shared\";\n\n\nexport type DesignsPanelProps = {\n    selectedDesign: Design | undefined;\n    onDesignSelected: (design: Design | undefined) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n}\n\n\nexport const DesignsPanel: FunctionComponent<DesignsPanelProps> = ({selectedDesign, onDesignSelected, onCreate, onImport}: DesignsPanelProps) => {\n    const [ isLoading, setLoading ] = useState(false);\n    const [ showDataWarning, setShowDataWarning ] = useState(true);\n    const [ refresh, setRefresh ] = useState(1);\n    const [ isFiltered, setFiltered ] = useState(false);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<DesignsSearchCriteria>({\n        filterValue: \"\",\n        filterOn: \"name\"\n    });\n    const [ sort, setSort ] = useState<DesignsSort>({\n        by: \"modified-on\",\n        direction: \"desc\"\n    });\n    const [ designs, setDesigns ] = useState<DesignsSearchResults>();\n    const [ designToDelete, setDesignToDelete ] = useState<Design>();\n    const [ isDeleteModalOpen, setDeleteModalOpen ] = useState(false);\n    const [ designToRegister, setDesignToRegister ] = useState<Design>();\n    const [ isRegisterModalOpen, setRegisterModalOpen ] = useState(false);\n    const [ designToRename, setDesignToRename ] = useState<Design>();\n    const [ isRenameModalOpen, setRenameModalOpen ] = useState(false);\n\n    const designsSvc: DesignsService = useDesignsService();\n    const downloadSvc: DownloadService = useDownloadService();\n    const nav: Navigation = useNavigation();\n    const alerts: AlertsService = useAlertsService();\n    const local: LocalStorageService = useLocalStorageService();\n\n    const doRefresh = (): void => {\n        setRefresh(refresh + 1);\n    };\n\n    const onEditDesign = (design: Design): void => {\n        nav.navigateTo(`/designs/${design.id}/editor`);\n    };\n\n    const onRenameDesign = (design: Design): void => {\n        setDesignToRename(design);\n        setRenameModalOpen(true);\n    };\n\n    const doRenameDesign = (event: RenameData): void => {\n        designsSvc.renameDesign(designToRename?.id as string, event.name, event.summary).then(() => {\n            if (designToRename) {\n                designToRename.name = event.name;\n                designToRename.summary = event.summary;\n            }\n            setRenameModalOpen(false);\n            alerts.designRenamed(event);\n        }).catch(e => {\n            // TODO error handling\n        })\n    };\n\n    const onDeleteDesign = (design: Design): void => {\n        setDesignToDelete(design);\n        setDeleteModalOpen(true);\n    };\n\n    const onDeleteDesignConfirmed = (design: Design): void => {\n        designsSvc.deleteDesign(design.id).then(() => {\n            doRefresh();\n            alerts.designDeleted(design);\n        }).catch(error => {\n            console.error(\"[DesignsPanel] Error deleting design: \", error);\n            alerts.designDeleteFailed(design, error);\n        });\n        setDeleteModalOpen(false);\n    };\n\n    const onRegisterDesign = (design: Design): void => {\n        setDesignToRegister(design);\n        setRegisterModalOpen(true);\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        alerts.designExportedToRhosr(event);\n    };\n\n    const onDownloadDesign = (design: Design): void => {\n        designsSvc.getDesignContent(design.id).then(content => {\n            const filename: string = `${convertToValidFilename(design.name)}.${fileExtensionForDesign(design, content)}`;\n            const contentType: string = contentTypeForDesign(design, content);\n            const theContent: string = typeof content.data === \"object\" ? JSON.stringify(content.data, null, 4) : content.data as string;\n            downloadSvc.downloadToFS(design, theContent, contentType, filename);\n        });\n    };\n\n    const onCriteriaChange = (criteria: DesignsSearchCriteria): void =>  {\n        setCriteria(criteria);\n        setPaging({\n            page: 1,\n            pageSize: paging.pageSize\n        });\n        setFiltered(criteria.filterValue != undefined && criteria.filterValue.trim().length > 0);\n        doRefresh();\n    };\n\n    const onSortDesigns = (sort: DesignsSort): void => {\n        setSort(sort);\n        doRefresh();\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n        doRefresh();\n    };\n\n    useEffect(() => {\n        setShowDataWarning(\"true\" === local.getConfigProperty(\"designs.panel.show-data-warning\", \"true\"));\n    }, []);\n\n    useEffect(() => {\n        setLoading(true);\n        onDesignSelected(undefined);\n        designsSvc.searchDesigns(criteria, paging, sort).then(designs => {\n            console.debug(\"[DesignsPanel] Designs loaded: \", designs);\n            setDesigns(designs);\n            setLoading(false);\n        }).catch(error => {\n            // TODO need error handling\n            console.error(error);\n        });\n    }, [refresh]);\n\n    const emptyState: React.ReactNode = (\n        <DesignsEmptyState onCreate={onCreate} onImport={onImport} />\n    );\n\n    const emptyStateFiltered: React.ReactNode = (\n        <DesignsEmptyStateFiltered onClear={() => {\n            onCriteriaChange({\n                filterValue: \"\",\n                filterOn: \"\"\n            });\n        }} />\n    );\n\n    const toolbar: React.ReactNode = (\n        <DesignsToolbar designs={designs} criteria={criteria} paging={paging}\n                        onCreate={onCreate} onImport={onImport}\n                        onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange} />\n    );\n\n    const onCloseDataWarning = (): void => {\n        setShowDataWarning(false);\n        local.setConfigProperty(\"designs.panel.show-data-warning\", \"false\");\n    };\n\n    return (\n        <div className=\"designs-panel\">\n            <ListWithToolbar toolbar={toolbar}\n                             emptyState={emptyState}\n                             filteredEmptyState={emptyStateFiltered}\n                             isLoading={isLoading}\n                             isFiltered={isFiltered}\n                             isEmpty={!designs || designs.count === 0}>\n                <Card isSelectable={false}>\n                    <CardBody className=\"panel-body\">\n                        <If condition={showDataWarning}>\n                            <Alert className=\"panel-alert\"\n                                   isInline={true}\n                                   variant=\"info\"\n                                   title=\"Service Preview: Data is stored locally in your browser\"\n                                   actionClose={<AlertActionCloseButton onClose={onCloseDataWarning} />}\n                                   style={{ marginBottom: \"15px\"}}>\n                                <p>\n                                    In the Service Preview release of OpenShift API Designer, all designs are stored\n                                    locally in your browser. Clearing your browser cache or switching to a new browser\n                                    might result in loss of data. Make sure you save your work by downloading your\n                                    designs locally or by exporting them to a Red Hat OpenShift Service Registry instance.\n                                </p>\n                            </Alert>\n                        </If>\n                        <DesignList designs={designs as DesignsSearchResults}\n                                    selectedDesign={selectedDesign}\n                                    sort={sort}\n                                    onSelect={onDesignSelected}\n                                    onSort={onSortDesigns}\n                                    onEdit={onEditDesign}\n                                    onRename={onRenameDesign}\n                                    onDownload={onDownloadDesign}\n                                    onRegister={onRegisterDesign}\n                                    onDelete={onDeleteDesign} />\n                    </CardBody>\n                </Card>\n            </ListWithToolbar>\n            <DeleteDesignModal design={designToDelete}\n                              isOpen={isDeleteModalOpen}\n                              onDelete={onDeleteDesignConfirmed}\n                              onDownload={onDownloadDesign}\n                              onCancel={() => setDeleteModalOpen(false)} />\n            <ExportToRhosrModal design={designToRegister as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n            <RenameModal design={designToRename}\n                         isOpen={isRenameModalOpen}\n                         onRename={doRenameDesign}\n                         onCancel={() => setRenameModalOpen(false)} />\n        </div>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    Title\n} from \"@patternfly/react-core\";\nimport {AddCircleOIcon} from \"@patternfly/react-icons\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateProps = {\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyState: FunctionComponent<DesignsEmptyStateProps> = ({onCreate, onImport}: DesignsEmptyStateProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No designs\n            </Title>\n            <EmptyStateBody>\n                To get started, create or import a design.\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={onCreate}>Create design</Button>\n            <EmptyStateSecondaryActions>\n                <ImportDropdown variant=\"long\" onImport={onImport} />\n            </EmptyStateSecondaryActions>\n        </EmptyState>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {\n    Bullseye,\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from \"@patternfly/react-core\";\nimport {SearchIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateFilteredProps = {\n    onClear: () => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyStateFiltered: FunctionComponent<DesignsEmptyStateFilteredProps> = ({onClear}: DesignsEmptyStateFilteredProps) => {\n    return (\n        <Bullseye style={{backgroundColor: \"white\"}}>\n            <EmptyState variant={EmptyStateVariant.small}>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    No matching designs\n                </Title>\n                <EmptyStateBody>Adjust your filters and try again.</EmptyStateBody>\n                <Button variant=\"link\" onClick={onClear}>Clear all filters</Button>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {DesignsSearchCriteria, DesignsSearchResults, Paging} from \"@app/models\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n\n/**\n * Properties\n */\nexport type DesignsToolbarProps = {\n    criteria: DesignsSearchCriteria;\n    paging: Paging;\n    designs?: DesignsSearchResults;\n    onCriteriaChange: (criteria: DesignsSearchCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n\n/**\n * The toolbar to filter (and paginate) the collection of designs.\n */\nexport const DesignsToolbar: FunctionComponent<DesignsToolbarProps> = (\n    {criteria, paging, designs, onCriteriaChange, onPagingChange, onCreate, onImport}: DesignsToolbarProps) => {\n\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    };\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    };\n\n    const totalDesignCount = (): number => {\n        return designs?.count || 0;\n    };\n\n    return (\n        <Toolbar id=\"designs-toolbar\" className=\"designs-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter designs\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem>\n                    <Button variant=\"primary\" onClick={onCreate}>Create design</Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                    <ImportDropdown variant=\"long\" onImport={onImport} />\n                </ToolbarItem>\n                <ToolbarItem className=\"design-paging-item\">\n                    <Pagination\n                        style={{padding: \"0\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalDesignCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"design-list-pagination\"\n                        className=\"design-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Button,\n    FileUpload,\n    Form,\n    FormGroup,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, ContentTypes, CreateDesign, CreateDesignContent} from \"@app/models\";\nimport {If, ServicePreviewWarning} from \"@app/components\";\nimport {ImportFrom, UrlUpload} from \"@app/pages/components\";\nimport {isJson, isProto, isWsdl, isXml, isXsd, isYaml, parseJson, parseYaml} from \"@app/utils\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\n\n\nexport type ImportDesignModalProps = {\n    importType: ImportFrom;\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nconst PLACEHOLDER_TYPE_OPTION: SelectOptionObject = {\n    // @ts-ignore\n    value: undefined,\n    label: \"Select a type...\",\n    toString: () => {\n        return \"Select a type...\";\n    },\n    compareTo(selectOption: any): boolean {\n        return selectOption === this;\n    }\n};\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        },\n        compareTo(selectOption: any): boolean {\n            return this.value === selectOption.value;\n        }\n    };\n});\n\n\ntype DetectionInfo = {\n    type?: string;\n    contentType?: string;\n    version?: string;\n    name?: string;\n    summary?: string;\n}\n\n\nexport const ImportDesignModal: FunctionComponent<ImportDesignModalProps> = ({importType, isOpen, onImport, onCancel}: ImportDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    const [designContent, setDesignContent] = useState<string>();\n    const [fileName, setFileName] = useState<string>();\n    const [url, setUrl] = useState<string>();\n\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState<string>();\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [contentType, setContentType] = useState<string>();\n\n    const onFileChange = (value: string | File, fname: string): void => {\n        setDesignContent(value as string);\n        setFileName(fname);\n    };\n\n    const onUrlChange = (value: string|undefined, url: string|undefined): void => {\n        setDesignContent(value);\n        setUrl(url);\n    };\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setTheType((selection as any).value);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        const context: DesignContext = importType === ImportFrom.FILE ? {\n            type: \"file\",\n            file: {\n                fileName: fileName as string\n            }\n        } : {\n            type: \"url\",\n            url: {\n                url: url as string\n            }\n        };\n        const cd: CreateDesign = {\n            type: type as string,\n            name,\n            summary,\n            context\n        };\n        const cdc: CreateDesignContent = {\n            contentType: contentType as string,\n            data: designContent\n        };\n\n        console.debug(\"[ImportDesignModal] Importing design: \", cd);\n        console.debug(\"[ImportDesignModal] Importing content-type: \", contentType);\n        onImport(cd, cdc);\n    };\n\n    const hasDesignContent = (): boolean => {\n        return designContent !== undefined && designContent.trim().length > 0;\n    };\n\n    const title = (): string => {\n        if (importType === ImportFrom.FILE) {\n            return \"Import design from file\";\n        } else {\n            return \"Import design from URL\";\n        }\n    };\n\n    const detectJsonOrYamlInfo = (contentObj: any, contentType: string): DetectionInfo => {\n        if (contentObj.openapi) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"3.0.2\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.swagger) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"2.0\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.asyncapi) {\n            return {\n                type: ArtifactTypes.ASYNCAPI,\n                contentType: contentType,\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.$schema) {\n            return {\n                type: ArtifactTypes.JSON,\n                contentType: contentType,\n                name: contentObj.title,\n                summary: contentObj.description\n            };\n        }\n\n        return {\n            type: ArtifactTypes.AVRO,\n            contentType: contentType,\n            name: contentObj.name\n        }\n    }\n\n    const detectXmlInfo = (content: string): DetectionInfo => {\n        let type: string = ArtifactTypes.XML;\n        if (isWsdl(content)) {\n            type = ArtifactTypes.WSDL;\n        } else if (isXsd(content)) {\n            type = ArtifactTypes.XSD;\n        }\n        return {\n            type,\n            contentType: ContentTypes.TEXT_XML\n        };\n    }\n\n    const detectProtoInfo = (): DetectionInfo => {\n        return {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            type: ArtifactTypes.PROTOBUF\n        };\n    }\n\n    // Tries to figure out the type and meta-data of the content by parsing it and looking\n    // for key indicators.\n    const detectInfo = (content: string): DetectionInfo => {\n        if (isJson(content)) {\n            return detectJsonOrYamlInfo(parseJson(content), ContentTypes.APPLICATION_JSON);\n        } else if (isYaml(content)) {\n            return detectJsonOrYamlInfo(parseYaml(content), ContentTypes.APPLICATION_YAML);\n        } else if (isXml(content)) {\n            return detectXmlInfo(content);\n        } else if (isProto(content)) {\n            return detectProtoInfo();\n        }\n        console.warn(\"[ImportDesignModal] Failed to detect the type of the content.\");\n        // Default: nothing detected\n        return {\n        };\n\n        // TODO handle parsing of GraphQL\n    };\n\n    const setTheType = (newType: string|undefined): void => {\n        if (newType === undefined) {\n            setType(undefined);\n            setTypeSelection(undefined);\n        } else {\n            setType(newType);\n            // @ts-ignore (there really is a value on the option)\n            const newTypeSelection: SelectOptionObject = TYPE_OPTIONS.filter(option => option.value === newType)[0];\n            setTypeSelection(newTypeSelection);\n        }\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!designContent) {\n            valid = false;\n        }\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, designContent]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setDesignContent(undefined);\n        setName(\"\");\n        setSummary(\"\");\n        setFileName(undefined);\n        setTheType(undefined);\n    }, [isOpen]);\n\n    // Whenever the content changes (e.g. loaded from file) try to detect the\n    // type of the content.\n    useEffect(() => {\n        if (designContent && designContent.trim().length > 0) {\n            const info: DetectionInfo = detectInfo(designContent as string);\n            console.debug(\"[ImportDesignModal] Content detection: \", info);\n            console.debug(\"[ImportDesignModal] Version detected: \", info.version || \"\");\n\n            setTheType(info.type);\n            setVersion(info.version || \"\");\n            setName(info.name || \"\");\n            setSummary(info.summary || \"\");\n            setContentType(info.contentType);\n        } else {\n            console.debug(\"[ImportDesignModal] Content empty, resetting form fields.\");\n            setName(\"\");\n            setSummary(\"\");\n            setTheType(undefined);\n            setContentType(undefined);\n        }\n    }, [designContent]);\n\n    // Whenever the type changes to OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI && version === undefined) {\n            setVersion(\"3.0.2\");\n        }\n    }, [type]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title={title()}\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n                    Import\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <ServicePreviewWarning />\n\n            <Form>\n                <If condition={importType === ImportFrom.FILE}>\n                    <FormGroup label=\"File\" isRequired={true} fieldId=\"import-design-file\">\n                        <FileUpload\n                            isRequired={true}\n                            id=\"design-text-file\"\n                            type=\"text\"\n                            value={designContent}\n                            filename={fileName}\n                            filenamePlaceholder=\"Drag and drop a file or upload one\"\n                            onChange={onFileChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={importType === ImportFrom.URL}>\n                    <FormGroup label=\"URL\" isRequired={true} fieldId=\"import-design-url\">\n                        <UrlUpload\n                            id=\"design-text-url\"\n                            urlPlaceholder=\"Enter a valid and accessible URL\"\n                            onChange={onUrlChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={hasDesignContent}>\n                    <FormGroup label=\"Type\" isRequired={true} fieldId=\"import-design-type\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select type\"\n                            onToggle={() => setTypeToggled(!isTypeToggled)}\n                            onSelect={(event, selection) => onTypeSelect(selection)}\n                            isOpen={isTypeToggled}\n                            selections={typeSelection}\n                            menuAppendTo=\"parent\"\n                        >\n                            {\n                                [\n                                    <SelectOption key={-1} value={PLACEHOLDER_TYPE_OPTION} isPlaceholder={true}/>,\n                                    ...TYPE_OPTIONS.map((to, index) => <SelectOption key={index} value={to}/>)\n                                ]\n                            }\n                        </Select>\n                    </FormGroup>\n                    <If condition={type === ArtifactTypes.OPENAPI}>\n                        <FormGroup label=\"Version\" isRequired={true} fieldId=\"import-design-version\">\n                            <Select\n                                variant={SelectVariant.single}\n                                aria-label=\"Select version\"\n                                onToggle={() => setVersionToggled(!isVersionToggled)}\n                                onSelect={(event, selection) => onVersionSelect(selection as string)}\n                                isOpen={isVersionToggled}\n                                selections={version}\n                                menuAppendTo=\"parent\"\n                            >\n                                <SelectOption key={1} value=\"3.0.2\"/>\n                                <SelectOption key={2} value=\"2.0\"/>\n                            </Select>\n                        </FormGroup>\n                    </If>\n                    <FormGroup label=\"Name\" isRequired={true} fieldId=\"import-design-name\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"import-design-name\"\n                            name=\"import-design-name\"\n                            aria-describedby=\"import-design-name-helper\"\n                            value={name}\n                            onChange={(value) => setName(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Description\" fieldId=\"import-design-description\">\n                        <TextArea\n                            type=\"text\"\n                            id=\"import-design-description\"\n                            name=\"import-design-description\"\n                            aria-describedby=\"import-design-description-helper\"\n                            value={summary}\n                            onChange={(value) => setSummary(value)}\n                        />\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Button, Modal, ModalVariant} from \"@patternfly/react-core\";\nimport {CreateDesign, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {RhosrService, useRhosrService} from \"@app/services\";\nimport {If, IsLoading, RhosrEmptyState, ServicePreviewWarning} from \"@app/components\";\nimport {ArtifactSelector} from \"@app/pages/components\";\n\n\nexport type ImportFromRhosrModalProps = {\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nexport const ImportFromRhosrModal: FunctionComponent<ImportFromRhosrModalProps> = ({isOpen, onImport, onCancel}: ImportFromRhosrModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [isLoading, setLoading] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [design, setDesign] = useState<CreateDesign>();\n    const [designContent, setDesignContent] = useState<CreateDesignContent>();\n\n    const rhosr: RhosrService = useRhosrService();\n\n    // Called when the user selects an artifact from the artifact selector.\n    const onArtifactSelected = (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        if (artifact === undefined) {\n            setDesign(undefined);\n            setDesignContent(undefined);\n        } else {\n            const cd: CreateDesign = {\n                type: artifact.type,\n                name: artifact.name || artifact.id,\n                summary: artifact.description || \"\",\n                context: {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: artifact.groupId as string,\n                        artifactId: artifact.id,\n                        version: version?.version as string\n                    }\n                }\n            };\n            setDesign(cd);\n            setDesignContent(content);\n        }\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        onImport(design as CreateDesign, designContent as CreateDesignContent);\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                setLoading(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[ImportFromRhosrModal] Error getting registry list: \", error);\n                setRegistries([]);\n                setLoading(false);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        let valid: boolean = true;\n        if (design === undefined) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [design, designContent]);\n\n    let actions: any[] = registries.length === 0 ? [] : [\n        <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n            Import\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n            Cancel\n        </Button>\n    ];\n\n    return (\n        <Modal\n            variant={ModalVariant.large}\n            title=\"Import design from Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={actions}\n        >\n            <IsLoading condition={isLoading}>\n                <If condition={registries.length === 0}>\n                    <RhosrEmptyState />\n                </If>\n                <If condition={registries.length > 0}>\n                    <ServicePreviewWarning />\n                    <ArtifactSelector registries={registries} onSelected={onArtifactSelected} />\n                </If>\n            </IsLoading>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Template} from \"@app/models\";\nimport \"./template-item.css\";\nimport {PlusCircleIcon} from \"@patternfly/react-icons\";\n\nexport type TemplateItemProps = {\n    template: Template;\n    isSelected: boolean;\n    onSelect: (template: Template) => void;\n}\n\nexport const TemplateItem: FunctionComponent<TemplateItemProps> = ({template, isSelected, onSelect}: TemplateItemProps) => {\n    const onClick = (): void => {\n        if (!isSelected) {\n            onSelect(template);\n        }\n    };\n\n    return (\n        <div className={`template-item ${isSelected ? \"selected\" : \"not-selected\"}`} onClick={onClick}>\n            <div className=\"icon\">\n                <PlusCircleIcon />\n            </div>\n            <div className=\"name\">{template.name}</div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./url-upload.css\";\nimport {Button, Spinner, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {If, IsLoading} from \"@app/components\";\nimport {UrlService, useUrlService} from \"@app/services\";\n\n/**\n * Properties\n */\nexport type UrlUploadProps = {\n    id: string|\"url-upload\";\n    urlPlaceholder: string|\"\";\n    onChange: (value: string|undefined, url: string|undefined) => void;\n};\n\n/**\n * A control similar to the FileUpload control from patternfly that allows uploading from\n * a URL instead of a file.\n */\nexport const UrlUpload: FunctionComponent<UrlUploadProps> = ({id, urlPlaceholder, onChange}: UrlUploadProps) => {\n    const [url, setUrl] = useState<string>();\n    const [previewContent, setPreviewContent] = useState<string>();\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [downloadError, setDownloadError] = useState<string>();\n\n    const urlService: UrlService = useUrlService();\n\n    const onTextInputChange = (value: string): void => {\n        setUrl(value);\n    };\n\n    const hasUrl = (): boolean => {\n        return url != undefined && url.trim().length > 0;\n    };\n\n    const hasError = (): boolean => {\n        return downloadError != undefined && downloadError.trim().length > 0;\n    };\n\n    const onFetch = (): void => {\n        setLoading(true);\n        urlService.fetchUrlContent(url as string).then(content => {\n            setDownloadError(undefined);\n            setPreviewContent(content);\n            setLoading(false);\n            onChange(content, url);\n        }).catch(error => {\n            setDownloadError(error.message);\n            setLoading(false);\n        });\n    };\n\n    const onClear = (): void => {\n        setUrl(\"\");\n        setPreviewContent(\"\");\n        onChange(undefined, undefined);\n    };\n\n    const spinner: React.ReactNode = (\n        <div className=\"url-upload-loading\">\n            <Spinner size=\"md\" className=\"spinner\" />\n            <span className=\"spinner-message\">Loading URL content</span>\n        </div>\n    );\n\n    return (\n        <div className=\"url-upload\">\n            <div className=\"url-upload-flex\">\n                <div className=\"url-upload-url\">\n                    <TextInput value={url} type=\"text\" placeholder={urlPlaceholder}\n                               onChange={onTextInputChange} aria-label=\"url input\" />\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onFetch}>Fetch</Button>\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onClear}>Clear</Button>\n                </div>\n            </div>\n            <div className=\"url-upload-preview\">\n                <IsLoading condition={isLoading} loadingComponent={spinner}>\n                    <If condition={hasError}>\n                        <div className=\"url-upload-error\">\n                            <div>\n                                Error getting content from URL.\n                            </div>\n                            <div>\n                                {downloadError}\n                            </div>\n                        </div>\n                    </If>\n                    <If condition={!hasError()}>\n                        <TextArea value={previewContent} isReadOnly={true}></TextArea>\n                    </If>\n                </IsLoading>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./design-details-panel.css\";\nimport {Design} from \"@app/models\";\nimport {Tab, Tabs, TabTitleText} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, DateTime, DesignDescription} from \"@app/components\";\nimport {DesignEvents, DesignHistory, DesignOriginLabel} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignDetailsPanelProps = {\n    design: Design | undefined;\n};\n\n/**\n * Details panel with metadata and history about a single selected design.\n */\nexport const DesignDetailsPanel: FunctionComponent<DesignDetailsPanelProps> = ({design}: DesignDetailsPanelProps) => {\n\n    const [activeTabKey, setActiveTabKey] = useState<string>(\"details\");\n\n    return (\n        <React.Fragment>\n            <Tabs\n                activeKey={activeTabKey}\n                onSelect={(event, eventKey) => {setActiveTabKey(eventKey as string)}}\n                aria-label=\"Design panel detail tabs\"\n            >\n                <Tab eventKey=\"details\" title={<TabTitleText>Details</TabTitleText>}>\n                    <div className=\"design-details-grid\">\n                        <div className=\"design-details-label\">Description</div>\n                        <DesignDescription className=\"design-details-value\" description={design?.summary} />\n\n                        <div className=\"design-details-label\">Type</div>\n                        <div className=\"design-details-value\">\n                            <ArtifactTypeIcon type={design?.type as string} isShowLabel={true} isShowIcon={false} />\n                        </div>\n\n                        <div className=\"design-details-label\">Time created</div>\n                        <div className=\"design-details-value\"><DateTime date={design?.createdOn} /></div>\n\n                        <div className=\"design-details-label\">Time updated</div>\n                        <div className=\"design-details-value\"><DateTime date={design?.modifiedOn} /></div>\n\n                        <div className=\"design-details-label\">Origin</div>\n                        <div className=\"design-details-value\">\n                            <DesignOriginLabel design={design} />\n                        </div>\n                    </div>\n                </Tab>\n                <Tab eventKey=\"events\" title={<TabTitleText>Events</TabTitleText>}>\n                    <DesignEvents design={design as Design} />\n                </Tab>\n                <Tab eventKey=\"history\" title={<TabTitleText>History</TabTitleText>}>\n                    <DesignHistory design={design as Design} />\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-history.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport {DateTime, IfNotEmpty, IsLoading} from \"@app/components\";\nimport {DesignEventType} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignHistoryProps = {\n    design: Design;\n};\n\nexport const DesignHistory: FunctionComponent<DesignHistoryProps> = ({design}: DesignHistoryProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [events, setEvents] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setEvents(events);\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <IsLoading condition={isLoading}>\n            <IfNotEmpty collection={events}>\n                <div className=\"design-history\">\n                    {\n                        events?.map((event, idx) => (\n                            <React.Fragment key={idx}>\n                                <div key={`${idx}-type`} className=\"event-type\"><DesignEventType event={event} /></div>\n                                <div key={`${idx}-time`} className=\"event-time\"><DateTime date={event.on} /></div>\n                            </React.Fragment>\n                        ))\n                    }\n                </div>\n            </IfNotEmpty>\n        </IsLoading>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-events.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport {DateTime, If, IfNotEmpty, IsLoading, RegistryNavLink} from \"@app/components\";\nimport {DesignEventType, DesignOriginLabel} from \"@app/pages/components\";\nimport {hasOrigin} from \"@app/utils\";\nimport {Divider} from \"@patternfly/react-core\";\n\n\nexport type DesignEventsProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignEvents: FunctionComponent<DesignEventsProps> = ({design}: DesignEventsProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [exports, setExports] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    const originGroupId = (): string => {\n        return design?.origin?.rhosr?.groupId || \"default\";\n    };\n    const originArtifactId = (): string => {\n        return design?.origin?.rhosr?.artifactId || \"Unknown\";\n    };\n    const originVersion = (): string => {\n        return design?.origin?.rhosr?.version || \"latest\";\n    };\n    const originFilename = (): string => {\n        return design?.origin?.file?.fileName || \"\";\n    };\n    const originUrl = (): string => {\n        return design?.origin?.url?.url || \"\";\n    };\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setExports(events?.filter(event => event.type === \"download\" || event.type === \"register\"));\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <React.Fragment>\n            <div className=\"design-events-origin\">\n                <div className=\"design-events-origin-label\">Origin</div>\n                <div className=\"design-events-origin-value\">\n                    <DesignOriginLabel design={design} />\n                </div>\n\n                <div className=\"design-events-origin-label\">Time created</div>\n                <div className=\"design-events-origin-value\"><DateTime date={design?.createdOn} /></div>\n\n                <If condition={hasOrigin(design, \"rhosr\")}>\n                    <div className=\"design-events-origin-label\">Group</div>\n                    <div className=\"design-events-origin-value\">{originGroupId()}</div>\n\n                    <div className=\"design-events-origin-label\">ID</div>\n                    <div className=\"design-events-origin-value\">{originArtifactId()}</div>\n\n                    <div className=\"design-events-origin-label\">Version</div>\n                    <div className=\"design-events-origin-value\">{originVersion()}</div>\n\n                    <div className=\"design-events-origin-colspan\">\n                        <RegistryNavLink context={design?.origin}>View artifact in Service Registry</RegistryNavLink>\n                    </div>\n                </If>\n\n                <If condition={hasOrigin(design, \"file\")}>\n                    <div className=\"design-events-origin-label\">File name</div>\n                    <div className=\"design-events-origin-value\">{originFilename()}</div>\n                </If>\n\n                <If condition={hasOrigin(design, \"url\")}>\n                    <div className=\"design-events-origin-label\">URL</div>\n                    <div className=\"design-events-origin-value\">\n                        <a href={originUrl()}>{originUrl()}</a>\n                    </div>\n                </If>\n            </div>\n            <Divider className=\"design-events-divider\" />\n            <IsLoading condition={isLoading}>\n                <div className=\"design-events-origin-exports\">\n                    <div className=\"design-events-origin-exports-label\">Exported to</div>\n                    <div></div>\n\n                    <IfNotEmpty collection={exports} emptyState={(\n                        <span>This design has not been exported.</span>\n                    )}>\n                        {\n                            exports?.map((event, idx) => (\n                                <React.Fragment key={idx}>\n                                    <div key={`${idx}-type`} className=\"design-events-origin-exports-item\"><DesignEventType event={event} variant=\"short\" /></div>\n                                    <div key={`${idx}-time`} className=\"design-events-origin-exports-time\"><DateTime date={event.on} /></div>\n                                </React.Fragment>\n                            ))\n                        }\n                    </IfNotEmpty>\n                </div>\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {DesignEvent} from \"@app/models\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {RegistryNavLink} from \"@app/components\";\n\n\nexport type DesignEventTypeProps = {\n    event: DesignEvent;\n    variant?: \"long\" | \"short\";  // Default is \"long\"\n};\n\n\nexport const DesignEventType: FunctionComponent<DesignEventTypeProps> = ({event, variant}: DesignEventTypeProps) => {\n    const typeLabel = (): React.ReactNode => {\n        switch (event.type) {\n            case \"download\":\n                return variant === \"short\" ? <span>File</span> : <span>Downloaded to file system</span>;\n            case \"create\":\n                return variant === \"short\" ? <span>New</span> : <span>Created new design</span>;\n            case \"import\":\n                return importTypeLabel();\n            case \"register\":\n                return variant === \"short\" ? <span>Service Registry</span> : <span>Exported to Service Registry</span>;\n            case \"update\":\n                return variant === \"short\" ? <span>Edited</span> : <span>Modified using the editor</span>;\n        }\n    };\n\n    const importTypeLabel = (): React.ReactNode => {\n        const context: DesignContext = event.data.context;\n        switch (context.type) {\n            case \"file\":\n                return variant === \"short\" ? <span>File</span> : <span>{`Imported from file ${context.file?.fileName}`}</span>;\n            case \"rhosr\":\n                return variant === \"short\" ? <span>Service Registry</span> : (\n                    <React.Fragment>\n                        <span>Imported from Service Registry </span>\n                        <RegistryNavLink context={context}>\n                            <span>(Group: {context.rhosr?.groupId || \"default\"} </span>\n                            <span>ID: {context.rhosr?.artifactId} </span>\n                            <span>Version: {context.rhosr?.version || \"latest\"})</span>\n                        </RegistryNavLink>\n                    </React.Fragment>\n                );\n            case \"url\":\n                return variant === \"short\" ? <span>URL</span> : (\n                    <React.Fragment>\n                        <span>Imported from URL: </span>\n                        <a href={context.url?.url}>{context.url?.url}</a>\n                    </React.Fragment>\n                );\n        }\n        return <span>Imported content</span>;\n    };\n\n    return <React.Fragment children={typeLabel()} />\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Design} from \"@app/models\";\nimport {Label} from \"@patternfly/react-core\";\nimport {hasOrigin} from \"@app/utils\";\n\n\nexport type DesignOriginLabelProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignOriginLabel: FunctionComponent<DesignOriginLabelProps> = ({design}: DesignOriginLabelProps) => {\n\n    const label = (): string => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"File\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"Service Registry\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"URL\";\n            } else if (hasOrigin(design, \"create\")) {\n                return \"New design\";\n            }\n        }\n        return \"n/a\";\n    };\n\n    const color = (): \"blue\" | \"cyan\" | \"green\" | \"orange\" | \"purple\" | \"red\" | \"grey\" => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"purple\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"blue\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"green\";\n            }\n        }\n        return \"grey\";\n    };\n\n    return (\n        <Label color={color()}>{label()}</Label>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./editor-context.css\";\nimport {ArtifactTypes, Design, TestRegistryErrorResponse} from \"@app/models\";\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Dropdown,\n    DropdownItem,\n    DropdownSeparator,\n    DropdownToggle,\n    GalleryItem,\n    Text,\n    TextContent\n} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, DesignDescription, If, NavLink, RegistryNavLink, ToggleIcon} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {ExportToRhosrData, ExportToRhosrModal, TestRegistryModal} from \"@app/pages/components\";\nimport {AlertsService, LocalStorageService, useAlertsService, useLocalStorageService} from \"@app/services\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\n\n/**\n * Properties\n */\nexport type EditorContextProps = {\n    design: Design;\n    dirty: boolean;\n    artifactContent: string;\n    onSave: () => void;\n    onFormat: () => void;\n    onDelete: () => void;\n    onDownload: () => void;\n    onRename: () => void;\n    onCompareContent: () => void;\n    onExpandTestRegistryCausesPanel: (error: TestRegistryErrorResponse) => void;\n    onRegistrationTestRegistry: (registry: Registry, group: string | undefined, artifactId: string) => void;\n    isPanelOpen?: boolean;\n}\n\ntype EditorContextMenuItem = {\n    label?: string;\n    key: string;\n    isSeparator?: boolean;\n    accept?: (design: Design) => boolean;\n};\n\nconst menuActions: EditorContextMenuItem[] = [\n    {\n        label: \"Rename design\",\n        key: \"action-rename\",\n    },\n    {\n        label: \"Format content\",\n        key: \"action-format\",\n        accept: (design: Design) => { return [ArtifactTypes.AVRO, ArtifactTypes.JSON].includes(design.type); },\n    },\n    {\n        label: \"Show changes\",\n        key: \"action-compare\",\n    },\n    {\n        key: \"action-separator-1\",\n        isSeparator: true\n    },\n    {\n        label: \"Export to Service Registry\",\n        key: \"action-export-to-rhosr\",\n    },\n    {\n        label: \"Test using Service Registry\",\n        key: \"action-test-registry\"\n    },\n    {\n        label: \"Download design\",\n        key: \"action-download\"\n    },\n    {\n        key: \"action-separator-2\",\n        isSeparator: true\n    },\n    {\n        label: \"Delete design\",\n        key: \"action-delete\"\n    },\n];\n\n\n/**\n * The context of the design when editing a design on the editor page.\n */\nexport const EditorContext: FunctionComponent<EditorContextProps> = (\n    { design, dirty, onSave, onRegistrationTestRegistry, onFormat, onRename, onExpandTestRegistryCausesPanel, onDownload, onDelete, onCompareContent }: EditorContextProps) => {\n\n    const lss: LocalStorageService = useLocalStorageService();\n\n    const [designContext, setDesignContext] = useState<DesignContext>();\n    const [isActionMenuToggled, setActionMenuToggled] = useState(false);\n    const [isExpanded, setExpanded] = useState(lss.getConfigProperty(\"editor-context.isExpanded\", \"false\") === \"true\");\n    const [isRegisterModalOpen, setRegisterModalOpen] = useState(false);\n    const [isTestRegistryModalOpen, setIsTestRegistryModalOpen] = useState(false);\n\n    const alerts: AlertsService = useAlertsService();\n\n    const onActionMenuToggle = (value: boolean): void => {\n        setActionMenuToggled(value);\n    };\n\n    const onToggleExpand = (): void => {\n        const newExpanded: boolean = !isExpanded;\n        lss.setConfigProperty(\"editor-context.isExpanded\", \"\" + newExpanded);\n        setExpanded(newExpanded);\n    };\n\n    const actionMenuToggle: React.ReactNode = (\n        <DropdownToggle id=\"action-toggle\" toggleVariant=\"secondary\" onToggle={onActionMenuToggle}>Actions</DropdownToggle>\n    );\n\n    const onActionMenuSelect = (event?: React.SyntheticEvent<HTMLDivElement>): void => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setActionMenuToggled(false);\n        switch (action) {\n            case \"action-compare\":\n                onCompareContent();\n                return;\n            case \"action-export-to-rhosr\":\n                setRegisterModalOpen(true);\n                return;\n            case \"action-format\":\n                onFormat();\n                return;\n            case \"action-rename\":\n                onRename();\n                return;\n            case \"action-delete\":\n                onDelete();\n                return;\n            case \"action-download\":\n                onDownload();\n                return;\n            case \"action-test-registry\":\n                setIsTestRegistryModalOpen(true);\n                return;\n        }\n    };\n\n    const typeForDisplay = (): string => {\n        switch (design.type) {\n            case ArtifactTypes.OPENAPI:\n                return \"OpenAPI\";\n            case ArtifactTypes.ASYNCAPI:\n                return \"AsyncAPI\";\n            case ArtifactTypes.AVRO:\n                return \"Apache Avro\";\n            case ArtifactTypes.JSON:\n                return \"JSON Schema\";\n            case ArtifactTypes.PROTOBUF:\n                return \"Google Protocol Buffers\";\n        }\n        return \"N/A\";\n    };\n\n    const hasRhosrContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"rhosr\";\n    };\n\n    const hasFileContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"file\";\n    };\n\n    const hasUrlContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"url\";\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        alerts.designExportedToRhosr(event);\n    };\n\n    useEffect(() => {\n        if (design) {\n            const context: DesignContext|undefined = design.origin;\n            setDesignContext(context);\n        }\n    }, [design]);\n\n    const menuItems: any[] = menuActions.filter(action => !action.accept ? true : action.accept(design)).map(action => (\n        action.isSeparator ? (\n            <DropdownSeparator key={action.key} />\n        ) : (\n            <DropdownItem key={action.key} data-id={action.key}>{action.label}</DropdownItem>\n        )\n    ));\n\n    return (\n        <React.Fragment>\n            <TestRegistryModal isOpen={isTestRegistryModalOpen}\n                               design={design}\n                               onCancel={() => setIsTestRegistryModalOpen(false)}\n                               onSubmit={(...params) => {\n                                    onRegistrationTestRegistry(...params);\n                                    setIsTestRegistryModalOpen(false);\n                               }} />\n            <div className=\"editor-context\">\n                <div className=\"editor-context-breadcrumbs\">\n                    <Breadcrumb style={{ marginBottom: \"10px\" }}>\n                        <BreadcrumbItem component=\"button\">\n                            <NavLink location=\"/\">API and Schema Designs</NavLink>\n                        </BreadcrumbItem>\n                        <BreadcrumbItem isActive={true}>{design?.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                </div>\n                <div className=\"editor-context-last-modified\">\n                    <span>Last modified:</span>\n                    <Moment date={design.modifiedOn} fromNow={true} />\n                </div>\n                <div className=\"editor-context-actions\">\n                    <Dropdown\n                        onSelect={onActionMenuSelect}\n                        toggle={actionMenuToggle}\n                        style={{ zIndex: 1000 }}\n                        isOpen={isActionMenuToggled}\n                        isPlain\n                        dropdownItems={menuItems}\n                    />\n                </div>\n                <div className=\"editor-context-save\">\n                    <Button className=\"btn-save\" variant=\"primary\" onClick={onSave} isDisabled={!dirty}>Save</Button>\n                </div>\n                <div className=\"editor-context-toggle\">\n                    <Button className=\"btn-toggle\" variant=\"plain\" onClick={onToggleExpand}>\n                        <ToggleIcon expanded={isExpanded} onClick={() => { setExpanded(!isExpanded) }} />\n                    </Button>\n                </div>\n            </div>\n            <If condition={isExpanded}>\n                <div className=\"editor-context-details\">\n                    <TextContent>\n                        <Text component=\"h1\" className=\"title\">{design?.name}</Text>\n                        <DesignDescription className=\"summary\" description={design?.summary} />\n                    </TextContent>\n                    <div className=\"metadata\">\n                        <DescriptionList isHorizontal={true} isCompact={true}>\n                            <DescriptionListGroup>\n                                <DescriptionListTerm>Type</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                    <ArtifactTypeIcon type={design.type} isShowLabel={true} isShowIcon={true} />\n                                </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <If condition={hasRhosrContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Artifact</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <span className=\"group\">{designContext?.rhosr?.groupId || \"default\"}</span>\n                                        <span> / </span>\n                                        <RegistryNavLink context={designContext}>\n                                            <span className=\"group\">{designContext?.rhosr?.artifactId}</span>\n                                            <span> </span>\n                                            <span>(</span>\n                                            <span className=\"group\">{designContext?.rhosr?.version || \"latest\"}</span>\n                                            <span>)</span>\n                                        </RegistryNavLink>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                            <If condition={hasFileContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>File name</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <span>{designContext?.file?.fileName}</span>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                            <If condition={hasUrlContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>URL</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <a href={designContext?.url?.url}>{designContext?.url?.url}</a>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                        </DescriptionList>\n                    </div>\n                </div>\n            </If>\n            <ExportToRhosrModal design={design as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n        </React.Fragment>\n    );\n};\n","import {useRhosrService} from \"@app/services\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, TextInput} from \"@patternfly/react-core\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport React, {useEffect, useState} from \"react\";\nimport {Design} from \"@app/models\";\nimport {IsLoading, ObjectSelect} from \"@app/components\";\nimport {cloneObject} from \"@app/utils\";\n\n\nexport interface TestRegistryModalProps {\n\tdesign: Design;\n\tisOpen?: boolean;\n\tonCancel: () => void;\n\tonSubmit: (registry: Registry, groupId: string | undefined, artifactId: string) => void;\n}\n\ntype ValidatedValue = \"error\" | \"default\" | \"warning\" | \"success\" | undefined;\n\nconst initialFormState = {\n\thasErrors: false,\n\tgroupValue: {\n\t\tvalue: \"\",\n\t\tvalidated: \"default\" as ValidatedValue,\n\t\terrorMessage: \"\"\n\t},\n\tartifactIdValue: {\n\t\tvalue: \"\",\n\t\tvalidated: \"default\" as ValidatedValue,\n\t\terrorMessage: \"\"\n\t}\n}\n\nexport const TestRegistryModal: React.FunctionComponent<TestRegistryModalProps> = ({design, isOpen, onCancel, onSubmit}) => {\n\tconst [isLoadingRegistries, setLoadingRegistries] = useState(true);\n\tconst [registries, setRegistries] = useState<Registry[]>([]);\n\tconst [registry, setRegistry] = useState<Registry>();\n\tconst [formState, setFormState] = useState(initialFormState);\n\tconst [isValid, setValid] = useState(false);\n\n\tconst rhosr = useRhosrService();\n\n\tconst defaultRegistry = (registries: Registry[]): Registry | undefined => {\n\t\tif (design?.origin?.type === \"rhosr\" && design.origin.rhosr?.instanceId) {\n\t\t\tconst filtered: Registry[] = registries.filter(registry => registry.id === design.origin.rhosr?.instanceId);\n\t\t\tif (filtered && filtered.length > 0) {\n\t\t\t\treturn filtered[0];\n\t\t\t}\n\t\t}\n\t\treturn registries.length > 0 ? registries[0] : undefined;\n\t}\n\n\n\tuseEffect(() => {\n\t\tif (isOpen) {\n\t\t\tsetLoadingRegistries(true);\n\t\t\t// Get the list of registries.\n\t\t\trhosr.getRegistries().then(registries => {\n\t\t\t\tsetRegistries(registries.sort((a, b) => {\n\t\t\t\t\tconst name1: string = a.name as string;\n\t\t\t\t\tconst name2: string = b.name as string;\n\t\t\t\t\treturn name1.localeCompare(name2);\n\t\t\t\t}));\n\t\t\t\tsetRegistry(defaultRegistry(registries));\n\t\t\t\tsetLoadingRegistries(false);\n\t\t\t}).catch(error => {\n\t\t\t\t// TODO handle this error case\n\t\t\t\tconsole.error(\"[HomePage] Error getting registry list: \", error);\n\t\t\t});\n\t\t}\n\t}, [isOpen]);\n\n\tuseEffect(() => {\n\t\tif (isOpen && design && design.origin && design.origin.type === \"rhosr\") {\n\t\t\tconst state: any = cloneObject(initialFormState);\n\t\t\tstate.groupValue.value = design.origin.rhosr?.groupId as string\n\t\t\tstate.artifactIdValue.value = design.origin.rhosr?.artifactId as string;\n\t\t\tsetFormState(state);\n\t\t} else {\n\t\t\tsetFormState(initialFormState);\n\t\t}\n\t}, [isOpen]);\n\n\tuseEffect(() => {\n\t\tsetValid(formState.artifactIdValue.value !== undefined && formState.artifactIdValue.value.length > 0);\n\t}, [formState]);\n\n\tconst setGroupValue = (val: string) => {\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\tgroupValue: {\n\t\t\t\t...formState.groupValue,\n\t\t\t\tvalidated: \"default\",\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t});\n\t}\n\n\tconst setArtifactIdValue = (val: string) => {\n\t\tconst hasErrors = !val;\n\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\thasErrors,\n\t\t\tartifactIdValue: {\n\t\t\t\t...formState.artifactIdValue,\n\t\t\t\tvalidated: hasErrors ? \"error\" : \"default\",\n\t\t\t\terrorMessage: \"ID is a required field.\",\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t});\n\t}\n\n\treturn (\n\t\t<Modal\n\t\t\tvariant={ModalVariant.medium}\n\t\t\ttitle=\"Test using Service Registry\"\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onCancel}\n\t\t\tactions={[\n\t\t\t\t<Button key=\"confirm\" isDisabled={!isValid} variant=\"primary\" onClick={() => onSubmit(\n\t\t\t\t\tregistry as Registry,\n\t\t\t\t\tformState.groupValue.value,\n\t\t\t\t\tformState.artifactIdValue.value\n\t\t\t\t)}>\n\t\t\t\t\tTest\n\t\t\t\t</Button>,\n\t\t\t\t<Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t]}\n\t\t>\n\t\t\t<IsLoading condition={isLoadingRegistries}>\n\t\t\t\t<Form>\n\t\t\t\t\t<FormGroup\n\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\tlabel=\"Registry instance\"\n\t\t\t\t\t\tfieldId=\"test-in-registry-registry-instance\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ObjectSelect value={registry} items={registries} onSelect={setRegistry} itemToString={item => item.name} />\n\t\t\t\t\t</FormGroup>\n\t\t\t\t\t<FormGroup\n\t\t\t\t\t\tlabel=\"Group\"\n\t\t\t\t\t\tvalidated={formState.groupValue.validated}\n\t\t\t\t\t\thelperTextInvalid={formState.groupValue.errorMessage}\n\t\t\t\t\t\tfieldId=\"test-in-registry-group\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tid=\"test-in-registry-group\"\n\t\t\t\t\t\t\tvalue={formState.groupValue.value}\n\t\t\t\t\t\t\tplaceholder=\"Enter group (optional) or leave blank for default group\"\n\t\t\t\t\t\t\tonChange={setGroupValue} />\n\t\t\t\t\t</FormGroup>\n\t\t\t\t\t<FormGroup\n\t\t\t\t\t\tlabel=\"ID\"\n\t\t\t\t\t\tvalidated={formState.artifactIdValue.validated}\n\t\t\t\t\t\thelperTextInvalid={formState.artifactIdValue.errorMessage}\n\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\tfieldId=\"test-in-registry-artifactId\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tid=\"test-in-registry-artifactId\"\n\t\t\t\t\t\t\tplaceholder=\"Enter ID of artifact\"\n\t\t\t\t\t\t\tvalue={formState.artifactIdValue.value}\n\t\t\t\t\t\t\tonChange={setArtifactIdValue} />\n\t\t\t\t\t</FormGroup>\n\t\t\t\t</Form>\n\t\t\t</IsLoading>\n\t\t</Modal>\n\t);\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./compare-modal.css\";\nimport {Button, Modal, ToggleGroup, ToggleGroupItem} from \"@patternfly/react-core\";\nimport {EditorCompare} from \"@app/editors\";\nimport {editor} from \"monaco-editor\";\nimport IDiffEditorConstructionOptions = editor.IDiffEditorConstructionOptions;\n\n/**\n * Properties\n */\nexport type CompareModalProps = {\n    isOpen: boolean|undefined;\n    before: any;\n    after: any;\n    onClose: () => void;\n};\n\nexport const CompareModal: FunctionComponent<CompareModalProps> = ({isOpen, onClose, before, after}: CompareModalProps) => {\n    const [diffEditorContentOptions, setDiffEditorContentOptions] = useState({\n        renderSideBySide: true,\n        automaticLayout: true,\n        wordWrap: 'on',\n        readOnly: true,\n        inDiffEditor: true\n    } as IDiffEditorConstructionOptions)\n\n    const [isDiffInline, setIsDiffInline] = useState(false);\n    const [isDiffWrapped, setIsDiffWrapped] = useState(false);\n\n    const switchInlineCompare = () => {\n        setDiffEditorContentOptions({\n            ...diffEditorContentOptions as IDiffEditorConstructionOptions,\n            renderSideBySide: !diffEditorContentOptions.renderSideBySide\n        });\n        setIsDiffInline(!!diffEditorContentOptions.renderSideBySide);\n    }\n\n    const switchWordWrap = () => {\n        setDiffEditorContentOptions({\n            ...diffEditorContentOptions as IDiffEditorConstructionOptions,\n            wordWrap: diffEditorContentOptions.wordWrap == \"off\" ? \"on\" : \"off\"\n        });\n        setIsDiffWrapped(diffEditorContentOptions.wordWrap != \"on\");\n    }\n\n    return (\n        <Modal id=\"compare-modal\"\n               isOpen={isOpen}\n               onClose={onClose}\n               actions={[\n                   <Button key=\"cancel\" variant=\"link\" onClick={onClose}>\n                       Cancel\n                   </Button>\n               ]}>\n            <div className=\"compare-view\">\n                <ToggleGroup className=\"compare-toggle-group\"\n                             aria-label=\"Compare view toggle group\">\n                    <ToggleGroupItem text=\"Inline diff\" key={1} buttonId=\"second\"\n                                     isSelected={isDiffInline}\n                                     onChange={switchInlineCompare}/>\n                    <ToggleGroupItem text=\"Wrap Text\" key={0} buttonId=\"first\"\n                                     isSelected={isDiffWrapped}\n                                     onChange={switchWordWrap}/>\n\n                </ToggleGroup>\n                <div className=\"compare-editor\">\n                    <EditorCompare before={before}\n                                   after={after}\n                                   contentOptions={diffEditorContentOptions} />\n                </div>\n            </div>\n        </Modal>\n\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, SelectVariant, Spinner, TextInput} from \"@patternfly/react-core\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    DesignsService,\n    RhosrInstanceService,\n    RhosrInstanceServiceFactory,\n    RhosrService,\n    useDesignsService,\n    useRhosrInstanceServiceFactory,\n    useRhosrService\n} from \"@app/services\";\nimport {If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {CreateOrUpdateArtifactData} from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\nexport type ExportToRhosrData = {\n    registry: Registry;\n    design: Design;\n    context: DesignContext;\n};\n\nexport type ExportToRhosrModalProps = {\n    design: Design;\n    isOpen: boolean | undefined;\n    onExported: (event: ExportToRhosrData) => void;\n    onCancel: () => void;\n}\n\n\nexport const ExportToRhosrModal: FunctionComponent<ExportToRhosrModalProps> = (\n    {design, isOpen, onExported, onCancel}: ExportToRhosrModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [isExporting, setExporting] = useState(false);\n    const [isLoadingRegistries, setLoadingRegistries] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [registry, setRegistry] = useState<Registry>();\n    const [group, setGroup] = useState<string>();\n    const [artifactId, setArtifactId] = useState<string>();\n    const [version, setVersion] = useState<string>();\n    const [rhosrInstance, setRhosrInstance] = useState<RhosrInstanceService>();\n\n    const designs: DesignsService = useDesignsService();\n    const rhosr: RhosrService = useRhosrService();\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    // Called when the user clicks \"export\"\n    const doExport = () => {\n        setExporting(true);\n        designs.getDesignContent(design.id).then(content => {\n            const data: CreateOrUpdateArtifactData = {\n                type: design.type,\n                groupId: group,\n                id: artifactId,\n                version: version,\n                content: content.data,\n                contentType: content.contentType\n            };\n            rhosrInstance?.createOrUpdateArtifact(data).then(amd => {\n                const context: DesignContext = {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: amd.groupId as string,\n                        artifactId: amd.id,\n                        version: amd.version\n                    }\n                };\n                const data: ExportToRhosrData = {\n                    registry: registry as Registry,\n                    design,\n                    context\n                };\n\n                const event: DesignEvent = {\n                    id: design.id,\n                    type: \"register\",\n                    on: new Date(),\n                    data: context.rhosr\n                };\n\n                // Create an event (add to the design's history).\n                designs.createEvent(event).then(() => {\n                    setExporting(false);\n                    onExported(data);\n                }).catch(error => {\n                    // TODO error handling\n                });\n            }).catch(error => {\n                // TODO error handling\n            });\n        }).catch(error => {\n            // TODO error handling\n        });\n    };\n\n    const onRegistrySelect = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    const defaultRegistry = (registries: Registry[]): Registry | undefined => {\n        if (design?.origin?.type === \"rhosr\" && design.origin.rhosr?.instanceId) {\n            const filtered: Registry[] = registries.filter(registry => registry.id === design.origin.rhosr?.instanceId);\n            if (filtered && filtered.length > 0) {\n                return filtered[0];\n            }\n        }\n        return registries.length > 0 ? registries[0] : undefined;\n    }\n\n    useEffect(() => {\n        if (isOpen) {\n            setLoadingRegistries(true);\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                setRegistry(defaultRegistry(registries));\n                setLoadingRegistries(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[ExportToRhosrModal] Error getting registry list: \", error);\n                setRegistries([]);\n                setLoadingRegistries(false);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        if (design && design.origin && design.origin.type === \"rhosr\") {\n            const context: DesignContext = design.origin;\n            setGroup(context.rhosr?.groupId);\n            setArtifactId(context.rhosr?.artifactId);\n            setVersion(context.rhosr?.version);\n        } else {\n            setGroup(undefined);\n            setArtifactId(undefined);\n            setVersion(undefined);\n        }\n    }, [design]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!registry) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [registry, group, artifactId, version]);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    let actions: any[] = registries.length === 0 ? [] : [\n        <Button key=\"export\" variant=\"primary\" isDisabled={!isValid || isExporting} onClick={doExport}>\n            <If condition={isExporting}>\n                <Spinner size=\"md\" className=\"export-spinner\" />\n            </If>\n            Export\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n            Cancel\n        </Button>\n    ];\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Export to Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={actions}\n        >\n            <IsLoading condition={isLoadingRegistries}>\n                <Form>\n                    <FormGroup label=\"Registry Instance\" isRequired={true} fieldId=\"export-registry-instance\">\n                        <ObjectSelect value={registry}\n                                      items={registries}\n                                      onSelect={onRegistrySelect}\n                                      variant={SelectVariant.single}\n                                      menuAppendTo=\"parent\"\n                                      itemToString={item => item.name} />\n                    </FormGroup>\n                    <FormGroup label=\"Group\" isRequired={false} fieldId=\"export-group\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-group\"\n                            name=\"export-group\"\n                            placeholder=\"Enter group (optional) or leave blank for default group\"\n                            aria-describedby=\"export-group-helper\"\n                            value={group}\n                            onChange={(value) => setGroup(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"ID\" isRequired={false} fieldId=\"export-artifact-id\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-artifact-id\"\n                            name=\"export-artifact-id\"\n                            placeholder=\"Enter ID (optional) or leave blank for generated ID\"\n                            aria-describedby=\"export-artifact-id-helper\"\n                            value={artifactId}\n                            onChange={(value) => setArtifactId(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Version\" isRequired={false} fieldId=\"export-version\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-version\"\n                            name=\"export-version\"\n                            placeholder=\"Enter version (optional) or leave blank for generated version number\"\n                            aria-describedby=\"export-version-helper\"\n                            value={version}\n                            onChange={(value) => setVersion(value)}\n                        />\n                    </FormGroup>\n                </Form>\n            </IsLoading>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {Design} from \"@app/models\";\n\nexport type RenameData = {\n    name: string;\n    summary: string;\n};\n\nexport type RenameModalProps = {\n    design: Design|undefined;\n    isOpen: boolean | undefined;\n    onRename: (event: RenameData) => void;\n    onCancel: () => void;\n}\n\n\nexport const RenameModal: FunctionComponent<RenameModalProps> = (\n    {design, isOpen, onRename, onCancel}: RenameModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState<string>();\n    const [summary, setSummary] = useState<string>();\n\n    // Called when the user clicks \"edit\"\n    const doRename = () => {\n        onRename({\n            name: name as string,\n            summary: summary as string\n        });\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setName(design?.name);\n            setSummary(design?.summary);\n        }\n    }, [isOpen]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Rename design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"edit\" variant=\"primary\" isDisabled={!isValid} onClick={doRename}>Save</Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>Cancel</Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"edit-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"edit-name\"\n                        name=\"edit-name\"\n                        placeholder=\"Enter new name for design\"\n                        aria-describedby=\"edit-name-helper\"\n                        value={name}\n                        onChange={(value) => setName(value)}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"edit-description\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"edit-description\"\n                        name=\"edit-description\"\n                        aria-describedby=\"edit-description-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value)}}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    )\n};\n","import { Auth, useAuth } from \"@rhoas/app-services-ui-shared\";\nimport {\n    ArtifactMetaData,\n    ArtifactSearchResults,\n    ContentTypes,\n    CreateArtifactData,\n    CreateVersionData,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedVersion,\n    VersionMetaData\n} from \"@app/models\";\nimport { createEndpoint, createHref, createOptions, httpGet, httpPut, httpPostWithReturn } from \"@app/utils/rest.utils\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { isJson, isXml, isYaml } from \"@app/utils\";\nimport { CreateOrUpdateArtifactData } from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\n\n/**\n * Determines the content type of the given content.\n * @param type\n * @param content\n */\nfunction determineContentType(type: string, content: string): string {\n    switch (type) {\n        case \"PROTOBUF\":\n            return ContentTypes.APPLICATION_PROTOBUF;\n        case \"WSDL\":\n        case \"XSD\":\n        case \"XML\":\n            return ContentTypes.APPLICATION_XML;\n        case \"GRAPHQL\":\n            return ContentTypes.APPLICATION_GRAPHQL;\n    }\n    if (isJson(content)) {\n        return ContentTypes.APPLICATION_JSON;\n    } else if (isXml(content)) {\n        return ContentTypes.APPLICATION_XML;\n    } else if (isYaml(content)) {\n        return ContentTypes.APPLICATION_YAML;\n    } else {\n        return \"application/octet-stream\";\n    }\n}\n\n\nfunction normalizeGroupId(groupId: string | undefined): string {\n    return groupId || \"default\";\n}\n\n\nasync function createArtifact(auth: Auth, basePath: string, data: CreateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts\", { groupId: data.groupId });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function createOrUpdateArtifact(auth: Auth, basePath: string, data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath,\n        \"/groups/:groupId/artifacts\",\n        { groupId: data.groupId || \"default\" },\n        { ifExists: \"UPDATE\" }\n    );\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    if (data.version) {\n        headers[\"X-Registry-Version\"] = data.version;\n    }\n    headers[\"Content-Type\"] = data.contentType;\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n};\n\n\nasync function createArtifactVersion(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId: groupId || \"default\",\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, VersionMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function getArtifacts(auth: Auth, basePath: string, criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults> {\n    console.debug(\"[RhosrInstanceService] Getting artifacts: \", criteria, paging);\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const start: number = (paging.page - 1) * paging.pageSize;\n    const end: number = start + paging.pageSize;\n    const queryParams: any = {\n        limit: end,\n        offset: start,\n        order: criteria.sortAscending ? \"asc\" : \"desc\",\n        orderby: \"name\"\n    };\n    if (criteria.value) {\n        if (criteria.type == \"everything\") {\n            queryParams[\"name\"] = criteria.value;\n            queryParams[\"description\"] = criteria.value;\n            queryParams[\"labels\"] = criteria.value;\n        } else {\n            queryParams[criteria.type] = criteria.value;\n        }\n    }\n    const endpoint: string = createEndpoint(basePath, \"/search/artifacts\", {}, queryParams);\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<ArtifactSearchResults>(endpoint, createOptions(headers), (data) => {\n        const results: ArtifactSearchResults = {\n            artifacts: data.artifacts,\n            count: data.count,\n            page: paging.page,\n            pageSize: paging.pageSize\n        };\n        return results;\n    });\n}\n\n\nasync function getArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, version: string): Promise<string> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    let endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions/:version\", {\n        groupId,\n        artifactId,\n        version\n    });\n    const headers: any = {\n        \"Accept\": \"*\",\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (version === \"latest\") {\n        endpoint = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId\", { groupId, artifactId });\n    }\n\n    const options: any = createOptions(headers);\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\nasync function getArtifactVersions(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Getting the list of versions for artifact: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId,\n        artifactId\n    }, {\n        limit: 500,\n        offset: 0\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<SearchedVersion[]>(endpoint, createOptions(headers), (data) => {\n        return data.versions;\n    });\n}\n\nasync function testUpdateArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, content: string): Promise<void> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Testing updating of artifact content: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/test\", {\n        groupId,\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpPut<any>(endpoint, content, createOptions(headers));\n}\n\n\n/**\n * The RHOSR Instance service interface.\n */\nexport interface RhosrInstanceService {\n    createArtifact(data: CreateArtifactData): Promise<ArtifactMetaData>;\n    createArtifactVersion(groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData>;\n    createOrUpdateArtifact(data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData>;\n    getArtifacts(criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults>;\n    getArtifactContent(groupId: string | undefined, artifactId: string, version: string): Promise<string>;\n    getArtifactVersions(groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]>;\n    testUpdateArtifactContent(groupId: string | undefined, artifactId: string, content: string): Promise<void>;\n}\n\n/**\n * Factory for creating RHOSR instance services.\n */\nexport interface RhosrInstanceServiceFactory {\n    createFor(registry: Registry): RhosrInstanceService;\n}\n\n\n/**\n * React hook to get the RHOSR instance service.\n */\nexport const useRhosrInstanceServiceFactory: () => RhosrInstanceServiceFactory = (): RhosrInstanceServiceFactory => {\n    const auth: Auth = useAuth();\n\n    return {\n        createFor: (registry) => {\n            const instanceUrl: string = createHref(registry.registryUrl as string, \"/apis/registry/v2\");\n            return {\n                createArtifact: (data) => createArtifact(auth, instanceUrl, data),\n                createArtifactVersion: (groupId, artifactId, data) => createArtifactVersion(auth, instanceUrl, groupId, artifactId, data),\n                createOrUpdateArtifact: (data: CreateOrUpdateArtifactData) => createOrUpdateArtifact(auth, instanceUrl, data),\n                getArtifacts: (criteria, paging) => getArtifacts(auth, instanceUrl, criteria, paging),\n                getArtifactContent: (groupId, artifactId, version) => getArtifactContent(auth, instanceUrl, groupId, artifactId, version),\n                getArtifactVersions: (groupId, artifactId) => getArtifactVersions(auth, instanceUrl, groupId, artifactId),\n                testUpdateArtifactContent: (groupId, artifactId, content) => testUpdateArtifactContent(auth, instanceUrl, groupId, artifactId, content)\n\n            };\n        }\n    };\n};\n","import {\n    CreateDesign,\n    CreateDesignContent,\n    Design,\n    DesignContent,\n    DesignEvent,\n    DesignsSearchCriteria,\n    DesignsSearchResults,\n    DesignsSort,\n    Paging\n} from \"@app/models\";\nimport Dexie from \"dexie\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {cloneObject, limit} from \"@app/utils\";\n\n\nconst db = new Dexie(\"designsDB\");\ndb.version(4).stores({\n    designs: \"++id, type, name, createdOn, modifiedOn\", // Primary key and indexed props\n    content: \"++id\",\n    events: \"++eventId, id, type, on\"\n});\n\n\nasync function createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design> {\n    const id: string = uuidv4();\n    const newDesign: Design = {\n        id,\n        name: limit(cd.name, 64) as string,\n        summary: limit(cd.summary, 256),\n        type: cd.type,\n        createdOn: new Date(),\n        modifiedOn: new Date(),\n        origin: cloneObject(cd.context)\n    };\n    const newDesignContent: DesignContent = {\n        id,\n        contentType: cdc.contentType,\n        data: cdc.data\n    };\n    const newEvent: DesignEvent = {\n        id,\n        type: \"create\",\n        on: new Date(),\n        data: {}\n    };\n    if (cd.context) {\n        newEvent.data.context = cloneObject(cd.context);\n        if (cd.context.type !== \"create\") {\n            newEvent.type = \"import\";\n        }\n    }\n    // Make sure the ID is properly set always.\n    newEvent.id = id;\n\n    return Promise.all([\n        // @ts-ignore\n        db.designs.add(newDesign),\n        // @ts-ignore\n        db.content.add(newDesignContent),\n        createEvent(newEvent)\n    ]).then(() => newDesign);\n}\n\nasync function getDesigns(): Promise<Design[]> {\n    // @ts-ignore\n    return db.designs.toArray();\n}\n\nasync function searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults> {\n    console.debug(\"[DesignsService] Searching for designs: \", criteria, paging);\n    const accept = (design: Design): boolean => {\n        let matches: boolean = false;\n        if (!criteria.filterValue || criteria.filterValue.trim().length === 0) {\n            matches = true;\n        } else if (design.name.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.summary && design.summary.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.type.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        }\n        return matches;\n    };\n\n    return getDesigns().then(designs => {\n        // TODO Explore whether we can use dexie to filter and page the results.\n\n        // filter and sort the results\n        const filteredDesigns: Design[] = designs.filter(accept).sort((design1, design2) => {\n            let rval: number = sort.by === \"name\" ? (\n                design1.name.localeCompare(design2.name)\n            ) : (\n                design1.modifiedOn.getTime() - design2.modifiedOn.getTime()\n            );\n            if (sort.direction !== \"asc\") {\n                rval *= -1;\n            }\n            return rval;\n        });\n        // get the total count\n        const totalCount: number = filteredDesigns.length;\n        // get the subset of results based on paging\n        const start: number = (paging.page - 1) * paging.pageSize;\n        const end: number = start + paging.pageSize;\n        const pagedDesigns: Design[] = filteredDesigns.slice(start, end);\n        return {\n            designs: pagedDesigns,\n            page: paging.page,\n            pageSize: paging.pageSize,\n            count: totalCount\n        }\n    });\n}\n\n\nasync function getDesign(id: string): Promise<Design> {\n    // @ts-ignore\n    return db.designs.where(\"id\").equals(id).first();\n}\n\nasync function deleteDesign(id: string): Promise<void> {\n    return Promise.all([\n        // @ts-ignore\n        db.designs.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.content.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.events.where(\"id\").equals(id).delete(),\n    ]).then(r => {});\n}\n\nasync function renameDesign(id: string, newName: string, newSummary?: string): Promise<void> {\n    // @ts-ignore\n    return db.designs.update(id, {\n        name: limit(newName, 64) as string,\n        summary: limit(newSummary, 256),\n    });\n}\n\nasync function getDesignContent(id: string): Promise<DesignContent> {\n    // @ts-ignore\n    return db.content.where(\"id\").equals(id).first();\n}\n\nasync function updateDesignContent(content: DesignContent): Promise<void> {\n    const newEvent: DesignEvent = {\n        id: content.id,\n        type: \"update\",\n        on: new Date(),\n        data: {}\n    };\n\n    return Promise.all([\n        // @ts-ignore\n        db.content.update(content.id, {\n            data: content.data\n        }),\n        // @ts-ignore\n        db.designs.update(content.id, {\n            modifiedOn: new Date()\n        }),\n        createEvent(newEvent)\n    ]).then(() => {});\n}\n\n\nasync function getEvents(id: string): Promise<DesignEvent[]> {\n    // @ts-ignore\n    return db.events.where(\"id\").equals(id).reverse().sortBy(\"on\");\n}\n\n\nasync function createEvent(event: DesignEvent): Promise<void> {\n    event.eventId = uuidv4();\n    // @ts-ignore\n    return db.events.add(event);\n}\n\n\n/**\n * The Designs Service interface.\n */\nexport interface DesignsService {\n    createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design>;\n    getDesigns(): Promise<Design[]>;\n    getDesign(id: string): Promise<Design>;\n    searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults>;\n    deleteDesign(id: string): Promise<void>;\n    renameDesign(id: string, newName: string, newSummary?: string): Promise<void>;\n    getDesignContent(id: string): Promise<DesignContent>;\n    updateDesignContent(content: DesignContent): Promise<void>;\n    getEvents(id: string): Promise<DesignEvent[]>;\n    createEvent(event: DesignEvent): Promise<void>;\n}\n\n\n/**\n * React hook to get the Designs service.\n */\nexport const useDesignsService: () => DesignsService = (): DesignsService => {\n    return {\n        createDesign,\n        getDesigns,\n        searchDesigns,\n        getDesign,\n        deleteDesign,\n        renameDesign,\n        getDesignContent,\n        updateDesignContent,\n        getEvents,\n        createEvent\n    };\n};\n","import {ContentTypes, Template} from \"@app/models\";\nimport ASYNCAPI_2_BLANK from \"./asyncapi/asyncapi-2-blank.json\";\nimport ASYNCAPI_2_STREETLIGHTS from \"./asyncapi/asyncapi-2-streetlights.json\";\n\nexport const ASYNCAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"asyncapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_BLANK\n        }\n    },\n    {\n        id: \"asyncapi_2_streetlights\",\n        name: \"Street Lights Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_STREETLIGHTS\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport OPENAPI_3_BLANK from \"./openapi/openapi-3-blank.json\";\nimport OPENAPI_3_PETSTORE from \"./openapi/openapi-3-petstore.json\";\nimport OPENAPI_3_USPTO from \"./openapi/openapi-3-uspto.json\";\nimport OPENAPI_2_BLANK from \"./openapi/openapi-2-blank.json\";\nimport OPENAPI_2_PETSTORE from \"./openapi/openapi-2-petstore.json\";\n\n\nexport const OPENAPI_3_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_3_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_BLANK\n        }\n    },\n    {\n        id: \"openapi_3_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_PETSTORE\n        }\n    },\n    {\n        id: \"openapi_3_uspto\",\n        name: \"USPTO Dataset API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_USPTO\n        }\n    }\n]\n\nexport const OPENAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_BLANK\n        }\n    },\n    {\n        id: \"openapi_2_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_PETSTORE\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport JSON_BLANK from \"./json/json-blank.json\";\n\nexport const JSON_TEMPLATES: Template[] = [\n    {\n        id: \"json_blank\",\n        name: \"Blank JSON Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: JSON_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport AVRO_BLANK from \"./avro/avro-blank.json\";\n\nexport const AVRO_TEMPLATES: Template[] = [\n    {\n        id: \"avro_blank\",\n        name: \"Blank Avro Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: AVRO_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport PROTOBUF_BLANK from \"./protobuf/protobuf-blank.json\";\n\nexport const PROTOBUF_TEMPLATES: Template[] = [\n    {\n        id: \"protobuf_blank\",\n        name: \"Blank Protobuf Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            data: PROTOBUF_BLANK.template\n        }\n    }\n]\n","import {Template} from \"@app/models/templates/template.model\";\nimport {\n    ASYNCAPI_2_TEMPLATES,\n    AVRO_TEMPLATES,\n    JSON_TEMPLATES,\n    OPENAPI_2_TEMPLATES,\n    OPENAPI_3_TEMPLATES,\n    PROTOBUF_TEMPLATES\n} from \"@app/services/_templates\";\nimport {ArtifactTypes} from \"@app/models\";\n\n\nasync function getTemplatesFor(type: string, version?: string): Promise<Template[]> {\n    if (type === ArtifactTypes.AVRO) {\n        return Promise.resolve(AVRO_TEMPLATES);\n    }\n    if (type === ArtifactTypes.PROTOBUF) {\n        return Promise.resolve(PROTOBUF_TEMPLATES);\n    }\n    if (type === ArtifactTypes.JSON) {\n        return Promise.resolve(JSON_TEMPLATES);\n    }\n    if (type === ArtifactTypes.ASYNCAPI) {\n        return Promise.resolve(ASYNCAPI_2_TEMPLATES);\n    }\n    if (type === ArtifactTypes.OPENAPI) {\n        if (version && version.startsWith(\"3\")) {\n            return Promise.resolve(OPENAPI_3_TEMPLATES);\n        } else {\n            return Promise.resolve(OPENAPI_2_TEMPLATES);\n        }\n    }\n    return Promise.reject(`No templates found for type ${type} and version ${version}.`);\n}\n\n\n/**\n * The Templates Service interface.\n */\nexport interface TemplatesService {\n    getTemplatesFor(type: string, version?: string): Promise<Template[]>;\n}\n\n\n/**\n * React hook to get the Templates service.\n */\nexport const useTemplatesService: () => TemplatesService = (): TemplatesService => {\n    return {\n        getTemplatesFor\n    };\n};\n","/**\n * Downloads the given content to the filesystem using the given content type and\n * file name.\n * @param content\n * @param contentType\n * @param filename\n */\nimport {DesignsService, useDesignsService} from \"@app/services/designs\";\nimport {Design, DesignEvent} from \"@app/models\";\n\n\nasync function downloadToFS(designsSvc: DesignsService, design: Design, content: string, contentType: string, filename: string): Promise<void> {\n    console.info(\"[DownloadService] Downloading a design.\");\n    const _w: any = window;\n\n    if (_w.chrome !== undefined) {\n        // Chrome version\n        let link = document.createElement('a');\n        let blob = new Blob([content], { type: contentType });\n        link.href = _w.URL.createObjectURL(blob);\n        link.download = filename;\n        link.click();\n    } else if (_w.navigator !== undefined && _w.navigator.msSaveBlob !== undefined) {\n        // IE version\n        let blob = new Blob([content], { type: contentType });\n        _w.navigator.msSaveBlob(blob, filename);\n    } else {\n        // Firefox version\n        let file = new File([content], filename, { type: 'application/force-download' });\n        _w.open(URL.createObjectURL(file));\n    }\n\n    // Create an event for this download\n    const event: DesignEvent = {\n        id: design.id,\n        type: \"download\",\n        on: new Date(),\n        data: {\n            filename\n        }\n    };\n    designsSvc.createEvent(event);\n}\n\n\n/**\n * The Download Service interface.\n */\nexport interface DownloadService {\n    downloadToFS(design: Design, content: string, contentType: string, filename: string): Promise<void>;\n}\n\n\n/**\n * React hook to get the Download service.\n */\nexport const useDownloadService: () => DownloadService = (): DownloadService => {\n    // Note: inject the designs services so that events can be created.\n    const designsSvc: DesignsService = useDesignsService();\n    return {\n        downloadToFS: (design: Design, content: string, contentType: string, filename: string): Promise<void> => {\n            return downloadToFS(designsSvc, design, content, contentType, filename);\n        }\n    };\n};\n","import {createOptions, httpGet} from \"@app/utils\";\n\nconst githubRegex: RegExp = /^https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/blob\\/([^\\/]+)\\/(.+)$/;\n\n\nasync function fetchUrlContent(url: string): Promise<string> {\n    const match: RegExpMatchArray | null = url.match(githubRegex);\n    if (match !== null) {\n        const org: string = match[1];\n        const repo: string = match[2];\n        const branch: string = match[3];\n        const path: string = match[4];\n\n        url = `https://raw.githubusercontent.com/${org}/${repo}/${branch}/${path}`;\n    }\n\n    console.info(\"[UrlService] Fetching content from a URL: \", url);\n\n    let endpoint: string = url;\n    const options: any = createOptions({\n        \"Accept\": \"*\"\n    });\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\n/**\n * The URL Service interface.\n */\nexport interface UrlService {\n    fetchUrlContent(url: string): Promise<string>;\n}\n\n\n/**\n * React hook to get the URL service.\n */\nexport const useUrlService: () => UrlService = (): UrlService => {\n    return {\n        fetchUrlContent\n    };\n};\n","import {AlertVariant, useAlert} from \"@rhoas/app-services-ui-shared\";\nimport {Design} from \"@app/models\";\nimport {ExportToRhosrData, RenameData} from \"@app/pages/components\";\nimport React from \"react\";\nimport {RegistryNavLink} from \"@app/components\";\n\n\nexport interface AlertsService {\n    designDeleted(design: Design): void;\n    designDeleteFailed(design: Design, error: any): void;\n    designSaved(design: Design): void;\n    designRenamed(event: RenameData): void;\n    designExportedToRhosr(event: ExportToRhosrData): void;\n}\n\n\n/**\n * React hook to get the Alerts service.\n */\nexport const useAlertsService: () => AlertsService = (): AlertsService => {\n    const { addAlert } = useAlert() || {};\n\n    return {\n        designDeleted(design: Design): void {\n            addAlert({\n                title: \"Delete successful\",\n                description: `Design '${design.name}' was successfully deleted.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-deleted\"\n            });\n        },\n\n        designDeleteFailed(design: Design, error: any): void {\n            addAlert({\n                title: \"Delete failed\",\n                description: `Failed to delete design '${design.name}'.  ${error}`,\n                variant: AlertVariant.danger,\n                dataTestId: \"toast-design-delete-error\"\n            });\n        },\n\n        designRenamed(event: RenameData): void {\n            addAlert({\n                title: \"Details successfully changed\",\n                description: `Details (name, summary) of design '${event.name}' were successfully changed.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-renamed\"\n            });\n        },\n\n        designSaved(design: Design): void {\n            addAlert({\n                title: \"Save successful\",\n                description: `Design '${design?.name}' was successfully saved.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-saved\"\n            });\n        },\n\n        designExportedToRhosr(event: ExportToRhosrData): void {\n            const description: React.ReactNode = (\n                <React.Fragment>\n                    <div>{`Design '${event.design.name}' was successfully exported to Service Registry.`}</div>\n                    <RegistryNavLink registry={event.registry} context={event.context}>View artifact in Service Registry</RegistryNavLink>\n                </React.Fragment>\n            );\n\n            addAlert({\n                title: \"Export successful\",\n                description,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-registered\"\n            });\n        },\n    };\n};\n","\nfunction setConfigProperty(propertyName: string, propertyValue: string | object): void {\n    console.info(`[LocalStorageService] Setting config property ${propertyName} to value ${propertyValue}.`);\n    const value: string = typeof propertyValue === \"string\" ? propertyValue as string : JSON.stringify(propertyValue);\n    localStorage.setItem(\"apicurio-studio.\" + propertyName, value);\n}\n\nfunction getConfigProperty(propertyName: string, defaultValue: string | object | undefined): string | object | undefined {\n    console.info(`[LocalStorageService] Getting config property ${propertyName}`);\n    const value: string|null = localStorage.getItem(\"apicurio-studio.\" + propertyName);\n    if (!value) {\n        return defaultValue;\n    }\n    if (value.startsWith(\"{\")) {\n        return JSON.parse(value);\n    }\n    return value as string;\n}\n\nfunction clearConfigProperty(propertyName: string): void {\n    console.info(`[LocalStorageService] Clearing config property ${propertyName}`);\n    localStorage.removeItem(propertyName)\n}\n\n/**\n * The Local Storage Service interface.\n */\nexport interface LocalStorageService {\n    setConfigProperty(propertyName: string, propertyValue: string | object): void;\n    getConfigProperty(propertyName: string, defaultValue: string | object | undefined): string | object | undefined;\n    clearConfigProperty(propertyName: string);\n}\n\n\n/**\n * React hook to get the LocalStorage service.\n */\nexport const useLocalStorageService: () => LocalStorageService = (): LocalStorageService => {\n    return {\n        setConfigProperty,\n        getConfigProperty,\n        clearConfigProperty\n    };\n};\n","import {Configuration, Registry, RegistriesApi, RegistryList} from '@rhoas/registry-management-sdk';\nimport {Auth, useAuth, Config, useConfig} from \"@rhoas/app-services-ui-shared\";\nimport {LocalStorageService, useLocalStorageService} from \"@app/services/local-storage\";\n\nconst RHOSR_MOCK_DATA: Registry[] = [\n    {\n        id: \"1\",\n        name: \"Local Registry 1 (localhost:8081)\",\n        registryUrl: \"http://localhost:8081/\",\n        browserUrl: \"http://localhost:8081/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"2\",\n        name: \"Local Registry 2 (localhost:8082)\",\n        registryUrl: \"http://localhost:8082/\",\n        browserUrl: \"http://localhost:8082/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n];\n\nconst RHOSR_MOCK_DATA_OF: Registry[] = [\n    {\n        id: \"101\",\n        name: \"Operate First Registry 1\",\n        registryUrl: \"http://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/\",\n        browserUrl: \"http://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"201\",\n        name: \"Operate First Registry 2\",\n        registryUrl: \"http://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/\",\n        browserUrl: \"http://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n];\n\n\n/**\n * Async function to get the RHOSR instances.  Uses a provided auth token and API\n * base path to create a RHOSR SDK instance.\n * @param auth the application auth\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistries(auth: Auth, basePath: string): Promise<Registry[]> {\n    console.debug(\"[RhosrService] Getting a list of registries from: \", basePath);\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistries().then(res => {\n        const registries: RegistryList = res?.data;\n        return registries.items;\n    });\n}\n\n/**\n * Gets information about a single registry instances by its unique ID.\n * @param auth the application auth\n * @param local the local storage service\n * @param id the registry instance ID\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistry(auth: Auth, local: LocalStorageService, id: string, basePath: string): Promise<Registry> {\n    console.debug(\"[RhosrService] Getting a single registry from: \", basePath);\n    const cacheKey: string = `services.rhosr.getRegistry.${id}`;\n    const cachedRegistry: Registry | undefined = local.getConfigProperty(cacheKey, undefined) as Registry | undefined;\n\n    if (cachedRegistry) {\n        // TODO limit the TTL of the cache entry somehow\n        console.debug(\"[RhosrService] Cache hit for registry with ID: \", id);\n        return Promise.resolve(cachedRegistry);\n    }\n\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistry(id).then(res => {\n        const registry: Registry = res?.data as Registry;\n        local.setConfigProperty(cacheKey, registry);\n        return registry;\n    });\n}\n\n\n/**\n * The RHOSR Service interface.\n */\nexport interface RhosrService {\n    getRegistries(): Promise<Registry[]>;\n    getRegistry(id: string): Promise<Registry>;\n}\n\n\n/**\n * A mock version of the RHOSR service.\n */\nfunction createMockService(mockData: Registry[]): RhosrService {\n    return {\n        getRegistries(): Promise<Registry[]> {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    resolve(mockData);\n                }, 150);\n            });\n            //return Promise.resolve(mockData);\n        },\n        getRegistry(id: string): Promise<Registry> {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    const matching: Registry[] = mockData.filter(registry => registry.id === id);\n                    if (matching && matching.length > 0) {\n                        return resolve(matching[0]);\n                    } else {\n                        return resolve({} as Registry);\n                    }\n                }, 150);\n            });\n        }\n    };\n}\n\nlet mockWarningSent: boolean = false;\nconst mockWarning = (message: string): void => {\n    if (!mockWarningSent) {\n        console.info(\"[RhosrService] ----------------------------------\");\n        console.info(\"[RhosrService]\", message);\n        console.info(\"[RhosrService] ----------------------------------\");\n        mockWarningSent = true;\n    }\n};\n\n/**\n * React hook to get the RHOSR service.\n */\nexport const useRhosrService: () => RhosrService = (): RhosrService => {\n    const auth: Auth = useAuth();\n    const cfg: Config = useConfig();\n    const local: LocalStorageService = useLocalStorageService();\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"local-mock\")) {\n        mockWarning(\"RHOSR mocking enabled.\");\n        return createMockService(RHOSR_MOCK_DATA);\n    }\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"operate-first-mock\")) {\n        mockWarning(\"RHOSR mocking enabled (Operate First).\");\n        return createMockService(RHOSR_MOCK_DATA_OF);\n    }\n\n    return {\n        getRegistries: () => getRegistries(auth, cfg.srs.apiBasePath),\n        getRegistry: (id) => getRegistry(auth, local, id, cfg.srs.apiBasePath),\n    };\n};\n","/**\n * Clones an object by stringifying it and then parsing it.  Not efficient\n * but effective.  Use sparingly.\n * @param object\n */\nexport function cloneObject(object: any): any {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Function to search a JS object for a property value that matches a criteria (from) and\n * replaces it with a new value (to);\n * @param object\n * @param from\n * @param to\n */\nexport function propertyReplace(object: any, from: string, to: string): void {\n    Object.keys(object).forEach(key => {\n        let value: any = object[key];\n        if (typeof value === \"object\") {\n            propertyReplace(value, from, to);\n        } else if (value === from) {\n            object[key] = to;\n        }\n    })\n}\n","import YAML from \"yaml\";\nimport {IParserResult, parse} from \"protobufjs\";\nimport {ArtifactTypes, ContentTypes, Design, DesignContent} from \"@app/models\";\n\n/**\n * Returns true if the given content is JSON formatted.\n * @param content the content to check\n */\nexport function isJson(content: string): boolean {\n    try {\n        JSON.parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nexport function parseJson(content: string): any {\n    return JSON.parse(content);\n}\nexport function toJsonString(content: any): string {\n    return JSON.stringify(content, null, 4);\n}\n\n\n/**\n * Returns true if the given content is YAML formatted.\n * @param content the content to check\n */\nexport function isYaml(content: string): boolean {\n    try {\n        const result: any = YAML.parse(content);\n        if (typeof result === \"object\") {\n            return true;\n        }\n    } catch (e) {\n    }\n    return false;\n}\nexport function parseYaml(content: string): any {\n    return YAML.parse(content);\n}\nexport function toYamlString(content: any): string {\n    return YAML.stringify(content, null, 4);\n}\n\n/**\n * Returns true if the given content is XML formatted.\n * @param content the content to check\n */\nexport function isXml(content: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isXmlWithRootNode(content: string, namespace: string, localName: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError &&\n               dom.documentElement.namespaceURI === namespace &&\n               dom.documentElement.localName === localName;\n    } catch (e) {\n        return false;\n    }\n}\nexport function isWsdl(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://schemas.xmlsoap.org/wsdl/\", \"definitions\");\n}\nexport function isXsd(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://www.w3.org/2001/XMLSchema\", \"schema\");\n}\n\n\n/**\n * Returns true if the given content is PROTO formatted.\n * @param content the content to check\n */\nexport function isProto(content: string): boolean {\n    try {\n        const result: IParserResult = parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n\nexport function fileExtensionForDesign(design: Design, content: DesignContent): string {\n    // If the design was originally imported from a file, let's just use the extension\n    // from that file.\n    if (design.origin && design.origin.type === \"file\") {\n        const filename: string = design.origin.file?.fileName as string;\n        if (filename.indexOf(\".\") > 0) {\n            const split: string[] = filename.split(\".\");\n            return split[split.length - 1];\n        }\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return \"proto\";\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return \"wsdl\";\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return \"xsd\";\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return \"xml\";\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return \"graphql\";\n    }\n\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_JSON) {\n        return \"json\";\n    }\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_YAML) {\n        return \"yaml\";\n    }\n\n    return \"txt\";\n}\n\nexport function contentTypeForDesign(design: Design, content: DesignContent): string {\n    if (content.contentType) {\n        return content.contentType;\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return ContentTypes.APPLICATION_PROTOBUF;\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return ContentTypes.APPLICATION_WSDL;\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return ContentTypes.APPLICATION_GRAPHQL;\n    }\n\n    return ContentTypes.APPLICATION_JSON;\n}\n\n\n/**\n * Called to format (pretty print) the given content.  For example, if the content is JSON\n * then the content will be parsed and then stringified with better whitespace.\n * @param value\n * @param contentType\n */\nexport function formatContent(value: string, contentType: string): string {\n    try {\n        if (contentType === ContentTypes.APPLICATION_JSON) {\n            const parsed: any = JSON.parse(value);\n            return JSON.stringify(parsed, null, 4);\n        }\n    } catch (e) {\n        console.error(e);\n        return value;\n    }\n    return value;\n}\n\n/**\n * Converts a given string to something that's allowed in a filename.\n * @param value\n */\nexport function convertToValidFilename(value: string): string {\n    return (value.replace(/[\\/|\\\\:*?\"<>]/g, \"\"));\n}\n\n/**\n * Converts content (which might be a JS object) to a string.\n * @param content\n */\nexport function contentToString(content: any): string {\n    if (typeof content === \"string\") {\n        return content as string;\n    } else {\n        return JSON.stringify(content as string, null, 4);\n    }\n}\n","import {Design} from \"@app/models\";\nimport {DesignContextType} from \"@app/models/designs/design-context.model\";\n\n\nexport function hasOrigin(design: Design|undefined, contextType: DesignContextType): boolean {\n    return design?.origin?.type === contextType;\n};\n\n\nexport function limit(value: string | undefined, length: number): string | undefined {\n    if (!value || value.length < length) {\n        return value;\n    }\n    return value.substring(0, length - 3) + \"...\";\n}\n","import {ContentTypes} from \"@app/models/rhosr-instance\";\nimport axios, {AxiosRequestConfig} from \"axios\";\n\nconst AXIOS = axios.create();\n\n\nfunction createAxiosConfig(method: string, url: string, options: any, data?: any): AxiosRequestConfig {\n    if (typeof data === \"string\") {\n        data = new Blob([data]);\n    }\n    return {\n        ...{\n            data,\n            method,\n            url,\n            validateStatus: (status) => {\n                return status >= 200 && status < 300;\n            }\n        }, ...options\n    };\n}\n\n\nfunction unwrapErrorData(error: any): any {\n    console.debug(\"Error detected, unwrapping...\");\n    if (error && error.response && error.response.data) {\n        return {\n            message: error.message,\n            ...error.response.data,\n            status: error.response.status\n        }\n    } else if (error && error.response) {\n        return {\n            message: error.message,\n            status: error.response.status\n        }\n    } else if (error) {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: error.message,\n            status: 500\n        }\n    } else {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: \"Unknown error\",\n            status: 500\n        }\n    }\n}\n\n/**\n * Creates an endpoint to use when making a REST call.  Supports path params and query params.\n * @param baseHref\n * @param path\n * @param params\n * @param queryParams\n */\nexport function createEndpoint(baseHref: string, path: string, params?: any, queryParams?: any): string {\n    if (params) {\n        Object.keys(params).forEach(key => {\n            const value: string = encodeURIComponent(params[key]);\n            path = path.replace(\":\" + key, value);\n        });\n    }\n    let rval: string = createHref(baseHref, path);\n    if (queryParams) {\n        let first: boolean = true;\n        for (const key in queryParams) {\n            if (queryParams[key]) {\n                const value: string = encodeURIComponent(queryParams[key]);\n                if (first) {\n                    rval = rval + \"?\" + key;\n                } else {\n                    rval = rval + \"&\" + key;\n                }\n                if (value !== null && value !== undefined) {\n                    rval = rval + \"=\" + value;\n                }\n                first = false;\n            }\n        }\n    }\n    return rval;\n}\n\n/**\n * Creates the request options used by the HTTP service when making API calls.\n * @param headers\n */\nexport function createOptions(headers: { [header: string]: string }): AxiosRequestConfig {\n    const options: AxiosRequestConfig = {headers};\n    return options;\n}\n\n\n/**\n * Performs an HTTP GET operation to the given URL with the given options.  Returns\n * a Promise to the HTTP response data.\n */\nexport function httpGet<T>(url: string, options?: AxiosRequestConfig, successCallback?: (value: any) => T): Promise<T> {\n    console.info(\"[BaseService] Making a GET request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Accept\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"get\", url, options);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: T = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n * @param successCallback\n * @param progressCallback\n */\nexport function httpPost<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void,\n                            progressCallback?: (progressEvent: any) => void): Promise<void> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    if (progressCallback) {\n        const fiftyMB: number = 50 * 1024 * 1024;\n        config.onUploadProgress = progressCallback;\n        config.maxContentLength = fiftyMB;\n        config.maxBodyLength = fiftyMB;\n    }\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPostWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: any) => O): Promise<O> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n */\nexport function httpPut<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void): Promise<void> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPutWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: O) => O): Promise<O> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP DELETE operation to the given URL with the given body and options.\n * @param url\n * @param options\n */\nexport function httpDelete<T>(url: string, options?: AxiosRequestConfig, successCallback?: () => T): Promise<T> {\n    console.info(\"[BaseService] Making a DELETE request to: \", url);\n\n    if (!options) {\n        options = {};\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"delete\", url, options);\n// @ts-ignore\n    return AXIOS.request(config)\n        .then(() => {\n            return successCallback ? successCallback() : null;\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\nexport function stripTrailingSlash(baseHref: string | undefined): string {\n    if (!baseHref) {\n        return \"\";\n    }\n    if (baseHref.endsWith(\"/\")) {\n        return baseHref.substring(0, baseHref.length - 1);\n    }\n    return baseHref;\n}\n\nexport function createHref(baseHref: string, path: string): string {\n    let url: string =  baseHref;\n    if (url.endsWith(\"/\")) {\n        url = url.substring(0, url.length - 1);\n    }\n    url += path;\n    return url;\n}\n\n"],"names":["If","condition","children","NavLink","location","title","className","basename","useBasename","to","getBasename","Link","ArtifactTypeIcon","type","isShowIcon","isShowLabel","classes","getClassNames","getTitle","getLabel","IsLoading","loadingComponent","lc","Spinner","IfNotEmpty","collection","emptyState","emptyStateTitle","emptyStateMessage","empty","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","EmptyStateBody","length","ListWithToolbar","toolbar","alwaysShowToolbar","filteredEmptyState","isLoading","isEmpty","isFiltered","ToggleIcon","expanded","ChevronDownIcon","ChevronRightIcon","DesignDescription","description","truncate","Truncate","content","tooltipPosition","RegistryNavLink","registry","context","useState","href","setHref","rhosr","undefined","setHrefFrom","group","groupId","id","artifactId","browserUrl","useEffect","getRegistry","instanceId","then","ServicePreviewWarning","Alert","isInline","style","marginBottom","RhosrEmptyState","EmptyStateIcon","icon","AddCircleOIcon","DateTime","date","format","utc","ObjectSelect","value","items","onSelect","itemToString","noSelectionLabel","menuAppendTo","isToggled","setToggled","selectObjects","setSelectObjects","selections","setSelections","map","item","index","toString","noSelection","filtered","filter","soo","Select","SelectVariant","onToggle","event","isOpen","SelectOption","isPlaceholder","key","useNavigation","history","useHistory","navigateTo","path","setTimeout","push","AsyncApiEditor","onChange","ref","cfg","useConfig","eventListener","data","newContent","contentType","console","info","window","addEventListener","removeEventListener","onLoad","message","features","allowCustomValidations","allowImports","current","contentWindow","postMessage","src","ads","editorsBasePath","contentToString","JSON","stringify","contentToLanguage","TextEditor","defaultValue","defaultLanguage","setValue","language","setLanguage","editorRef","useRef","contentString","lang","options","automaticLayout","wordWrap","onMount","editor","monaco","OpenApiEditor","ProtoEditor","beforeMount","languages","register","setMonarchTokensProvider","keywords","typeKeywords","operators","symbols","escapes","tokenizer","root","cases","include","token","log","bracket","next","comment","string","whitespace","defineTheme","base","inherit","rules","foreground","fontStyle","height","EditorCompare","before","after","contentOptions","beforeValue","afterValue","DiffEditor","original","modified","AVRO","PROTOBUF","OPENAPI","ASYNCAPI","GRAPHQL","KCONNECT","WSDL","XSD","XML","APPLICATION_JSON","APPLICATION_YAML","APPLICATION_XML","APPLICATION_PROTOBUF","APPLICATION_GRAPHQL","TEXT_XML","APPLICATION_WSDL","ImportFrom","ArtifactGroup","ArtifactName","name","ArtifactSelector","registries","onSelected","querying","setQuerying","pageSize","page","paging","setPaging","filterValue","ascending","filterSelection","criteria","setCriteria","setRegistry","artifacts","setArtifacts","rhosrInstance","setRhosrInstance","rhosrInstanceFactory","createFor","gac","sortAscending","getArtifacts","results","catch","error","count","ArtifactListToolbar","onRegistrySelected","document","getElementById","onCriteriaChange","onPagingChange","marginTop","ArtifactList","fetchArtifactContent","artifact","version","getArtifactContent","onArtifactSelected","fetchArtifactVersions","getArtifactVersions","selectedArtifact","setSelectedArtifact","onArtifactSelectedInternal","debug","onArtifactUnselectedInternal","onArtifactLoaded","idx","ArtifactListItem","onUnselected","isSelected","rval","setLoading","versions","setVersions","selectedVersion","setSelectedVersion","setContent","isContentLoaded","setContentLoaded","onVersionSelect","onClick","target","localName","Radio","isChecked","state","status","Badge","isRead","setFilterValue","Toolbar","ToolbarContent","ToolbarItem","SearchInput","onSearch","onClear","Button","SortAlphaDownIcon","SortAlphaDownAltIcon","Pagination","padding","dropDirection","isCompact","itemCount","perPage","onSetPage","newPage","onPerPageSelect","newPerPage","widgetId","TYPE_OPTIONS","label","CreateDesignModal","onCreate","onCancel","isValid","setValid","setName","summary","setSummary","setType","typeSelection","setTypeSelection","isTypeToggled","setTypeToggled","setVersion","isVersionToggled","setVersionToggled","templates","setTemplates","template","setTemplate","templatesSvc","valid","getTemplatesFor","Modal","ModalVariant","onClose","actions","isDisabled","Form","FormGroup","isRequired","fieldId","TextInput","TextArea","selection","onTypeSelect","Gallery","hasGutter","minWidths","default","maxWidths","t","GalleryItem","TemplateItem","DeleteDesignModal","design","onDelete","onDownload","titleIconVariant","TextContent","Text","component","lineHeight","paddingLeft","Checkbox","checked","DesignList","designs","selectedDesign","sort","onSort","onEdit","onRename","onRegister","sortByIndex","setSortByIndex","renderColumnData","column","colIndex","modifiedOn","fromNow","DesignOriginLabel","renderActionsToggle","props","KebabToggle","preventDefault","stopPropagation","sortParams","sortable","sortBy","direction","_event","by","columnIndex","ResponsiveTable","ariaLabel","columns","width","expectedLength","minimumColumnWidth","onRowClick","row","renderHeader","Th","modifier","renderCell","Td","renderActions","ActionsColumn","actionsToggle","isSeparator","isRowSelected","DesignsPanel","onDesignSelected","onImport","showDataWarning","setShowDataWarning","refresh","setRefresh","setFiltered","filterOn","setSort","setDesigns","designToDelete","setDesignToDelete","isDeleteModalOpen","setDeleteModalOpen","designToRegister","setDesignToRegister","isRegisterModalOpen","setRegisterModalOpen","designToRename","setDesignToRename","isRenameModalOpen","setRenameModalOpen","designsSvc","downloadSvc","nav","alerts","local","doRefresh","onDownloadDesign","getDesignContent","filename","theContent","downloadToFS","trim","getConfigProperty","searchDesigns","DesignsEmptyState","emptyStateFiltered","DesignsEmptyStateFiltered","DesignsToolbar","Card","isSelectable","CardBody","actionClose","AlertActionCloseButton","setConfigProperty","deleteDesign","designDeleted","designDeleteFailed","ExportToRhosrModal","onExported","designExportedToRhosr","RenameModal","renameDesign","designRenamed","e","EmptyStateSecondaryActions","ImportDropdown","Bullseye","backgroundColor","SearchIcon","PLACEHOLDER_TYPE_OPTION","compareTo","selectOption","this","ImportDesignModal","importType","designContent","setDesignContent","fileName","setFileName","url","setUrl","setContentType","detectJsonOrYamlInfo","contentObj","openapi","swagger","asyncapi","$schema","detectInfo","detectXmlInfo","warn","setTheType","newType","newTypeSelection","option","FILE","file","cd","cdc","FileUpload","filenamePlaceholder","fname","URL","UrlUpload","urlPlaceholder","toggle","DropdownToggle","toggleVariant","Dropdown","action","attributes","RHOSR","isPlain","dropdownItems","DropdownItem","position","ImportFromRhosrModal","setRegistries","setDesign","getRegistries","a","b","name1","name2","localeCompare","PlusCircleIcon","previewContent","setPreviewContent","downloadError","setDownloadError","urlService","hasUrl","hasError","spinner","placeholder","fetchUrlContent","isReadOnly","DesignDetailsPanel","activeTabKey","setActiveTabKey","Tabs","activeKey","eventKey","Tab","TabTitleText","createdOn","DesignEvents","DesignHistory","events","setEvents","designsService","getEvents","DesignEventType","on","exports","setExports","originUrl","origin","originGroupId","originArtifactId","originVersion","originFilename","Divider","importTypeLabel","typeLabel","Label","color","menuActions","accept","includes","EditorContext","dirty","onSave","onRegistrationTestRegistry","onFormat","onCompareContent","lss","designContext","setDesignContext","isActionMenuToggled","setActionMenuToggled","isExpanded","setExpanded","isTestRegistryModalOpen","setIsTestRegistryModalOpen","actionMenuToggle","menuItems","DropdownSeparator","TestRegistryModal","onSubmit","params","Breadcrumb","BreadcrumbItem","isActive","zIndex","newExpanded","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","initialFormState","hasErrors","groupValue","validated","errorMessage","artifactIdValue","isLoadingRegistries","setLoadingRegistries","formState","setFormState","defaultRegistry","helperTextInvalid","val","CompareModal","renderSideBySide","readOnly","inDiffEditor","diffEditorContentOptions","setDiffEditorContentOptions","isDiffInline","setIsDiffInline","isDiffWrapped","setIsDiffWrapped","ToggleGroup","ToggleGroupItem","text","buttonId","isExporting","setExporting","setGroup","setArtifactId","createOrUpdateArtifact","amd","Date","createEvent","determineContentType","normalizeGroupId","useRhosrInstanceServiceFactory","auth","useAuth","instanceUrl","registryUrl","createArtifact","basePath","Promise","apicurio_registry","getToken","endpoint","headers","createArtifactVersion","ifExists","start","end","queryParams","limit","offset","order","orderby","maxContentLength","responseType","transformResponse","testUpdateArtifactContent","db","createDesign","newDesign","newDesignContent","newEvent","all","add","getDesigns","toArray","matches","toLowerCase","indexOf","filteredDesigns","design1","design2","getTime","totalCount","slice","getDesign","where","equals","first","delete","r","newName","newSummary","update","updateDesignContent","reverse","eventId","stores","useDesignsService","ASYNCAPI_2_TEMPLATES","OPENAPI_3_TEMPLATES","OPENAPI_2_TEMPLATES","JSON_TEMPLATES","AVRO_TEMPLATES","PROTOBUF_TEMPLATES","resolve","startsWith","reject","useTemplatesService","useDownloadService","_w","chrome","link","createElement","blob","Blob","createObjectURL","download","click","navigator","msSaveBlob","File","open","githubRegex","match","org","repo","branch","useUrlService","useAlertsService","addAlert","useAlert","AlertVariant","dataTestId","designSaved","propertyName","propertyValue","localStorage","setItem","getItem","parse","clearConfigProperty","removeItem","useLocalStorageService","RHOSR_MOCK_DATA","created_at","updated_at","instance_type","RHOSR_MOCK_DATA_OF","createMockService","mockData","matching","mockWarningSent","mockWarning","useRhosrService","srs","apiBasePath","RegistriesApi","Configuration","accessToken","res","cacheKey","cachedRegistry","cloneObject","object","propertyReplace","from","Object","keys","forEach","isJson","parseJson","toJsonString","isYaml","parseYaml","toYamlString","isXml","DOMParser","parseFromString","getElementsByTagName","isXmlWithRootNode","namespace","dom","documentElement","namespaceURI","isWsdl","isXsd","isProto","fileExtensionForDesign","split","contentTypeForDesign","formatContent","parsed","convertToValidFilename","replace","hasOrigin","contextType","substring","AXIOS","createAxiosConfig","method","validateStatus","unwrapErrorData","response","createEndpoint","baseHref","encodeURIComponent","createHref","createOptions","httpGet","successCallback","config","request","httpPostWithReturn","body","httpPut","stripTrailingSlash","endsWith"],"sourceRoot":""}