{"version":3,"file":"263.3b366df4.js","mappings":"wPAcaA,EAAiC,SAAC,G,IAAEC,EAAS,YAAEC,EAAQ,WAShE,OAP6B,kBAAdD,EACAA,EAEAA,KAII,kBAAC,aAAc,CAACC,SAAUA,IAAe,kBAAC,aAAc,O,sBCZlEC,EAA2C,SAAC,G,IAAEC,EAAQ,WAAEC,EAAK,QAAEC,EAAS,YAAEJ,EAAQ,WAErFK,GAAqB,IAAAC,eACrBC,EAAa,UAAGF,EAASG,eAAa,OAAGN,GAE/C,OACI,kBAAC,EAAAO,KAAI,CAACL,UAAWA,EAAWD,MAAOA,EAAOI,GAAIA,EAAIP,SAAUA,K,WCHvDU,EAA6D,SAAC,G,IAAEC,EAAI,OAAEC,EAAU,aAAEC,EAAW,cAmItG,OACI,yBAAKT,UAzDa,WAClB,IAAIU,EAAkB,qBAItB,GAHID,IACAC,GAAW,eAEI,IAAfF,EAEA,OADAE,GAAW,YACHH,GACJ,KAAK,SACDG,GAAW,eACX,MACJ,KAAK,aACDA,GAAW,mBACX,MACJ,KAAK,SACDA,GAAW,eACX,MACJ,KAAK,YACDA,GAAW,cACX,MACJ,KAAK,aACDA,GAAW,cACX,MACJ,KAAK,YACDA,GAAW,kBACX,MACJ,KAAK,aACDA,GAAW,mBACX,MACJ,KAAK,SAGL,KAAK,QAGL,KAAK,QACDA,GAAW,cAOvB,OAHIF,IAAeC,IACfC,GAAW,cAERA,EAcSC,GAAiBZ,MAnIpB,WACb,IAAIA,EAAgBQ,EACpB,OAAQA,GACJ,KAAK,SACDR,EAAQ,cACR,MACJ,KAAK,aACDA,EAAQ,kBACR,MACJ,KAAK,SACDA,EAAQ,cACR,MACJ,KAAK,YACDA,EAAQ,qBACR,MACJ,KAAK,aACDA,EAAQ,sBACR,MACJ,KAAK,YACDA,EAAQ,qBACR,MACJ,KAAK,aACDA,EAAQ,uBACR,MACJ,KAAK,SACDA,EAAQ,OACR,MACJ,KAAK,QACDA,EAAQ,aACR,MACJ,KAAK,QACDA,EAAQ,MAGhB,OAAOA,EAiGiCa,GAAYhB,SAVhDa,EAEI,8BAtFK,WACb,IAAIV,EAAgBQ,EACpB,OAAQA,GACJ,KAAK,SACDR,EAAQ,OACR,MACJ,KAAK,aACDA,EAAQ,WACR,MACJ,KAAK,SACDA,EAAQ,cACR,MACJ,KAAK,YACDA,EAAQ,UACR,MACJ,KAAK,aACDA,EAAQ,WACR,MACJ,KAAK,YACDA,EAAQ,UACR,MACJ,KAAK,aACDA,EAAQ,gBACR,MACJ,KAAK,SACDA,EAAQ,OACR,MACJ,KAAK,QACDA,EAAQ,aACR,MACJ,KAAK,QACDA,EAAQ,MAGhB,OAAOA,EAoDQc,SAGX,K,WC5HCC,EAA+C,SAAC,G,IAAEnB,EAAS,YAAEoB,EAAgB,mBAAEnB,EAAQ,WAQ1FoB,EAAsBD,GAAoB,kBAAC,EAAAE,QAAO,MACxD,OAP6B,kBAAdtB,EACAA,EAEAA,KAII,kBAAC,aAAc,CAACC,SAAUoB,IAAS,kBAAC,aAAc,CAACpB,SAAUA,KCPvEsB,EAAiD,SAAC,G,IAAEC,EAAU,aAAEC,EAAU,aAAEC,EAAe,kBAAEC,EAAiB,oBAAE1B,EAAQ,WAK3H2B,EAAyBH,GAC3B,kBAAC,EAAAI,WAAU,CAACC,QAAS,EAAAC,kBAAA,IACjB,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAAMR,GAAmB,cACvD,kBAAC,EAAAS,eAAc,KAAER,GAAqB,oBAI9C,OAVYH,GAAoC,IAAtBA,EAAWY,OAYhC,kBAAC,aAAc,CAACnC,SAAUA,IAD1B,kBAAC,aAAc,CAACA,SAAU2B,KCTtBS,EAA2D,SACpE,G,IAAEC,EAAO,UAAEC,EAAiB,oBAAEd,EAAU,aAAEe,EAAkB,qBAAEC,EAAS,YAAErB,EAAgB,mBAAEsB,EAAO,UAAEC,EAAU,aAAE1C,EAAQ,WAExH,OACI,kBAAC,aAAc,KACX,kBAACF,EAAE,CAACC,UAAWuC,IAAsBG,GAAWC,EAAY1C,SAAUqC,IACtE,kBAACnB,EAAS,CAACnB,UAAWyC,EAAWrB,iBAAkBA,GAC/C,kBAACrB,EAAE,CAACC,WAAY0C,EAASzC,SAAUA,IACnC,kBAACF,EAAE,CAACC,UAAW0C,GAAWC,EAAY1C,SAAUuC,IAChD,kBAACzC,EAAE,CAACC,UAAW0C,IAAYC,EAAY1C,SAAUwB,O,sBCrBpDmB,EAAiD,SAAC,G,IAAEC,EAAQ,WAAEC,EAAO,UAC9E,OAAOD,EACH,kBAAC,EAAAE,gBAAe,CAACD,QAASA,IAE1B,kBAAC,EAAAE,iBAAgB,CAACF,QAASA,KCDtBG,EAA+D,SAAC,G,IAAEC,EAAW,cAAEC,EAAQ,WAAE9C,EAAS,YACvGU,EAAkB,GAOtB,OANIV,IACAU,EAAUV,GAET6C,IACDnC,GAAoB,mBAEjBoC,EACH,6BACI,kBAAC,EAAAC,SAAQ,CAAC/C,UAAWU,EAASsC,QAASH,GAAe,kBAAmBI,gBAAgB,SAG7F,yBAAKjD,UAAWU,GAAUmC,GAAe,oB,sBCRpCK,EAA2D,SAAC,G,IAAEC,EAAQ,WAAEC,EAAO,UAAExD,EAAQ,WAC5F,GAAkB,IAAAyD,YAAjBC,EAAI,KAAEC,EAAO,KAEdC,OAA+CC,IAAbN,GAAyB,eAAoBM,EAE/EC,EAAc,SAACP,EAAoBC,G,QAC/BO,GAA6B,QAAb,EAAAP,EAAQI,aAAK,eAAEI,UAAW,UAC1CC,EAA0B,QAAb,EAAAT,EAAQI,aAAK,eAAEM,WAClCP,EAAQ,WAAG,QAAmBJ,EAASY,YAAW,sBAAcJ,EAAK,YAAIE,KAgB7E,OAbA,IAAAG,YAAU,W,MACNT,OAAQE,GACc,WAAlBL,MAAAA,OAAO,EAAPA,EAAS7C,QACL4C,EACAO,EAAYP,EAAUC,GAErBI,EAAuBS,YAAyB,QAAb,EAAAb,EAAQI,aAAK,eAAEU,YAAsBC,MAAK,SAAAhB,GAC1EO,EAAYP,EAAUC,SAInC,CAACA,IAGAE,EAAO,uBAAGA,KAAMA,EAAM1D,SAAUA,IAAe,0BAAMA,SAAUA,KCpC1DwE,EAAuE,WAChF,OACI,kBAAC,EAAAC,MAAK,CAACC,UAAQ,EAAC7C,QAAQ,UAAU1B,MAAM,0DAA0DwE,MAAO,CAAEC,aAAc,SACrH,0WCGCC,EAA2D,SAAC,G,IAAEC,EAAO,UAC9E,OACI,kBAAC,EAAAlD,WAAU,KACP,kBAAC,EAAAmD,eAAc,CAACC,KAAM,EAAAC,iBACtB,kBAAC,EAAAlD,MAAK,CAACC,aAAa,KAAKC,KAAK,MAAI,iCAGlC,kBAAC,EAAAC,eAAc,KACT4C,GAEN,uBAAGpB,KAAK,0CAAwC,sC,oBCZ/CwB,EAA6C,SAAC,G,IAAEC,EAAI,OAC7D,OAAO,kBAAC,IAAM,CAACA,KAAMA,EAAMC,OAAO,yBAAyBC,KAAK,M,+ECYvDC,EAAqD,SAC9D,G,IAAEC,EAAK,QAAEC,EAAK,QAAEC,EAAQ,WAAEC,EAAY,eAAEC,EAAgB,mBAAEC,EAAQ,WAAEC,EAAY,eAAEhE,EAAO,UAEnF,GAA0B,IAAA4B,WAAkB,GAA3CqC,EAAS,KAAEC,EAAU,KACtB,GAAoC,IAAAtC,YAAnCuC,EAAa,KAAEC,EAAgB,KAChC,GAA8B,IAAAxC,YAA7ByC,EAAU,KAAEC,EAAa,KA2ChC,OA/BA,IAAA/B,YAAU,WACN,IACM4B,GADkBR,GAAS,IAC0BY,KAAI,SAACC,GAC5D,MAAO,CACHA,KAAMA,EACNC,SAAU,WACN,OAAOZ,EAAaW,QAIhC,QAAyBxC,IAArB8B,EAAgC,CAChC,IAAMY,EAAwC,CAC1CF,UAAMxC,EACNyC,SAAA,WACI,OAAOX,IAGfM,GAAiB,SACbM,GAAgBP,GAAa,SAGjCC,EAAiBD,KAEtB,CAACR,KAEJ,IAAApB,YAAU,WA9BmB,IACnBoC,EA8BFR,IA9BEQ,EAAmDR,MAAAA,OAAa,EAAbA,EAAeS,QAAO,SAAAC,GAAO,OAAAA,EAAIL,OAASd,KACnGY,EAAcK,MAgCf,CAACjB,EAAOS,IAGP,kBAAC,EAAAW,OAAM,CAACd,aAAcA,EAClBhE,QAASA,GAAW,EAAA+E,cAAA,OACpBC,SAAUd,EACVH,SAAUA,EACVH,SA9CiB,SAACqB,EAA6CvB,GACnEQ,GAAW,GACXN,EAAUF,EAAmCc,OA6CzCU,OAAQjB,EACRI,WAAYA,GAERF,MAAAA,OAAa,EAAbA,EAAeI,KAAI,SAACM,EAAKM,GAAU,OAC/B,kBAAC,EAAAC,aAAY,CAACC,mBAA4BrD,IAAb6C,EAAIL,KAAoBc,IAAKH,EAAOzB,MAAOmB,U,2DCpE/EU,EAAkC,WAC3C,IAAMC,GAAmB,IAAAC,cACnBjH,GAAqB,IAAAC,eAE3B,MAAO,CACHiH,WAAY,SAACC,GACT,OAjB4E,SAACA,EAAcnH,EAAoBgH,GACvH,IAAM9G,EAAa,UAAGF,EAASG,eAAa,OAAGgH,GAC/CC,YAAW,WACPJ,EAAQK,KAAKnH,KACd,IAaYgH,CAAWC,EAAMnH,EAAUgH,O,sGCpB9C,+BAaA,OAXkB,EAAAM,KAAe,OACf,EAAAC,SAAmB,WACnB,EAAAC,KAAe,OACf,EAAAC,QAAkB,UAClB,EAAAC,SAAmB,WACnB,EAAAC,QAAkB,UAClB,EAAAC,SAAmB,WACnB,EAAAC,KAAe,OACf,EAAAC,IAAc,MACd,EAAAC,IAAc,MAEhC,EAbA,GCAA,2BAUA,OARkB,EAAAC,iBAA2B,mBAC3B,EAAAC,iBAA2B,qBAC3B,EAAAC,gBAA0B,kBAC1B,EAAAC,qBAA+B,yBAC/B,EAAAC,oBAA8B,sBAE9B,EAAAC,SAAmB,WACnB,EAAAC,iBAA2B,uBAC7C,EAVA,I,oTCGYC,E,oBCQCC,EAAuD,SAAC,G,IAAE7E,EAAO,UAK1E,OACI,0BAAM5D,UAJE4D,EAAsB,QAAZ,WAISA,ICLtB8E,EAAqD,SAAC,G,IAAE7E,EAAE,KAAE8E,EAAI,OACzE,OAAOA,EACH,kBAAC,aAAc,KACX,0BAAM3I,UAAU,QAAQ2I,GACxB,0BAAM3I,UAAU,MAAM6D,IAG1B,kBAAC,aAAc,KACX,0BAAM7D,UAAU,QAAQ6D,K,iCCMvB+E,EAA6D,SAAC,G,IAAEC,EAAU,aAAEC,EAAU,aACzF,GAA4B,IAAAzF,WAAS,GAAnC0F,EAAQ,KAAEC,EAAW,KACvB,GAAwB,IAAA3F,UAAiB,CAC3C4F,SAAU,GACVC,KAAM,IAFFC,EAAM,KAAEC,EAAS,KAInB,GAA4B,IAAA/F,UAAsC,CACpEgG,YAAa,GACbC,WAAW,EACXC,gBAAiB,SAHbC,EAAQ,KAAEC,EAAW,KAKvB,GAA4B,IAAApG,YAA1BF,EAAQ,KAAEuG,EAAW,KACvB,GAA8B,IAAArG,YAA5BsG,EAAS,KAAEC,EAAY,KACzB,GAAsC,IAAAvG,YAApCwG,EAAa,KAAEC,EAAgB,KAEjCC,GAAoD,WA6B1D,IAAA/F,YAAU,WACF6E,GAAcA,EAAW9G,OAAS,GAClC2H,EAAYb,EAAW,MAE5B,KAGH,IAAA7E,YAAU,WACN,GAAIb,EAAU,CACV,IAAM,EAAsC4G,EAAqBC,UAAU7G,GAC3E2G,EAAiB,MAEtB,CAAC3G,KAGJ,IAAAa,YAAU,WACN,GAAI6F,EAAe,CACf,IAAMI,EAA4B,CAC9BC,cAAeV,EAASF,UACxB/I,KAAMiJ,EAASD,gBACfpE,MAAOqE,EAASH,aAEpBL,GAAY,GACZa,EAAcM,aAAaF,EAAKd,GAAQhF,MAAK,SAAAiG,GACzCR,EAAaQ,GACbpB,GAAY,MACbqB,OAAM,SAAAC,GAELC,QAAQD,MAAM,iDAAkDA,GAChEV,EAAa,CACTD,UAAW,GACXa,MAAO,EACPtB,KAAM,EACND,SAAU,KAEdD,GAAY,MAGpBF,OAAWrF,OAAWA,OAAWA,KAClC,CAACoG,EAAeL,EAAUL,IAE7B,IAAMlH,EACF,kBAACwI,EAAmB,CAAC5B,WAAYA,EAAYW,SAAUA,EAAUL,OAAQA,EACrEuB,mBAtEmB,SAACvH,GACxBuG,EAAYvG,IAsERsC,aAAckF,SAASC,eAAe,qBACtCC,iBApEiB,SAACrB,GACtBC,EAAYD,IAmE4BsB,eAhErB,SAAC3B,GACpBC,EAAUD,IAgENQ,UAAWA,IAGbvI,EACF,kBAAC2J,EAAO,CAAC5H,SAAUA,EAAU6H,MAAM,QAC/B,kBAAC,EAAAxJ,WAAU,CAACC,QAAS,EAAAC,kBAAA,IACjB,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAAM,cACpC,kBAAC,EAAAC,eAAc,KAAE,kDAKvBK,EACF,kBAAC4I,EAAO,CAAC5H,SAAUA,EAAU6H,MAAM,QAC/B,kBAAC,EAAAxJ,WAAU,CAACC,QAAS,EAAAC,kBAAA,IACjB,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAAM,cACpC,kBAAC,EAAAC,eAAc,KAAE,+CAKvBf,EACF,kBAAC,EAAAE,QAAO,CAACY,KAAK,KAAK0C,MAAO,CAAE0G,UAAW,UAG3C,OACI,yBAAKpH,GAAG,qBACJ,kBAAC,KAAe,CAAC5B,QAASA,EACtBC,mBAAmB,EACnBd,WAAYA,EACZe,mBAAoBA,EACpBG,WAAqC,KAAzBkH,EAASH,YACrBjH,UAAW2G,EACXhI,iBAAkBA,EAClBsB,SAAUsH,GAAiC,IAApBA,EAAUa,OAEjC,kBAACO,EAAO,CAAC5H,SAAUA,EAAU6H,MAAM,QAC/B,kBAACE,EAAY,CAACvB,UAAWA,MAAAA,OAAS,EAATA,EAAWA,UAAWwB,qBA7FlC,SAACC,EAA4BC,GAEtD,OADiCxB,EACvByB,mBAAmBF,EAASxH,QAASwH,EAASvH,IAAIwH,MAAAA,OAAO,EAAPA,EAASA,UAAS,WA4F9DE,mBAzFO,SAACH,EAA6BC,EAA2BrI,GAChF8F,EAAW3F,EAAUiI,EAAUC,EAASrI,IAyFxBwI,sBApGU,SAACJ,GAE3B,OADiCvB,EACvB4B,oBAAoBL,EAASxH,QAASwH,EAASvH,WCxCpDqH,EAAqD,SAC9D,G,IAAEvB,EAAS,YAAE6B,EAAqB,wBAAEL,EAAoB,uBAAEI,EAAkB,qBAEtE,GAA0C,IAAAlI,YAAzCqI,EAAgB,KAAEC,EAAmB,KAEtCC,EAA6B,SAACR,GAChCb,QAAQsB,MAAM,qCAAsCT,GACpDO,EAAoBP,IAGlBU,EAA+B,SAACV,GAClCb,QAAQsB,MAAM,uCAAwCT,GACtDO,OAAoBlI,GACpB8H,OAAmB9H,OAAWA,OAAWA,IAGvCsI,EAAmB,SAACX,EAA4BC,EAA0BrI,GAC5EuH,QAAQsB,MAAM,mCAAoCT,GAClDb,QAAQsB,MAAM,qCAAsCH,GAChDN,IAAaM,GACbH,EAAmBH,EAAUC,EAASrI,IAI9C,OACI,yBAAKhD,UAAU,iBAEP2J,MAAAA,OAAS,EAATA,EAAW3D,KAAK,SAACoF,EAAUY,GACvB,yBAACC,EAAgB,CAACb,SAAUA,EAAUrE,IAAKiF,EACvClD,WAAY8C,EACZM,aAAcJ,EACdN,sBAAuBA,EACvBL,qBAAsBA,EACtBY,iBAAkBA,EAClBI,WAAYT,IAAqBN,S,sBC5B5Ca,EAA6D,SACtE,G,IASUG,EATRhB,EAAQ,WAAEe,EAAU,aAAErD,EAAU,aAAEoD,EAAY,eAAEH,EAAgB,mBAAEP,EAAqB,wBAAEL,EAAoB,uBAEzG,GAA0B,IAAA9H,WAAkB,GAA3CjB,EAAS,KAAEiK,EAAU,KACtB,GAA0B,IAAAhJ,YAAzBiJ,EAAQ,KAAEC,EAAW,KACtB,GAAwC,IAAAlJ,YAAvCmJ,EAAe,KAAEC,EAAkB,KACpC,GAAwB,IAAApJ,YAAvBL,EAAO,KAAE0J,EAAU,KACpB,GAAsC,IAAArJ,WAAkB,GAAvDsJ,EAAe,KAAEC,EAAgB,KAuDlCC,EAAkB,SAACxB,GACrBoB,EAAmBpB,GACnBgB,GAAW,GACX9B,QAAQsB,MAAM,kDAA2CT,EAASvH,GAAE,gCAAgCwH,GACpGF,EAAqBC,EAAUC,GAASlH,MAAK,SAAAnB,GACzCuH,QAAQsB,MAAM,iEAAkET,EAASvH,IACzF6I,EAAW1J,GACXqJ,GAAW,GACXO,GAAiB,MAClBvC,OAAM,gBA+Bb,OAxBA,IAAArG,YAAU,WACN,QAAgBP,IAAZT,EAAuB,CACvB,IAAI8J,OAAW,EAEXA,GADA,QAAO9J,GACO,sBACP,QAAOA,GACA,sBACP,QAAMA,GACC,oBACPoI,EAAS7K,OAAS,aACX,yBACP6K,EAAS7K,OAAS,YACX,wBAEA,qBAMlBwL,EAAiBX,EAAUoB,EAJM,CAC7BM,YAAW,EACXC,KAAM/J,OAIf,CAACA,IAGA,yBAAKhD,UAAW,6BAAsBmM,EAAa,WAAa,GAAE,YAAIQ,EAAkB,SAAW,IAC/FlK,QA7DiB,SAACiE,GAGlBA,GAASA,EAAMsG,QAAqC,WAA3BtG,EAAMsG,OAAOC,YAItCd,EACAD,EAAad,SAxBG3H,IAAb6I,GAA8C,IAApBA,EAASvK,QAI1C6K,GAAiB,GACjBP,GAAW,GACX9B,QAAQsB,MAAM,kDAA2CT,EAASvH,KAClE2H,EAAsBJ,GAAUjH,MAAK,SAAAmI,GACjCC,EAAYD,GACZD,GAAW,GACXQ,OAAgBpJ,MACjB4G,OAAM,gBAkBDwC,OAAgBpJ,GAEpBqF,EAAWsC,OA+CX,yBAAKpL,UAAU,4BACX,kBAAC,KAAS,CAACL,UAAWyC,EAAWrB,iBAAmB,kBAAC,EAAAE,QAAO,CAACY,KAAK,QAC9D,kBAAC,EAAAqL,MAAK,CAACrJ,GAAI,yBAAkBuH,EAASvH,IAAM8E,KAAK,GAAGwE,UAAWhB,MAGvE,yBAAKnM,UAAU,2BACX,kBAAC,KAAgB,CAACO,KAAM6K,EAAS7K,QAErC,yBAAKP,UAAU,2BACX,yBAAKA,UAAU,kBACX,kBAACyI,EAAa,CAAC7E,QAASwH,EAASxH,UACjC,kBAAC8E,EAAY,CAAC7E,GAAIuH,EAASvH,GAAI8E,KAAMyC,EAASzC,QA1GpDyD,EAAiB,GACA,aAAnBhB,EAASgC,OACThB,EAAK9E,KAAK,YAES,eAAnB8D,EAASgC,OACThB,EAAK9E,KAAK,cAEP8E,GAqGoBpG,KAAK,SAAAqH,GACZ,yBAAC,EAAAC,MAAK,CAACtN,UAAU,eAAe+G,IAAKsG,EAAQE,QAAQ,GAAOF,OAIxE,yBAAKrN,UAAU,wBAvGnBoL,EAASvI,YACFuI,EAASvI,YAEb,8BAAuBuI,EAAS7K,KAAI,2BAsGvC,yBAAKP,UAAU,+BACX,kBAAC,EAAAN,GAAE,CAACC,UAAWwM,GACX,kBAAC,KAAY,CAAChH,MAAOqH,EAAiBpH,MAAOkH,EACzC9G,SAAU,6BAAsB4F,EAASvH,GAAE,mBAC3C0B,iBAAiB,SAASE,aAAa,SACvCJ,SAAUwH,EAAiBvH,aAAc,SAAA+F,GAAW,OAAAA,EAAQA,e,iCCrHvEZ,EAAmE,SAC5E,G,IAAE5B,EAAU,aAAEW,EAAQ,WAAEqB,EAAgB,mBAAE1B,EAAM,SAAE2B,EAAc,iBAAEnB,EAAS,YAAEe,EAAkB,qBAAEjF,EAAY,eACvG,GAA4B,IAAApC,YAA1BF,EAAQ,KAAEuG,EAAW,KACvB,GAAkC,IAAArG,UAASmG,EAASH,aAAlDA,EAAW,KAAEmE,EAAc,KA8DnC,OAVA,IAAAxJ,YAAU,WACF6E,GAAcA,EAAW9G,OAAS,GAClC2H,EAAYb,EAAW,MAE5B,CAACA,KAEJ,IAAA7E,YAAU,WACNwJ,EAAehE,EAASH,eACzB,CAACG,IAGA,kBAAC,EAAAiE,QAAO,CAAC5J,GAAG,sBAAsB7D,UAAU,qBACxC,kBAAC,EAAA0N,eAAc,KACX,kBAAC,EAAAC,YAAW,CAAClM,QAAQ,iBACjB,kBAAC,IAAY,CAAC0D,MAAOhC,EAAUiC,MAAOyD,EAClCpH,QAAS,EAAA+E,cAAA,OACTnB,SAlEa,SAAClC,GAC9BuG,EAAYvG,GACZuH,EAAmBvH,IAiEHqC,SAAS,mCACTC,aAAcA,GAAgB,SAC9BH,aAAc,SAAAW,GAAQ,OAAAA,EAAK0C,SAEnC,kBAAC,EAAAgF,YAAW,CAAClM,QAAQ,iBACjB,kBAAC,EAAAmM,YAAW,cAAY,mBAAmBzI,MAAOkE,EAAawE,SA7CxD,SAAC1I,GACpBqI,EAAerI,IA4CsF2I,SAzCxF,WACbjD,GAAiB,oBACVrB,GAAQ,CACXH,YAAW,MAsC0G0E,QAlC7G,WACZP,EAAe,IACf3C,GAAiB,oBACVrB,GAAQ,CACXH,YAAa,UAgCT,kBAAC,EAAAsE,YAAW,CAAC3N,UAAU,kBACnB,kBAAC,EAAAgO,OAAM,CAACvM,QAAQ,QAAO,aAAY,OAAM,cAAa,mBAAmBgB,QAtE/D,WACtBoI,GAAiB,oBACVrB,GAAQ,CACXF,WAAYE,EAASF,eAqELE,EAASF,UAAY,kBAAC,EAAA2E,kBAAiB,MAAK,kBAAC,EAAAC,qBAAoB,QAI7E,kBAAC,EAAAP,YAAW,CAAC3N,UAAU,wBACnB,kBAAC,EAAAmO,WAAU,CACP5J,MAAO,CAAE6J,QAAS,OAClB3M,QAAQ,SACR4M,cAAc,OACdC,WAAW,EACXC,WAxCT5E,MAAAA,OAAS,EAATA,EAAWa,QAAS,EAyCXgE,QAASrF,EAAOF,SAChBC,KAAMC,EAAOD,KACbuF,UA9ES,SAAC/H,EAAYgI,EAAiBF,GACvD1D,GAAe,oBACR3B,GAAM,CACTD,KAAMwF,EACNzF,SAAUuF,GAAoBrF,EAAOF,aA2EzB0F,gBAvEqB,SAACjI,EAAYkI,GAClD9D,GAAe,oBACR3B,GAAM,CACTF,SAAU2F,MAqEEC,SAAS,2BACT7O,UAAU,iCC3G5B8O,EAAqC,CACvC,CACI3J,MAAO,YACP4J,MAAO,WAEX,CACI5J,MAAO,aACP4J,MAAO,YAEX,CACI5J,MAAO,SACP4J,MAAO,eAEX,CACI5J,MAAO,SACP4J,MAAO,eAEX,CACI5J,MAAO,aACP4J,MAAO,4BAEb/I,KAAI,SAAAC,GACF,MAAO,CACHd,MAAOc,EAAKd,MACZ4J,MAAO9I,EAAK8I,MACZ7I,SAAU,WACN,OAAOD,EAAK8I,WAMXC,EAA+D,SAAC,G,IAAErI,EAAM,SAAEsI,EAAQ,WAAEC,EAAQ,WAC/F,GAAsB,IAAA7L,WAAS,GAA9B8L,EAAO,KAAEC,EAAQ,KAClB,GAAkB,IAAA/L,UAAS,IAA1BsF,EAAI,KAAE0G,EAAO,KACd,GAAwB,IAAAhM,UAAS,IAAhCiM,EAAO,KAAEC,EAAU,KAEpB,GAAkB,IAAAlM,UAAS,aAA1B9C,EAAI,KAAEiP,EAAO,KACd,GAAoC,IAAAnM,YAAnCoM,EAAa,KAAEC,EAAgB,KAChC,GAAkC,IAAArM,WAAS,GAA1CsM,EAAa,KAAEC,EAAc,KAE9B,GAAwB,IAAAvM,UAAS,IAAhCgI,EAAO,KAAEwE,EAAU,KACpB,GAAwC,IAAAxM,WAAS,GAAhDyM,EAAgB,KAAEC,EAAiB,KAEpC,GAA4B,IAAA1M,YAA3B2M,EAAS,KAAEC,EAAY,KACxB,GAA0B,IAAA5M,YAAzB6M,EAAQ,KAAEC,EAAW,KAEtBC,GAAiC,UA6EvC,OA/CA,IAAApM,YAAU,WACN,IAAIqM,GAAiB,EAChB1H,IACD0H,GAAQ,GAEP9P,IACD8P,GAAQ,GAEPH,IACDG,GAAQ,GAEZjB,EAASiB,KACV,CAAC1H,EAAM2G,EAAS/O,EAAM2P,KAGzB,IAAAlM,YAAU,WACNqL,EAAQ,IACRE,EAAW,IACXC,EAAQ,aAEJW,EADAH,EACYA,EAAU,QAEVvM,KAEjB,CAACkD,KAIJ,IAAA3C,YAAU,WACFzD,IAAS,aACTsP,EAAW,SAEfO,EAAaE,gBAAgB/P,EAAM8K,GAASlH,KAAK8L,KAClD,CAAC1P,KAGJ,IAAAyD,YAAU,WACNoM,EAAaE,gBAAgB/P,EAAM8K,GAASlH,KAAK8L,KAClD,CAAC5E,KAGJ,IAAArH,YAAU,WACFgM,GAAaA,EAAUjO,OAAS,GAChCoO,EAAYH,EAAU,MAE3B,CAACA,IAGA,kBAAC,EAAAO,MAAK,CACF9O,QAAS,EAAA+O,aAAA,OACTzQ,MAAM,kBACN4G,OAAQA,EACR8J,QAASvB,EACTwB,QAAS,CACL,kBAAC,EAAA1C,OAAM,CAACjH,IAAI,SAAStF,QAAQ,UAAUkP,YAAaxB,EAAS1M,QAnExD,WASbwM,EARyB,CACrB1O,KAAI,EACJoI,KAAI,EACJ2G,QAAO,EACPlM,QAAS,CACL7C,KAAM,WAGD2P,KA0DyE,UAG9E,kBAAC,EAAAlC,OAAM,CAACjH,IAAI,SAAStF,QAAQ,OAAOgB,QAASyM,GAAQ,YAKzD,kBAAC,KAAqB,MAEtB,kBAAC,EAAA0B,KAAI,KACD,kBAAC,EAAAC,UAAS,CAAC9B,MAAM,OAAO+B,YAAY,EAAMC,QAAQ,sBAC9C,kBAAC,EAAAC,UAAS,CACNF,YAAU,EACVvQ,KAAK,OACLsD,GAAG,qBACH8E,KAAK,qBAAoB,mBACR,4BACjBxD,MAAOwD,EACPkF,SAAU,SAAC1I,GAAWkK,EAAQlK,OAGtC,kBAAC,EAAA0L,UAAS,CAAC9B,MAAM,cAAcgC,QAAQ,6BACnC,kBAAC,EAAAE,SAAQ,CACL1Q,KAAK,OACLsD,GAAG,4BACH8E,KAAK,4BAA2B,mBACf,mCACjBxD,MAAOmK,EACPzB,SAAU,SAAC1I,GAAWoK,EAAWpK,OAGzC,kBAAC,EAAA0L,UAAS,CAAC9B,MAAM,OAAO+B,YAAY,EAAMC,QAAQ,sBAC9C,kBAAC,EAAAxK,OAAM,CACH9E,QAAS,EAAA+E,cAAA,OAAoB,aAClB,cACXhB,SAAS,qBACTiB,SAAU,WAAOmJ,GAAgBD,IACjCtK,SAAU,SAACqB,EAAOwK,GAAc,OAtH/B,SAACA,GAClB1B,EAAS0B,EAAkB/L,OAC3BuK,EAAiBwB,GACjBtB,GAAe,GAmHiCuB,CAAaD,IAC7CvK,OAAQgJ,EACR7J,WAAY2J,EACZhK,aAAa,UAGTqJ,EAAa9I,KAAI,SAAA7F,GAAM,yBAAC,EAAA0G,aAAY,CAACE,IAAM5G,EAAWgF,MAAOA,MAAOhF,SAIhF,kBAAC,EAAAT,GAAE,CAACC,UAAWY,IAAS,aACpB,kBAAC,EAAAsQ,UAAS,CAAC9B,MAAM,UAAU+B,YAAY,EAAMC,QAAQ,yBACjD,kBAAC,EAAAxK,OAAM,CACH9E,QAAS,EAAA+E,cAAA,OAAoB,aAClB,iBACXhB,SAAS,wBACTiB,SAAU,WAAOsJ,GAAmBD,IACpCzK,SAAU,SAACqB,EAAOwK,GAAc,OAhIhC,SAACA,GACrBrB,EAAWqB,GACXnB,GAAkB,GA8HkClD,CAAgBqE,IAChDvK,OAAQmJ,EACRhK,WAAYuF,EACZ5F,aAAa,UAEb,kBAAC,EAAAoB,aAAY,CAAC1B,MAAO,UACrB,kBAAC,EAAA0B,aAAY,CAAC1B,MAAO,WAIjC,kBAAC,EAAAzF,GAAE,CAACC,UAAYqQ,GAAaA,EAAUjO,OAAS,GAC5C,kBAAC,EAAA8O,UAAS,CAAC9B,MAAM,WAAWgC,QAAQ,0BAChC,kBAAC,EAAAK,QAAO,CAACC,WAAS,EAACC,UAAW,CAAEC,QAAS,SAAWC,UAAW,CAAED,QAAS,UAElEvB,MAAAA,OAAS,EAATA,EAAWhK,KAAI,SAAAyL,GAAK,OAChB,kBAAC,EAAAC,YAAW,CAAC3K,IAAK0K,EAAE5N,IAChB,kBAAC8N,EAAY,CAACzB,SAAUuB,EAAGtF,WAAYsF,IAAMvB,EAAU7K,SAAU,WAC7D8K,EAAYsB,gBCjN3CG,EAA+D,SAAC,G,IAAEC,EAAM,SAAElL,EAAM,SAAEmL,EAAQ,WAAEC,EAAU,aAAE7C,EAAQ,WACnH,GAAsB,IAAA7L,WAAS,GAA9B8L,EAAO,KAAEC,EAAQ,KAexB,OAJA,IAAApL,YAAU,WACNoL,GAAS,KACV,CAACyC,EAAQlL,IAGR,kBAAC,EAAA4J,MAAK,CACF9O,QAAS,EAAA+O,aAAA,MACTzQ,MAAM,iBACNiS,iBAAiB,UACjBrL,OAAQA,EACR8J,QAASvB,EACTwB,QAAS,CACL,kBAAC,EAAA1C,OAAM,CAACjH,IAAI,SAAStF,QAAQ,UAAUkP,YAAaxB,EAAS1M,QApBxD,WACbqP,EAASD,KAmB6E,UAG9E,kBAAC,EAAA7D,OAAM,CAACjH,IAAI,SAAStF,QAAQ,OAAOgB,QAASyM,GAAQ,YAKzD,kBAAC,EAAA+C,YAAW,CAAC1N,MAAO,CAAEC,aAAc,SAChC,kBAAC,EAAA0N,KAAI,CAACC,UAAU,KAAG,wDAGvB,kBAAC,EAAAvB,KAAI,KACD,kBAAC,EAAAC,UAAS,CAAC9B,MAAM,OAAOgC,QAAQ,sBAC5B,kBAAC,EAAAkB,YAAW,KAAEJ,MAAAA,OAAM,EAANA,EAAQlJ,OAE1B,kBAAC,EAAAkI,UAAS,CAAC9B,MAAM,cAAcgC,QAAQ,6BACnC,kBAAC,EAAAkB,YAAW,KAAEJ,MAAAA,OAAM,EAANA,EAAQvC,UAE1B,kBAAC,EAAAuB,UAAS,CAACE,QAAQ,yBACf,kBAAC,EAAA1M,MAAK,CAACC,UAAQ,EAAC7C,QAAQ,OAAO1B,MAAM,0DACjC,uBAAGwE,MAAO,CAAE6N,WAAY,SAAQ,4GAIhC,kBAAC,EAAApE,OAAM,CAACvM,QAAQ,OAAOgB,QAzCxB,WACfsP,EAAWF,IAwCiDtN,MAAO,CAAE8N,YAAa,QAAO,qBAGjF,kBAAC,EAAAxB,UAAS,CAACE,QAAQ,yBACf,kBAAC,EAAAuB,SAAQ,CAACzO,GAAG,iBAAiB8E,KAAK,GAAGoG,MAAM,4DACxC5B,UAAWgC,EAAStB,SAAU,SAAC0E,GAAY,OAAAnD,EAASmD,U,+BClD/DC,EAAiD,SAC1D,G,IAAEC,EAAO,UAAEC,EAAc,iBAAEC,EAAI,OAAEC,EAAM,SAAEC,EAAM,SAAEC,EAAQ,WAAEhB,EAAQ,WAAEiB,EAAU,aAAEhB,EAAU,aAAE1M,EAAQ,WAE/F,GAAgC,IAAAhC,YAA/B2P,EAAW,KAAEC,EAAc,KAS5BC,EAAmB,SAACC,EAAgBC,GAEtC,OAAiB,IAAbA,EAEI,6BACI,kBAAC,KAAO,CAACpT,UAAU,eACfF,SAAU,mBAAYqT,EAAOtP,GAAE,YAC/B,kBAAC,EAAAd,SAAQ,CAACC,QAASmQ,EAAOxK,KAAM1F,gBAAgB,SAEpD,kBAAC,KAAiB,CAACjD,UAAU,iBACzB6C,YAAasQ,EAAO7D,QACpBxM,UAAU,KAKT,IAAbsQ,EAEI,kBAAC,KAAgB,CAAC7S,KAAM4S,EAAO5S,KAAME,aAAa,IAIzC,IAAb2S,EAEI,kBAAC,IAAM,CAACrO,KAAMoO,EAAOE,WAAYC,SAAS,IAIjC,IAAbF,EACO,kBAACG,EAAiB,CAAC1B,OAAQsB,IAGlC,gCAIFK,EAAsB,SAACC,GACzB,OACI,kBAAC,EAAAC,YAAW,CAAC/C,WAAY8C,EAAM9C,WAAYhK,OAAQ8M,EAAM9M,OAAQF,SAAU,SAACtB,EAAOuB,GAC/EA,EAAMiN,iBACNjN,EAAMkN,kBACNH,EAAMhN,SAAStB,OAkBrB0O,EAAa,SAACV,GAChB,OAAOA,EAAOW,SAAW,CACrBC,OAAQ,CACJnN,MAAOoM,EACPgB,UAAWrB,EAAKqB,WAEpBpB,OAAQ,SAACqB,EAAQrN,EAAOoN,GAKpBpB,EAJ0B,CACtBsB,GAAc,IAAVtN,EAAc,OAAS,cAC3BoN,UAAS,KAIjBG,YAAahB,EAAOvM,YACpBnD,GAOR,OAJA,IAAAO,YAAU,WACNiP,EAA2B,SAAZN,EAAKuB,GAAgB,EAAI,KACzC,CAACvB,IAGA,yBAAK3S,UAAU,eACX,kBAAC,EAAAoU,gBAAe,CACZC,UAAU,kBACVC,QA3FW,CACnB,CAAE1N,MAAO,EAAG/C,GAAI,OAAQkL,MAAO,OAAQwF,MAAO,GAAIT,UAAU,GAC5D,CAAElN,MAAO,EAAG/C,GAAI,OAAQkL,MAAO,OAAQwF,MAAO,GAAIT,UAAU,GAC5D,CAAElN,MAAO,EAAG/C,GAAI,cAAekL,MAAO,eAAgBwF,MAAO,GAAIT,UAAU,GAC3E,CAAElN,MAAO,EAAG/C,GAAI,UAAWkL,MAAO,SAAUwF,MAAO,GAAIT,UAAU,IAwFzD/G,KAAM0F,EAAQA,QACd+B,eAAgB/B,EAAQjI,MACxBiK,mBAAoB,IACpBC,WAAY,SAACC,GAAQ,OAAAtP,EAASsP,EAAIA,IAAI9Q,MAAO6O,MAAAA,OAAc,EAAdA,EAAgB7O,SAAKJ,EAAYkR,EAAIA,MAClFC,aAAc,SAAC,G,IAAEzB,EAAM,SAAE0B,EAAE,KAAO,OAC9B,kBAACA,EAAE,CAAClC,KAAMkB,EAAWV,GACjBnT,UAAU,qBACV+G,IAAK,iBAAUoM,EAAOtP,IACtB0Q,MAAOpB,EAAOoB,MACdO,SAAS,YAAY3B,EAAOpE,QAEpCgG,WAAY,SAAC,G,IAAEJ,EAAG,MAAEvB,EAAQ,WAAE4B,EAAE,KAAO,OACnC,kBAACA,EAAE,CAAChV,UAAU,mBAAmB+G,IAAK,eAAQqM,EAAQ,YAAIuB,EAAI9Q,IAAMjE,SAAUsT,EAAiByB,EAAevB,MAElH6B,cAAe,SAAC,G,IArDRpD,EAqDU8C,EAAG,MAAEO,EAAa,gBAAO,OACvC,kBAACA,EAAa,CAACnO,IAAK,kBAAW4N,EAAQ,IACnCQ,cAAe3B,EACfpO,OAxDAyM,EAwDkB8C,EAvD3B,CACH,CAAE5U,MAAO,sBAAuB0C,QAAS,WAAM,OAAA4C,EAASwM,KACxD,CAAEuD,aAAa,GACf,CAAErV,MAAO,sBAAuB0C,QAAS,WAAM,OAAAoQ,EAAOhB,KACtD,CAAE9R,MAAO,uBAAwB0C,QAAS,WAAM,OAAAqQ,EAASjB,KACzD,CAAE9R,MAAO,oCAAqC0C,QAAS,WAAM,OAAAsQ,EAAWlB,KACxE,CAAE9R,MAAO,kBAAmB0C,QAAS,WAAM,OAAAsP,EAAWF,KACtD,CAAEuD,aAAa,GACf,CAAErV,MAAO,gBAAiB0C,QAAS,WAAM,OAAAqP,EAASD,UAiD9CwD,cAAe,SAAC,GAAY,OAAP,MAAWxR,MAAO6O,MAAAA,OAAc,EAAdA,EAAgB7O,S,WCvG1DyR,EAAqD,SAAC,G,IAAE5C,EAAc,iBAAE6C,EAAgB,mBAAEtG,EAAQ,WAAEuG,EAAQ,WAC/G,GAA4B,IAAAnS,WAAS,GAAnCjB,EAAS,KAAEiK,EAAU,KACvB,GAA0C,IAAAhJ,WAAS,GAAjDoS,EAAe,KAAEC,EAAkB,KACrC,GAA0B,IAAArS,UAAS,GAAjCsS,EAAO,KAAEC,EAAU,KACrB,GAA8B,IAAAvS,WAAS,GAArCf,EAAU,KAAEuT,EAAW,KACzB,GAAwB,IAAAxS,UAAiB,CAC3C4F,SAAU,GACVC,KAAM,IAFFC,EAAM,KAAEC,EAAS,KAInB,GAA4B,IAAA/F,UAAgC,CAC9DgG,YAAa,GACbyM,SAAU,SAFNtM,EAAQ,KAAEC,EAAW,KAIvB,GAAoB,IAAApG,UAAsB,CAC5C6Q,GAAI,cACJF,UAAW,SAFPrB,EAAI,KAAEoD,EAAO,KAIf,GAA0B,IAAA1S,YAAxBoP,EAAO,KAAEuD,EAAU,KACrB,GAAwC,IAAA3S,YAAtC4S,EAAc,KAAEC,EAAiB,KACnC,GAA4C,IAAA7S,WAAS,GAAnD8S,EAAiB,KAAEC,EAAkB,KACvC,GAA4C,IAAA/S,YAA1CgT,EAAgB,KAAEC,EAAmB,KACvC,GAAgD,IAAAjT,WAAS,GAAvDkT,EAAmB,KAAEC,GAAoB,KAC3C,IAAwC,IAAAnT,YAAtCoT,GAAc,MAAEC,GAAiB,MACnC,IAA4C,IAAArT,WAAS,GAAnDsT,GAAiB,MAAEC,GAAkB,MAEvCC,IAA6B,UAC7BC,IAA+B,UAC/BC,IAAkB,SAClBC,IAAwB,UACxBC,IAA6B,UAE7BC,GAAY,WACdtB,EAAWD,EAAU,IAmDnBwB,GAAmB,SAACtF,GACtBgF,GAAWO,iBAAiBvF,EAAOhO,IAAIM,MAAK,SAAAnB,GACxC,IAAMqU,EAAmB,WAAG,QAAuBxF,EAAOlJ,MAAK,aAAI,QAAuBkJ,EAAQ7O,IAC5F8J,GAAsB,QAAqB+E,EAAQ7O,GACnDsU,EAA6C,iBAAjBtU,EAAQ+J,KAAoBtF,KAAK8P,UAAUvU,EAAQ+J,KAAM,KAAM,GAAK/J,EAAQ+J,KAC9G+J,GAAYU,aAAa3F,EAAQyF,EAAYxK,EAAauK,OAI5DxM,GAAmB,SAACrB,GACtBC,EAAYD,GACZJ,EAAU,CACNF,KAAM,EACND,SAAUE,EAAOF,WAErB4M,EAAoCpS,MAAxB+F,EAASH,aAA4BG,EAASH,YAAYoO,OAAO1V,OAAS,GACtFmV,OAaJ,IAAAlT,YAAU,WACN0R,EAAmB,SAAWuB,GAAMS,kBAAkB,kCAAmC,WAC1F,KAEH,IAAA1T,YAAU,WACNqI,GAAW,GACXkJ,OAAiB9R,GACjBoT,GAAWc,cAAcnO,EAAUL,EAAQwJ,GAAMxO,MAAK,SAAAsO,GAClDlI,QAAQsB,MAAM,kCAAmC4G,GACjDuD,EAAWvD,GACXpG,GAAW,MACZhC,OAAM,SAAAC,GAELC,QAAQD,MAAMA,QAEnB,CAACqL,IAEJ,IAAMvU,GACF,kBAACwW,EAAiB,CAAC3I,SAAUA,EAAUuG,SAAUA,IAG/CqC,GACF,kBAACC,EAAyB,CAAC/J,QAAS,WAChClD,GAAiB,CACbxB,YAAa,GACbyM,SAAU,QAKhB7T,GACF,kBAAC8V,EAAc,CAACtF,QAASA,EAASjJ,SAAUA,EAAUL,OAAQA,EAC1D8F,SAAUA,EAAUuG,SAAUA,EAC9B3K,iBAAkBA,GAAkBC,eAtCrB,SAAC3B,GACpBC,EAAUD,GACV+N,QA4CJ,OACI,yBAAKlX,UAAU,iBACX,kBAAC,KAAe,CAACiC,QAASA,GACtBb,WAAYA,GACZe,mBAAoB0V,GACpBzV,UAAWA,EACXE,WAAYA,EACZD,SAAUoQ,GAA6B,IAAlBA,EAAQjI,OAC7B,kBAAC,EAAAwN,KAAI,CAACC,cAAc,GAChB,kBAAC,EAAAC,SAAQ,CAAClY,UAAU,cAChB,kBAAC,EAAAN,GAAE,CAACC,UAAW8V,GACX,kBAAC,EAAApR,MAAK,CAACrE,UAAU,cACbsE,UAAU,EACV7C,QAAQ,OACR1B,MAAM,0DACNoY,YAAa,kBAAC,EAAAC,uBAAsB,CAAC3H,QApBtC,WACvBiF,GAAmB,GACnBuB,GAAMoB,kBAAkB,kCAAmC,YAmBnC9T,MAAO,CAAEC,aAAc,SACvB,0WAQR,kBAACgO,EAAU,CAACC,QAASA,EACjBC,eAAgBA,EAChBC,KAAMA,EACNtN,SAAUkQ,EACV3C,OAhFF,SAACD,GACnBoD,EAAQpD,GACRuE,MA+EoBrE,OApJH,SAAChB,GAClBkF,GAAI5P,WAAW,mBAAY0K,EAAOhO,GAAE,aAoJhBiP,SAjJD,SAACjB,GACpB6E,GAAkB7E,GAClB+E,IAAmB,IAgJC7E,WAAYoF,GACZpE,WAjHC,SAAClB,GACtByE,EAAoBzE,GACpB2E,IAAqB,IAgHD1E,SAlID,SAACD,GACpBqE,EAAkBrE,GAClBuE,GAAmB,SAoIf,kBAACxE,EAAiB,CAACC,OAAQoE,EACvBtP,OAAQwP,EACRrE,SAnIoB,SAACD,GAC7BgF,GAAWyB,aAAazG,EAAOhO,IAAIM,MAAK,WACpC+S,KACAF,GAAOuB,cAAc1G,MACtBxH,OAAM,SAAAC,GACLC,QAAQD,MAAM,yCAA0CA,GACxD0M,GAAOwB,mBAAmB3G,EAAQvH,MAEtC8L,GAAmB,IA4HXrE,WAAYoF,GACZjI,SAAU,WAAM,OAAAkH,GAAmB,MACvC,kBAACqC,EAAkB,CAAC5G,OAAQwE,EACxB1P,OAAQ4P,EACRmC,WAxHsB,SAAChS,GAC/B8P,IAAqB,GACrBQ,GAAO2B,sBAAsBjS,IAuHrBwI,SAAU,WAAM,OAAAsH,IAAqB,MACzC,kBAACoC,EAAW,CAAC/G,OAAQ4E,GACjB9P,OAAQgQ,GACR7D,SA9JW,SAACpM,GACpBmQ,GAAWgC,aAAapC,MAAAA,QAAc,EAAdA,GAAgB5S,GAAc6C,EAAMiC,KAAMjC,EAAM4I,SAASnL,MAAK,WAC9EsS,KACAA,GAAe9N,KAAOjC,EAAMiC,KAC5B8N,GAAenH,QAAU5I,EAAM4I,SAEnCsH,IAAmB,GACnBI,GAAO8B,cAAcpS,MACtB2D,OAAM,gBAuJD6E,SAAU,WAAM,OAAA0H,IAAmB,QC1NtCgB,EAA+D,SAAC,G,IAAE3I,EAAQ,WAAEuG,EAAQ,WAC7F,OACI,kBAAC,EAAAhU,WAAU,KACP,kBAAC,EAAAmD,eAAc,CAACC,KAAM,EAAAC,iBACtB,kBAAC,EAAAlD,MAAK,CAACC,aAAa,KAAKC,KAAK,MAAI,cAGlC,kBAAC,EAAAC,eAAc,mDAGf,kBAAC,EAAAkM,OAAM,CAACvM,QAAQ,UAAUgB,QAASwM,GAAQ,iBAC3C,kBAAC,EAAA8J,2BAA0B,KACvB,kBAACC,EAAc,CAACvX,QAAQ,OAAO+T,SAAUA,OCb5CsC,EAA+E,SAAC,G,IAAE/J,EAAO,UAClG,OACI,kBAAC,EAAAkL,SAAQ,CAAC1U,MAAO,CAAE2U,gBAAiB,UAChC,kBAAC,EAAA1X,WAAU,CAACC,QAAS,EAAAC,kBAAA,OACjB,kBAAC,EAAAiD,eAAc,CAACC,KAAM,EAAAuU,aACtB,kBAAC,EAAAxX,MAAK,CAACC,aAAa,KAAKC,KAAK,MAAI,uBAGlC,kBAAC,EAAAC,eAAc,2CACf,kBAAC,EAAAkM,OAAM,CAACvM,QAAQ,OAAOgB,QAASsL,GAAO,wBCC1CgK,EAAyD,SAClE,G,IAAEvO,EAAQ,WAAEL,EAAM,SAAEsJ,EAAO,UAAE5H,EAAgB,mBAAEC,EAAc,iBAAEmE,EAAQ,WAAEuG,EAAQ,WAE3E,GAAkC,IAAAnS,UAASmG,EAASH,aAAlDA,EAAW,KAAEmE,EAAc,MAEnC,IAAAxJ,YAAU,WACNwJ,EAAehE,EAASH,eACzB,CAACG,IAwCJ,OACI,kBAAC,EAAAiE,QAAO,CAAC5J,GAAG,kBAAkB7D,UAAU,mBACpC,kBAAC,EAAA0N,eAAc,KACX,kBAAC,EAAAC,YAAW,CAAClM,QAAQ,iBACjB,kBAAC,EAAAmM,YAAW,cAAY,iBAAiBzI,MAAOkE,EAAawE,SA3BtD,SAAC1I,GACpBqI,EAAerI,IA0BoF2I,SAvBtF,WACbjD,GAAiB,oBACVrB,GAAQ,CACXH,YAAW,MAoBwG0E,QAhB3G,WACZP,EAAe,IACf3C,GAAiB,oBACVrB,GAAQ,CACXH,YAAa,UAcT,kBAAC,EAAAsE,YAAW,KACR,kBAAC,EAAAK,OAAM,CAACvM,QAAQ,UAAUgB,QAASwM,GAAQ,kBAE/C,kBAAC,EAAAtB,YAAW,KACR,kBAACqL,EAAc,CAACvX,QAAQ,OAAO+T,SAAUA,KAE7C,kBAAC,EAAA7H,YAAW,CAAC3N,UAAU,sBACnB,kBAAC,EAAAmO,WAAU,CACP5J,MAAO,CAAE6J,QAAS,KAClB3M,QAAQ,SACR4M,cAAc,OACdC,WAAW,EACXC,WArBTkE,MAAAA,OAAO,EAAPA,EAASjI,QAAS,EAsBTgE,QAASrF,EAAOF,SAChBC,KAAMC,EAAOD,KACbuF,UA3DS,SAAC/H,EAAYgI,EAAiBF,GACvD1D,GAAe,oBACR3B,GAAM,CACTD,KAAMwF,EACNzF,SAAUuF,GAAoBrF,EAAOF,aAwDzB0F,gBApDqB,SAACjI,EAAYkI,GAClD9D,GAAe,oBACR3B,GAAM,CACTF,SAAU2F,MAkDEC,SAAS,yBACT7O,UAAU,+BC1E5BoZ,EAA8C,CAGhDjU,WAAO1B,EACPsL,MAAO,mBACP7I,SAAU,WACN,MAAO,oBAEXmT,UAAA,SAAUC,GACN,OAAOA,IAAiBC,OAG1B,EAAqC,CACvC,CACIpU,MAAO,YACP4J,MAAO,WAEX,CACI5J,MAAO,aACP4J,MAAO,YAEX,CACI5J,MAAO,SACP4J,MAAO,eAEX,CACI5J,MAAO,SACP4J,MAAO,eAEX,CACI5J,MAAO,aACP4J,MAAO,4BAEb/I,KAAI,SAAAC,GACF,MAAO,CACHd,MAAOc,EAAKd,MACZ4J,MAAO9I,EAAK8I,MACZ7I,SAAU,WACN,OAAOD,EAAK8I,OAEhBsK,UAAA,SAAUC,GACN,OAAOC,KAAKpU,QAAUmU,EAAanU,WAelCqU,EAA+D,SAAC,G,IAAEC,EAAU,aAAE9S,EAAM,SAAE6O,EAAQ,WAAEtG,EAAQ,WAC3G,GAAsB,IAAA7L,WAAS,GAA9B8L,EAAO,KAAEC,EAAQ,KAElB,GAAoC,IAAA/L,YAAnCqW,EAAa,KAAEC,EAAgB,KAChC,GAA0B,IAAAtW,YAAzBuW,EAAQ,KAAEC,EAAW,KACtB,GAAgB,IAAAxW,YAAfyW,EAAG,KAAEC,EAAM,KAEZ,GAAkB,IAAA1W,UAAS,IAA1BsF,EAAI,KAAE0G,EAAO,KACd,GAAwB,IAAAhM,UAAS,IAAhCiM,EAAO,KAAEC,EAAU,KAEpB,GAAkB,IAAAlM,YAAjB9C,EAAI,KAAEiP,EAAO,KACd,GAAoC,IAAAnM,YAAnCoM,EAAa,KAAEC,EAAgB,KAChC,GAAkC,IAAArM,WAAS,GAA1CsM,EAAa,KAAEC,EAAc,KAE9B,GAAwB,IAAAvM,UAAS,IAAhCgI,EAAO,KAAEwE,EAAU,KACpB,GAAwC,IAAAxM,WAAS,GAAhDyM,EAAgB,KAAEC,EAAiB,KAEpC,GAAgC,IAAA1M,YAA/ByJ,EAAW,KAAEkN,EAAc,KAiE5BC,EAAuB,SAACC,EAAiBpN,G,gBAC3C,OAAIoN,EAAWC,QACJ,CACH5Z,KAAM,YACNuM,YAAaA,EACbzB,QAAS,QACT1C,KAAqB,QAAf,EAAAuR,EAAWE,YAAI,eAAEra,MACvBuP,QAAwB,QAAf,EAAA4K,EAAWE,YAAI,eAAEvX,aAG9BqX,EAAWG,QACJ,CACH9Z,KAAM,YACNuM,YAAaA,EACbzB,QAAS,MACT1C,KAAqB,QAAf,EAAAuR,EAAWE,YAAI,eAAEra,MACvBuP,QAAwB,QAAf,EAAA4K,EAAWE,YAAI,eAAEvX,aAG9BqX,EAAWI,SACJ,CACH/Z,KAAM,aACNuM,YAAaA,EACbnE,KAAqB,QAAf,EAAAuR,EAAWE,YAAI,eAAEra,MACvBuP,QAAwB,QAAf,EAAA4K,EAAWE,YAAI,eAAEvX,aAG9BqX,EAAWK,QACJ,CACHha,KAAM,SACNuM,YAAaA,EACbnE,KAAMuR,EAAWna,MACjBuP,QAAS4K,EAAWrX,aAIrB,CACHtC,KAAM,SACNuM,YAAaA,EACbnE,KAAMuR,EAAWvR,OA0BnB6R,EAAa,SAACxX,GAChB,OAAI,QAAOA,GACAiX,GAAqB,QAAUjX,GAAU,uBACzC,QAAOA,GACPiX,GAAqB,QAAUjX,GAAU,uBACzC,QAAMA,GA3BC,SAACA,GACnB,IAAIzC,EAAe,QAMnB,OALI,QAAOyC,GACPzC,EAAO,UACA,QAAMyC,KACbzC,EAAO,SAEJ,CACHA,KAAI,EACJuM,YAAa,cAmBN2N,CAAczX,IACd,QAAQA,GAfZ,CACH8J,YAAa,yBACbvM,KAAM,eAgBVgK,QAAQmQ,KAAK,iEAEN,KAMLC,GAAa,SAACC,GAChB,QAAgBnX,IAAZmX,EACApL,OAAQ/L,GACRiM,OAAiBjM,OACd,CACH+L,EAAQoL,GAGR,IAAMC,EAAuC,EAAaxU,QAAO,SAAAyU,GAAU,OAAAA,EAAO3V,QAAUyV,KAAS,GACrGlL,EAAiBmL,KAyDzB,OApDA,IAAA7W,YAAU,WACN,IAAIqM,GAAiB,EAChBqJ,IACDrJ,GAAQ,GAEP1H,IACD0H,GAAQ,GAEP9P,IACD8P,GAAQ,GAEZjB,EAASiB,KACV,CAAC1H,EAAM2G,EAAS/O,EAAMmZ,KAGzB,IAAA1V,YAAU,WACN2V,OAAiBlW,GACjB4L,EAAQ,IACRE,EAAW,IACXsK,OAAYpW,GACZkX,QAAWlX,KACZ,CAACkD,KAIJ,IAAA3C,YAAU,WACN,GAAI0V,GAAiBA,EAAcjC,OAAO1V,OAAS,EAAG,CAClD,IAAMqY,EAAsBI,EAAWd,GACvCnP,QAAQsB,MAAM,0CAA2CuO,GACzD7P,QAAQsB,MAAM,yCAA0CuO,EAAK/O,SAAW,IAExEsP,GAAWP,EAAK7Z,MAChBsP,EAAWuK,EAAK/O,SAAW,IAC3BgE,EAAQ+K,EAAKzR,MAAQ,IACrB4G,EAAW6K,EAAK9K,SAAW,IAC3B0K,EAAeI,EAAKtN,kBAEpBvC,QAAQsB,MAAM,6DACdwD,EAAQ,IACRE,EAAW,IACXoL,QAAWlX,GACXuW,OAAevW,KAEpB,CAACiW,KAGJ,IAAA1V,YAAU,WACFzD,IAAS,kBAAqCkD,IAAZ4H,GAClCwE,EAAW,WAEhB,CAACtP,IAGA,kBAAC,EAAAgQ,MAAK,CACF9O,QAAS,EAAA+O,aAAA,OACTzQ,MA/JA0Z,IAAejR,EAAWuS,KACnB,0BAEA,yBA6JPpU,OAAQA,EACR8J,QAASvB,EACTwB,QAAS,CACL,kBAAC,EAAA1C,OAAM,CAACjH,IAAI,SAAStF,QAAQ,UAAUkP,YAAaxB,EAAS1M,QApMxD,WACb,IAAMW,EAAyBqW,IAAejR,EAAWuS,KAAO,CAC5Dxa,KAAM,OACNya,KAAM,CACFpB,SAAUA,IAEd,CACArZ,KAAM,MACNuZ,IAAK,CACDA,IAAKA,IAGPmB,EAAmB,CACrB1a,KAAMA,EACNoI,KAAI,EACJ2G,QAAO,EACPlM,QAAO,GAEL8X,EAA2B,CAC7BpO,YAAaA,EACbC,KAAM2M,GAGVnP,QAAQsB,MAAM,yCAA0CoP,GACxD1Q,QAAQsB,MAAM,+CAAgDiB,GAC9D0I,EAASyF,EAAIC,KA2KyE,UAG9E,kBAAC,EAAAlN,OAAM,CAACjH,IAAI,SAAStF,QAAQ,OAAOgB,QAASyM,GAAQ,YAKzD,kBAAC,KAAqB,MAEtB,kBAAC,EAAA0B,KAAI,KACD,kBAAC,EAAAlR,GAAE,CAACC,UAAW8Z,IAAejR,EAAWuS,MACrC,kBAAC,EAAAlK,UAAS,CAAC9B,MAAM,OAAO+B,YAAY,EAAMC,QAAQ,sBAC9C,kBAAC,EAAAoK,WAAU,CACPrK,YAAY,EACZjN,GAAG,mBACHtD,KAAK,OACL4E,MAAOuU,EACPrC,SAAUuC,EACVwB,oBAAoB,qCACpBvN,SA/OH,SAAC1I,EAAsBkW,GACxC1B,EAAiBxU,GACjB0U,EAAYwB,QAiPJ,kBAAC,EAAA3b,GAAE,CAACC,UAAW8Z,IAAejR,EAAW8S,KACrC,kBAAC,EAAAzK,UAAS,CAAC9B,MAAM,MAAM+B,YAAY,EAAMC,QAAQ,qBAC7C,kBAACwK,EAAS,CACN1X,GAAG,kBACH2X,eAAe,mCACf3N,SAnPJ,SAAC1I,EAAyB2U,GAC1CH,EAAiBxU,GACjB4U,EAAOD,QAqPC,kBAAC,EAAApa,GAAE,CAACC,UAzMS,WACrB,YAAyB8D,IAAlBiW,GAA+BA,EAAcjC,OAAO1V,OAAS,IAyMxD,kBAAC,EAAA8O,UAAS,CAAC9B,MAAM,OAAO+B,YAAY,EAAMC,QAAQ,sBAC9C,kBAAC,EAAAxK,OAAM,CACH9E,QAAS,EAAA+E,cAAA,OAAoB,aAClB,cACXC,SAAU,WAAM,OAAAmJ,GAAgBD,IAChCtK,SAAU,SAACqB,EAAOwK,GAAc,OAvPnC,SAACA,GAClByJ,GAAYzJ,EAAkB/L,OAC9ByK,GAAe,GAqPqCuB,CAAaD,IAC7CvK,OAAQgJ,EACR7J,WAAY2J,EACZhK,aAAa,WAAQ,SAIb,kBAAC,EAAAoB,aAAY,CAACE,KAAM,EAAG5B,MAAOiU,EAAyBtS,eAAe,KACnE,EAAad,KAAI,SAAC7F,EAAIyG,GAAU,yBAAC,EAAAC,aAAY,CAACE,IAAKH,EAAOzB,MAAOhF,QAAM,KAK1F,kBAAC,EAAAT,GAAE,CAACC,UAAWY,IAAS,aACpB,kBAAC,EAAAsQ,UAAS,CAAC9B,MAAM,UAAU+B,YAAY,EAAMC,QAAQ,yBACjD,kBAAC,EAAAxK,OAAM,CACH9E,QAAS,EAAA+E,cAAA,OAAoB,aAClB,iBACXC,SAAU,WAAM,OAAAsJ,GAAmBD,IACnCzK,SAAU,SAACqB,EAAOwK,GAAc,OApQpC,SAACA,GACrBrB,EAAWqB,GACXnB,GAAkB,GAkQsClD,CAAgBqE,IAChDvK,OAAQmJ,EACRhK,WAAYuF,EACZ5F,aAAa,UAEb,kBAAC,EAAAoB,aAAY,CAACE,IAAK,EAAG5B,MAAM,UAC5B,kBAAC,EAAA0B,aAAY,CAACE,IAAK,EAAG5B,MAAM,WAIxC,kBAAC,EAAA0L,UAAS,CAAC9B,MAAM,OAAO+B,YAAY,EAAMC,QAAQ,sBAC9C,kBAAC,EAAAC,UAAS,CACNF,YAAU,EACVvQ,KAAK,OACLsD,GAAG,qBACH8E,KAAK,qBAAoB,mBACR,4BACjBxD,MAAOwD,EACPkF,SAAU,SAAC1I,GAAU,OAAAkK,EAAQlK,OAGrC,kBAAC,EAAA0L,UAAS,CAAC9B,MAAM,cAAcgC,QAAQ,6BACnC,kBAAC,EAAAE,SAAQ,CACL1Q,KAAK,OACLsD,GAAG,4BACH8E,KAAK,4BAA2B,mBACf,mCACjBxD,MAAOmK,EACPzB,SAAU,SAAC1I,GAAU,OAAAoK,EAAWpK,YdtZ5D,SAAYqD,GACR,mBACA,iBACA,qBAHJ,CAAYA,IAAAA,EAAU,KAkBf,IAAMwQ,EAAyD,SAAC,G,IAAEvX,EAAO,UAAE+T,EAAQ,WAChF,GAA0B,IAAAnS,WAAS,GAAlCqC,EAAS,KAAEC,EAAU,KAMtB8V,EACF,kBAAC,EAAAC,eAAc,CAAC7X,GAAG,gBAAgB8X,cAAc,YAAYlV,SALhD,SAACtB,GACdQ,EAAWR,KAKM,UAAZ1D,EAAsB,SAAW,iBAsB1C,OACI,kBAAC,EAAAma,SAAQ,CACLvW,SApBqE,SAACqB,GAG1E,IAAMmV,EAAiBnV,MAAAA,OAAK,EAALA,EAAOsG,OAAO8O,WAAW,WAAW3W,MAE3D,OADAQ,GAAW,GACHkW,GACJ,IAAK,cAED,YADArG,EAAShN,EAAWuS,MAExB,IAAK,aAED,YADAvF,EAAShN,EAAW8S,KAExB,IAAK,eAED,YADA9F,EAAShN,EAAWuT,SAQxBN,OAAQA,EACR9U,OAAQjB,EACRsW,SAAO,EACPC,cACI,CACI,kBAAC,EAAAC,aAAY,CAACnV,IAAI,eAAc,UAAS,gBAAc,gCACvD,kBAAC,EAAAmV,aAAY,CAACnV,IAAI,aAAY,UAAS,cAAY,mBACnD,kBAAC,EAAAmV,aAAY,CAACnV,IAAI,cAAa,UAAS,eAAa,qBAG7DoV,SAAS,WelDRC,EAAqE,SAAC,G,IAAEzV,EAAM,SAAE6O,EAAQ,WAAEtG,EAAQ,WACrG,GAAsB,IAAA7L,WAAS,GAA9B8L,EAAO,KAAEC,EAAQ,KAClB,GAA0B,IAAA/L,WAAS,GAAlCjB,EAAS,KAAEiK,EAAU,KACtB,GAA8B,IAAAhJ,UAAS,IAAtCwF,EAAU,KAAEwT,EAAa,KAC1B,GAAsB,IAAAhZ,YAArBwO,EAAM,KAAEyK,EAAS,KAClB,GAAoC,IAAAjZ,YAAnCqW,EAAa,KAAEC,EAAgB,KAEhCnW,GAAsB,WAgC5B,IAAAQ,YAAU,WACF2C,GAEAnD,EAAM+Y,gBAAgBpY,MAAK,SAAA0E,GACvBwT,EAAcxT,EAAW8J,MAAK,SAAC6J,EAAGC,GAC9B,IAAMC,EAAgBF,EAAE7T,KAClBgU,EAAgBF,EAAE9T,KACxB,OAAO+T,EAAME,cAAcD,OAE/BtQ,GAAW,MACZhC,OAAM,SAAAC,GAELC,QAAQD,MAAM,uDAAwDA,GACtE+R,EAAc,IACdhQ,GAAW,QAGpB,CAAC1F,KAEJ,IAAA3C,YAAU,WACN,IAAIqM,GAAiB,OACN5M,IAAXoO,IACAxB,GAAQ,GAEZjB,EAASiB,KACV,CAACwB,EAAQ6H,IAEZ,IAAMhJ,EAAuC,IAAtB7H,EAAW9G,OAAe,GAAK,CAClD,kBAAC,EAAAiM,OAAM,CAACjH,IAAI,SAAStF,QAAQ,UAAUkP,YAAaxB,EAAS1M,QAhChD,WACb+S,EAAS3D,EAAwB6H,KA+B6C,UAG9E,kBAAC,EAAA1L,OAAM,CAACjH,IAAI,SAAStF,QAAQ,OAAOgB,QAASyM,GAAQ,WAKzD,OACI,kBAAC,EAAAqB,MAAK,CACF9O,QAAS,EAAA+O,aAAA,MACTzQ,MAAM,sCACN4G,OAAQA,EACR8J,QAASvB,EACTwB,QAASA,GAET,kBAAC,KAAS,CAAC/Q,UAAWyC,GAClB,kBAAC,EAAA1C,GAAE,CAACC,UAAiC,IAAtBkJ,EAAW9G,QACtB,kBAAC,KAAe,CAAC2C,QAAQ,kGAE7B,kBAAC,EAAAhF,GAAE,CAACC,UAAWkJ,EAAW9G,OAAS,GAC/B,kBAAC,KAAqB,MACtB,kBAAC6G,EAAgB,CAACC,WAAYA,EAAYC,WA/E/B,SAAC3F,EAAqBiI,EAA6BC,EAA2BrI,GACrG,QAAiBS,IAAb2H,EACAkR,OAAU7Y,GACVkW,OAAiBlW,OACd,CACH,IAAMwX,EAAmB,CACrB1a,KAAM6K,EAAS7K,KACfoI,KAAMyC,EAASzC,MAAQyC,EAASvH,GAChCyL,QAASlE,EAASvI,aAAe,GACjCO,QAAS,CACL7C,KAAM,QACNiD,MAAO,CACHU,WAAYf,MAAAA,OAAQ,EAARA,EAAUU,GACtBD,QAASwH,EAASxH,QAClBE,WAAYsH,EAASvH,GACrBwH,QAASA,MAAAA,OAAO,EAAPA,EAASA,WAI9BiR,EAAUrB,GACVtB,EAAiB3W,WCnChB2O,G,SAAqD,SAAC,G,IAAEzB,EAAQ,WAAE/D,EAAU,aAAE9G,EAAQ,WAO/F,OACI,yBAAKrF,UAAW,wBAAiBmM,EAAa,WAAa,gBAAkB1J,QAPjE,WACP0J,GACD9G,EAAS6K,KAMT,yBAAKlQ,UAAU,QACX,kBAAC,EAAA6c,eAAc,OAEnB,yBAAK7c,UAAU,QAAQkQ,EAASvH,SCJ/B4S,EAA+C,SAAC,G,IAAE1X,EAAE,KAAE2X,EAAc,iBAAE3N,EAAQ,WACjF,GAAgB,IAAAxK,YAAfyW,EAAG,KAAEC,EAAM,KACZ,GAAsC,IAAA1W,YAArCyZ,EAAc,KAAEC,EAAiB,KAClC,GAA0B,IAAA1Z,WAAkB,GAA3CjB,EAAS,KAAEiK,EAAU,KACtB,GAAoC,IAAAhJ,YAAnC2Z,EAAa,KAAEC,EAAgB,KAEhCC,GAAyB,UAMzBC,EAAS,WACX,OAAc1Z,MAAPqW,GAAoBA,EAAIrC,OAAO1V,OAAS,GAG7Cqb,EAAW,WACb,OAAwB3Z,MAAjBuZ,GAA8BA,EAAcvF,OAAO1V,OAAS,GAsBjEsb,EACF,yBAAKrd,UAAU,sBACX,kBAAC,EAAAiB,QAAO,CAACY,KAAK,KAAK7B,UAAU,YAC7B,0BAAMA,UAAU,mBAAiB,wBAIzC,OACI,yBAAKA,UAAU,cACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,kBACX,kBAAC,EAAAgR,UAAS,CAAC7L,MAAO2U,EAAKvZ,KAAK,OAAO+c,YAAa9B,EAAgB3X,GAAIA,EAChEgK,SA3CM,SAAC1I,GACvB4U,EAAO5U,IA0CoC,aAAa,eAEhD,yBAAKnF,UAAU,qBACX,kBAAC,EAAAgO,OAAM,CAACvM,QAAQ,UAAUkP,YAAawM,IAAU1a,QAlCjD,WACZ4J,GAAW,GACX6Q,EAAWK,gBAAgBzD,GAAe3V,MAAK,SAAAnB,GAC3Cia,OAAiBxZ,GACjBsZ,EAAkB/Z,GAClBqJ,GAAW,GACXwB,EAAS7K,EAAS8W,MACnBzP,OAAM,SAAAC,GACL2S,EAAiB3S,EAAM5F,SACvB2H,GAAW,QAyB8D,UAErE,yBAAKrM,UAAU,qBACX,kBAAC,EAAAgO,OAAM,CAACvM,QAAQ,UAAUkP,YAAawM,IAAU1a,QAxBjD,WACZsX,EAAO,IACPgD,EAAkB,IAClBlP,OAASpK,OAAWA,KAqByD,WAGzE,yBAAKzD,UAAU,sBACX,kBAAC,KAAS,CAACL,UAAWyC,EAAWrB,iBAAkBsc,GAC/C,kBAAC,EAAA3d,GAAE,CAACC,UAAWyd,GACX,yBAAKpd,UAAU,oBACX,gEAGA,6BACKgd,KAIb,kBAAC,EAAAtd,GAAE,CAACC,WAAYyd,KACZ,kBAAC,EAAAnM,SAAQ,CAAC9L,MAAO2X,EAAgBU,YAAY,SC3ExDC,EAAiE,SAAC,G,IAAE5L,EAAM,SAE7E,GAAkC,IAAAxO,UAAiB,WAAlDqa,EAAY,KAAEC,EAAe,KAEpC,OACI,kBAAC,aAAc,KACX,kBAAC,EAAAC,KAAI,CACDC,UAAWH,EACXrY,SAAU,SAACqB,EAAOoX,GAAcH,EAAgBG,IAAqB,aAC1D,4BAEX,kBAAC,EAAAC,IAAG,CAACD,SAAS,UAAU/d,MAAO,kBAAC,EAAAie,aAAY,iBACxC,yBAAKhe,UAAU,uBACX,yBAAKA,UAAU,wBAAsB,eACrC,kBAAC,KAAiB,CAACA,UAAU,uBAAuB6C,YAAagP,MAAAA,OAAM,EAANA,EAAQvC,UAEzE,yBAAKtP,UAAU,wBAAsB,QACrC,yBAAKA,UAAU,wBACX,kBAAC,KAAgB,CAACO,KAAMsR,MAAAA,OAAM,EAANA,EAAQtR,KAAgBE,aAAa,EAAMD,YAAY,KAGnF,yBAAKR,UAAU,wBAAsB,gBACrC,yBAAKA,UAAU,wBAAuB,kBAAC,KAAQ,CAAC+E,KAAM8M,MAAAA,OAAM,EAANA,EAAQoM,aAE9D,yBAAKje,UAAU,wBAAsB,gBACrC,yBAAKA,UAAU,wBAAuB,kBAAC,KAAQ,CAAC+E,KAAM8M,MAAAA,OAAM,EAANA,EAAQwB,cAE9D,yBAAKrT,UAAU,wBAAsB,UACrC,yBAAKA,UAAU,wBACX,kBAACuT,EAAiB,CAAC1B,OAAQA,OAIvC,kBAAC,EAAAkM,IAAG,CAACD,SAAS,SAAS/d,MAAO,kBAAC,EAAAie,aAAY,gBACvC,kBAACE,EAAY,CAACrM,OAAQA,KAE1B,kBAAC,EAAAkM,IAAG,CAACD,SAAS,UAAU/d,MAAO,kBAAC,EAAAie,aAAY,iBACxC,kBAACG,EAAa,CAACtM,OAAQA,QCxC9BsM,EAAuD,SAAC,G,IAAEtM,EAAM,SACnE,GAA0B,IAAAxO,WAAkB,GAA3CjB,EAAS,KAAEiK,EAAU,KACtB,GAAsB,IAAAhJ,YAArB+a,EAAM,KAAEC,EAAS,KAElBC,GAAiC,UAYvC,OAVA,IAAAta,YAAU,WACF6N,GACAyM,EAAeC,UAAU1M,EAAOhO,IAAIM,MAAK,SAAAia,GACrCC,EAAUD,GACV/R,GAAW,MACZhC,OAAM,iBAId,CAACwH,IAEA,kBAAC,KAAS,CAAClS,UAAWyC,GAClB,kBAAC,KAAU,CAACjB,WAAYid,GACpB,yBAAKpe,UAAU,kBAEPoe,MAAAA,OAAM,EAANA,EAAQpY,KAAI,SAACU,EAAOsF,GAAQ,OACxB,kBAAC,aAAc,CAACjF,IAAKiF,GACjB,yBAAKjF,IAAK,UAAGiF,EAAG,SAAShM,UAAU,cAAa,kBAACwe,EAAe,CAAC9X,MAAOA,KACxE,yBAAKK,IAAK,UAAGiF,EAAG,SAAShM,UAAU,cAAa,kBAAC,KAAQ,CAAC+E,KAAM2B,EAAM+X,cCvBzFP,EAAqD,SAAC,G,IAAErM,EAAM,SACjE,GAA0B,IAAAxO,WAAkB,GAA3CjB,EAAS,KAAEiK,EAAU,KACtB,GAAwB,IAAAhJ,YAAvBqb,EAAO,KAAEC,EAAU,KAEpBL,GAAiC,UAcjCM,EAAY,W,QACd,OAA0B,QAAnB,EAAc,QAAd,EAAA/M,MAAAA,OAAM,EAANA,EAAQgN,cAAM,eAAE/E,WAAG,eAAEA,MAAO,IAavC,OAVA,IAAA9V,YAAU,WACF6N,GACAyM,EAAeC,UAAU1M,EAAOhO,IAAIM,MAAK,SAAAia,GACrCO,EAAWP,MAAAA,OAAM,EAANA,EAAQ/X,QAAO,SAAAK,GAAS,MAAe,aAAfA,EAAMnG,MAAsC,aAAfmG,EAAMnG,SACtE8L,GAAW,MACZhC,OAAM,iBAId,CAACwH,IAEA,kBAAC,aAAc,KACX,yBAAK7R,UAAU,wBACX,yBAAKA,UAAU,8BAA4B,UAC3C,yBAAKA,UAAU,8BACX,kBAACuT,EAAiB,CAAC1B,OAAQA,KAG/B,yBAAK7R,UAAU,8BAA4B,gBAC3C,yBAAKA,UAAU,8BAA6B,kBAAC,KAAQ,CAAC+E,KAAM8M,MAAAA,OAAM,EAANA,EAAQoM,aAEpE,kBAAC,EAAAve,GAAE,CAACC,WAAW,QAAUkS,EAAQ,UAC7B,yBAAK7R,UAAU,8BAA4B,SAC3C,yBAAKA,UAAU,8BAvCT,W,QAClB,OAA4B,QAArB,EAAc,QAAd,EAAA6R,MAAAA,OAAM,EAANA,EAAQgN,cAAM,eAAErb,aAAK,eAAEI,UAAW,UAsCgBkb,IAE7C,yBAAK9e,UAAU,8BAA4B,MAC3C,yBAAKA,UAAU,8BAvCN,W,QACrB,OAA4B,QAArB,EAAc,QAAd,EAAA6R,MAAAA,OAAM,EAANA,EAAQgN,cAAM,eAAErb,aAAK,eAAEM,aAAc,UAsCaib,IAE7C,yBAAK/e,UAAU,8BAA4B,WAC3C,yBAAKA,UAAU,8BAvCT,W,QAClB,OAA4B,QAArB,EAAc,QAAd,EAAA6R,MAAAA,OAAM,EAANA,EAAQgN,cAAM,eAAErb,aAAK,eAAE6H,UAAW,SAsCgB2T,IAE7C,yBAAKhf,UAAU,gCACX,kBAAC,KAAe,CAACoD,QAASyO,MAAAA,OAAM,EAANA,EAAQgN,QAAM,uCAIhD,kBAAC,EAAAnf,GAAE,CAACC,WAAW,QAAUkS,EAAQ,SAC7B,yBAAK7R,UAAU,8BAA4B,aAC3C,yBAAKA,UAAU,8BA7CR,W,QACnB,OAA2B,QAApB,EAAc,QAAd,EAAA6R,MAAAA,OAAM,EAANA,EAAQgN,cAAM,eAAE7D,YAAI,eAAEpB,WAAY,GA4CgBqF,KAGjD,kBAAC,EAAAvf,GAAE,CAACC,WAAW,QAAUkS,EAAQ,QAC7B,yBAAK7R,UAAU,8BAA4B,OAC3C,yBAAKA,UAAU,8BACX,uBAAGsD,KAAMsb,KAAcA,QAInC,kBAAC,EAAAM,QAAO,CAAClf,UAAU,0BACnB,kBAAC,KAAS,CAACL,UAAWyC,GAClB,yBAAKpC,UAAU,gCACX,yBAAKA,UAAU,sCAAoC,eACnD,8BAEA,kBAAC,KAAU,CAACmB,WAAYud,EAAStd,WAC7B,qEAGIsd,MAAAA,OAAO,EAAPA,EAAS1Y,KAAI,SAACU,EAAOsF,GAAQ,OACzB,kBAAC,aAAc,CAACjF,IAAKiF,GACjB,yBAAKjF,IAAK,UAAGiF,EAAG,SAAShM,UAAU,qCAAoC,kBAACwe,EAAe,CAAC9X,MAAOA,EAAOjF,QAAQ,WAC9G,yBAAKsF,IAAK,UAAGiF,EAAG,SAAShM,UAAU,qCAAoC,kBAAC,KAAQ,CAAC+E,KAAM2B,EAAM+X,eCtFpHD,EAA2D,SAAC,G,IAAE9X,EAAK,QAAEjF,EAAO,UAiC/E0d,EAAkB,W,gBACd/b,EAAyBsD,EAAMqG,KAAK3J,QAC1C,OAAQA,EAAQ7C,MACZ,IAAK,OACD,MAAmB,UAAZkB,EAAsB,sCAAoB,8BAAO,6BAAkC,QAAZ,EAAA2B,EAAQ4X,YAAI,eAAEpB,WAChG,IAAK,QACD,MAAmB,UAAZnY,EAAsB,kDACzB,kBAAC,aAAc,KACX,iEACA,kBAAC,KAAe,CAAC2B,QAASA,GACtB,mCACA,+BAAoB,QAAb,EAAAA,EAAQI,aAAK,eAAEI,UAAW,WACjC,qCACA,8BAAoB,QAAb,EAAAR,EAAQI,aAAK,eAAEM,YACtB,qCACA,+BAAoB,QAAb,EAAAV,EAAQI,aAAK,eAAE6H,UAAW,S,OAIjD,IAAK,MACD,MAAmB,UAAZ5J,EAAsB,qCACzB,kBAAC,aAAc,KACX,qDACA,uBAAG6B,KAAiB,QAAX,EAAAF,EAAQ0W,WAAG,eAAEA,KAAiB,QAAX,EAAA1W,EAAQ0W,WAAG,eAAEA,MAIzD,OAAO,mDAGX,OACI,kBAAC,aAAc,CAACla,SA/DF,W,UACd,OAAQ8G,EAAMnG,MACV,IAAK,WACD,MAAmB,UAAZkB,EAAsB,sCAAoB,2DACrD,IAAK,SACD,MAAmB,UAAZA,EAAsB,qCAAmB,oDACpD,IAAK,SACD,OAAO0d,IACX,IAAK,WAED,IAAM/b,EAAyB,CAC3B7C,KAAM,QACNiD,MAAOkD,EAAMqG,MAEjB,MAAmB,UAAZtL,EAAsB,kDACzB,kBAAC,aAAc,KACX,+DACA,kBAAC,KAAe,CAAC2B,QAASA,GACtB,mCACA,+BAAoB,QAAb,EAAAA,EAAQI,aAAK,eAAEI,UAAW,WACjC,qCACA,8BAAoB,QAAb,EAAAR,EAAQI,aAAK,eAAEM,YACtB,qCACA,+BAAoB,QAAb,EAAAV,EAAQI,aAAK,eAAE6H,UAAW,S,OAIjD,IAAK,SACD,MAAmB,UAAZ5J,EAAsB,wCAAsB,4DAmCjC2d,MCjErB7L,EAA+D,SAAC,G,IAAE1B,EAAM,SA8BjF,OACI,kBAAC,EAAAwN,MAAK,CAACC,MAdG,WACV,GAAIzN,EAAQ,CACR,IAAI,QAAUA,EAAQ,QAClB,MAAO,SACJ,IAAI,QAAUA,EAAQ,SACzB,MAAO,OACJ,IAAI,QAAUA,EAAQ,OACzB,MAAO,QAGf,MAAO,OAIOyN,IA7BJ,WACV,GAAIzN,EAAQ,CACR,IAAI,QAAUA,EAAQ,QAClB,MAAO,OACJ,IAAI,QAAUA,EAAQ,SACzB,MAAO,mBACJ,IAAI,QAAUA,EAAQ,OACzB,MAAO,MACJ,IAAI,QAAUA,EAAQ,UACzB,MAAO,aAGf,MAAO,MAiBiB9C,KCS1BwQ,EAAuC,CACzC,CACIxQ,MAAO,uBACPhI,IAAK,iBAET,CACIgI,MAAO,wBACPhI,IAAK,gBACLyY,OAAQ,SAAC/L,GAAgC,MAAO,CAAC,SAAoB,UAAoBgM,SAAShM,EAAM5B,OAAOtR,QAEnH,CACIwO,MAAO,sBACPhI,IAAK,iBACL4J,WAAY,SAAC8C,GAAgC,OAAQA,EAAMiM,QAE/D,CACI3Y,IAAK,qBACLqO,aAAa,GAEjB,CACIrG,MAAO,6BACPhI,IAAK,wBAET,CACIgI,MAAO,oCACPhI,IAAK,0BAET,CACIgI,MAAO,kBACPhI,IAAK,mBAET,CACIA,IAAK,qBACLqO,aAAa,GAEjB,CACIrG,MAAO,gBACPhI,IAAK,kBAQA4Y,EAAuD,SAAClM,G,sBAE3DmM,GAA2B,UAE3B,GAAoC,IAAAvc,YAAnCwc,EAAa,KAAEC,EAAgB,KAChC,GAA8C,IAAAzc,WAAS,GAAtD0c,EAAmB,KAAEC,EAAoB,KAC1C,GAA4B,IAAA3c,UAAyE,SAAhEuc,EAAIlI,kBAAkB,4BAA6B,UAAvFuI,EAAU,KAAEC,EAAW,KACxB,GAA8C,IAAA7c,WAAS,GAAtDkT,EAAmB,KAAEC,EAAoB,KAC1C,GAAwD,IAAAnT,WAAS,GAAhE8c,EAAuB,KAAEC,EAA0B,KAEpDpJ,GAAwB,UAYxBqJ,EACF,kBAAC,EAAA3E,eAAc,CAAC7X,GAAG,gBAAgB8X,cAAc,YAAYlV,SAXtC,SAACtB,GACxB6a,EAAqB7a,KAUoE,YAkD7F,IAAAnB,YAAU,WACN,GAAIyP,EAAM5B,OAAQ,CACd,IAAMzO,EAAmCqQ,EAAM5B,OAAOgN,OACtDiB,EAAiB1c,MAEtB,CAACqQ,EAAM5B,SAEV,IAAMyO,EAAmBf,EAAYlZ,QAAO,SAAAwV,GAAU,OAACA,EAAO2D,QAAgB3D,EAAO2D,OAAO/L,MAAQzN,KAAI,SAAA6V,GAAU,OAC9GA,EAAOzG,YACH,kBAAC,EAAAmL,kBAAiB,CAACxZ,IAAK8U,EAAO9U,MAE/B,kBAAC,EAAAmV,aAAY,CAACnV,IAAK8U,EAAO9U,IAAG,UAAW8U,EAAO9U,IAAK4J,aAAYkL,EAAOlL,YAAakL,EAAOlL,WAAW8C,IAAiBoI,EAAO9M,UAItI,OACI,kBAAC,aAAc,KACX,kBAACyR,EAAiB,CAAC7Z,OAAQwZ,EACvBtO,OAAQ4B,EAAM5B,OACd3C,SAAU,WAAM,OAAAkR,GAA2B,IAC3CK,SAAU,W,IAAC,sDACPhN,EAAMiN,2BAA0B,MAAhCjN,EAAoCkN,GACpCP,GAA2B,MAEnC,yBAAKpgB,UAAU,kBACX,yBAAKA,UAAU,8BACX,kBAAC,EAAA4gB,WAAU,CAACrc,MAAO,CAAEC,aAAc,SAC/B,kBAAC,EAAAqc,eAAc,CAAC1O,UAAU,UACtB,kBAAC,KAAO,CAACrS,SAAS,KAAG,2BAEzB,kBAAC,EAAA+gB,eAAc,CAACC,UAAU,GAAmB,QAAZ,EAAArN,EAAM5B,cAAM,eAAElJ,QAGvD,yBAAK3I,UAAU,gCACX,gDACA,kBAAC,IAAM,CAAC+E,KAAM0O,EAAM5B,OAAOwB,WAAYC,SAAS,KAEpD,yBAAKtT,UAAU,0BACX,kBAAC,EAAA4b,SAAQ,CACLvW,SAtFO,SAACqB,GAGxB,IAAMmV,EAAiBnV,MAAAA,OAAK,EAALA,EAAOsG,OAAO8O,WAAW,WAAW3W,MAE3D,OADA6a,GAAqB,GACbnE,GACJ,IAAK,iBAED,YADApI,EAAMsN,mBAEV,IAAK,yBAED,YADAvK,GAAqB,GAEzB,IAAK,gBAED,YADA/C,EAAMuN,WAEV,IAAK,gBAED,YADAvN,EAAMX,WAEV,IAAK,gBAED,YADAW,EAAM3B,WAEV,IAAK,kBAED,YADA2B,EAAM1B,aAEV,IAAK,uBAED,YADAqO,GAA2B,KA8DnB3E,OAAQ4E,EACR9b,MAAO,CAAE0c,OAAQ,KACjBta,OAAQoZ,EACR/D,SAAO,EACPC,cAAeqE,KAGvB,yBAAKtgB,UAAU,uBACX,kBAAC,EAAAgO,OAAM,CAAChO,UAAU,WAAWyB,QAAQ,UAAUgB,QAASgR,EAAMyN,OAAQvQ,YAAa8C,EAAMiM,OAAK,SAElG,yBAAK1f,UAAU,yBACX,kBAAC,EAAAgO,OAAM,CAAChO,UAAU,aAAayB,QAAQ,QAAQgB,QA5GxC,WACnB,IAAM0e,GAAwBlB,EAC9BL,EAAIvH,kBAAkB,4BAA6B,GAAK8I,GACxDjB,EAAYiB,KA0GI,kBAAC,KAAU,CAAC3e,SAAUyd,EAAYxd,QAAS,WAAQyd,GAAaD,SAI5E,kBAAC,EAAAvgB,GAAE,CAACC,UAAWsgB,GACX,yBAAKjgB,UAAU,0BACX,kBAAC,EAAAiS,YAAW,KACR,kBAAC,EAAAC,KAAI,CAACC,UAAU,KAAKnS,UAAU,SAAqB,QAAZ,EAAAyT,EAAM5B,cAAM,eAAElJ,MACtD,kBAAC,KAAiB,CAAC3I,UAAU,UAAU6C,YAAyB,QAAZ,EAAA4Q,EAAM5B,cAAM,eAAEvC,WAEtE,yBAAKtP,UAAU,YACX,kBAAC,EAAAohB,gBAAe,CAACC,cAAc,EAAM/S,WAAW,GAC5C,kBAAC,EAAAgT,qBAAoB,KACjB,kBAAC,EAAAC,oBAAmB,aACpB,kBAAC,EAAAC,2BAA0B,KACvB,kBAAC,KAAgB,CAACjhB,KAAMkT,EAAM5B,OAAOtR,KAAME,aAAa,EAAMD,YAAY,MAGlF,kBAAC,EAAAd,GAAE,CAACC,UAvFJ,WACpB,YAAyB8D,IAAlBoc,GAA+BA,EAActf,MAA+B,UAAvBsf,EAActf,OAuFlD,kBAAC,EAAA+gB,qBAAoB,KACjB,kBAAC,EAAAC,oBAAmB,iBACpB,kBAAC,EAAAC,2BAA0B,KACvB,0BAAMxhB,UAAU,UAA6B,QAApB,EAAA6f,MAAAA,OAAa,EAAbA,EAAerc,aAAK,eAAEI,UAAW,WAC1D,qCACA,kBAAC,KAAe,CAACR,QAASyc,GACtB,0BAAM7f,UAAU,SAA6B,QAApB,EAAA6f,MAAAA,OAAa,EAAbA,EAAerc,aAAK,eAAEM,YAC/C,mCACA,mCACA,0BAAM9D,UAAU,UAA6B,QAApB,EAAA6f,MAAAA,OAAa,EAAbA,EAAerc,aAAK,eAAE6H,UAAW,UAC1D,uCAKhB,kBAAC,EAAA3L,GAAE,CAACC,UAnGL,WACnB,YAAyB8D,IAAlBoc,GAA+BA,EAActf,MAA+B,SAAvBsf,EAActf,OAmGlD,kBAAC,EAAA+gB,qBAAoB,KACjB,kBAAC,EAAAC,oBAAmB,kBACpB,kBAAC,EAAAC,2BAA0B,KACvB,8BAA0B,QAAnB,EAAA3B,MAAAA,OAAa,EAAbA,EAAe7E,YAAI,eAAEpB,aAIxC,kBAAC,EAAAla,GAAE,CAACC,UAvGN,WAClB,YAAyB8D,IAAlBoc,GAA+BA,EAActf,MAA+B,QAAvBsf,EAActf,OAuGlD,kBAAC,EAAA+gB,qBAAoB,KACjB,kBAAC,EAAAC,oBAAmB,YACpB,kBAAC,EAAAC,2BAA0B,KACvB,uBAAGle,KAAwB,QAAlB,EAAAuc,MAAAA,OAAa,EAAbA,EAAe/F,WAAG,eAAEA,KAAwB,QAAlB,EAAA+F,MAAAA,OAAa,EAAbA,EAAe/F,WAAG,eAAEA,YAQnF,kBAACrB,EAAkB,CAAC5G,OAAQ4B,EAAM5B,OAC9BlL,OAAQ4P,EACRmC,WAjHsB,SAAChS,GAC/B8P,GAAqB,GACrBQ,EAAO2B,sBAAsBjS,IAgHrBwI,SAAU,WAAM,OAAAsH,GAAqB,QCnQ/CiL,EAAmB,CACrBC,WAAW,EACXC,WAAY,CACRxc,MAAO,GACPyc,UAAW,UACXC,aAAc,IAElBC,gBAAiB,CACb3c,MAAO,GACPyc,UAAW,UACXC,aAAc,KAITrB,EAAqE,SAAC,G,IAAE3O,EAAM,SAAElL,EAAM,SAAEuI,EAAQ,WAAEuR,EAAQ,WAC7G,GAAsB,IAAApd,WAAS,GAA9B8L,EAAO,KAAEC,EAAQ,KAClB,GAA8C,IAAA/L,WAAS,GAAtD0e,EAAmB,KAAEC,EAAoB,KAC1C,GAA8B,IAAA3e,UAAqB,IAAlDwF,EAAU,KAAEwT,EAAa,KAC1B,GAA0B,IAAAhZ,YAAzBF,EAAQ,KAAEuG,EAAW,KACtB,GAA4B,IAAArG,UAASoe,GAApCQ,EAAS,KAAEC,EAAY,KAExBzP,GAA0B,UAC1BjP,GAAQ,UA6ER2e,EAAgB,SAAC/e,G,QA3EAO,EAAeE,EAAfF,GA4ES,QAAd,EAAAP,MAAAA,OAAO,EAAPA,EAASI,aAAK,eAAEI,UAAW,GA5EPC,GA4EyB,QAAd,EAAAT,MAAAA,OAAO,EAAPA,EAASI,aAAK,eAAEM,aAAc,GA3E3Eoe,GAAa,oBACND,GAAS,CACZN,YAAY,oBACLM,EAAUN,YAAU,CACvBC,UAAW,UACXzc,MAAOxB,IAEXme,iBAAiB,oBACVG,EAAUH,iBAAe,CAC5BF,UAAW,UACXzc,MAAOtB,QA0GnB,OAtCA,IAAAG,YAAU,WACF2C,IACAub,EAAaT,GACbO,GAAqB,GAGrBvP,EAAQ8L,UAAU1M,EAAOhO,IAAIM,MAAK,SAAAia,GAE9B5a,EAAM+Y,gBAAgBpY,MAAK,SAAA0E,GACvBwT,EAAcxT,EAAW8J,MAAK,SAAC6J,EAAGC,GAC9B,IAAMC,EAAgBF,EAAE7T,KAClBgU,EAAgBF,EAAE9T,KACxB,OAAO+T,EAAME,cAAcD,OAE/B,IAAMvZ,EAnDK,SAACgb,G,MACxB,GAAIA,EAAQ,CACR,IAAMgE,EAAgChE,EAAO/X,QAAO,SAAAK,GAAS,MAAe,aAAfA,EAAMnG,QACnE,GAAI6hB,GAAkBA,EAAergB,OAAS,EAE1C,MAAO,CACHxB,KAAM,QACNiD,MAH0B4e,EAAe,GAGzBrV,MAI5B,GAA6B,WAAX,QAAd,EAAA8E,MAAAA,OAAM,EAANA,EAAQgN,cAAM,eAAEte,MAChB,OAAOsR,EAAOgN,OAuCqCwD,CAAmBjE,GAC9D+D,EAAc/e,GACdsG,EAnCQ,SAACb,EAAwBzF,GAC7C,GAAIA,EAAS,CACT,IAAMkf,EAAiCzZ,EAAWxC,QAAO,SAAAlD,GAAQ,MAAI,OAAAA,EAASU,MAA0B,QAAnB,EAAAgO,EAAOgN,OAAOrb,aAAK,eAAEU,eAC1G,IAAIoe,MAAAA,OAAkB,EAAlBA,EAAoBvgB,QAAS,EAC7B,OAAOugB,EAAmB,GAIlC,OAAIzZ,MAAAA,OAAU,EAAVA,EAAY9G,QAAS,EACd8G,EAAW,QAElB,EAwBoB0Z,CAAgB1Z,EAAYzF,IACxC4e,GAAqB,MACtB3X,OAAM,SAAAC,GAELC,QAAQD,MAAM,qDAAsDA,GACpE+R,EAAc,IACd8F,OAAc1e,GACdue,GAAqB,SAE1B3X,OAAM,SAAAC,GACLC,QAAQD,MAAM,yDAA0DA,GACxE+R,EAAc,IACd8F,OAAc1e,GACdue,GAAqB,SAG9B,CAACrb,KAEJ,IAAA3C,YAAU,WACNoL,OAA6C3L,IAApCwe,EAAUH,gBAAgB3c,OAAuB8c,EAAUH,gBAAgB3c,MAAMpD,OAAS,KACpG,CAACkgB,IAGA,kBAAC,EAAA1R,MAAK,CACF9O,QAAS,EAAA+O,aAAA,OACTzQ,MAAM,8BACN4G,OAAQA,EACR8J,QAASvB,EACTwB,QAAS,CACL,kBAAC,EAAA1C,OAAM,CAACjH,IAAI,UAAU4J,YAAaxB,GAAkC,KAAvBtG,MAAAA,OAAU,EAAVA,EAAY9G,QAAcN,QAAQ,UAAUgB,QAAS,WAAM,OAAAge,EACrGtd,EACA8e,EAAUN,WAAWxc,MACrB8c,EAAUH,gBAAgB3c,SAC7B,QAGD,kBAAC,EAAA6I,OAAM,CAACjH,IAAI,SAAStF,QAAQ,OAAOgB,QAASyM,GAAQ,YAKzD,kBAAC,KAAS,CAACvP,UAAWoiB,GAClB,kBAAC,KAAU,CAAC5gB,WAAY0H,EAAYzH,WAAY,kBAAC,KAAe,CAACsD,QAAQ,oGACrE,kBAAC,EAAAkM,KAAI,KACD,kBAAC,EAAAC,UAAS,CACNC,YAAY,EACZ/B,MAAM,oBACNgC,QAAQ,sCAER,kBAAC,KAAY,CAACvL,SAAS,4BAA4BL,MAAOhC,EAAUiC,MAAOyD,EAAYxD,SAAUqE,EAAapE,aAAc,SAAAW,GAAQ,OAAAA,EAAK0C,SAE7I,kBAACoC,EAAO,CAAC5H,SAAUA,EAAU6H,MAAM,SAC/B,kBAAC,EAAA6F,UAAS,CACN9B,MAAM,QACN6S,UAAWK,EAAUN,WAAWC,UAChCY,kBAAmBP,EAAUN,WAAWE,aACxC9Q,QAAQ,0BAER,kBAAC,EAAAC,UAAS,CACNnN,GAAG,yBACHsB,MAAO8c,EAAUN,WAAWxc,MAC5BmY,YAAY,0DACZzP,SA7IV,SAAC4U,GACnBP,GAAa,oBACND,GAAS,CACZN,YAAY,oBACLM,EAAUN,YAAU,CACvBC,UAAW,UACXzc,MAAOsd,WAyIK,kBAAC,EAAA5R,UAAS,CACN9B,MAAM,KACN6S,UAAWK,EAAUH,gBAAgBF,UACrCY,kBAAmBP,EAAUH,gBAAgBD,aAC7C/Q,YAAY,EACZC,QAAQ,+BAER,kBAAC,EAAAC,UAAS,CACNnN,GAAG,8BACHyZ,YAAY,uBACZnY,MAAO8c,EAAUH,gBAAgB3c,MACjC0I,SA/IL,SAAC4U,GACxB,IAAMf,GAAae,EAEnBP,GAAa,oBACND,GAAS,CACZP,UAAS,EACTI,iBAAiB,oBACVG,EAAUH,iBAAe,CAC5BF,UAAWF,EAAY,QAAU,UACjCG,aAAc,0BACd1c,MAAOsd,iB,WC3DVC,EAAqD,SAAC,G,IAAE/b,EAAM,SAAE8J,EAAO,UAAEkS,EAAM,SAAEC,EAAU,aAAEC,EAAK,QAAEC,EAAS,YAChH,GAA0D,IAAAzf,UAAS,CACrE0f,kBAAkB,EAClBC,iBAAiB,EACjBC,SAAU,MACVC,UAAU,EACVC,cAAc,EACdC,kBAAmB,WACnBC,kBAAmB,aAPhBC,EAAwB,KAAEC,EAA2B,KAUtD,GAAsC,IAAAlgB,YAArCmgB,EAAc,KAAEC,EAAiB,KAClC,GAAoC,IAAApgB,YAAnCqgB,EAAa,KAAEC,EAAgB,KAEhC,GAAkC,IAAAtgB,WAAS,GAA1CugB,EAAY,KAAEC,EAAe,KAC9B,GAAoC,IAAAxgB,WAAS,GAA5CygB,EAAa,KAAEC,EAAgB,KA0BtC,OARA,IAAA/f,YAAU,WACNyf,GAAkB,QAAgBd,MACnC,CAACA,KAEJ,IAAA3e,YAAU,WACN2f,GAAiB,QAAgBd,MAClC,CAACA,IAGA,kBAAC,EAAAtS,MAAK,CAAC1M,GAAG,gBACN9D,MAAM,kBACN4G,OAAQA,EACR8J,QAASA,GACT,yBAAKzQ,UAAU,gBACX,kBAAC,EAAAgkB,YAAW,CAAChkB,UAAU,uBAAsB,aAC9B,6BACX,kBAAC,EAAAikB,gBAAe,CAACC,KAAK,SAASnd,IAAK,EAAGod,SAAS,SAC5ChY,WAAYyX,EACZ/V,SAlCQ,WACxB0V,GAA4B,oBACrBD,GAA0D,CAC7DP,kBAAmBO,EAAyBP,oBAEhDc,IAAkBP,EAAyBP,qBA8B/B,kBAAC,EAAAkB,gBAAe,CAACC,KAAK,YAAYnd,IAAK,EAAGod,SAAS,QAC/ChY,WAAY2X,EACZjW,SA7BG,WACnB0V,GAA4B,oBACrBD,GAA0D,CAC7DL,SAA+C,OAArCK,EAAyBL,SAAoB,KAAO,SAElEc,EAAsD,MAArCT,EAAyBL,cA0BlC,yBAAKjjB,UAAU,iBACX,0BAAMA,UAAU,U,aAAoB4iB,GACpC,0BAAM5iB,UAAU,WACZ,kBAAC,EAAAokB,eAAc,OAEnB,0BAAMpkB,UAAU,S,aAAmB8iB,IAEvC,yBAAK9iB,UAAU,kBACX,kBAAC,EAAAqkB,WAAU,CACPrkB,UAAU,cACVskB,SAAUd,EACVe,SAAUb,EACVc,QAASlB,QC/CpB7K,EAAiE,SAC1E,G,IAAE5G,EAAM,SAAElL,EAAM,SAAE+R,EAAU,aAAExJ,EAAQ,WAEhC,GAAsB,IAAA7L,WAAS,GAA9B8L,EAAO,KAAEC,EAAQ,KAClB,GAA8B,IAAA/L,WAAS,GAAtCohB,EAAW,KAAEC,EAAY,KAC1B,GAA8C,IAAArhB,WAAS,GAAtD0e,EAAmB,KAAEC,EAAoB,KAC1C,GAA8B,IAAA3e,UAAS,IAAtCwF,EAAU,KAAEwT,EAAa,KAC1B,GAA0B,IAAAhZ,YAAzBF,EAAQ,KAAEuG,EAAW,KACtB,GAAoB,IAAArG,YAAnBM,EAAK,KAAEghB,EAAQ,KAChB,GAA8B,IAAAthB,YAA7BS,EAAU,KAAE8gB,EAAa,KAC1B,GAAwB,IAAAvhB,YAAvBgI,EAAO,KAAEwE,EAAU,KACpB,GAAoC,IAAAxM,YAAnCwG,EAAa,KAAEC,EAAgB,KAChC,GAAsC,IAAAzG,WAAkB,GAAvDwhB,EAAc,KAAEC,EAAiB,KAClC,GAA4C,IAAAzhB,YAA3C0hB,EAAiB,KAAEC,EAAoB,KAExCvS,GAA0B,UAC1BjP,GAAsB,UACtBuG,GAAoD,UA+FpDkb,EAAkB,WACpBN,OAASlhB,GACTmhB,OAAcnhB,GACdoM,OAAWpM,IAGT0e,EAAgB,SAAC/e,G,UACnBuhB,EAAuB,QAAd,EAAAvhB,MAAAA,OAAO,EAAPA,EAASI,aAAK,eAAEI,SACzBghB,EAA4B,QAAd,EAAAxhB,MAAAA,OAAO,EAAPA,EAASI,aAAK,eAAEM,YAC9B+L,EAAyB,QAAd,EAAAzM,MAAAA,OAAO,EAAPA,EAASI,aAAK,eAAE6H,WAG/B,IAAArH,YAAU,WACF2C,IACAqb,GAAqB,GACrB0C,GAAa,GACbtV,GAAS,GACTiN,EAAc,IACd4I,IAGAxS,EAAQ8L,UAAU1M,EAAOhO,IAAIM,MAAK,SAAAia,GAE9B5a,EAAM+Y,gBAAgBpY,MAAK,SAAA0E,GACvBwT,EAAcxT,EAAW8J,MAAK,SAAC6J,EAAGC,GAC9B,IAAMC,EAAgBF,EAAE7T,KAClBgU,EAAgBF,EAAE9T,KACxB,OAAO+T,EAAME,cAAcD,OAE/B,IAAMvZ,EA9DK,SAACgb,G,MACxB,GAAIA,EAAQ,CACR,IAAMgE,EAAgChE,EAAO/X,QAAO,SAAAK,GAAS,MAAe,aAAfA,EAAMnG,QACnE,GAAI6hB,GAAkBA,EAAergB,OAAS,EAE1C,MAAO,CACHxB,KAAM,QACNiD,MAH0B4e,EAAe,GAGzBrV,MAI5B,GAA6B,WAAX,QAAd,EAAA8E,MAAAA,OAAM,EAANA,EAAQgN,cAAM,eAAEte,MAChB,OAAOsR,EAAOgN,OAkDqCwD,CAAmBjE,GAC9D+D,EAAc/e,GACdsG,EA9CQ,SAACb,EAAwBzF,GAC7C,GAAIA,EAAS,CACT,IAAMkf,EAAiCzZ,EAAWxC,QAAO,SAAAlD,GAAQ,MAAI,OAAAA,EAASU,MAA0B,QAAnB,EAAAgO,EAAOgN,OAAOrb,aAAK,eAAEU,eAC1G,IAAIoe,MAAAA,OAAkB,EAAlBA,EAAoBvgB,QAAS,EAC7B,OAAOugB,EAAmB,GAIlC,OAAIzZ,MAAAA,OAAU,EAAVA,EAAY9G,QAAS,EACd8G,EAAW,QAElB,EAmCoB0Z,CAAgB1Z,EAAYzF,IACxC4e,GAAqB,MACtB3X,OAAM,SAAAC,GAELC,QAAQD,MAAM,qDAAsDA,GACpE+R,EAAc,IACd8F,OAAc1e,GACdue,GAAqB,SAE1B3X,OAAM,SAAAC,GACLC,QAAQD,MAAM,yDAA0DA,GACxE+R,EAAc,IACd8F,OAAc1e,GACdue,GAAqB,SAG9B,CAACrb,KAEJ,IAAA3C,YAAU,WACNihB,MACD,CAACpT,KAGJ,IAAA7N,YAAU,WACN,IAAIqM,GAAiB,EAChBlN,IACDkN,GAAQ,GAEPwU,IACDxU,GAAQ,QAEc5M,IAAtBshB,IACA1U,GAAQ,GAEZjB,EAASiB,KACV,CAAClN,EAAUQ,EAAOG,EAAYuH,EAASwZ,EAAgBE,KAG1D,IAAA/gB,YAAU,WACN,GAAIb,EAAU,CACV,IAAM,EAAsC4G,EAAqBC,UAAU7G,GAC3E2G,EAAiB,MAEtB,CAAC3G,IAEJ,IAAMuN,EAAkB,CACpB,kBAAC,EAAA1C,OAAM,CAACjH,IAAI,SAAStF,QAAQ,UAAUkP,YAAaxB,GAAWsV,GAAsC,KAAvB5b,MAAAA,OAAU,EAAVA,EAAY9G,QAAcU,QAzK3F,WACbiiB,GAAa,GACbjS,EAAQ2E,iBAAiBvF,EAAOhO,IAAIM,MAAK,SAAAnB,GACrC,IAAM+J,EAAmC,CACrCxM,KAAMsR,EAAOtR,KACbqD,QAASD,EACTE,GAAIC,EACJuH,QAASA,EACTrI,QAASA,EAAQ+J,KACjBD,YAAa9J,EAAQ8J,aAEzBjD,MAAAA,GAAAA,EAAeqb,uBAAuBnY,GAAM5I,MAAK,SAAAghB,GAC7C,IAAM/hB,EAAyB,CAC3B7C,KAAM,QACNiD,MAAO,CACHU,WAAYf,MAAAA,OAAQ,EAARA,EAAUU,GACtBD,QAASuhB,EAAIvhB,QACbE,WAAYqhB,EAAIthB,GAChBwH,QAAS8Z,EAAI9Z,UAGf0B,EAA0B,CAC5B5J,SAAUA,EACV0O,OAAM,EACNzO,QAAO,GAGLsD,EAAqB,CACvB7C,GAAIgO,EAAOhO,GACXtD,KAAM,WACNke,GAAI,IAAI2G,KACRrY,KAAM3J,EAAQI,OAIlBiP,EAAQ4S,YAAY3e,GAAOvC,MAAK,WAC5BugB,GAAa,GACbhM,EAAW3L,MACZ1C,OAAM,WACLE,QAAQmQ,KAAK,sEACbgK,GAAa,GACbhM,EAAW3L,SAEhB1C,OAAM,SAAAC,GACLC,QAAQD,MAAM,6DAA8DA,GAC5E0a,EAAqB1a,GACrBoa,GAAa,SAElBra,OAAM,SAAAC,GAELC,QAAQD,MAAM,sDAAuDA,QAwHrE,kBAAC,EAAA5K,GAAE,CAACC,UAAW8kB,GACX,kBAAC,EAAAxjB,QAAO,CAACY,KAAK,KAAK7B,UAAU,oB,UAIrC,kBAAC,EAAAgO,OAAM,CAACjH,IAAI,SAAStF,QAAQ,OAAOgB,QAASyM,GAAQ,WAKzD,OACI,kBAAC,EAAAqB,MAAK,CACF9O,QAAS,EAAA+O,aAAA,OACTzQ,MAAM,6BACN4G,OAAQA,EACR8J,QAASvB,EACTwB,QAASA,GAET,kBAAC,KAAS,CAAC/Q,UAAWoiB,GAClB,kBAAC,KAAU,CAAC5gB,WAAY0H,EAAYzH,WAAY,kBAAC,KAAe,CAACsD,QAAQ,6GACrE,kBAAC,EAAAkM,KAAI,KACD,kBAAC,EAAAC,UAAS,CAAC9B,MAAM,oBAAoB+B,YAAY,EAAMC,QAAQ,4BAC3D,kBAAC,KAAY,CAAC3L,MAAOyD,EACjB1D,MAAOhC,EACPkC,SA5IH,SAAClC,GACtB2hB,GAAkB,GAClBpb,EAAYvG,IA2IY1B,QAAS,EAAA+E,cAAA,OACThB,SAAS,kBACTC,aAAa,SACbH,aAAc,SAAAW,GAAQ,OAAAA,EAAK0C,SAEnC,kBAACoC,EAAO,CAAC5H,SAAUA,EAAU6H,MAAM,QAAQsa,YAAaR,GACpD,kBAAC,EAAAplB,GAAE,CAACC,eAAiC8D,IAAtBshB,GACX,kBAACQ,EAAiB,CAAC1T,OAAQA,EAAQvH,MAAOya,EACtC7V,SAAUA,EACVsW,WAAY,WAAM,OAAAR,OAAqBvhB,OAE/C,kBAAC,EAAA/D,GAAE,CAACC,eAAiC8D,IAAtBshB,GACX,kBAAC,EAAAlU,UAAS,CAAC9B,MAAM,QAAQ+B,YAAY,EAAOC,QAAQ,gBAChD,kBAAC,EAAAC,UAAS,CACNF,YAAU,EACVvQ,KAAK,OACLsD,GAAG,eACH8E,KAAK,eACL2U,YAAY,0DAAyD,mBACpD,sBACjBnY,MAAOxB,EACPkK,SAAU,SAAC1I,GAAU,OAAAwf,EAASxf,OAGtC,kBAAC,EAAA0L,UAAS,CAAC9B,MAAM,KAAK+B,YAAY,EAAOC,QAAQ,sBAC7C,kBAAC,EAAAC,UAAS,CACNF,YAAU,EACVvQ,KAAK,OACLsD,GAAG,qBACH8E,KAAK,qBACL2U,YAAY,sDAAqD,mBAChD,4BACjBnY,MAAOrB,EACP+J,SAAU,SAAC1I,GAAU,OAAAyf,EAAczf,OAG3C,kBAAC,EAAA0L,UAAS,CAAC9B,MAAM,UAAU+B,YAAY,EAAOC,QAAQ,kBAClD,kBAAC,EAAAC,UAAS,CACNF,YAAU,EACVvQ,KAAK,OACLsD,GAAG,iBACH8E,KAAK,iBACL2U,YAAY,uEAAsE,mBACjE,wBACjBnY,MAAOkG,EACPwC,SAAU,SAAC1I,GAAU,OAAA0K,EAAW1K,cC5R3DyT,EAAmD,SAC5D,G,IAAE/G,EAAM,SAAElL,EAAM,SAAEmM,EAAQ,WAAE5D,EAAQ,WAE9B,GAAsB,IAAA7L,WAAS,GAA9B8L,EAAO,KAAEC,EAAQ,KAClB,GAAkB,IAAA/L,YAAjBsF,EAAI,KAAE0G,EAAO,KACd,GAAwB,IAAAhM,YAAvBiM,EAAO,KAAEC,EAAU,KA0B1B,OAhBA,IAAAvL,YAAU,WACF2C,IACA0I,EAAQwC,MAAAA,OAAM,EAANA,EAAQlJ,MAChB4G,EAAWsC,MAAAA,OAAM,EAANA,EAAQvC,YAExB,CAAC3I,KAGJ,IAAA3C,YAAU,WACN,IAAIqM,GAAiB,EAChB1H,IACD0H,GAAQ,GAEZjB,EAASiB,KACV,CAAC1H,EAAM2G,IAGN,kBAAC,EAAAiB,MAAK,CACF9O,QAAS,EAAA+O,aAAA,OACTzQ,MAAM,uBACN4G,OAAQA,EACR8J,QAASvB,EACTwB,QAAS,CACL,kBAAC,EAAA1C,OAAM,CAACjH,IAAI,OAAOtF,QAAQ,UAAUkP,YAAaxB,EAAS1M,QA9BtD,WACbqQ,EAAS,CACLnK,KAAMA,EACN2G,QAASA,MA2BuE,QAC5E,kBAAC,EAAAtB,OAAM,CAACjH,IAAI,SAAStF,QAAQ,OAAOgB,QAASyM,GAAQ,YAGzD,kBAAC,EAAA0B,KAAI,KACD,kBAAC,EAAAC,UAAS,CAAC9B,MAAM,OAAO+B,YAAY,EAAMC,QAAQ,aAC9C,kBAAC,EAAAC,UAAS,CACNF,YAAU,EACVvQ,KAAK,OACLsD,GAAG,YACH8E,KAAK,YACL2U,YAAY,4BAA2B,mBACtB,mBACjBnY,MAAOwD,EACPkF,SAAU,SAAC1I,GAAU,OAAAkK,EAAQlK,OAGrC,kBAAC,EAAA0L,UAAS,CAAC9B,MAAM,cAAcgC,QAAQ,oBACnC,kBAAC,EAAAE,SAAQ,CACL1Q,KAAK,OACLsD,GAAG,mBACH8E,KAAK,mBAAkB,mBACN,0BACjBxD,MAAOmK,EACPzB,SAAU,SAAC1I,GAAWoK,EAAWpK,UCtD5C4F,EAA2C,SAAC,G,IAAE5H,EAAQ,WAAE6H,EAAK,QAAEsa,EAAW,cAAE1lB,EAAQ,WACvF,GAA0B,IAAAyD,WAAkB,GAA3CjB,EAAS,KAAEiK,EAAU,KACtB,GAA0B,IAAAhJ,YAAzBoiB,EAAQ,KAAEC,EAAW,KAEtBC,GAA4C,UAE5CC,EAAgB,SAACxL,GACnB,OAAQpP,GACJ,IAAK,OACD,OAAQoP,MAAAA,OAAI,EAAJA,EAAMyL,UAAmBzL,MAAAA,OAAI,EAAJA,EAAM0L,aAAW,IAAW1L,MAAAA,OAAI,EAAJA,EAAM2L,SAAO,EAC9E,IAAK,QACD,OAAQ3L,MAAAA,OAAI,EAAJA,EAAM0L,aAAsB1L,MAAAA,OAAI,EAAJA,EAAM2L,SAAO,EACrD,IAAK,QACD,OAAQ3L,MAAAA,OAAI,EAAJA,EAAM2L,SAAO,EAE7B,OAAO,GAiCX,OA9BA,IAAA/hB,YAAU,WACNqI,GAAW,QACM5I,IAAbN,EACAwiB,EAAa3b,UAAU7G,GAAU6iB,iBAAiB7hB,MAAK,SAAAshB,GACnDC,EAAYD,GACRH,GACAA,EAAYM,EAAcH,IAE9BpZ,GAAW,MACZhC,OAAM,SAAAC,GACLC,QAAQ6P,KAAK,qEAAsE9P,GACnFob,EAAY,CACRK,OAAO,EACPD,WAAW,EACXD,QAAQ,EACRI,YAAa,GACbC,SAAU,KAEVZ,GACAA,GAAY,GAEhBjZ,GAAW,MAGXiZ,GACAA,GAAY,KAGrB,CAACniB,IAGA,kBAAC,KAAS,CAACxD,UAAWyC,GAEdwjB,EAAcH,GACV,kBAAC,aAAc,CAAC7lB,SAAUA,IAE1B,kBAAC,EAAAyE,MAAK,CAAC5C,QAAQ,SAAS6C,UAAU,EAAMvE,MAAM,iCAC1C,2B,4EAEI,0BAAMwE,MAAO,CAAE4hB,WAAY,S,IAAYhjB,MAAAA,OAAQ,EAARA,EAAUwF,M,yHCvEhE4c,EAA+D,SAAC,G,IAAE1T,EAAM,SAAEvH,EAAK,QAAEkb,EAAU,aAAEtW,EAAQ,WAC9G,OACI,kBAAC,EAAA7K,MAAK,CAAC5C,QAAQ,SACX6C,UAAU,EACV8hB,YACI,kBAAC,aAAc,KACX,kBAAC,EAAAC,gBAAe,CAAC5jB,QAAS+iB,GAAU,aACpC,kBAAC,EAAAa,gBAAe,CAAC5jB,QAASyM,GAAQ,kBAG1CnP,MAAO,2BAAoB8R,EAAOlJ,KAAI,0BACtC,kBAAC,EAAA2d,UAAS,CAAC/hB,MAAO,CAAE0G,UAAW,OAAQzG,aAAc,SACjD,kBAAC,EAAA+hB,cAAa,CAAC1iB,GAAG,gBAAgB4D,KAAK8P,UAAUjN,EAAO,KAAM,Q,0KCD9E,SAASkc,EAAqBjmB,EAAcyC,GACxC,OAAQzC,GACJ,IAAK,WACD,OAAO,yBACX,IAAK,OACL,IAAK,MACL,IAAK,MACD,OAAO,oBACX,IAAK,UACD,OAAO,wBAEf,OAAI,QAAOyC,GACA,sBACA,QAAMA,GACN,qBACA,QAAOA,GACP,qBAEA,2BAKf,SAASyjB,EAAiB7iB,GACtB,OAAOA,GAAW,UA8Mf,IAAM8iB,EAAoE,WAC7E,IAAMC,GAAa,IAAAC,WAEnB,MAAO,CACH5c,UAAW,SAAC7G,GACR,IAAM0jB,GAAsB,QAAW1jB,EAAS2jB,YAAuB,qBACvE,MAAO,CACHC,eAAgB,SAACha,GAAS,OAjN1C,SAA8B4Z,EAAYK,EAAkBja,G,2BAA2Bka,SAAO,W,2EACxDN,MAAAA,OAAI,EAAJA,EAAMO,mBAAoB,GAAMP,MAAAA,OAAI,EAAJA,EAAMO,kBAAkBC,YAAjC,M,cAAG,W,aAA2C,K,iBAavG,OAbMC,EAAK,EAELC,GAAmB,QAAeL,EAAU,6BAA8B,CAAEpjB,QAASmJ,EAAKnJ,UAC1F0jB,EAAe,CACjB,cAAiB,iBAAUF,IAE3Bra,EAAKlJ,KACLyjB,EAAQ,yBAA2Bva,EAAKlJ,IAExCkJ,EAAKxM,OACL+mB,EAAQ,2BAA6Bva,EAAKxM,MAE9C+mB,EAAQ,gBAAkBd,EAAqBzZ,EAAKxM,KAAMwM,EAAK/J,SACxD,CAAP,GAAO,QAA0CqkB,EAAUta,EAAK/J,SAAS,QAAcskB,YAmMjDP,CAAeJ,EAAME,EAAa9Z,IAC5Dwa,sBAAuB,SAAC3jB,EAASE,EAAYiJ,GAAS,OAvKtE,SAAqC4Z,EAAYK,EAAkBpjB,EAA6BE,EAAoBiJ,G,2BAA0Bka,SAAO,W,2EAC/GN,MAAAA,OAAI,EAAJA,EAAMO,mBAAoB,GAAMP,MAAAA,OAAI,EAAJA,EAAMO,kBAAkBC,YAAjC,M,cAAG,W,aAA2C,K,iBAevG,OAfMC,EAAK,EAEXxjB,EAAU6iB,EAAiB7iB,GAErByjB,GAAmB,QAAeL,EAAU,kDAAmD,CACjGpjB,QAASA,GAAW,UACpBE,WAAU,IAERwjB,EAAe,CACjB,cAAiB,iBAAUF,IAE3Bra,EAAKxM,OACL+mB,EAAQ,2BAA6Bva,EAAKxM,MAE9C+mB,EAAQ,gBAAkBd,EAAqBzZ,EAAKxM,KAAMwM,EAAK/J,SACxD,CAAP,GAAO,QAAyCqkB,EAAUta,EAAK/J,SAAS,QAAcskB,YAuJpBC,CAAsBZ,EAAME,EAAajjB,EAASE,EAAYiJ,IACpHmY,uBAAwB,SAACnY,GAAqC,OAjM9E,SAAsC4Z,EAAYK,EAAkBja,G,2BAAmCka,SAAO,W,2EACxEN,MAAAA,OAAI,EAAJA,EAAMO,mBAAoB,GAAMP,MAAAA,OAAI,EAAJA,EAAMO,kBAAkBC,YAAjC,M,cAAG,W,aAA2C,K,iBAoBvG,OApBMC,EAAK,EAELC,GAAmB,QAAeL,EACpC,6BACA,CAAEpjB,QAASmJ,EAAKnJ,SAAW,WAC3B,CAAE4jB,SAAU,WAEVF,EAAe,CACjB,cAAiB,iBAAUF,IAE3Bra,EAAKlJ,KACLyjB,EAAQ,yBAA2Bva,EAAKlJ,IAExCkJ,EAAKxM,OACL+mB,EAAQ,2BAA6Bva,EAAKxM,MAE1CwM,EAAK1B,UACLic,EAAQ,sBAAwBva,EAAK1B,SAEzCic,EAAQ,gBAAkBva,EAAKD,YACxB,CAAP,GAAO,QAA0Cua,EAAUta,EAAK/J,SAAS,QAAcskB,YA4KbpC,CAAuByB,EAAME,EAAa9Z,IACxG5C,aAAc,SAACX,EAAUL,GAAW,OArJpD,SAA4Bwd,EAAYK,EAAkBxd,EAAgCL,G,2BAAiB8d,SAAO,W,iFAC9G1c,QAAQsB,MAAM,6CAA8CrC,EAAUL,IACpCwd,MAAAA,OAAI,EAAJA,EAAMO,mBAAoB,GAAMP,MAAAA,OAAI,EAAJA,EAAMO,kBAAkBC,YAAjC,M,cAAG,W,aAA2C,K,iBAuBvG,OAvBMC,EAAK,EAELK,GAAiBte,EAAOD,KAAO,GAAKC,EAAOF,SAC3Cye,EAAcD,EAAQte,EAAOF,SAC7B0e,EAAmB,CACrBC,MAAOF,EACPG,OAAQJ,EACRK,MAAOte,EAASU,cAAgB,MAAQ,OACxC6d,QAAS,QAETve,EAASrE,QACY,cAAjBqE,EAASjJ,MACTonB,EAAkB,KAAIne,EAASrE,MAC/BwiB,EAAyB,YAAIne,EAASrE,MACtCwiB,EAAoB,OAAIne,EAASrE,OAEjCwiB,EAAYne,EAASjJ,MAAQiJ,EAASrE,OAGxCkiB,GAAmB,QAAeL,EAAU,oBAAqB,GAAIW,GACrEL,EAAe,CACjB,cAAiB,iBAAUF,IAExB,CAAP,GAAO,QAA+BC,GAAU,QAAcC,IAAU,SAACva,GAOrE,MANuC,CACnCpD,UAAWoD,EAAKpD,UAChBa,MAAOuC,EAAKvC,MACZtB,KAAMC,EAAOD,KACbD,SAAUE,EAAOF,qBAuHuBkB,CAAawc,EAAME,EAAard,EAAUL,IAC9EmC,mBAAoB,SAAC1H,EAASE,EAAYuH,GAAY,OAjHtE,SAAkCsb,EAAYK,EAAkBpjB,EAA6BE,EAAoBuH,G,2BAAkB4b,SAAO,W,6EACpGN,MAAAA,OAAI,EAAJA,EAAMO,mBAAoB,GAAMP,MAAAA,OAAI,EAAJA,EAAMO,kBAAkBC,YAAjC,M,cAAG,W,aAA2C,K,iBAqBvG,OArBMC,EAAK,EAEXxjB,EAAU6iB,EAAiB7iB,GAEvByjB,GAAmB,QAAeL,EAAU,2DAA4D,CACxGpjB,QAAO,EACPE,WAAU,EACVuH,QAAO,IAELic,EAAe,CACjB,OAAU,IACV,cAAiB,iBAAUF,IAEf,WAAZ/b,IACAgc,GAAW,QAAeL,EAAU,yCAA0C,CAAEpjB,QAAO,EAAEE,WAAU,MAGjG0gB,GAAe,QAAc8C,IAC3BU,iBAAmB,UAC3BxD,EAAQyD,aAAe,OACvBzD,EAAQ0D,kBAAoB,SAACnb,GAAc,OAAAA,GACpC,CAAP,GAAO,QAAgBsa,EAAU7C,WA2FiClZ,CAAmBqb,EAAME,EAAajjB,EAASE,EAAYuH,IACjHI,oBAAqB,SAAC7H,EAASE,GAAe,OAxF9D,SAAmC6iB,EAAYK,EAAkBpjB,EAA6BE,G,2BAAqBmjB,SAAO,W,2EACpFN,MAAAA,OAAI,EAAJA,EAAMO,mBAAoB,GAAMP,MAAAA,OAAI,EAAJA,EAAMO,kBAAkBC,YAAjC,M,cAAG,W,aAA2C,K,iBAevG,OAfMC,EAAK,EAEXxjB,EAAU6iB,EAAiB7iB,GAE3B2G,QAAQ6P,KAAK,qEAAsExW,EAASE,GACtFujB,GAAmB,QAAeL,EAAU,kDAAmD,CACjGpjB,QAAO,EACPE,WAAU,GACX,CACC8jB,MAAO,IACPC,OAAQ,IAENP,EAAe,CACjB,cAAiB,iBAAUF,IAExB,CAAP,GAAO,QAA2BC,GAAU,QAAcC,IAAU,SAACva,GACjE,OAAOA,EAAKT,oBAuE0Cb,CAAoBkb,EAAME,EAAajjB,EAASE,IAC9FqkB,0BAA2B,SAACvkB,EAASE,EAAYd,GAAY,OApE7E,SAAyC2jB,EAAYK,EAAkBpjB,EAA6BE,EAAoBd,G,2BAAkBikB,SAAO,W,2EAC3GN,MAAAA,OAAI,EAAJA,EAAMO,mBAAoB,GAAMP,MAAAA,OAAI,EAAJA,EAAMO,kBAAkBC,YAAjC,M,cAAG,W,aAA2C,K,iBAYvG,OAZMC,EAAK,EAEXxjB,EAAU6iB,EAAiB7iB,GAE3B2G,QAAQ6P,KAAK,gEAAiExW,EAASE,GACjFujB,GAAmB,QAAeL,EAAU,8CAA+C,CAC7FpjB,QAAO,EACPE,WAAU,IAERwjB,EAAe,CACjB,cAAiB,iBAAUF,IAExB,CAAP,GAAO,QAAaC,EAAUrkB,GAAS,QAAcskB,YAuDoBa,CAA0BxB,EAAME,EAAajjB,EAASE,EAAYd,IAC/HgjB,eAAgB,WAAM,OArDtC,SAA8BW,EAAYK,G,2BAAmBC,SAAO,W,6EAE9BN,MAAAA,OAAI,EAAJA,EAAMO,mBAAoB,GAAMP,MAAAA,OAAI,EAAJA,EAAMO,kBAAkBC,YAAjC,M,cAAG,W,aAA2C,K,iBAQvG,OARMC,EAAK,EAEX7c,QAAQ6P,KAAK,oEACPiN,GAAmB,QAAeL,EAAU,aAC5CM,EAAe,CACjB,cAAiB,iBAAUF,IAEzB5C,GAAe,QAAc8C,GAC5B,CAAP,GAAO,QAAkBD,EAAU7C,WA2CDwB,CAAeW,EAAME,Q,8BC3PrDuB,EAAK,IAAI,IAAJ,CAAU,aAQrB,SAAeC,EAAapN,EAAkBC,G,2BAA2B+L,SAAO,W,6CA+B5E,OA9BMpjB,GAAa,UACbykB,EAAoB,CACtBzkB,GAAE,EACF8E,MAAM,QAAMsS,EAAGtS,KAAM,IACrB2G,SAAS,QAAM2L,EAAG3L,QAAS,KAC3B/O,KAAM0a,EAAG1a,KACT0d,UAAW,IAAImH,KACf/R,WAAY,IAAI+R,KAChBvG,QAAQ,QAAY5D,EAAG7X,UAErBmlB,EAAkC,CACpC1kB,GAAE,EACFiJ,YAAaoO,EAAIpO,YACjBC,KAAMmO,EAAInO,MAERyb,EAAwB,CAC1B3kB,GAAE,EACFtD,KAAM,SACNke,GAAI,IAAI2G,KACRrY,KAAM,IAENkO,EAAG7X,UACHolB,EAASzb,KAAK3J,SAAU,QAAY6X,EAAG7X,SACf,WAApB6X,EAAG7X,QAAQ7C,OACXioB,EAASjoB,KAAO,WAIxBioB,EAAS3kB,GAAKA,EAEP,CAAP,EAAOojB,QAAQwB,IAAI,CAGfL,EAAG3V,QAAQiW,IAAIJ,GAGfF,EAAGplB,QAAQ0lB,IAAIH,GACflD,EAAYmD,KACbrkB,MAAK,WAAM,OAAAmkB,YAGlB,SAAeK,I,2BAAc1B,SAAO,W,iCAGhC,MAAO,CAAP,EAAOmB,EAAG3V,QAAQmW,iBAGtB,SAAejR,EAAcnO,EAAiCL,EAAgBwJ,G,2BAAoBsU,SAAO,W,uCAgBrG,OAfA1c,QAAQsB,MAAM,2CAA4CrC,EAAUL,GAC9DqW,EAAS,SAAC3N,GACZ,IAAIgX,GAAmB,EAUvB,OATKrf,EAASH,aAAsD,IAAvCG,EAASH,YAAYoO,OAAO1V,QAE9C8P,EAAOlJ,KAAKmgB,cAAcC,QAAQvf,EAASH,YAAYyf,gBAAkB,GAEzEjX,EAAOvC,SAAWuC,EAAOvC,QAAQwZ,cAAcC,QAAQvf,EAASH,YAAYyf,gBAAkB,GAE9FjX,EAAOtR,KAAKuoB,cAAcC,QAAQvf,EAASH,YAAYyf,gBAAkB,KAHhFD,GAAU,GAFVA,GAAU,EAQPA,GAGJ,CAAP,EAAOF,IAAaxkB,MAAK,SAAAsO,GAIrB,IAAMuW,EAA4BvW,EAAQpM,OAAOmZ,GAAQ7M,MAAK,SAACsW,EAASC,GACpE,IAAI9c,EAA2B,SAAZuG,EAAKuB,GACpB+U,EAAQtgB,KAAKiU,cAAcsM,EAAQvgB,MAEnCsgB,EAAQ5V,WAAW8V,UAAYD,EAAQ7V,WAAW8V,UAKtD,MAHuB,QAAnBxW,EAAKqB,YACL5H,IAAS,GAENA,KAGLgd,EAAqBJ,EAAgBjnB,OAErC0lB,GAAiBte,EAAOD,KAAO,GAAKC,EAAOF,SAC3Cye,EAAcD,EAAQte,EAAOF,SAEnC,MAAO,CACHwJ,QAF2BuW,EAAgBK,MAAM5B,EAAOC,GAGxDxe,KAAMC,EAAOD,KACbD,SAAUE,EAAOF,SACjBuB,MAAO4e,aAMnB,SAAeE,EAAUzlB,G,2BAAaojB,SAAO,W,iCAGzC,MAAO,CAAP,EAAOmB,EAAG3V,QAAQ8W,MAAM,MAAMC,OAAO3lB,GAAI4lB,eAG7C,SAAenR,EAAazU,G,2BAAaojB,SAAO,W,iCAC5C,MAAO,CAAP,EAAOA,QAAQwB,IAAI,CAGfL,EAAG3V,QAAQ8W,MAAM,MAAMC,OAAO3lB,GAAI6lB,SAGlCtB,EAAGplB,QAAQumB,MAAM,MAAMC,OAAO3lB,GAAI6lB,SAGlCtB,EAAGhK,OAAOmL,MAAM,MAAMC,OAAO3lB,GAAI6lB,WAClCvlB,MAAK,sBAKZ,SAAe0U,EAAahV,EAAY8lB,EAAiBC,G,2BAAsB3C,SAAO,W,iCAGlF,MAAO,CAAP,EAAOmB,EAAG3V,QAAQoX,OAAOhmB,EAAI,CACzB8E,MAAM,QAAMghB,EAAS,IACrBra,SAAS,QAAMsa,EAAY,cAInC,SAAexS,EAAiBvT,G,2BAAaojB,SAAO,W,iCAGhD,MAAO,CAAP,EAAOmB,EAAGplB,QAAQumB,MAAM,MAAMC,OAAO3lB,GAAI4lB,eAG7C,SAAeK,EAAoB9mB,G,2BAAyBikB,SAAO,W,uCAQ/D,OAPMuB,EAAwB,CAC1B3kB,GAAIb,EAAQa,GACZtD,KAAM,SACNke,GAAI,IAAI2G,KACRrY,KAAM,IAGH,CAAP,EAAOka,QAAQwB,IAAI,CAGfL,EAAGplB,QAAQ6mB,OAAO7mB,EAAQa,GAAI,CAC1BkJ,KAAM/J,EAAQ+J,OAIlBqb,EAAG3V,QAAQoX,OAAO7mB,EAAQa,GAAI,CAC1BwP,WAAY,IAAI+R,OAEpBC,EAAYmD,KACbrkB,MAAK,sBAMZ,SAAeoa,EAAU1a,G,2BAAaojB,SAAO,W,iCAGzC,MAAO,CAAP,EAAOmB,EAAGhK,OAAOmL,MAAM,MAAMC,OAAO3lB,GAAIkmB,UAAUhW,OAAO,aAI7D,SAAesR,EAAY3e,G,2BAAqBugB,SAAO,W,iCAInD,OAHAvgB,EAAMsjB,SAAU,UAGT,CAAP,EAAO5B,EAAGhK,OAAOsK,IAAIhiB,UAhLzB0hB,EAAG/c,QAAQ,GAAG4e,OAAO,CACjBxX,QAAS,0CACTzP,QAAS,OACTob,OAAQ,4BAqML,IAAM8L,EAA0C,WACnD,MAAO,CACH7B,aAAY,EACZM,WAAU,EACVhR,cAAa,EACb2R,UAAS,EACThR,aAAY,EACZO,aAAY,EACZzB,iBAAgB,EAChB0S,oBAAmB,EACnBvL,UAAS,EACT8G,YAAW,I,izHChOZ,IAAM8E,EAAmC,CAC5C,CACItmB,GAAI,mBACJ8E,KAAM,YACN3F,QAAS,CACL8J,YAAa,qBACbC,KAAM,IAGd,CACIlJ,GAAI,0BACJ8E,KAAM,wBACN3F,QAAS,CACL8J,YAAa,qBACbC,KAAM,K,g/rBCVX,IAAMqd,EAAkC,CAC3C,CACIvmB,GAAI,kBACJ8E,KAAM,YACN3F,QAAS,CACL8J,YAAa,qBACbC,KAAM,IAGd,CACIlJ,GAAI,qBACJ8E,KAAM,oBACN3F,QAAS,CACL8J,YAAa,qBACbC,KAAM,IAGd,CACIlJ,GAAI,kBACJ8E,KAAM,oBACN3F,QAAS,CACL8J,YAAa,qBACbC,KAAM,KAKLsd,EAAkC,CAC3C,CACIxmB,GAAI,kBACJ8E,KAAM,YACN3F,QAAS,CACL8J,YAAa,qBACbC,KAAM,IAGd,CACIlJ,GAAI,qBACJ8E,KAAM,oBACN3F,QAAS,CACL8J,YAAa,qBACbC,KAAM,K,mMC9CX,IAAMud,EAA6B,CACtC,CACIzmB,GAAI,aACJ8E,KAAM,oBACN3F,QAAS,CACL8J,YAAa,qBACbC,KAAM,K,uGCNX,IAAMwd,EAA6B,CACtC,CACI1mB,GAAI,aACJ8E,KAAM,oBACN3F,QAAS,CACL8J,YAAa,qBACbC,KAAM,K,iHCNX,IAAMyd,EAAiC,CAC1C,CACI3mB,GAAI,iBACJ8E,KAAM,wBACN3F,QAAS,CACL8J,YAAa,yBACbC,KAAM,OCGlB,SAAeuD,EAAgB/P,EAAc8K,G,2BAAmB4b,SAAO,W,iCACnE,OAAI1mB,IAAS,SACF,CAAP,EAAO0mB,QAAQwD,QAAQF,IAEvBhqB,IAAS,aACF,CAAP,EAAO0mB,QAAQwD,QAAQD,IAEvBjqB,IAAS,SACF,CAAP,EAAO0mB,QAAQwD,QAAQH,IAEvB/pB,IAAS,aACF,CAAP,EAAO0mB,QAAQwD,QAAQN,IAEvB5pB,IAAS,YACL8K,GAAWA,EAAQqf,WAAW,KACvB,CAAP,EAAOzD,QAAQwD,QAAQL,IAEhB,CAAP,EAAOnD,QAAQwD,QAAQJ,IAGxB,CAAP,EAAOpD,QAAQ0D,OAAO,sCAA+BpqB,EAAI,wBAAgB8K,EAAO,aAe7E,IAAMuf,EAA8C,WACvD,MAAO,CACHta,gBAAe,ICQhB,IAAMua,EAA4C,WAErD,IAAMhU,EAA6BqT,IACnC,MAAO,CACH1S,aAAc,SAAC3F,EAAgB7O,EAAiB8J,EAAqBuK,GACjE,OAnDZ,SAA4BR,EAA4BhF,EAAgB7O,EAAiB8J,EAAqBuK,G,2BAAmB4P,SAAO,W,+CA+BpI,OA9BA1c,QAAQ6P,KAAK,gDAGK3W,KAFZqnB,EAAUC,QAETC,QAEGC,EAAOtgB,SAASugB,cAAc,KAC9BC,EAAO,IAAIC,KAAK,CAACpoB,GAAU,CAAEzC,KAAMuM,IACzCme,EAAK3nB,KAAOwnB,EAAGxP,IAAI+P,gBAAgBF,GACnCF,EAAKK,SAAWjU,EAChB4T,EAAKM,cACmB9nB,IAAjBqnB,EAAGU,gBAAuD/nB,IAA5BqnB,EAAGU,UAAUC,YAE5CN,EAAO,IAAIC,KAAK,CAACpoB,GAAU,CAAEzC,KAAMuM,IACzCge,EAAGU,UAAUC,WAAWN,EAAM9T,KAGxB2D,EAAO,IAAI0Q,KAAK,CAAC1oB,GAAUqU,EAAU,CAAE9W,KAAM,+BACnDuqB,EAAGa,KAAKrQ,IAAI+P,gBAAgBrQ,KAI1BtU,EAAqB,CACvB7C,GAAIgO,EAAOhO,GACXtD,KAAM,WACNke,GAAI,IAAI2G,KACRrY,KAAM,CACFsK,SAAQ,IAIT,CAAP,EAAOR,EAAWwO,YAAY3e,UAoBf8Q,CAAaX,EAAYhF,EAAQ7O,EAAS8J,EAAauK,MC5DpEuU,EAAsB,iEAG5B,SAAerO,EAAgBzD,G,2BAAcmN,SAAO,W,mDAoBhD,OAlBc,QADR4E,EAAiC/R,EAAI+R,MAAMD,MAEvCE,EAAcD,EAAM,GACpBE,EAAeF,EAAM,GACrBG,EAAiBH,EAAM,GACvBzkB,EAAeykB,EAAM,GAE3B/R,EAAM,4CAAqCgS,EAAG,YAAIC,EAAI,YAAIC,EAAM,YAAI5kB,IAGxEmD,QAAQ6P,KAAK,6CAA8CN,GAErDuN,EAAmBvN,GACnB0K,GAAe,QAAc,CAC/B,OAAU,OAENwD,iBAAmB,UAC3BxD,EAAQyD,aAAe,OACvBzD,EAAQ0D,kBAAoB,SAACnb,GAAc,OAAAA,GACpC,CAAP,GAAO,QAAgBsa,EAAU7C,UAe9B,IAAMyH,EAAkC,WAC3C,MAAO,CACH1O,gBAAe,I,0CCvBV2O,EAAwC,WACzC,IAAAC,IAAa,IAAAC,aAAc,IAAE,SAErC,MAAO,CACH7T,cAAA,SAAc1G,GACVsa,EAAS,CACLpsB,MAAO,oBACP8C,YAAa,kBAAWgP,EAAOlJ,KAAI,+BACnClH,QAAS,EAAA4qB,aAAA,QACTC,WAAY,0BAIpB9T,mBAAA,SAAmB3G,EAAgBvH,GAC/B6hB,EAAS,CACLpsB,MAAO,gBACP8C,YAAa,mCAA4BgP,EAAOlJ,KAAI,eAAO2B,GAC3D7I,QAAS,EAAA4qB,aAAA,OACTC,WAAY,+BAIpBxT,cAAA,SAAcpS,GACVylB,EAAS,CACLpsB,MAAO,+BACP8C,YAAa,6CAAsC6D,EAAMiC,KAAI,gCAC7DlH,QAAS,EAAA4qB,aAAA,QACTC,WAAY,0BAIpBC,YAAA,SAAY1a,GACR,IAAMhP,EACF,kBAAC,aAAc,KACX,6B,WACagP,MAAAA,OAAM,EAANA,EAAQlJ,K,SAAW,0BAAMpE,MAAO,CAAE4hB,WAAY,SAAQ,8C,MAK3EgG,EAAS,CACLpsB,MAAO,kBACP8C,YAAW,EACXpB,QAAS,EAAA4qB,aAAA,QACTC,WAAY,wBAIpB3T,sBAAA,SAAsBjS,GAClB,IAAM7D,EACF,kBAAC,aAAc,KACX,6BAAM,kBAAW6D,EAAMmL,OAAOlJ,KAAI,qDAClC,kBAAC,KAAe,CAACxF,SAAUuD,EAAMvD,SAAUC,QAASsD,EAAMtD,SAAO,sCAIzE+oB,EAAS,CACLpsB,MAAO,oBACP8C,YAAW,EACXpB,QAAS,EAAA4qB,aAAA,QACTC,WAAY,gC,gBC9E5B,SAASjU,EAAkBmU,EAAsBC,GAC7CliB,QAAQ6P,KAAK,wDAAiDoS,EAAY,qBAAaC,EAAa,MACpG,IAAMtnB,EAAyC,iBAAlBsnB,EAA6BA,EAA0BhlB,KAAK8P,UAAUkV,GACnGC,aAAaC,QAAQ,mBAAqBH,EAAcrnB,GAG5D,SAASuS,EAAkB8U,EAAsBI,GAC7CriB,QAAQ6P,KAAK,wDAAiDoS,IAC9D,IAAMrnB,EAAqBunB,aAAaG,QAAQ,mBAAqBL,GACrE,OAAKrnB,EAGDA,EAAMulB,WAAW,KACVjjB,KAAKqlB,MAAM3nB,GAEfA,EALIynB,EAQf,SAASG,EAAoBP,GACzBjiB,QAAQ6P,KAAK,yDAAkDoS,IAC/DE,aAAaM,WAAWR,G,iBAgBrB,IAAMS,EAAoD,WAC7D,MAAO,CACH5U,kBAAiB,EACjBX,kBAAiB,EACjBqV,oBAAmB,K,iFCrCrBG,EAA8B,CAGhC,CACIrpB,GAAI,IACJ8E,KAAM,oCACNme,YAAa,yBACb/iB,WAAY,4BACZsJ,OAAQ,QACR8f,WAAY,uBACZC,WAAY,uBACZC,cAAe,YAInB,CACIxpB,GAAI,IACJ8E,KAAM,oCACNme,YAAa,yBACb/iB,WAAY,4BACZsJ,OAAQ,QACR8f,WAAY,uBACZC,WAAY,uBACZC,cAAe,aAIjBC,EAAiC,CAGnC,CACIzpB,GAAI,MACJ8E,KAAM,2BACNme,YAAa,uEACb/iB,WAAY,0EACZsJ,OAAQ,QACR8f,WAAY,uBACZC,WAAY,uBACZC,cAAe,YAInB,CACIxpB,GAAI,MACJ8E,KAAM,2BACNme,YAAa,uEACb/iB,WAAY,0EACZsJ,OAAQ,QACR8f,WAAY,uBACZC,WAAY,uBACZC,cAAe,aAuEvB,SAASE,EAAkBC,GACvB,MAAO,CACHjR,cAAA,WACI,OAAO,IAAI0K,SAAQ,SAACwD,GAChBpjB,YAAW,WACPojB,EAAQ+C,KACT,SAGXvpB,YAAA,SAAYJ,GACR,OAAO,IAAIojB,SAAQ,SAACwD,GAChBpjB,YAAW,WACP,IAAMomB,EAAuBD,EAASnnB,QAAO,SAAAlD,GAAY,OAAAA,EAASU,KAAOA,KACzE,OAAI4pB,GAAYA,EAAS1rB,OAAS,EACvB0oB,EAAQgD,EAAS,IAEjBhD,EAAQ,MAEpB,UAMnB,IAAIiD,GAA2B,EACzBC,EAAc,SAACjpB,GACZgpB,IACDnjB,QAAQ6P,KAAK,qDACb7P,QAAQ6P,KAAK,iBAAkB1V,GAC/B6F,QAAQ6P,KAAK,qDACbsT,GAAkB,IAObE,EAAsC,WAC/C,IAAMjH,GAAa,IAAAC,WACbiH,GAAc,IAAAC,aACd7W,GAA6B,SAEnC,OAAI4W,EAAIE,IAAIC,aAAeH,EAAIE,IAAIC,YAAYtD,WAAW,eACtDiD,EAAY,0BACLJ,EAAkBL,IAGzBW,EAAIE,IAAIC,aAAeH,EAAIE,IAAIC,YAAYtD,WAAW,uBACtDiD,EAAY,0CACLJ,EAAkBD,IAGtB,CACH/Q,cAAe,WAAM,OAjH7B,SAA6BoK,EAAYK,G,2BAAmBC,SAAO,W,uEAC/D1c,QAAQsB,MAAM,qDAAsDmb,IAClCL,MAAAA,OAAI,EAAJA,EAAMoH,KAAM,GAAMpH,MAAAA,OAAI,EAAJA,EAAMoH,IAAI5G,YAAnB,M,cAAG,W,aAA6B,K,iBAO3E,OAPMC,EAAK,EAOJ,CAAP,EAN2B,IAAI,EAAA6G,cAC3B,IAAI,EAAAC,cAAc,CACdC,YAAa/G,EACbJ,SAAQ,KAGLzK,cAAc,EAAG,IAAIpY,MAAK,SAAAiqB,GAEjC,OADiCA,MAAAA,OAAG,EAAHA,EAAKrhB,MACpB3H,iBAsGGmX,CAAcoK,EAAMkH,EAAIE,IAAIC,cACjD/pB,YAAa,SAACJ,GAAO,OA5F7B,SAA2B8iB,EAAY1P,EAA4BpT,EAAYmjB,G,2BAAmBC,SAAO,W,oEAKrG,OAJA1c,QAAQsB,MAAM,kDAAmDmb,GAC3DqH,EAAmB,qCAA8BxqB,IACjDyqB,EAAuCrX,EAAMS,kBAAkB2W,OAAU5qB,KAI3E8G,QAAQsB,MAAM,kDAAmDhI,GAC1D,CAAP,EAAOojB,QAAQwD,QAAQ6D,MAGO3H,MAAAA,OAAI,EAAJA,EAAMoH,KAAM,GAAMpH,MAAAA,OAAI,EAAJA,EAAMoH,IAAI5G,YAAnB,M,cAAG,W,aAA6B,K,iBAO3E,OAPMC,EAAK,EAOJ,CAAP,EAN2B,IAAI,EAAA6G,cAC3B,IAAI,EAAAC,cAAc,CACdC,YAAa/G,EACbJ,SAAQ,KAGL/iB,YAAYJ,GAAIM,MAAK,SAAAiqB,GAC5B,IAAMjrB,EAAqBirB,MAAAA,OAAG,EAAHA,EAAKrhB,KAEhC,OADAkK,EAAMoB,kBAAkBgW,EAAUlrB,GAC3BA,aAuEcc,CAAY0iB,EAAM1P,EAAOpT,EAAIgqB,EAAIE,IAAIC,iB,gBC9K3D,SAASO,EAAYC,GACxB,OAAO/mB,KAAKqlB,MAAMrlB,KAAK8P,UAAUiX,IAU9B,SAASC,EAAgBD,EAAaE,EAAcvuB,GACvDwuB,OAAOC,KAAKJ,GAAQK,SAAQ,SAAA9nB,GACxB,IAAM5B,EAAaqpB,EAAOznB,GACL,iBAAV5B,EACPspB,EAAgBtpB,EAAOupB,EAAMvuB,GACtBgF,IAAUupB,IACjBF,EAAOznB,GAAO5G,M,gRCdnB,SAAS2uB,EAAO9rB,GACnB,IAEI,OADAyE,KAAKqlB,MAAM9pB,IACJ,EACT,MAAO+rB,GACL,OAAO,GAGR,SAASC,EAAUhsB,GACtB,OAAOyE,KAAKqlB,MAAM9pB,GAEf,SAASisB,EAAajsB,GACzB,OAAOyE,KAAK8P,UAAUvU,EAAS,KAAM,GAQlC,SAASksB,EAAOlsB,GACnB,IAEI,GAAsB,iBADF,UAAWA,GAE3B,OAAO,EAEb,MAAO+rB,IAGT,OAAO,EAEJ,SAASI,EAAUnsB,GACtB,OAAO,UAAWA,GAEf,SAASosB,EAAapsB,GACzB,OAAO,cAAeA,EAAS,KAAM,GAOlC,SAASqsB,EAAMrsB,GAClB,IAII,QADiF,KAFpD,IAAIssB,WACDC,gBAAgBvsB,EAAS,mBACvBwsB,qBAAqB,eAAeztB,QAExE,MAAOgtB,GACL,OAAO,GAIf,SAASU,EAAkBzsB,EAAiB0sB,EAAmBziB,GAC3D,IACI,IACM0iB,GADuB,IAAIL,WACDC,gBAAgBvsB,EAAS,mBAEzD,QADiF,IAAnD2sB,EAAIH,qBAAqB,eAAeztB,SAE/D4tB,EAAIC,gBAAgBC,eAAiBH,GACrCC,EAAIC,gBAAgB3iB,YAAcA,EAC3C,MAAO8hB,GACL,OAAO,GAGR,SAASe,EAAO9sB,GACnB,OAAOysB,EAAkBzsB,EAAS,mCAAoC,eAEnE,SAAS+sB,EAAM/sB,GAClB,OAAOysB,EAAkBzsB,EAAS,mCAAoC,UAQnE,SAASgtB,EAAQhtB,GACpB,IAEI,OADkC,IAAA8pB,OAAM9pB,IACjC,EACT,MAAO+rB,GACL,OAAO,GAKR,SAASkB,EAAuBpe,EAAgB7O,G,MAGnD,GAAI6O,EAAOgN,QAAiC,SAAvBhN,EAAOgN,OAAOte,KAAiB,CAChD,IAAM8W,EAAqC,QAAlB,EAAAxF,EAAOgN,OAAO7D,YAAI,eAAEpB,SAC7C,GAAIvC,EAAS0R,QAAQ,KAAO,EAAG,CAC3B,IAAMmH,EAAkB7Y,EAAS6Y,MAAM,KACvC,OAAOA,EAAMA,EAAMnuB,OAAS,IAIpC,OAAI8P,EAAOtR,OAAS,aACT,QAEPsR,EAAOtR,OAAS,SACT,OAEPsR,EAAOtR,OAAS,QACT,MAEPsR,EAAOtR,OAAS,QACT,MAEPsR,EAAOtR,OAAS,YACT,UAGPyC,EAAQ8J,aAAe9J,EAAQ8J,cAAgB,qBACxC,OAEP9J,EAAQ8J,aAAe9J,EAAQ8J,cAAgB,qBACxC,OAGJ,MAGJ,SAASqjB,EAAqBte,EAAgB7O,GACjD,OAAIA,EAAQ8J,YACD9J,EAAQ8J,YAGf+E,EAAOtR,OAAS,aACT,yBAEPsR,EAAOtR,OAAS,SACT,qBAEPsR,EAAOtR,OAAS,SAGhBsR,EAAOtR,OAAS,QAFT,aAKPsR,EAAOtR,OAAS,YACT,wBAGJ,qBAUJ,SAAS6vB,EAAcjrB,EAAe2H,GACzC,IACI,GAAIA,IAAgB,qBAA+B,CAC/C,IAAMujB,EAAc5oB,KAAKqlB,MAAM3nB,GAC/B,OAAOsC,KAAK8P,UAAU8Y,EAAQ,KAAM,IAE1C,MAAOtB,GAEL,OADAxkB,QAAQD,MAAMykB,GACP5pB,EAEX,OAAOA,EAOJ,SAASmrB,EAAuBnrB,GACnC,OAAQA,EAAMorB,QAAQ,gBAAiB,IAOpC,SAASC,EAAgBxtB,GAC5B,MAAuB,iBAAZA,EACAA,EAEAyE,KAAK8P,UAAUvU,EAAmB,KAAM,GC5LhD,SAASytB,EAAU5e,EAA4B6e,G,MAClD,OAAqB,QAAd,EAAA7e,MAAAA,OAAM,EAANA,EAAQgN,cAAM,eAAEte,QAASmwB,EAI7B,SAAS9I,EAAMziB,EAA2BpD,GAC7C,OAAKoD,GAASA,EAAMpD,OAASA,EAClBoD,EAEJA,EAAMwrB,UAAU,EAAG5uB,EAAS,GAAK,Q,2HCVtC6uB,E,MAAQ,YAGd,SAASC,EAAkBC,EAAgBhX,EAAa0K,EAAczX,GAIlE,MAHoB,iBAATA,IACPA,EAAO,IAAIqe,KAAK,CAACre,MAEd,QACA,CACCA,KAAI,EACJ+jB,OAAM,EACNhX,IAAG,EACHiX,eAAgB,SAAC1jB,GACb,OAAOA,GAAU,KAAOA,EAAS,MAEnCmX,GAKd,SAASwM,EAAgB1mB,GAErB,OADAC,QAAQsB,MAAM,iCACVvB,GAASA,EAAM2mB,UAAY3mB,EAAM2mB,SAASlkB,MACnC,kBACHrI,QAAS4F,EAAM5F,SACZ4F,EAAM2mB,SAASlkB,MAAI,CACtBM,OAAQ/C,EAAM2mB,SAAS5jB,SAEpB/C,GAASA,EAAM2mB,SACf,CACHvsB,QAAS4F,EAAM5F,QACf2I,OAAQ/C,EAAM2mB,SAAS5jB,QAEpB/C,GACPC,QAAQD,MAAM,2BAA4BA,GACnC,CACH5F,QAAS4F,EAAM5F,QACf2I,OAAQ,OAGZ9C,QAAQD,MAAM,2BAA4BA,GACnC,CACH5F,QAAS,gBACT2I,OAAQ,MAYb,SAAS6jB,EAAeC,EAAkB/pB,EAAcuZ,EAAcgH,GACrEhH,GACAgO,OAAOC,KAAKjO,GAAQkO,SAAQ,SAAA9nB,GACxB,IAAM5B,EAAgBisB,mBAAmBzQ,EAAO5Z,IAChDK,EAAOA,EAAKmpB,QAAQ,IAAMxpB,EAAK5B,MAGvC,IAAIiH,EAAeilB,EAAWF,EAAU/pB,GACxC,GAAIugB,EAAa,CACb,IAAI8B,GAAiB,EACrB,IAAK,IAAM1iB,KAAO4gB,EACd,GAAIA,EAAY5gB,GAAM,CAClB,IAAM5B,EAAgBisB,mBAAmBzJ,EAAY5gB,IAEjDqF,EADAqd,EACOrd,EAAO,IAAMrF,EAEbqF,EAAO,IAAMrF,EAEpB5B,MAAAA,IACAiH,EAAOA,EAAO,IAAMjH,GAExBskB,GAAQ,GAIpB,OAAOrd,EAOJ,SAASklB,EAAchK,GAE1B,MADoC,CAAEA,QAAO,GAS1C,SAASiK,EAAWzX,EAAa0K,EAA8BgN,GAClEjnB,QAAQ6P,KAAK,0CAA2CN,GAEnD0K,IACDA,EAAU8M,EAAc,CAAE,OAAU,wBAGxC,IAAMG,EAA6BZ,EAAkB,MAAO/W,EAAK0K,GACjE,OAAOoM,EAAMc,QAAQD,GAChBttB,MAAK,SAAA8sB,GACF,IAAMlkB,EAAUkkB,EAASlkB,KACzB,OAAIykB,EACOA,EAAgBzkB,GAEhBA,KAEZ1C,OAAM,SAAAC,GACL,OAAO2c,QAAQ0D,OAAOqG,EAAgB1mB,OA+C3C,SAASqnB,EAAyB7X,EAAa8X,EAASpN,EAA8BgN,GACzFjnB,QAAQ6P,KAAK,2CAA4CN,GAEpD0K,IACDA,EAAU8M,EAAc,CACpB,OAAU,qBACV,eAAgB,wBAIxB,IAAMG,EAA6BZ,EAAkB,OAAQ/W,EAAK0K,EAASoN,GAC3E,OAAOhB,EAAMc,QAAQD,GAChBttB,MAAK,SAAA8sB,GACF,IAAMlkB,EAAUkkB,EAASlkB,KACzB,OAAIykB,EACOA,EAAgBzkB,GAEhBA,KAEZ1C,OAAM,SAAAC,GACL,OAAO2c,QAAQ0D,OAAOqG,EAAgB1mB,OAW3C,SAASunB,EAAW/X,EAAa8X,EAASpN,EAA8BgN,GAC3EjnB,QAAQ6P,KAAK,0CAA2CN,GAEnD0K,IACDA,EAAU8M,EAAc,CAAE,eAAgB,wBAG9C,IAAMG,EAA6BZ,EAAkB,MAAO/W,EAAK0K,EAASoN,GAC1E,OAAOhB,EAAMc,QAAQD,GAChBttB,MAAK,WACF,OAAIqtB,EACOA,SAEP,KAELnnB,OAAM,SAAAC,GACL,OAAO2c,QAAQ0D,OAAOqG,EAAgB1mB,OA2D3C,SAASwnB,EAAmBX,GAC/B,OAAKA,EAGDA,EAASY,SAAS,KACXZ,EAASR,UAAU,EAAGQ,EAASpvB,OAAS,GAE5CovB,EALI,GAQR,SAASE,EAAWF,EAAkB/pB,GACzC,IAAI0S,EAAeqX,EAKnB,OAJIrX,EAAIiY,SAAS,OACbjY,EAAMA,EAAI6W,UAAU,EAAG7W,EAAI/X,OAAS,IAExC+X,GAAO1S","sources":["webpack://ads-ui/./src/app/components/if.tsx","webpack://ads-ui/./src/app/components/navlink.tsx","webpack://ads-ui/./src/app/components/artifact-type-icon.tsx","webpack://ads-ui/./src/app/components/is-loading.tsx","webpack://ads-ui/./src/app/components/if-not-empty.tsx","webpack://ads-ui/./src/app/components/list-with-toolbar.tsx","webpack://ads-ui/./src/app/components/toggle-icon.tsx","webpack://ads-ui/./src/app/components/design-description.tsx","webpack://ads-ui/./src/app/components/registry-navlink.tsx","webpack://ads-ui/./src/app/components/service-preview-warning.tsx","webpack://ads-ui/./src/app/components/rhosr-empty-state.tsx","webpack://ads-ui/./src/app/components/date-time.tsx","webpack://ads-ui/./src/app/components/object-select.tsx","webpack://ads-ui/./src/app/contexts/navigation.ts","webpack://ads-ui/./src/app/models/rhosr-instance/artifact-types.model.ts","webpack://ads-ui/./src/app/models/rhosr-instance/content-types.model.ts","webpack://ads-ui/./src/app/pages/components/home/import-dropdown.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-group.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-name.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-selector.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-item.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/create-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/delete-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/design-list.tsx","webpack://ads-ui/./src/app/pages/components/home/designs.panel.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state-filtered.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/import-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/import-from-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/template-item.tsx","webpack://ads-ui/./src/app/pages/components/home/url-upload.tsx","webpack://ads-ui/./src/app/pages/components/home/design-details-panel.tsx","webpack://ads-ui/./src/app/pages/components/home/design-history.tsx","webpack://ads-ui/./src/app/pages/components/home/design-events.tsx","webpack://ads-ui/./src/app/pages/components/home/design-event-type.tsx","webpack://ads-ui/./src/app/pages/components/home/design-origin-label.tsx","webpack://ads-ui/./src/app/pages/components/editor/editor-context.tsx","webpack://ads-ui/./src/app/pages/components/editor/test-registry.modal.tsx","webpack://ads-ui/./src/app/pages/components/editor/compare-modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/export-to-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/rename.modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/if-rhosr.tsx","webpack://ads-ui/./src/app/pages/components/shared/registration-error.tsx","webpack://ads-ui/./src/app/services/rhosr-instance.ts","webpack://ads-ui/./src/app/services/designs.ts","webpack://ads-ui/./src/app/services/_templates/asyncapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/openapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/json.templates.ts","webpack://ads-ui/./src/app/services/_templates/avro.templates.ts","webpack://ads-ui/./src/app/services/_templates/protobuf.templates.ts","webpack://ads-ui/./src/app/services/templates.ts","webpack://ads-ui/./src/app/services/download.ts","webpack://ads-ui/./src/app/services/url.ts","webpack://ads-ui/./src/app/services/alerts.tsx","webpack://ads-ui/./src/app/services/local-storage.ts","webpack://ads-ui/./src/app/services/rhosr.ts","webpack://ads-ui/./src/app/utils/object.utils.ts","webpack://ads-ui/./src/app/utils/content.utils.ts","webpack://ads-ui/./src/app/utils/design.utils.ts","webpack://ads-ui/./src/app/utils/rest.utils.ts"],"sourcesContent":["import React, { FunctionComponent } from \"react\";\n\n/**\n * Properties\n */\nexport type IfProps = {\n    condition: boolean | (() => boolean);\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const If: FunctionComponent<IfProps> = ({ condition, children }: IfProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    };\n\n    return (accept() ? <React.Fragment children={children} /> : <React.Fragment />);\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Basename, useBasename } from \"@rhoas/app-services-ui-shared\";\n\nexport type NavLinkProps = {\n    location: string;\n    title?: string;\n    className?: string;\n    children?: React.ReactNode;\n}\n\nexport const NavLink: FunctionComponent<NavLinkProps> = ({ location, title, className, children }: NavLinkProps) => {\n\n    const basename: Basename = useBasename();\n    const to: string = `${basename.getBasename()}${location}`;\n\n    return (\n        <Link className={className} title={title} to={to} children={children} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./artifact-type-icon.css\";\nimport { ArtifactTypes } from \"@app/models\";\n\n/**\n * Properties\n */\nexport type ArtifactTypeIconProps = {\n    type: string;\n    isShowIcon?: boolean; // defaults to true\n    isShowLabel?: boolean; // defaults to false\n}\n\n\nexport const ArtifactTypeIcon: FunctionComponent<ArtifactTypeIconProps> = ({ type, isShowIcon, isShowLabel }: ArtifactTypeIconProps) => {\n    const getTitle = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro Schema\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf Schema\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON Schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI Definition\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI Definition\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL Definition\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect Schema\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getLabel = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getClassNames = (): string => {\n        let classes: string = \"artifact-type-icon\";\n        if (isShowLabel) {\n            classes += \" has-label\";\n        }\n        if (isShowIcon !== false) {\n            classes += \" has-icon\";\n            switch (type) {\n                case ArtifactTypes.AVRO:\n                    classes += \" avro-icon24\";\n                    break;\n                case ArtifactTypes.PROTOBUF:\n                    classes += \" protobuf-icon24\";\n                    break;\n                case ArtifactTypes.JSON:\n                    classes += \" json-icon24\";\n                    break;\n                case ArtifactTypes.OPENAPI:\n                    classes += \" oai-icon24\";\n                    break;\n                case ArtifactTypes.ASYNCAPI:\n                    classes += \" aai-icon24\";\n                    break;\n                case ArtifactTypes.GRAPHQL:\n                    classes += \" graphql-icon24\";\n                    break;\n                case ArtifactTypes.KCONNECT:\n                    classes += \" kconnect-icon24\";\n                    break;\n                case ArtifactTypes.WSDL:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XSD:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XML:\n                    classes += \" xml-icon24\";\n                    break;\n            }\n        }\n        if (isShowIcon && !isShowLabel) {\n            classes += \" icon-only\";\n        }\n        return classes;\n    };\n\n    const renderLabel = (): React.ReactNode | undefined => {\n        if (isShowLabel) {\n            return (\n                <span>{getLabel()}</span>\n            );\n        } else {\n            return undefined;\n        }\n    };\n\n    return (\n        <div className={getClassNames()} title={getTitle()} children={renderLabel()} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Spinner } from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IsLoadingProps = {\n    condition: boolean | (() => boolean);\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n}\n\n/**\n * Displays a Spinner control while the condition property is true.  When false, the provided children\n * are displayed.  Useful when displaying content from the results of an async operation such as a REST\n * call.\n */\nexport const IsLoading: FunctionComponent<IsLoadingProps> = ({ condition, loadingComponent, children }: IsLoadingProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    };\n    const lc: React.ReactNode = loadingComponent || <Spinner />;\n    return (accept() ? <React.Fragment children={lc} /> : <React.Fragment children={children} />);\n};\n","import React, { FunctionComponent } from \"react\";\nimport { EmptyState, EmptyStateBody, EmptyStateVariant, Title } from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IfNotEmptyProps = {\n    collection?: any[];\n    emptyState?: React.ReactNode;\n    emptyStateTitle?: string;\n    emptyStateMessage?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * provided collection is not empty.  If the provided collection is empty, then\n * an empty state control is displayed instead.\n */\nexport const IfNotEmpty: FunctionComponent<IfNotEmptyProps> = ({ collection, emptyState, emptyStateTitle, emptyStateMessage, children }: IfNotEmptyProps) => {\n    const isEmpty = () => {\n        return !collection || collection.length === 0;\n    };\n\n    const empty: React.ReactNode = emptyState || (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{emptyStateTitle || \"None found\"}</Title>\n            <EmptyStateBody>{emptyStateMessage || \"No items found.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    return isEmpty() ?\n        (<React.Fragment children={empty}/>) :\n        (<React.Fragment children={children} />);\n};\n","import React, { FunctionComponent } from \"react\";\nimport { IsLoading } from \"@app/components/is-loading\";\nimport { If } from \"@app/components/if\";\n\n/**\n * Properties\n */\nexport type ListWithToolbarProps = {\n    toolbar: React.ReactNode;\n    alwaysShowToolbar?: boolean;\n    emptyState: React.ReactNode;\n    filteredEmptyState: React.ReactNode;\n    isLoading: boolean;\n    isFiltered: boolean;\n    isEmpty: boolean;\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const ListWithToolbar: FunctionComponent<ListWithToolbarProps> = (\n    { toolbar, alwaysShowToolbar, emptyState, filteredEmptyState, isLoading, loadingComponent, isEmpty, isFiltered, children }: ListWithToolbarProps) => {\n\n    return (\n        <React.Fragment>\n            <If condition={alwaysShowToolbar || !isEmpty || isFiltered} children={toolbar} />\n            <IsLoading condition={isLoading} loadingComponent={loadingComponent}>\n                <If condition={!isEmpty} children={children} />\n                <If condition={isEmpty && isFiltered} children={filteredEmptyState} />\n                <If condition={isEmpty && !isFiltered} children={emptyState} />\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ChevronDownIcon, ChevronRightIcon } from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type ToggleIconProps = {\n    expanded: boolean;\n    onClick: () => void;\n};\n\nexport const ToggleIcon: FunctionComponent<ToggleIconProps> = ({ expanded, onClick }: ToggleIconProps) => {\n    return expanded ? (\n        <ChevronDownIcon onClick={onClick} />\n    ) : (\n        <ChevronRightIcon onClick={onClick} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./design-description.css\";\nimport { Truncate } from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type DesignDescriptionProps = {\n    description: string | undefined;\n    truncate?: boolean;\n    className?: string;\n}\n\n\nexport const DesignDescription: FunctionComponent<DesignDescriptionProps> = ({ description, truncate, className }: DesignDescriptionProps) => {\n    let classes: string = \"\";\n    if (className) {\n        classes = className;\n    }\n    if (!description) {\n        classes = classes + \" no-description\";\n    }\n    return truncate ? (\n        <div>\n            <Truncate className={classes} content={description || \"No description.\"} tooltipPosition=\"top\" />\n        </div>\n    ) : (\n        <div className={classes}>{description || \"No description.\"}</div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DesignContext } from \"@app/models/designs/design-context.model\";\nimport { RhosrService, useRhosrService } from \"@app/services\";\nimport { stripTrailingSlash } from \"@app/utils\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\n\n/**\n * Properties\n */\nexport type RegistryNavLinkProps = {\n    registry?: Registry;\n    context: DesignContext | undefined;\n    children?: React.ReactNode;\n};\n\n/**\n * A navigation link to an artifact in a service registry instance.  The context passed to this\n * component must be of type \"rhosr\".\n */\nexport const RegistryNavLink: FunctionComponent<RegistryNavLinkProps> = ({ registry, context, children }: RegistryNavLinkProps) => {\n    const [href, setHref] = useState<string>();\n\n    const rhosr: RhosrService | undefined = registry === undefined ? useRhosrService() : undefined;\n\n    const setHrefFrom = (registry: Registry, context: DesignContext): void => {\n        const group: string = context.rhosr?.groupId || \"default\";\n        const id: string = context.rhosr?.artifactId as string;\n        setHref(`${stripTrailingSlash(registry.browserUrl)}/artifacts/${group}/${id}`);\n    };\n\n    useEffect(() => {\n        setHref(undefined);\n        if (context?.type === \"rhosr\") {\n            if (registry) {\n                setHrefFrom(registry, context);\n            } else {\n                (rhosr as RhosrService).getRegistry(context.rhosr?.instanceId as string).then(registry => {\n                    setHrefFrom(registry, context);\n                });\n            }\n        }\n    }, [context]);\n\n    return (\n        href ? <a href={href} children={children} /> : <span children={children} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Alert } from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type ServicePreviewWarningProps = Record<string, never>;\n\nexport const ServicePreviewWarning: FunctionComponent<ServicePreviewWarningProps> = () => {\n    return (\n        <Alert isInline variant=\"warning\" title=\"Service Preview: Data is stored locally in your browser\" style={{ marginBottom: \"15px\" }}>\n            <p>\n                In the Service Preview release of OpenShift API Designer, all designs are stored locally in your\n                browser. Clearing your browser cache or switching to a new browser might result in loss of data.\n                Make sure you save your work by downloading your designs locally or by exporting them to a Red Hat\n                OpenShift Service Registry instance.\n            </p>\n        </Alert>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, Title } from \"@patternfly/react-core\";\nimport { AddCircleOIcon } from \"@patternfly/react-icons\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { DesignContext } from \"@app/models/designs/design-context.model\";\n\n/**\n * Properties\n */\nexport type RhosrEmptyStateProps  = {\n    message: string;\n};\n\n\nexport const RhosrEmptyState: FunctionComponent<RhosrEmptyStateProps> = ({ message }) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No Service Registry instances\n            </Title>\n            <EmptyStateBody>\n                { message }\n            </EmptyStateBody>\n            <a href=\"/application-services/service-registry\">Create Service Registry instance</a>\n        </EmptyState>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport Moment from \"react-moment\";\n\ntype dateTypes = string|number|Array<string|number|object>|object;\n\n/**\n * Properties\n */\nexport type DateTimeProps = {\n    date: dateTypes|undefined;\n};\n\nexport const DateTime: FunctionComponent<DateTimeProps> = ({ date }: DateTimeProps) => {\n    return <Moment date={date} format=\"DD MMM YYYY, hh:mm UTC\" utc={true} />;\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport { SelectOptionObject } from \"@patternfly/react-core/src/components/Select/SelectOption\";\n\ninterface ObjectSelectOptionObject extends SelectOptionObject {\n    item: any;\n}\n\n/**\n * Properties\n */\nexport type ObjectSelectProps = {\n    value: any;\n    items: any[];\n    onSelect: (value: any) => void;\n    itemToString: (value: any) => string;\n    noSelectionLabel?: string;\n    toggleId?: string;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | \"parent\" | \"inline\";\n    variant?: \"single\" | \"checkbox\" | \"typeahead\" | \"typeaheadmulti\";\n};\n\n/**\n * A generic control that makes it easier to create a <Select> from an array of objects.\n */\nexport const ObjectSelect: FunctionComponent<ObjectSelectProps> = (\n    { value, items, onSelect, itemToString, noSelectionLabel, toggleId, menuAppendTo, variant }: ObjectSelectProps) => {\n\n    const [isToggled, setToggled] = useState<boolean>(false);\n    const [selectObjects, setSelectObjects] = useState<ObjectSelectOptionObject[]>();\n    const [selections, setSelections] = useState<ObjectSelectOptionObject[]>();\n\n    const onSelectInternal = (event: React.MouseEvent | React.ChangeEvent, value: string | SelectOptionObject): void => {\n        setToggled(false);\n        onSelect((value as ObjectSelectOptionObject).item);\n    };\n\n    const setSelectedFromValue = (): void => {\n        const filtered: ObjectSelectOptionObject[] | undefined = selectObjects?.filter(soo => soo.item === value);\n        setSelections(filtered);\n    };\n\n    useEffect(() => {\n        const theItems: any[] = items || [];\n        const selectObjects: ObjectSelectOptionObject[] = theItems.map((item) => {\n            return {\n                item: item,\n                toString: () => {\n                    return itemToString(item);\n                }\n            };\n        });\n        if (noSelectionLabel !== undefined) {\n            const noSelection: ObjectSelectOptionObject = {\n                item: undefined,\n                toString(): string {\n                    return noSelectionLabel;\n                }\n            };\n            setSelectObjects([\n                noSelection, ...selectObjects\n            ]);\n        } else {\n            setSelectObjects(selectObjects);\n        }\n    }, [items]);\n\n    useEffect(() => {\n        if (selectObjects) {\n            setSelectedFromValue();\n        }\n    }, [value, selectObjects]);\n\n    return (\n        <Select menuAppendTo={menuAppendTo}\n            variant={variant || SelectVariant.single}\n            onToggle={setToggled}\n            toggleId={toggleId}\n            onSelect={onSelectInternal}\n            isOpen={isToggled}\n            selections={selections}>\n            {\n                selectObjects?.map((soo, index) => (\n                    <SelectOption isPlaceholder={soo.item === undefined} key={index} value={soo} />\n                ))\n            }\n        </Select>\n    );\n};\n","import { Basename, useBasename } from \"@rhoas/app-services-ui-shared\";\nimport { History } from \"history\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const navigateTo: (path: string, basename: Basename, history: History) => void = (path: string, basename: Basename, history: History) => {\n    const to: string = `${basename.getBasename()}${path}`;\n    setTimeout(() => {\n        history.push(to);\n    }, 50);\n};\n\nexport type Navigation = {\n    navigateTo: (path: string) => void;\n};\n\nexport const useNavigation: () => Navigation = (): Navigation => {\n    const history: History = useHistory();\n    const basename: Basename = useBasename();\n\n    return {\n        navigateTo: (path: string) => {\n            return navigateTo(path, basename, history);\n        }\n    };\n};\n","\nexport class ArtifactTypes {\n\n    public static AVRO: string = \"AVRO\";\n    public static PROTOBUF: string = \"PROTOBUF\";\n    public static JSON: string = \"JSON\";\n    public static OPENAPI: string = \"OPENAPI\";\n    public static ASYNCAPI: string = \"ASYNCAPI\";\n    public static GRAPHQL: string = \"GRAPHQL\";\n    public static KCONNECT: string = \"KCONNECT\";\n    public static WSDL: string = \"WSDL\";\n    public static XSD: string = \"XSD\";\n    public static XML: string = \"XML\";\n\n}\n","\nexport class ContentTypes {\n\n    public static APPLICATION_JSON: string = \"application/json\";\n    public static APPLICATION_YAML: string = \"application/x-yaml\";\n    public static APPLICATION_XML: string = \"application/xml\";\n    public static APPLICATION_PROTOBUF: string = \"application/x-protobuf\";\n    public static APPLICATION_GRAPHQL: string = \"application/graphql\";\n\n    public static TEXT_XML: string = \"text/xml\";\n    public static APPLICATION_WSDL: string = \"application/wsdl+xml\";\n}\n","import React, { FunctionComponent, useState } from \"react\";\nimport \"./import-dropdown.css\";\nimport { Dropdown, DropdownItem, DropdownToggle } from \"@patternfly/react-core\";\n\nexport enum ImportFrom {\n    FILE,\n    URL,\n    RHOSR\n}\n\n/**\n * Properties\n */\nexport type ImportDropdownProps = {\n    variant: \"long\"|\"short\";\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * A control to display the Import dropdown on the main page (used to select how to import content\n * into the API Designer).\n */\nexport const ImportDropdown: FunctionComponent<ImportDropdownProps> = ({ variant, onImport }: ImportDropdownProps) => {\n    const [isToggled, setToggled] = useState(false);\n\n    const onToggle = (value: boolean): void => {\n        setToggled(value);\n    };\n\n    const toggle: React.ReactNode = (\n        <DropdownToggle id=\"import-toggle\" toggleVariant=\"secondary\" onToggle={onToggle}>\n            {variant === \"short\" ? \"Import\" : \"Import design\"}\n        </DropdownToggle>\n    );\n\n    const onMenuSelect: (event?: React.SyntheticEvent<HTMLDivElement>) => void = (event) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setToggled(false);\n        switch (action) {\n            case \"action-file\":\n                onImport(ImportFrom.FILE);\n                return;\n            case \"action-url\":\n                onImport(ImportFrom.URL);\n                return;\n            case \"action-rhosr\":\n                onImport(ImportFrom.RHOSR);\n                return;\n        }\n    };\n\n    return (\n        <Dropdown\n            onSelect={onMenuSelect}\n            toggle={toggle}\n            isOpen={isToggled}\n            isPlain\n            dropdownItems={\n                [\n                    <DropdownItem key=\"action-rhosr\" data-id=\"action-rhosr\">Import from Service Registry</DropdownItem>,\n                    <DropdownItem key=\"action-url\" data-id=\"action-url\">Import from URL</DropdownItem>,\n                    <DropdownItem key=\"action-file\" data-id=\"action-file\">Import from file</DropdownItem>,\n                ]\n            }\n            position=\"right\"\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactGroupProps = {\n    groupId: string|undefined;\n}\n\n/**\n * Displays a RHOSR artifact's group.\n */\nexport const ArtifactGroup: FunctionComponent<ArtifactGroupProps> = ({ groupId }: ArtifactGroupProps) => {\n    const style = (): string => {\n        return !groupId ? \"nogroup\" : \"group\";\n    };\n\n    return (\n        <span className={style()}>{groupId}</span>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactNameProps = {\n    id: string;\n    name: string;\n}\n\n/**\n * Displays a RHOSR artifact's name.\n */\nexport const ArtifactName: FunctionComponent<ArtifactNameProps> = ({ id, name }: ArtifactNameProps) => {\n    return name ? (\n        <React.Fragment>\n            <span className=\"name\">{name}</span>\n            <span className=\"id\">{id}</span>\n        </React.Fragment>\n    ) : (\n        <React.Fragment>\n            <span className=\"name\">{id}</span>\n        </React.Fragment>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport {\n    ArtifactSearchResults,\n    CreateDesignContent,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedArtifact,\n    SearchedVersion\n} from \"@app/models\";\nimport { RhosrInstanceService, RhosrInstanceServiceFactory, useRhosrInstanceServiceFactory } from \"@app/services\";\nimport { ArtifactList, ArtifactListToolbar, ArtifactListToolbarCriteria, IfRhosr } from \"@app/pages/components\";\nimport { ListWithToolbar } from \"@app/components\";\nimport { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type ArtifactSelectorProps = {\n    registries: Registry[];\n    onSelected: (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n};\n\n/**\n * A control that allows the user to find and select a single version of a single artifact from\n * a service registry instance.\n */\nexport const ArtifactSelector: FunctionComponent<ArtifactSelectorProps> = ({ registries, onSelected }: ArtifactSelectorProps) => {\n    const [ querying, setQuerying ] = useState(true);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<ArtifactListToolbarCriteria>({\n        filterValue: \"\",\n        ascending: true,\n        filterSelection: \"name\"\n    });\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ artifacts, setArtifacts ] = useState<ArtifactSearchResults|undefined>();\n    const [ rhosrInstance, setRhosrInstance ] = useState<RhosrInstanceService>();\n\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    const onRegistrySelected = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    const onCriteriaChange = (criteria: ArtifactListToolbarCriteria): void =>  {\n        setCriteria(criteria);\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n    };\n\n    const fetchArtifactVersions = (artifact: SearchedArtifact): Promise<SearchedVersion[]> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactVersions(artifact.groupId, artifact.id);\n    };\n\n    const fetchArtifactContent = (artifact: SearchedArtifact, version?: SearchedVersion): Promise<string> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactContent(artifact.groupId, artifact.id, version?.version||\"latest\");\n    };\n\n    const onArtifactSelected = (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        onSelected(registry, artifact, version, content);\n    };\n\n    // Initialization\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, []);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    // Query for artifacts when relevant changes occur.\n    useEffect(() => {\n        if (rhosrInstance) {\n            const gac: GetArtifactsCriteria = {\n                sortAscending: criteria.ascending,\n                type: criteria.filterSelection,\n                value: criteria.filterValue\n            };\n            setQuerying(true);\n            rhosrInstance.getArtifacts(gac, paging).then(results => {\n                setArtifacts(results);\n                setQuerying(false);\n            }).catch(error => {\n                // TODO handle error\n                console.error(\"[RegistryPage] Error searching for artifacts: \", error);\n                setArtifacts({\n                    artifacts: [],\n                    count: 0,\n                    page: 1,\n                    pageSize: 20\n                });\n                setQuerying(false);\n            });\n        }\n        onSelected(undefined, undefined, undefined);\n    }, [rhosrInstance, criteria, paging]);\n\n    const toolbar: React.ReactNode = (\n        <ArtifactListToolbar registries={registries} criteria={criteria} paging={paging}\n            onRegistrySelected={onRegistrySelected}\n            menuAppendTo={document.getElementById(\"artifact-selector\")}\n            onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange}\n            artifacts={artifacts} />\n    );\n\n    const emptyState: React.ReactNode = (\n        <IfRhosr registry={registry} scope=\"read\">\n            <EmptyState variant={EmptyStateVariant.xs}>\n                <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n                <EmptyStateBody>{\"No artifacts found in the registry instance.\"}</EmptyStateBody>\n            </EmptyState>\n        </IfRhosr>\n    );\n\n    const filteredEmptyState: React.ReactNode = (\n        <IfRhosr registry={registry} scope=\"read\">\n            <EmptyState variant={EmptyStateVariant.xs}>\n                <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n                <EmptyStateBody>{\"No artifacts matched the filter criteria.\"}</EmptyStateBody>\n            </EmptyState>\n        </IfRhosr>\n    );\n\n    const loadingComponent: React.ReactNode = (\n        <Spinner size=\"lg\" style={{ marginTop: \"10px\" }} />\n    );\n\n    return (\n        <div id=\"artifact-selector\">\n            <ListWithToolbar toolbar={toolbar}\n                alwaysShowToolbar={true}\n                emptyState={emptyState}\n                filteredEmptyState={filteredEmptyState}\n                isFiltered={criteria.filterValue !== \"\"}\n                isLoading={querying}\n                loadingComponent={loadingComponent}\n                isEmpty={!artifacts || artifacts.count === 0}\n            >\n                <IfRhosr registry={registry} scope=\"read\">\n                    <ArtifactList artifacts={artifacts?.artifacts} fetchArtifactContent={fetchArtifactContent}\n                        onArtifactSelected={onArtifactSelected}\n                        fetchArtifactVersions={fetchArtifactVersions} />\n                </IfRhosr>\n            </ListWithToolbar>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport \"./artifact-list.css\";\nimport { CreateDesignContent, SearchedArtifact, SearchedVersion } from \"@app/models\";\nimport { ArtifactListItem } from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type ArtifactListProps = {\n    artifacts?: SearchedArtifact[];\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n    onArtifactSelected: (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactList: FunctionComponent<ArtifactListProps> = (\n    { artifacts, fetchArtifactVersions, fetchArtifactContent, onArtifactSelected }: ArtifactListProps) => {\n\n    const [selectedArtifact, setSelectedArtifact] = useState<SearchedArtifact>();\n\n    const onArtifactSelectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact selected: \", artifact);\n        setSelectedArtifact(artifact);\n    };\n\n    const onArtifactUnselectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact unselected: \", artifact);\n        setSelectedArtifact(undefined);\n        onArtifactSelected(undefined, undefined, undefined);\n    };\n\n    const onArtifactLoaded = (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent): void => {\n        console.debug(\"[ArtifactList] Artifact loaded: \", artifact);\n        console.debug(\"[ArtifactList] Selected Artifact: \", selectedArtifact);\n        if (artifact === selectedArtifact) {\n            onArtifactSelected(artifact, version, content);\n        }\n    };\n\n    return (\n        <div className=\"artifact-list\">\n            {\n                artifacts?.map( (artifact, idx) =>\n                    <ArtifactListItem artifact={artifact} key={idx}\n                        onSelected={onArtifactSelectedInternal}\n                        onUnselected={onArtifactUnselectedInternal}\n                        fetchArtifactVersions={fetchArtifactVersions}\n                        fetchArtifactContent={fetchArtifactContent}\n                        onArtifactLoaded={onArtifactLoaded}\n                        isSelected={selectedArtifact === artifact} />\n                )\n            }\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./artifact-list-item.css\";\nimport { ArtifactTypes, ContentTypes, CreateDesignContent, SearchedArtifact, SearchedVersion } from \"@app/models\";\nimport { Badge, Radio, Spinner } from \"@patternfly/react-core\";\nimport { ArtifactTypeIcon, If, IsLoading, ObjectSelect } from \"@app/components\";\nimport { ArtifactGroup, ArtifactName } from \"@app/pages/components\";\nimport { isJson, isXml, isYaml } from \"@app/utils\";\n\n/**\n * Properties\n */\nexport type ArtifactListItemProps = {\n    artifact: SearchedArtifact;\n    isSelected: boolean;\n    onSelected: (artifact: SearchedArtifact) => void;\n    onUnselected: (artifact: SearchedArtifact) => void;\n    onArtifactLoaded: (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent) => void;\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactListItem: FunctionComponent<ArtifactListItemProps> = (\n    { artifact, isSelected, onSelected, onUnselected, onArtifactLoaded, fetchArtifactVersions, fetchArtifactContent }: ArtifactListItemProps) => {\n\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [versions, setVersions] = useState<SearchedVersion[]>();\n    const [selectedVersion, setSelectedVersion] = useState<SearchedVersion>();\n    const [content, setContent] = useState<string>();\n    const [isContentLoaded, setContentLoaded] = useState<boolean>(false);\n\n    const statuses = (): string[] => {\n        const rval: string[] = [];\n        if (artifact.state === \"DISABLED\") {\n            rval.push(\"Disabled\");\n        }\n        if (artifact.state === \"DEPRECATED\") {\n            rval.push(\"Deprecated\");\n        }\n        return rval;\n    };\n    const description = (): string => {\n        if (artifact.description) {\n            return artifact.description;\n        }\n        return `An artifact of type ${artifact.type} with no description.`;\n    };\n\n    const shouldLoadVersions = (): boolean => {\n        return versions === undefined || versions.length === 0;\n    };\n\n    const loadVersions = (): void => {\n        setContentLoaded(false);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Loading versions for ${artifact.id}`);\n        fetchArtifactVersions(artifact).then(versions => {\n            setVersions(versions);\n            setLoading(false);\n            onVersionSelect(undefined);\n        }).catch(() => {\n            // TODO handle errors\n        });\n    };\n\n    const onToggleSelected = (event: any): void => {\n        // Bit of a hack - if the user clicks the Version drop-down, don't do the\n        // artifact item toggling behavior.\n        if (event && event.target && event.target.localName === \"button\") {\n            return;\n        }\n\n        if (isSelected) {\n            onUnselected(artifact);\n        } else {\n            if (shouldLoadVersions()) {\n                loadVersions();\n            } else {\n                onVersionSelect(undefined);\n            }\n            onSelected(artifact);\n        }\n    };\n\n    const onVersionSelect = (version?: SearchedVersion): void => {\n        setSelectedVersion(version);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Version selected for ${artifact.id}, loading content. Version: `, version);\n        fetchArtifactContent(artifact, version).then(content => {\n            console.debug(\"[ArtifactListItem] Artifact content successfully fetched for: \", artifact.id);\n            setContent(content);\n            setLoading(false);\n            setContentLoaded(true);\n        }).catch(() => {\n            // TODO handle errors loading the artifact content\n        });\n    };\n\n    // Whenever the content changes, fire the \"onArtifactLoaded\" event.  Do this\n    // from inside useEffect() so that it's not happening from an async callback.\n    useEffect(() => {\n        if (content !== undefined) {\n            let contentType: string;\n            if (isJson(content)) {\n                contentType = ContentTypes.APPLICATION_JSON;\n            } else if (isYaml(content)) {\n                contentType = ContentTypes.APPLICATION_YAML;\n            } else if (isXml(content)) {\n                contentType = ContentTypes.APPLICATION_XML;\n            } else if (artifact.type === ArtifactTypes.PROTOBUF) {\n                contentType = ContentTypes.APPLICATION_PROTOBUF;\n            } else if (artifact.type === ArtifactTypes.GRAPHQL) {\n                contentType = ContentTypes.APPLICATION_GRAPHQL;\n            } else {\n                contentType = ContentTypes.APPLICATION_JSON;\n            }\n            const cdc: CreateDesignContent = {\n                contentType,\n                data: content\n            };\n            onArtifactLoaded(artifact, selectedVersion as SearchedVersion, cdc);\n        }\n    }, [content]);\n\n    return (\n        <div className={`artifact-list-item ${isSelected ? \"selected\" : \"\"} ${isContentLoaded ? \"loaded\" : \"\"}`}\n            onClick={onToggleSelected}>\n            <div className=\"artifact-list-item-radio\">\n                <IsLoading condition={isLoading} loadingComponent={(<Spinner size=\"sm\" />)}>\n                    <Radio id={`artifact-radio-${artifact.id}`} name=\"\" isChecked={isSelected} />\n                </IsLoading>\n            </div>\n            <div className=\"artifact-list-item-icon\">\n                <ArtifactTypeIcon type={artifact.type}/>\n            </div>\n            <div className=\"artifact-list-item-info\">\n                <div className=\"artifact-title\">\n                    <ArtifactGroup groupId={artifact.groupId} />\n                    <ArtifactName id={artifact.id} name={artifact.name} />\n                    {\n                        statuses().map( status =>\n                            <Badge className=\"status-badge\" key={status} isRead={true}>{status}</Badge>\n                        )\n                    }\n                </div>\n                <div className=\"artifact-description\">{description()}</div>\n            </div>\n            <div className=\"artifact-list-item-versions\">\n                <If condition={isSelected}>\n                    <ObjectSelect value={selectedVersion} items={versions as SearchedVersion[]}\n                        toggleId={`artifact-list-item-${artifact.id}-version-select`}\n                        noSelectionLabel=\"latest\" menuAppendTo=\"parent\"\n                        onSelect={onVersionSelect} itemToString={version => version.version} />\n                </If>\n            </div>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./artifact-list-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    SelectVariant,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport { SortAlphaDownAltIcon, SortAlphaDownIcon } from \"@patternfly/react-icons\";\nimport { ArtifactSearchResults, Paging } from \"@app/models\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { ObjectSelect } from \"@app/components/object-select\";\n\n\nexport interface ArtifactListToolbarCriteria {\n    filterSelection: string;\n    filterValue: string;\n    ascending: boolean;\n}\n\nexport type ArtifactListToolbarProps = {\n    registries: Registry[];\n    criteria: ArtifactListToolbarCriteria;\n    paging: Paging;\n    artifacts?: ArtifactSearchResults;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | \"parent\" | \"inline\" | undefined | null;\n    onRegistrySelected: (registry: Registry) => void;\n    onCriteriaChange: (criteria: ArtifactListToolbarCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n}\n\n\nexport const ArtifactListToolbar: FunctionComponent<ArtifactListToolbarProps> = (\n    { registries, criteria, onCriteriaChange, paging, onPagingChange, artifacts, onRegistrySelected, menuAppendTo }: ArtifactListToolbarProps) => {\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    const onRegistrySelectInternal = (registry: Registry): void => {\n        setRegistry(registry);\n        onRegistrySelected(registry);\n    };\n\n    const onToggleAscending = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            ascending: !criteria.ascending\n        });\n    };\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    };\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        });\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        });\n    };\n\n    const totalArtifactCount = (): number => {\n        return artifacts?.count || 0;\n    };\n\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, [registries]);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    return (\n        <Toolbar id=\"artifacts-toolbar-1\" className=\"artifacts-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <ObjectSelect value={registry} items={registries}\n                        variant={SelectVariant.single}\n                        onSelect={onRegistrySelectInternal}\n                        toggleId=\"artifact-list-toolbar-registries\"\n                        menuAppendTo={menuAppendTo || \"parent\"}\n                        itemToString={item => item.name} />\n                </ToolbarItem>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter artifacts\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem className=\"sort-icon-item\">\n                    <Button variant=\"plain\" aria-label=\"edit\" data-testid=\"toolbar-btn-sort\" onClick={onToggleAscending}>\n                        {\n                            criteria.ascending ? <SortAlphaDownIcon/> : <SortAlphaDownAltIcon/>\n                        }\n                    </Button>\n                </ToolbarItem>\n                <ToolbarItem className=\"artifact-paging-item\">\n                    <Pagination\n                        style={{ padding: \"5px\" }}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalArtifactCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"artifact-list-pagination\"\n                        className=\"artifact-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Gallery,\n    GalleryItem,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport { ArtifactTypes, CreateDesign, Template } from \"@app/models\";\nimport { TemplatesService, useTemplatesService } from \"@app/services\";\nimport { If, ServicePreviewWarning } from \"@app/components\";\nimport { TemplateItem } from \"@app/pages/components\";\n\nexport type CreateDesignModalProps = {\n    isOpen: boolean|undefined;\n    onCreate: (event: CreateDesign, template: Template) => void;\n    onCancel: () => void;\n}\n\n\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        }\n    };\n});\n\n\nexport const CreateDesignModal: FunctionComponent<CreateDesignModalProps> = ({ isOpen, onCreate, onCancel }: CreateDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState(ArtifactTypes.OPENAPI);\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [templates, setTemplates] = useState<Template[]>();\n    const [template, setTemplate] = useState<Template>();\n\n    const templatesSvc: TemplatesService = useTemplatesService();\n\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setType((selection as any).value);\n        setTypeSelection(selection);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Create button in the modal\n    const doCreate = (): void => {\n        const cd: CreateDesign = {\n            type,\n            name,\n            summary,\n            context: {\n                type: \"create\"\n            }\n        };\n        onCreate(cd, template as Template);\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        if (!template) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, template]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setName(\"\");\n        setSummary(\"\");\n        setType(ArtifactTypes.OPENAPI);\n        if (templates) {\n            setTemplate(templates[0]);\n        } else {\n            setTemplate(undefined);\n        }\n    }, [isOpen]);\n\n    // Whenever the type changes, load the templates for that type. If the type is\n    // OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI) {\n            setVersion(\"3.0.2\");\n        }\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [type]);\n\n    // Whenever the version changes, fetch the templates for the current type and version.\n    useEffect(() => {\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [version]);\n\n    // Whenever the templates changes, auto-select the first one\n    useEffect(() => {\n        if (templates && templates.length > 0) {\n            setTemplate(templates[0]);\n        }\n    }, [templates]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Create a design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doCreate}>\n                    Create\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <ServicePreviewWarning />\n\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"create-design-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"create-design-name\"\n                        name=\"create-design-name\"\n                        aria-describedby=\"create-design-name-helper\"\n                        value={name}\n                        onChange={(value) => {setName(value);}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"create-design-description\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"create-design-description\"\n                        name=\"create-design-description\"\n                        aria-describedby=\"create-design-description-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value);}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Type\" isRequired={true} fieldId=\"create-design-type\">\n                    <Select\n                        variant={SelectVariant.single}\n                        aria-label=\"Select type\"\n                        toggleId=\"create-design-type\"\n                        onToggle={() => {setTypeToggled(!isTypeToggled);}}\n                        onSelect={(event, selection) => onTypeSelect(selection)}\n                        isOpen={isTypeToggled}\n                        selections={typeSelection}\n                        menuAppendTo=\"parent\"\n                    >\n                        {\n                            TYPE_OPTIONS.map(to => <SelectOption key={(to as any).value} value={to} />)\n                        }\n                    </Select>\n                </FormGroup>\n                <If condition={type === ArtifactTypes.OPENAPI}>\n                    <FormGroup label=\"Version\" isRequired={true} fieldId=\"create-design-version\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select version\"\n                            toggleId=\"create-design-version\"\n                            onToggle={() => {setVersionToggled(!isVersionToggled);}}\n                            onSelect={(event, selection) => onVersionSelect(selection as string)}\n                            isOpen={isVersionToggled}\n                            selections={version}\n                            menuAppendTo=\"parent\"\n                        >\n                            <SelectOption value={\"3.0.2\"} />\n                            <SelectOption value={\"2.0\"} />\n                        </Select>\n                    </FormGroup>\n                </If>\n                <If condition={(templates && templates.length > 1) as boolean}>\n                    <FormGroup label=\"Template\" fieldId=\"create-design-template\">\n                        <Gallery hasGutter minWidths={{ default: \"125px\" }} maxWidths={{ default: \"125px\" }}>\n                            {\n                                templates?.map(t => (\n                                    <GalleryItem key={t.id}>\n                                        <TemplateItem template={t} isSelected={t === template} onSelect={() => {\n                                            setTemplate(t);\n                                        }} />\n                                    </GalleryItem>\n                                ))\n                            }\n                        </Gallery>\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport {\n    Alert,\n    Button,\n    Checkbox,\n    Form,\n    FormGroup,\n    Modal,\n    ModalVariant,\n    Text,\n    TextContent\n} from \"@patternfly/react-core\";\nimport { Design } from \"@app/models\";\n\nexport type DeleteDesignModalProps = {\n    design: Design|undefined;\n    isOpen: boolean|undefined;\n    onDelete: (design: Design) => void;\n    onCancel: () => void;\n    onDownload: (design: Design) => void;\n}\n\nexport const DeleteDesignModal: FunctionComponent<DeleteDesignModalProps> = ({ design, isOpen, onDelete, onDownload, onCancel }: DeleteDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    // Called when the user clicks the Delete button in the modal\n    const doDelete = (): void => {\n        onDelete(design as Design);\n    };\n\n    const doDownload = (): void => {\n        onDownload(design as Design);\n    };\n\n    useEffect(() => {\n        setValid(false);\n    }, [design, isOpen]);\n\n    return (\n        <Modal\n            variant={ModalVariant.small}\n            title=\"Delete design?\"\n            titleIconVariant=\"warning\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"delete\" variant=\"primary\" isDisabled={!isValid} onClick={doDelete}>\n                    Delete\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent style={{ marginBottom: \"15px\" }}>\n                <Text component=\"p\">The following API or schema design will be deleted.</Text>\n            </TextContent>\n\n            <Form>\n                <FormGroup label=\"Name\" fieldId=\"delete-design-name\">\n                    <TextContent>{design?.name}</TextContent>\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"delete-design-description\">\n                    <TextContent>{design?.summary}</TextContent>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-warning\">\n                    <Alert isInline variant=\"info\" title=\"To save your data for future use, download the design.\">\n                        <p style={{ lineHeight: \"18px\" }}>\n                            To ensure your data is successfully saved, wait for the download to complete\n                            before deleting the design.\n                        </p>\n                        <Button variant=\"link\" onClick={doDownload} style={{ paddingLeft: \"0px\" }}>Download design</Button>\n                    </Alert>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-confirm\">\n                    <Checkbox id=\"valid-checkbox\" name=\"\" label=\"I understand that the design will be permanently deleted.\"\n                        isChecked={isValid} onChange={(checked) => setValid(checked)} />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./design-list.css\";\nimport { Design, DesignsSearchResults, DesignsSort } from \"@app/models\";\nimport { ResponsiveTable } from \"@rhoas/app-services-ui-components\";\nimport { ArtifactTypeIcon, DesignDescription, NavLink } from \"@app/components\";\nimport Moment from \"react-moment\";\nimport { KebabToggle, Truncate } from \"@patternfly/react-core\";\nimport { IAction } from \"@patternfly/react-table\";\nimport { ThProps } from \"@patternfly/react-table/src/components/TableComposable/Th\";\nimport { CustomActionsToggleProps } from \"@patternfly/react-table/src/components/Table/ActionsColumn\";\nimport { DesignOriginLabel } from \"@app/pages/components\";\n\n\nexport type DesignListProps = {\n    designs: DesignsSearchResults;\n    selectedDesign: Design | undefined;\n    sort: DesignsSort;\n    onSort: (sort: DesignsSort) => void;\n    onRename: (design: Design) => void;\n    onEdit: (design: Design) => void;\n    onDelete: (design: Design) => void;\n    onRegister: (design: Design) => void;\n    onDownload: (design: Design) => void;\n    onSelect: (design: Design|undefined) => void;\n}\n\nexport const DesignList: FunctionComponent<DesignListProps> = (\n    { designs, selectedDesign, sort, onSort, onEdit, onRename, onDelete, onRegister, onDownload, onSelect }: DesignListProps) => {\n\n    const [sortByIndex, setSortByIndex] = useState<number>();\n\n    const columns: any[] = [\n        { index: 0, id: \"name\", label: \"Name\", width: 40, sortable: true },\n        { index: 1, id: \"type\", label: \"Type\", width: 15, sortable: false },\n        { index: 2, id: \"modified-on\", label: \"Time updated\", width: 15, sortable: true },\n        { index: 3, id: \"context\", label: \"Origin\", width: 25, sortable: false },\n    ];\n\n    const renderColumnData = (column: Design, colIndex: number): React.ReactNode => {\n        // Name.\n        if (colIndex === 0) {\n            return (\n                <div>\n                    <NavLink className=\"design-title\"\n                        location={`/designs/${column.id}/editor`}>\n                        <Truncate content={column.name} tooltipPosition=\"top\" />\n                    </NavLink>\n                    <DesignDescription className=\"design-summary\"\n                        description={column.summary}\n                        truncate={true} />\n                </div>\n            );\n        }\n        // Type.\n        if (colIndex === 1) {\n            return (\n                <ArtifactTypeIcon type={column.type} isShowLabel={true} />\n            );\n        }\n        // Modified on.\n        if (colIndex === 2) {\n            return (\n                <Moment date={column.modifiedOn} fromNow={true} />\n            );\n        }\n        // Origin.\n        if (colIndex === 3) {\n            return <DesignOriginLabel design={column} />;\n        }\n        return (\n            <span />\n        );\n    };\n\n    const renderActionsToggle = (props: CustomActionsToggleProps): React.ReactNode => {\n        return (\n            <KebabToggle isDisabled={props.isDisabled} isOpen={props.isOpen} onToggle={(value, event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                props.onToggle(value);\n            }} />\n        );\n    };\n\n    const actionsFor = (design: any): IAction[] => {\n        return [\n            { title: \"View design details\", onClick: () => onSelect(design) },\n            { isSeparator: true, },\n            { title: \"Edit design content\", onClick: () => onEdit(design) },\n            { title: \"Edit design metadata\", onClick: () => onRename(design) },\n            { title: \"Export design to Service Registry\", onClick: () => onRegister(design) },\n            { title: \"Download design\", onClick: () => onDownload(design) },\n            { isSeparator: true, },\n            { title: \"Delete design\", onClick: () => onDelete(design) }\n        ];\n    };\n\n    const sortParams = (column: any): ThProps[\"sort\"] | undefined => {\n        return column.sortable ? {\n            sortBy: {\n                index: sortByIndex,\n                direction: sort.direction\n            },\n            onSort: (_event, index, direction) => {\n                const sort: DesignsSort = {\n                    by: index === 0 ? \"name\" : \"modified-on\",\n                    direction\n                };\n                onSort(sort);\n            },\n            columnIndex: column.index\n        } : undefined;\n    };\n\n    useEffect(() => {\n        setSortByIndex(sort.by === \"name\" ? 0 : 2);\n    }, [sort]);\n\n    return (\n        <div className=\"design-list\">\n            <ResponsiveTable\n                ariaLabel=\"list of designs\"\n                columns={columns}\n                data={designs.designs}\n                expectedLength={designs.count}\n                minimumColumnWidth={350}\n                onRowClick={(row) => onSelect(row.row.id === selectedDesign?.id ? undefined : row.row)}\n                renderHeader={({ column, Th }) => (\n                    <Th sort={sortParams(column)}\n                        className=\"design-list-header\"\n                        key={`header-${column.id}`}\n                        width={column.width}\n                        modifier=\"truncate\">{column.label}</Th>\n                )}\n                renderCell={({ row, colIndex, Td }) => (\n                    <Td className=\"design-list-cell\" key={`cell-${colIndex}-${row.id}`} children={renderColumnData(row as Design, colIndex)} />\n                )}\n                renderActions={({ row, ActionsColumn }) => (\n                    <ActionsColumn key={`actions-${row[\"id\"]}`}\n                        actionsToggle={renderActionsToggle}\n                        items={actionsFor(row)}/>\n                )}\n                isRowSelected={({ row }) => row.id === selectedDesign?.id}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./designs.panel.css\";\nimport { Alert, AlertActionCloseButton, Card, CardBody } from \"@patternfly/react-core\";\nimport {\n    AlertsService,\n    DesignsService,\n    DownloadService,\n    LocalStorageService,\n    useAlertsService,\n    useDesignsService,\n    useDownloadService,\n    useLocalStorageService\n} from \"@app/services\";\nimport { Design, DesignsSearchCriteria, DesignsSearchResults, DesignsSort, Paging } from \"@app/models\";\nimport { If, ListWithToolbar } from \"@app/components\";\nimport {\n    DeleteDesignModal,\n    DesignList,\n    DesignsEmptyState,\n    DesignsEmptyStateFiltered,\n    DesignsToolbar,\n    ExportToRhosrData,\n    ExportToRhosrModal,\n    ImportFrom,\n    RenameData,\n    RenameModal\n} from \"@app/pages/components\";\nimport { Navigation, useNavigation } from \"@app/contexts/navigation\";\nimport { contentTypeForDesign, convertToValidFilename, fileExtensionForDesign } from \"@app/utils\";\n\n\nexport type DesignsPanelProps = {\n    selectedDesign: Design | undefined;\n    onDesignSelected: (design: Design | undefined) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n}\n\n\nexport const DesignsPanel: FunctionComponent<DesignsPanelProps> = ({ selectedDesign, onDesignSelected, onCreate, onImport }: DesignsPanelProps) => {\n    const [ isLoading, setLoading ] = useState(false);\n    const [ showDataWarning, setShowDataWarning ] = useState(true);\n    const [ refresh, setRefresh ] = useState(1);\n    const [ isFiltered, setFiltered ] = useState(false);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<DesignsSearchCriteria>({\n        filterValue: \"\",\n        filterOn: \"name\"\n    });\n    const [ sort, setSort ] = useState<DesignsSort>({\n        by: \"modified-on\",\n        direction: \"desc\"\n    });\n    const [ designs, setDesigns ] = useState<DesignsSearchResults>();\n    const [ designToDelete, setDesignToDelete ] = useState<Design>();\n    const [ isDeleteModalOpen, setDeleteModalOpen ] = useState(false);\n    const [ designToRegister, setDesignToRegister ] = useState<Design>();\n    const [ isRegisterModalOpen, setRegisterModalOpen ] = useState(false);\n    const [ designToRename, setDesignToRename ] = useState<Design>();\n    const [ isRenameModalOpen, setRenameModalOpen ] = useState(false);\n\n    const designsSvc: DesignsService = useDesignsService();\n    const downloadSvc: DownloadService = useDownloadService();\n    const nav: Navigation = useNavigation();\n    const alerts: AlertsService = useAlertsService();\n    const local: LocalStorageService = useLocalStorageService();\n\n    const doRefresh = (): void => {\n        setRefresh(refresh + 1);\n    };\n\n    const onEditDesign = (design: Design): void => {\n        nav.navigateTo(`/designs/${design.id}/editor`);\n    };\n\n    const onRenameDesign = (design: Design): void => {\n        setDesignToRename(design);\n        setRenameModalOpen(true);\n    };\n\n    const doRenameDesign = (event: RenameData): void => {\n        designsSvc.renameDesign(designToRename?.id as string, event.name, event.summary).then(() => {\n            if (designToRename) {\n                designToRename.name = event.name;\n                designToRename.summary = event.summary;\n            }\n            setRenameModalOpen(false);\n            alerts.designRenamed(event);\n        }).catch(() => {\n            // TODO error handling\n        });\n    };\n\n    const onDeleteDesign = (design: Design): void => {\n        setDesignToDelete(design);\n        setDeleteModalOpen(true);\n    };\n\n    const onDeleteDesignConfirmed = (design: Design): void => {\n        designsSvc.deleteDesign(design.id).then(() => {\n            doRefresh();\n            alerts.designDeleted(design);\n        }).catch(error => {\n            console.error(\"[DesignsPanel] Error deleting design: \", error);\n            alerts.designDeleteFailed(design, error);\n        });\n        setDeleteModalOpen(false);\n    };\n\n    const onRegisterDesign = (design: Design): void => {\n        setDesignToRegister(design);\n        setRegisterModalOpen(true);\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        alerts.designExportedToRhosr(event);\n    };\n\n    const onDownloadDesign = (design: Design): void => {\n        designsSvc.getDesignContent(design.id).then(content => {\n            const filename: string = `${convertToValidFilename(design.name)}.${fileExtensionForDesign(design, content)}`;\n            const contentType: string = contentTypeForDesign(design, content);\n            const theContent: string = typeof content.data === \"object\" ? JSON.stringify(content.data, null, 4) : content.data as string;\n            downloadSvc.downloadToFS(design, theContent, contentType, filename);\n        });\n    };\n\n    const onCriteriaChange = (criteria: DesignsSearchCriteria): void =>  {\n        setCriteria(criteria);\n        setPaging({\n            page: 1,\n            pageSize: paging.pageSize\n        });\n        setFiltered(criteria.filterValue != undefined && criteria.filterValue.trim().length > 0);\n        doRefresh();\n    };\n\n    const onSortDesigns = (sort: DesignsSort): void => {\n        setSort(sort);\n        doRefresh();\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n        doRefresh();\n    };\n\n    useEffect(() => {\n        setShowDataWarning(\"true\" === local.getConfigProperty(\"designs.panel.show-data-warning\", \"true\"));\n    }, []);\n\n    useEffect(() => {\n        setLoading(true);\n        onDesignSelected(undefined);\n        designsSvc.searchDesigns(criteria, paging, sort).then(designs => {\n            console.debug(\"[DesignsPanel] Designs loaded: \", designs);\n            setDesigns(designs);\n            setLoading(false);\n        }).catch(error => {\n            // TODO need error handling\n            console.error(error);\n        });\n    }, [refresh]);\n\n    const emptyState: React.ReactNode = (\n        <DesignsEmptyState onCreate={onCreate} onImport={onImport} />\n    );\n\n    const emptyStateFiltered: React.ReactNode = (\n        <DesignsEmptyStateFiltered onClear={() => {\n            onCriteriaChange({\n                filterValue: \"\",\n                filterOn: \"\"\n            });\n        }} />\n    );\n\n    const toolbar: React.ReactNode = (\n        <DesignsToolbar designs={designs} criteria={criteria} paging={paging}\n            onCreate={onCreate} onImport={onImport}\n            onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange} />\n    );\n\n    const onCloseDataWarning = (): void => {\n        setShowDataWarning(false);\n        local.setConfigProperty(\"designs.panel.show-data-warning\", \"false\");\n    };\n\n    return (\n        <div className=\"designs-panel\">\n            <ListWithToolbar toolbar={toolbar}\n                emptyState={emptyState}\n                filteredEmptyState={emptyStateFiltered}\n                isLoading={isLoading}\n                isFiltered={isFiltered}\n                isEmpty={!designs || designs.count === 0}>\n                <Card isSelectable={false}>\n                    <CardBody className=\"panel-body\">\n                        <If condition={showDataWarning}>\n                            <Alert className=\"panel-alert\"\n                                isInline={true}\n                                variant=\"info\"\n                                title=\"Service Preview: Data is stored locally in your browser\"\n                                actionClose={<AlertActionCloseButton onClose={onCloseDataWarning} />}\n                                style={{ marginBottom: \"15px\" }}>\n                                <p>\n                                    In the Service Preview release of OpenShift API Designer, all designs are stored\n                                    locally in your browser. Clearing your browser cache or switching to a new browser\n                                    might result in loss of data. Make sure you save your work by downloading your\n                                    designs locally or by exporting them to a Red Hat OpenShift Service Registry instance.\n                                </p>\n                            </Alert>\n                        </If>\n                        <DesignList designs={designs as DesignsSearchResults}\n                            selectedDesign={selectedDesign}\n                            sort={sort}\n                            onSelect={onDesignSelected}\n                            onSort={onSortDesigns}\n                            onEdit={onEditDesign}\n                            onRename={onRenameDesign}\n                            onDownload={onDownloadDesign}\n                            onRegister={onRegisterDesign}\n                            onDelete={onDeleteDesign} />\n                    </CardBody>\n                </Card>\n            </ListWithToolbar>\n            <DeleteDesignModal design={designToDelete}\n                isOpen={isDeleteModalOpen}\n                onDelete={onDeleteDesignConfirmed}\n                onDownload={onDownloadDesign}\n                onCancel={() => setDeleteModalOpen(false)} />\n            <ExportToRhosrModal design={designToRegister as Design}\n                isOpen={isRegisterModalOpen}\n                onExported={onRegisterDesignConfirmed}\n                onCancel={() => setRegisterModalOpen(false)} />\n            <RenameModal design={designToRename}\n                isOpen={isRenameModalOpen}\n                onRename={doRenameDesign}\n                onCancel={() => setRenameModalOpen(false)} />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    Title\n} from \"@patternfly/react-core\";\nimport { AddCircleOIcon } from \"@patternfly/react-icons\";\nimport { ImportDropdown, ImportFrom } from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateProps = {\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyState: FunctionComponent<DesignsEmptyStateProps> = ({ onCreate, onImport }: DesignsEmptyStateProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No designs\n            </Title>\n            <EmptyStateBody>\n                To get started, create or import a design.\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={onCreate}>Create design</Button>\n            <EmptyStateSecondaryActions>\n                <ImportDropdown variant=\"long\" onImport={onImport} />\n            </EmptyStateSecondaryActions>\n        </EmptyState>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    Bullseye,\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateFilteredProps = {\n    onClear: () => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyStateFiltered: FunctionComponent<DesignsEmptyStateFilteredProps> = ({ onClear }: DesignsEmptyStateFilteredProps) => {\n    return (\n        <Bullseye style={{ backgroundColor: \"white\" }}>\n            <EmptyState variant={EmptyStateVariant.small}>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    No matching designs\n                </Title>\n                <EmptyStateBody>Adjust your filters and try again.</EmptyStateBody>\n                <Button variant=\"link\" onClick={onClear}>Clear all filters</Button>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./designs-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport { DesignsSearchCriteria, DesignsSearchResults, Paging } from \"@app/models\";\nimport { ImportDropdown, ImportFrom } from \"@app/pages/components\";\n\n\n/**\n * Properties\n */\nexport type DesignsToolbarProps = {\n    criteria: DesignsSearchCriteria;\n    paging: Paging;\n    designs?: DesignsSearchResults;\n    onCriteriaChange: (criteria: DesignsSearchCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n\n/**\n * The toolbar to filter (and paginate) the collection of designs.\n */\nexport const DesignsToolbar: FunctionComponent<DesignsToolbarProps> = (\n    { criteria, paging, designs, onCriteriaChange, onPagingChange, onCreate, onImport }: DesignsToolbarProps) => {\n\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    };\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        });\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        });\n    };\n\n    const totalDesignCount = (): number => {\n        return designs?.count || 0;\n    };\n\n    return (\n        <Toolbar id=\"designs-toolbar\" className=\"designs-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter designs\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem>\n                    <Button variant=\"primary\" onClick={onCreate}>Create design</Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                    <ImportDropdown variant=\"long\" onImport={onImport} />\n                </ToolbarItem>\n                <ToolbarItem className=\"design-paging-item\">\n                    <Pagination\n                        style={{ padding: \"0\" }}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalDesignCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"design-list-pagination\"\n                        className=\"design-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport {\n    Button,\n    FileUpload,\n    Form,\n    FormGroup,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport { ArtifactTypes, ContentTypes, CreateDesign, CreateDesignContent } from \"@app/models\";\nimport { If, ServicePreviewWarning } from \"@app/components\";\nimport { ImportFrom, UrlUpload } from \"@app/pages/components\";\nimport { isJson, isProto, isWsdl, isXml, isXsd, isYaml, parseJson, parseYaml } from \"@app/utils\";\nimport { DesignContext } from \"@app/models/designs/design-context.model\";\n\n\nexport type ImportDesignModalProps = {\n    importType: ImportFrom;\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nconst PLACEHOLDER_TYPE_OPTION: SelectOptionObject = {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    value: undefined,\n    label: \"Select a type...\",\n    toString: () => {\n        return \"Select a type...\";\n    },\n    compareTo(selectOption: any): boolean {\n        return selectOption === this;\n    }\n};\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        },\n        compareTo(selectOption: any): boolean {\n            return this.value === selectOption.value;\n        }\n    };\n});\n\n\ntype DetectionInfo = {\n    type?: string;\n    contentType?: string;\n    version?: string;\n    name?: string;\n    summary?: string;\n}\n\n\nexport const ImportDesignModal: FunctionComponent<ImportDesignModalProps> = ({ importType, isOpen, onImport, onCancel }: ImportDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    const [designContent, setDesignContent] = useState<string>();\n    const [fileName, setFileName] = useState<string>();\n    const [url, setUrl] = useState<string>();\n\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState<string>();\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [contentType, setContentType] = useState<string>();\n\n    const onFileChange = (value: string | File, fname: string): void => {\n        setDesignContent(value as string);\n        setFileName(fname);\n    };\n\n    const onUrlChange = (value: string|undefined, url: string|undefined): void => {\n        setDesignContent(value);\n        setUrl(url);\n    };\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setTheType((selection as any).value);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        const context: DesignContext = importType === ImportFrom.FILE ? {\n            type: \"file\",\n            file: {\n                fileName: fileName as string\n            }\n        } : {\n            type: \"url\",\n            url: {\n                url: url as string\n            }\n        };\n        const cd: CreateDesign = {\n            type: type as string,\n            name,\n            summary,\n            context\n        };\n        const cdc: CreateDesignContent = {\n            contentType: contentType as string,\n            data: designContent\n        };\n\n        console.debug(\"[ImportDesignModal] Importing design: \", cd);\n        console.debug(\"[ImportDesignModal] Importing content-type: \", contentType);\n        onImport(cd, cdc);\n    };\n\n    const hasDesignContent = (): boolean => {\n        return designContent !== undefined && designContent.trim().length > 0;\n    };\n\n    const title = (): string => {\n        if (importType === ImportFrom.FILE) {\n            return \"Import design from file\";\n        } else {\n            return \"Import design from URL\";\n        }\n    };\n\n    const detectJsonOrYamlInfo = (contentObj: any, contentType: string): DetectionInfo => {\n        if (contentObj.openapi) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"3.0.2\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.swagger) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"2.0\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.asyncapi) {\n            return {\n                type: ArtifactTypes.ASYNCAPI,\n                contentType: contentType,\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.$schema) {\n            return {\n                type: ArtifactTypes.JSON,\n                contentType: contentType,\n                name: contentObj.title,\n                summary: contentObj.description\n            };\n        }\n\n        return {\n            type: ArtifactTypes.AVRO,\n            contentType: contentType,\n            name: contentObj.name\n        };\n    };\n\n    const detectXmlInfo = (content: string): DetectionInfo => {\n        let type: string = ArtifactTypes.XML;\n        if (isWsdl(content)) {\n            type = ArtifactTypes.WSDL;\n        } else if (isXsd(content)) {\n            type = ArtifactTypes.XSD;\n        }\n        return {\n            type,\n            contentType: ContentTypes.TEXT_XML\n        };\n    };\n\n    const detectProtoInfo = (): DetectionInfo => {\n        return {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            type: ArtifactTypes.PROTOBUF\n        };\n    };\n\n    // Tries to figure out the type and meta-data of the content by parsing it and looking\n    // for key indicators.\n    const detectInfo = (content: string): DetectionInfo => {\n        if (isJson(content)) {\n            return detectJsonOrYamlInfo(parseJson(content), ContentTypes.APPLICATION_JSON);\n        } else if (isYaml(content)) {\n            return detectJsonOrYamlInfo(parseYaml(content), ContentTypes.APPLICATION_YAML);\n        } else if (isXml(content)) {\n            return detectXmlInfo(content);\n        } else if (isProto(content)) {\n            return detectProtoInfo();\n        }\n        console.warn(\"[ImportDesignModal] Failed to detect the type of the content.\");\n        // Default: nothing detected\n        return {\n        };\n\n        // TODO handle parsing of GraphQL\n    };\n\n    const setTheType = (newType: string|undefined): void => {\n        if (newType === undefined) {\n            setType(undefined);\n            setTypeSelection(undefined);\n        } else {\n            setType(newType);\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore (there really is a value on the option)\n            const newTypeSelection: SelectOptionObject = TYPE_OPTIONS.filter(option => option.value === newType)[0];\n            setTypeSelection(newTypeSelection);\n        }\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!designContent) {\n            valid = false;\n        }\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, designContent]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setDesignContent(undefined);\n        setName(\"\");\n        setSummary(\"\");\n        setFileName(undefined);\n        setTheType(undefined);\n    }, [isOpen]);\n\n    // Whenever the content changes (e.g. loaded from file) try to detect the\n    // type of the content.\n    useEffect(() => {\n        if (designContent && designContent.trim().length > 0) {\n            const info: DetectionInfo = detectInfo(designContent as string);\n            console.debug(\"[ImportDesignModal] Content detection: \", info);\n            console.debug(\"[ImportDesignModal] Version detected: \", info.version || \"\");\n\n            setTheType(info.type);\n            setVersion(info.version || \"\");\n            setName(info.name || \"\");\n            setSummary(info.summary || \"\");\n            setContentType(info.contentType);\n        } else {\n            console.debug(\"[ImportDesignModal] Content empty, resetting form fields.\");\n            setName(\"\");\n            setSummary(\"\");\n            setTheType(undefined);\n            setContentType(undefined);\n        }\n    }, [designContent]);\n\n    // Whenever the type changes to OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI && version === undefined) {\n            setVersion(\"3.0.2\");\n        }\n    }, [type]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title={title()}\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n                    Import\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <ServicePreviewWarning />\n\n            <Form>\n                <If condition={importType === ImportFrom.FILE}>\n                    <FormGroup label=\"File\" isRequired={true} fieldId=\"import-design-file\">\n                        <FileUpload\n                            isRequired={true}\n                            id=\"design-text-file\"\n                            type=\"text\"\n                            value={designContent}\n                            filename={fileName}\n                            filenamePlaceholder=\"Drag and drop a file or upload one\"\n                            onChange={onFileChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={importType === ImportFrom.URL}>\n                    <FormGroup label=\"URL\" isRequired={true} fieldId=\"import-design-url\">\n                        <UrlUpload\n                            id=\"design-text-url\"\n                            urlPlaceholder=\"Enter a valid and accessible URL\"\n                            onChange={onUrlChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={hasDesignContent}>\n                    <FormGroup label=\"Type\" isRequired={true} fieldId=\"import-design-type\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select type\"\n                            onToggle={() => setTypeToggled(!isTypeToggled)}\n                            onSelect={(event, selection) => onTypeSelect(selection)}\n                            isOpen={isTypeToggled}\n                            selections={typeSelection}\n                            menuAppendTo=\"parent\"\n                        >\n                            {\n                                [\n                                    <SelectOption key={-1} value={PLACEHOLDER_TYPE_OPTION} isPlaceholder={true}/>,\n                                    ...TYPE_OPTIONS.map((to, index) => <SelectOption key={index} value={to}/>)\n                                ]\n                            }\n                        </Select>\n                    </FormGroup>\n                    <If condition={type === ArtifactTypes.OPENAPI}>\n                        <FormGroup label=\"Version\" isRequired={true} fieldId=\"import-design-version\">\n                            <Select\n                                variant={SelectVariant.single}\n                                aria-label=\"Select version\"\n                                onToggle={() => setVersionToggled(!isVersionToggled)}\n                                onSelect={(event, selection) => onVersionSelect(selection as string)}\n                                isOpen={isVersionToggled}\n                                selections={version}\n                                menuAppendTo=\"parent\"\n                            >\n                                <SelectOption key={1} value=\"3.0.2\"/>\n                                <SelectOption key={2} value=\"2.0\"/>\n                            </Select>\n                        </FormGroup>\n                    </If>\n                    <FormGroup label=\"Name\" isRequired={true} fieldId=\"import-design-name\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"import-design-name\"\n                            name=\"import-design-name\"\n                            aria-describedby=\"import-design-name-helper\"\n                            value={name}\n                            onChange={(value) => setName(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Description\" fieldId=\"import-design-description\">\n                        <TextArea\n                            type=\"text\"\n                            id=\"import-design-description\"\n                            name=\"import-design-description\"\n                            aria-describedby=\"import-design-description-helper\"\n                            value={summary}\n                            onChange={(value) => setSummary(value)}\n                        />\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { CreateDesign, CreateDesignContent, SearchedArtifact, SearchedVersion } from \"@app/models\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { RhosrService, useRhosrService } from \"@app/services\";\nimport { If, IsLoading, RhosrEmptyState, ServicePreviewWarning } from \"@app/components\";\nimport { ArtifactSelector } from \"@app/pages/components\";\n\n\nexport type ImportFromRhosrModalProps = {\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nexport const ImportFromRhosrModal: FunctionComponent<ImportFromRhosrModalProps> = ({ isOpen, onImport, onCancel }: ImportFromRhosrModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [isLoading, setLoading] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [design, setDesign] = useState<CreateDesign>();\n    const [designContent, setDesignContent] = useState<CreateDesignContent>();\n\n    const rhosr: RhosrService = useRhosrService();\n\n    // Called when the user selects an artifact from the artifact selector.\n    const onArtifactSelected = (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        if (artifact === undefined) {\n            setDesign(undefined);\n            setDesignContent(undefined);\n        } else {\n            const cd: CreateDesign = {\n                type: artifact.type,\n                name: artifact.name || artifact.id,\n                summary: artifact.description || \"\",\n                context: {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: artifact.groupId as string,\n                        artifactId: artifact.id,\n                        version: version?.version as string\n                    }\n                }\n            };\n            setDesign(cd);\n            setDesignContent(content);\n        }\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        onImport(design as CreateDesign, designContent as CreateDesignContent);\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                setLoading(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[ImportFromRhosrModal] Error getting registry list: \", error);\n                setRegistries([]);\n                setLoading(false);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        let valid: boolean = true;\n        if (design === undefined) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [design, designContent]);\n\n    const actions: any[] = registries.length === 0 ? [] : [\n        <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n            Import\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n            Cancel\n        </Button>\n    ];\n\n    return (\n        <Modal\n            variant={ModalVariant.large}\n            title=\"Import design from Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={actions}\n        >\n            <IsLoading condition={isLoading}>\n                <If condition={registries.length === 0}>\n                    <RhosrEmptyState message=\"To import a design from Service Registry, you must create a Service Registry instance first.\" />\n                </If>\n                <If condition={registries.length > 0}>\n                    <ServicePreviewWarning />\n                    <ArtifactSelector registries={registries} onSelected={onArtifactSelected} />\n                </If>\n            </IsLoading>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Template } from \"@app/models\";\nimport \"./template-item.css\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\n\nexport type TemplateItemProps = {\n    template: Template;\n    isSelected: boolean;\n    onSelect: (template: Template) => void;\n}\n\nexport const TemplateItem: FunctionComponent<TemplateItemProps> = ({ template, isSelected, onSelect }: TemplateItemProps) => {\n    const onClick = (): void => {\n        if (!isSelected) {\n            onSelect(template);\n        }\n    };\n\n    return (\n        <div className={`template-item ${isSelected ? \"selected\" : \"not-selected\"}`} onClick={onClick}>\n            <div className=\"icon\">\n                <PlusCircleIcon />\n            </div>\n            <div className=\"name\">{template.name}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport \"./url-upload.css\";\nimport { Button, Spinner, TextArea, TextInput } from \"@patternfly/react-core\";\nimport { If, IsLoading } from \"@app/components\";\nimport { UrlService, useUrlService } from \"@app/services\";\n\n/**\n * Properties\n */\nexport type UrlUploadProps = {\n    id: string|\"url-upload\";\n    urlPlaceholder: string|\"\";\n    onChange: (value: string|undefined, url: string|undefined) => void;\n};\n\n/**\n * A control similar to the FileUpload control from patternfly that allows uploading from\n * a URL instead of a file.\n */\nexport const UrlUpload: FunctionComponent<UrlUploadProps> = ({ id, urlPlaceholder, onChange }: UrlUploadProps) => {\n    const [url, setUrl] = useState<string>();\n    const [previewContent, setPreviewContent] = useState<string>();\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [downloadError, setDownloadError] = useState<string>();\n\n    const urlService: UrlService = useUrlService();\n\n    const onTextInputChange = (value: string): void => {\n        setUrl(value);\n    };\n\n    const hasUrl = (): boolean => {\n        return url != undefined && url.trim().length > 0;\n    };\n\n    const hasError = (): boolean => {\n        return downloadError != undefined && downloadError.trim().length > 0;\n    };\n\n    const onFetch = (): void => {\n        setLoading(true);\n        urlService.fetchUrlContent(url as string).then(content => {\n            setDownloadError(undefined);\n            setPreviewContent(content);\n            setLoading(false);\n            onChange(content, url);\n        }).catch(error => {\n            setDownloadError(error.message);\n            setLoading(false);\n        });\n    };\n\n    const onClear = (): void => {\n        setUrl(\"\");\n        setPreviewContent(\"\");\n        onChange(undefined, undefined);\n    };\n\n    const spinner: React.ReactNode = (\n        <div className=\"url-upload-loading\">\n            <Spinner size=\"md\" className=\"spinner\" />\n            <span className=\"spinner-message\">Loading URL content</span>\n        </div>\n    );\n\n    return (\n        <div className=\"url-upload\">\n            <div className=\"url-upload-flex\">\n                <div className=\"url-upload-url\">\n                    <TextInput value={url} type=\"text\" placeholder={urlPlaceholder} id={id}\n                        onChange={onTextInputChange} aria-label=\"url input\" />\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onFetch}>Fetch</Button>\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onClear}>Clear</Button>\n                </div>\n            </div>\n            <div className=\"url-upload-preview\">\n                <IsLoading condition={isLoading} loadingComponent={spinner}>\n                    <If condition={hasError}>\n                        <div className=\"url-upload-error\">\n                            <div>\n                                Error getting content from URL.\n                            </div>\n                            <div>\n                                {downloadError}\n                            </div>\n                        </div>\n                    </If>\n                    <If condition={!hasError()}>\n                        <TextArea value={previewContent} isReadOnly={true}></TextArea>\n                    </If>\n                </IsLoading>\n            </div>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport \"./design-details-panel.css\";\nimport { Design } from \"@app/models\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { ArtifactTypeIcon, DateTime, DesignDescription } from \"@app/components\";\nimport { DesignEvents, DesignHistory, DesignOriginLabel } from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignDetailsPanelProps = {\n    design: Design | undefined;\n};\n\n/**\n * Details panel with metadata and history about a single selected design.\n */\nexport const DesignDetailsPanel: FunctionComponent<DesignDetailsPanelProps> = ({ design }: DesignDetailsPanelProps) => {\n\n    const [activeTabKey, setActiveTabKey] = useState<string>(\"details\");\n\n    return (\n        <React.Fragment>\n            <Tabs\n                activeKey={activeTabKey}\n                onSelect={(event, eventKey) => {setActiveTabKey(eventKey as string);}}\n                aria-label=\"Design panel detail tabs\"\n            >\n                <Tab eventKey=\"details\" title={<TabTitleText>Details</TabTitleText>}>\n                    <div className=\"design-details-grid\">\n                        <div className=\"design-details-label\">Description</div>\n                        <DesignDescription className=\"design-details-value\" description={design?.summary} />\n\n                        <div className=\"design-details-label\">Type</div>\n                        <div className=\"design-details-value\">\n                            <ArtifactTypeIcon type={design?.type as string} isShowLabel={true} isShowIcon={false} />\n                        </div>\n\n                        <div className=\"design-details-label\">Time created</div>\n                        <div className=\"design-details-value\"><DateTime date={design?.createdOn} /></div>\n\n                        <div className=\"design-details-label\">Time updated</div>\n                        <div className=\"design-details-value\"><DateTime date={design?.modifiedOn} /></div>\n\n                        <div className=\"design-details-label\">Origin</div>\n                        <div className=\"design-details-value\">\n                            <DesignOriginLabel design={design} />\n                        </div>\n                    </div>\n                </Tab>\n                <Tab eventKey=\"events\" title={<TabTitleText>Events</TabTitleText>}>\n                    <DesignEvents design={design as Design} />\n                </Tab>\n                <Tab eventKey=\"history\" title={<TabTitleText>History</TabTitleText>}>\n                    <DesignHistory design={design as Design} />\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./design-history.css\";\nimport { Design, DesignEvent } from \"@app/models\";\nimport { DesignsService, useDesignsService } from \"@app/services\";\nimport { DateTime, IfNotEmpty, IsLoading } from \"@app/components\";\nimport { DesignEventType } from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignHistoryProps = {\n    design: Design;\n};\n\nexport const DesignHistory: FunctionComponent<DesignHistoryProps> = ({ design }: DesignHistoryProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [events, setEvents] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setEvents(events);\n                setLoading(false);\n            }).catch(() => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <IsLoading condition={isLoading}>\n            <IfNotEmpty collection={events}>\n                <div className=\"design-history\">\n                    {\n                        events?.map((event, idx) => (\n                            <React.Fragment key={idx}>\n                                <div key={`${idx}-type`} className=\"event-type\"><DesignEventType event={event} /></div>\n                                <div key={`${idx}-time`} className=\"event-time\"><DateTime date={event.on} /></div>\n                            </React.Fragment>\n                        ))\n                    }\n                </div>\n            </IfNotEmpty>\n        </IsLoading>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./design-events.css\";\nimport { Design, DesignEvent } from \"@app/models\";\nimport { DesignsService, useDesignsService } from \"@app/services\";\nimport { DateTime, If, IfNotEmpty, IsLoading, RegistryNavLink } from \"@app/components\";\nimport { DesignEventType, DesignOriginLabel } from \"@app/pages/components\";\nimport { hasOrigin } from \"@app/utils\";\nimport { Divider } from \"@patternfly/react-core\";\n\n\nexport type DesignEventsProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignEvents: FunctionComponent<DesignEventsProps> = ({ design }: DesignEventsProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [exports, setExports] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    const originGroupId = (): string => {\n        return design?.origin?.rhosr?.groupId || \"default\";\n    };\n    const originArtifactId = (): string => {\n        return design?.origin?.rhosr?.artifactId || \"Unknown\";\n    };\n    const originVersion = (): string => {\n        return design?.origin?.rhosr?.version || \"latest\";\n    };\n    const originFilename = (): string => {\n        return design?.origin?.file?.fileName || \"\";\n    };\n    const originUrl = (): string => {\n        return design?.origin?.url?.url || \"\";\n    };\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setExports(events?.filter(event => event.type === \"download\" || event.type === \"register\"));\n                setLoading(false);\n            }).catch(() => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <React.Fragment>\n            <div className=\"design-events-origin\">\n                <div className=\"design-events-origin-label\">Origin</div>\n                <div className=\"design-events-origin-value\">\n                    <DesignOriginLabel design={design} />\n                </div>\n\n                <div className=\"design-events-origin-label\">Time created</div>\n                <div className=\"design-events-origin-value\"><DateTime date={design?.createdOn} /></div>\n\n                <If condition={hasOrigin(design, \"rhosr\")}>\n                    <div className=\"design-events-origin-label\">Group</div>\n                    <div className=\"design-events-origin-value\">{originGroupId()}</div>\n\n                    <div className=\"design-events-origin-label\">ID</div>\n                    <div className=\"design-events-origin-value\">{originArtifactId()}</div>\n\n                    <div className=\"design-events-origin-label\">Version</div>\n                    <div className=\"design-events-origin-value\">{originVersion()}</div>\n\n                    <div className=\"design-events-origin-colspan\">\n                        <RegistryNavLink context={design?.origin}>View artifact in Service Registry</RegistryNavLink>\n                    </div>\n                </If>\n\n                <If condition={hasOrigin(design, \"file\")}>\n                    <div className=\"design-events-origin-label\">File name</div>\n                    <div className=\"design-events-origin-value\">{originFilename()}</div>\n                </If>\n\n                <If condition={hasOrigin(design, \"url\")}>\n                    <div className=\"design-events-origin-label\">URL</div>\n                    <div className=\"design-events-origin-value\">\n                        <a href={originUrl()}>{originUrl()}</a>\n                    </div>\n                </If>\n            </div>\n            <Divider className=\"design-events-divider\" />\n            <IsLoading condition={isLoading}>\n                <div className=\"design-events-origin-exports\">\n                    <div className=\"design-events-origin-exports-label\">Exported to</div>\n                    <div></div>\n\n                    <IfNotEmpty collection={exports} emptyState={(\n                        <span>This design has not been exported.</span>\n                    )}>\n                        {\n                            exports?.map((event, idx) => (\n                                <React.Fragment key={idx}>\n                                    <div key={`${idx}-type`} className=\"design-events-origin-exports-item\"><DesignEventType event={event} variant=\"short\" /></div>\n                                    <div key={`${idx}-time`} className=\"design-events-origin-exports-time\"><DateTime date={event.on} /></div>\n                                </React.Fragment>\n                            ))\n                        }\n                    </IfNotEmpty>\n                </div>\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DesignEvent } from \"@app/models\";\nimport { DesignContext } from \"@app/models/designs/design-context.model\";\nimport { RegistryNavLink } from \"@app/components\";\n\n\nexport type DesignEventTypeProps = {\n    event: DesignEvent;\n    variant?: \"long\" | \"short\";  // Default is \"long\"\n};\n\n\nexport const DesignEventType: FunctionComponent<DesignEventTypeProps> = ({ event, variant }: DesignEventTypeProps) => {\n    const typeLabel = (): React.ReactNode => {\n        switch (event.type) {\n            case \"download\":\n                return variant === \"short\" ? <span>File</span> : <span>Downloaded to file system</span>;\n            case \"create\":\n                return variant === \"short\" ? <span>New</span> : <span>Created new design</span>;\n            case \"import\":\n                return importTypeLabel();\n            case \"register\":\n                // eslint-disable-next-line no-case-declarations\n                const context: DesignContext = {\n                    type: \"rhosr\",\n                    rhosr: event.data\n                };\n                return variant === \"short\" ? <span>Service Registry</span> : (\n                    <React.Fragment>\n                        <span>Exported to Service Registry </span>\n                        <RegistryNavLink context={context}>\n                            <span>(</span>\n                            <span>{context.rhosr?.groupId || \"default\"}</span>\n                            <span> / </span>\n                            <span>{context.rhosr?.artifactId}</span>\n                            <span> - </span>\n                            <span>{context.rhosr?.version || \"latest\"})</span>\n                        </RegistryNavLink>\n                    </React.Fragment>\n                );\n            case \"update\":\n                return variant === \"short\" ? <span>Edited</span> : <span>Modified using the editor</span>;\n        }\n    };\n\n    const importTypeLabel = (): React.ReactNode => {\n        const context: DesignContext = event.data.context;\n        switch (context.type) {\n            case \"file\":\n                return variant === \"short\" ? <span>File</span> : <span>{`Imported from file ${context.file?.fileName}`}</span>;\n            case \"rhosr\":\n                return variant === \"short\" ? <span>Service Registry</span> : (\n                    <React.Fragment>\n                        <span>Imported from Service Registry </span>\n                        <RegistryNavLink context={context}>\n                            <span>(</span>\n                            <span>{context.rhosr?.groupId || \"default\"}</span>\n                            <span> / </span>\n                            <span>{context.rhosr?.artifactId}</span>\n                            <span> - </span>\n                            <span>{context.rhosr?.version || \"latest\"})</span>\n                        </RegistryNavLink>\n                    </React.Fragment>\n                );\n            case \"url\":\n                return variant === \"short\" ? <span>URL</span> : (\n                    <React.Fragment>\n                        <span>Imported from URL: </span>\n                        <a href={context.url?.url}>{context.url?.url}</a>\n                    </React.Fragment>\n                );\n        }\n        return <span>Imported content</span>;\n    };\n\n    return (\n        <React.Fragment children={typeLabel()} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Design } from \"@app/models\";\nimport { Label } from \"@patternfly/react-core\";\nimport { hasOrigin } from \"@app/utils\";\n\n\nexport type DesignOriginLabelProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignOriginLabel: FunctionComponent<DesignOriginLabelProps> = ({ design }: DesignOriginLabelProps) => {\n\n    const label = (): string => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"File\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"Service Registry\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"URL\";\n            } else if (hasOrigin(design, \"create\")) {\n                return \"New design\";\n            }\n        }\n        return \"n/a\";\n    };\n\n    const color = (): \"blue\" | \"cyan\" | \"green\" | \"orange\" | \"purple\" | \"red\" | \"grey\" => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"purple\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"blue\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"green\";\n            }\n        }\n        return \"grey\";\n    };\n\n    return (\n        <Label color={color()}>{label()}</Label>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./editor-context.css\";\nimport { ArtifactTypes, Design, TestRegistryErrorResponse } from \"@app/models\";\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Dropdown,\n    DropdownItem,\n    DropdownSeparator,\n    DropdownToggle,\n    Text,\n    TextContent\n} from \"@patternfly/react-core\";\nimport { ArtifactTypeIcon, DesignDescription, If, NavLink, RegistryNavLink, ToggleIcon } from \"@app/components\";\nimport Moment from \"react-moment\";\nimport { DesignContext } from \"@app/models/designs/design-context.model\";\nimport { ExportToRhosrData, ExportToRhosrModal, TestRegistryModal } from \"@app/pages/components\";\nimport { AlertsService, LocalStorageService, useAlertsService, useLocalStorageService } from \"@app/services\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\n\n/**\n * Properties\n */\nexport type EditorContextProps = {\n    design: Design;\n    dirty: boolean;\n    artifactContent: string;\n    onSave: () => void;\n    onFormat: () => void;\n    onDelete: () => void;\n    onDownload: () => void;\n    onRename: () => void;\n    onCompareContent: () => void;\n    onExpandTestRegistryCausesPanel: (error: TestRegistryErrorResponse) => void;\n    onRegistrationTestRegistry: (registry: Registry, group: string | undefined, artifactId: string) => void;\n    isPanelOpen?: boolean;\n}\n\ntype EditorContextMenuItem = {\n    label?: string;\n    key: string;\n    isSeparator?: boolean;\n    accept?: (props: EditorContextProps) => boolean;\n    isDisabled?: (props: EditorContextProps) => boolean;\n};\n\nconst menuActions: EditorContextMenuItem[] = [\n    {\n        label: \"Edit design metadata\",\n        key: \"action-rename\",\n    },\n    {\n        label: \"Format design content\",\n        key: \"action-format\",\n        accept: (props: EditorContextProps) => { return [ArtifactTypes.AVRO, ArtifactTypes.JSON].includes(props.design.type); },\n    },\n    {\n        label: \"Show design changes\",\n        key: \"action-compare\",\n        isDisabled: (props: EditorContextProps) => { return !props.dirty; },\n    },\n    {\n        key: \"action-separator-1\",\n        isSeparator: true\n    },\n    {\n        label: \"Run Service Registry check\",\n        key: \"action-test-registry\"\n    },\n    {\n        label: \"Export design to Service Registry\",\n        key: \"action-export-to-rhosr\",\n    },\n    {\n        label: \"Download design\",\n        key: \"action-download\"\n    },\n    {\n        key: \"action-separator-2\",\n        isSeparator: true\n    },\n    {\n        label: \"Delete design\",\n        key: \"action-delete\"\n    },\n];\n\n\n/**\n * The context of the design when editing a design on the editor page.\n */\nexport const EditorContext: FunctionComponent<EditorContextProps> = (props: EditorContextProps) => {\n\n    const lss: LocalStorageService = useLocalStorageService();\n\n    const [designContext, setDesignContext] = useState<DesignContext>();\n    const [isActionMenuToggled, setActionMenuToggled] = useState(false);\n    const [isExpanded, setExpanded] = useState(lss.getConfigProperty(\"editor-context.isExpanded\", \"false\") === \"true\");\n    const [isRegisterModalOpen, setRegisterModalOpen] = useState(false);\n    const [isTestRegistryModalOpen, setIsTestRegistryModalOpen] = useState(false);\n\n    const alerts: AlertsService = useAlertsService();\n\n    const onActionMenuToggle = (value: boolean): void => {\n        setActionMenuToggled(value);\n    };\n\n    const onToggleExpand = (): void => {\n        const newExpanded: boolean = !isExpanded;\n        lss.setConfigProperty(\"editor-context.isExpanded\", \"\" + newExpanded);\n        setExpanded(newExpanded);\n    };\n\n    const actionMenuToggle: React.ReactNode = (\n        <DropdownToggle id=\"action-toggle\" toggleVariant=\"secondary\" onToggle={onActionMenuToggle}>Actions</DropdownToggle>\n    );\n\n    const onActionMenuSelect = (event?: React.SyntheticEvent<HTMLDivElement>): void => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setActionMenuToggled(false);\n        switch (action) {\n            case \"action-compare\":\n                props.onCompareContent();\n                return;\n            case \"action-export-to-rhosr\":\n                setRegisterModalOpen(true);\n                return;\n            case \"action-format\":\n                props.onFormat();\n                return;\n            case \"action-rename\":\n                props.onRename();\n                return;\n            case \"action-delete\":\n                props.onDelete();\n                return;\n            case \"action-download\":\n                props.onDownload();\n                return;\n            case \"action-test-registry\":\n                setIsTestRegistryModalOpen(true);\n                return;\n        }\n    };\n\n    const hasRhosrContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"rhosr\";\n    };\n\n    const hasFileContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"file\";\n    };\n\n    const hasUrlContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"url\";\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        alerts.designExportedToRhosr(event);\n    };\n\n    useEffect(() => {\n        if (props.design) {\n            const context: DesignContext|undefined = props.design.origin;\n            setDesignContext(context);\n        }\n    }, [props.design]);\n\n    const menuItems: any[] = menuActions.filter(action => !action.accept ? true : action.accept(props)).map(action => (\n        action.isSeparator ? (\n            <DropdownSeparator key={action.key} />\n        ) : (\n            <DropdownItem key={action.key} data-id={action.key} isDisabled={action.isDisabled ? action.isDisabled(props) : false}>{action.label}</DropdownItem>\n        )\n    ));\n\n    return (\n        <React.Fragment>\n            <TestRegistryModal isOpen={isTestRegistryModalOpen}\n                design={props.design}\n                onCancel={() => setIsTestRegistryModalOpen(false)}\n                onSubmit={(...params) => {\n                    props.onRegistrationTestRegistry(...params);\n                    setIsTestRegistryModalOpen(false);\n                }} />\n            <div className=\"editor-context\">\n                <div className=\"editor-context-breadcrumbs\">\n                    <Breadcrumb style={{ marginBottom: \"10px\" }}>\n                        <BreadcrumbItem component=\"button\">\n                            <NavLink location=\"/\">API and Schema Designs</NavLink>\n                        </BreadcrumbItem>\n                        <BreadcrumbItem isActive={true}>{props.design?.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                </div>\n                <div className=\"editor-context-last-modified\">\n                    <span>Last modified:</span>\n                    <Moment date={props.design.modifiedOn} fromNow={true} />\n                </div>\n                <div className=\"editor-context-actions\">\n                    <Dropdown\n                        onSelect={onActionMenuSelect}\n                        toggle={actionMenuToggle}\n                        style={{ zIndex: 1000 }}\n                        isOpen={isActionMenuToggled}\n                        isPlain\n                        dropdownItems={menuItems}\n                    />\n                </div>\n                <div className=\"editor-context-save\">\n                    <Button className=\"btn-save\" variant=\"primary\" onClick={props.onSave} isDisabled={!props.dirty}>Save</Button>\n                </div>\n                <div className=\"editor-context-toggle\">\n                    <Button className=\"btn-toggle\" variant=\"plain\" onClick={onToggleExpand}>\n                        <ToggleIcon expanded={isExpanded} onClick={() => { setExpanded(!isExpanded); }} />\n                    </Button>\n                </div>\n            </div>\n            <If condition={isExpanded}>\n                <div className=\"editor-context-details\">\n                    <TextContent>\n                        <Text component=\"h1\" className=\"title\">{props.design?.name}</Text>\n                        <DesignDescription className=\"summary\" description={props.design?.summary} />\n                    </TextContent>\n                    <div className=\"metadata\">\n                        <DescriptionList isHorizontal={true} isCompact={true}>\n                            <DescriptionListGroup>\n                                <DescriptionListTerm>Type</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                    <ArtifactTypeIcon type={props.design.type} isShowLabel={true} isShowIcon={true} />\n                                </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <If condition={hasRhosrContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Artifact</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <span className=\"group\">{designContext?.rhosr?.groupId || \"default\"}</span>\n                                        <span> / </span>\n                                        <RegistryNavLink context={designContext}>\n                                            <span className=\"group\">{designContext?.rhosr?.artifactId}</span>\n                                            <span> </span>\n                                            <span>(</span>\n                                            <span className=\"group\">{designContext?.rhosr?.version || \"latest\"}</span>\n                                            <span>)</span>\n                                        </RegistryNavLink>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                            <If condition={hasFileContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>File name</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <span>{designContext?.file?.fileName}</span>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                            <If condition={hasUrlContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>URL</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <a href={designContext?.url?.url}>{designContext?.url?.url}</a>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                        </DescriptionList>\n                    </div>\n                </div>\n            </If>\n            <ExportToRhosrModal design={props.design as Design}\n                isOpen={isRegisterModalOpen}\n                onExported={onRegisterDesignConfirmed}\n                onCancel={() => setRegisterModalOpen(false)} />\n        </React.Fragment>\n    );\n};\n","import { DesignsService, useDesignsService, useRhosrService } from \"@app/services\";\nimport { Button, Form, FormGroup, Modal, ModalVariant, TextInput } from \"@patternfly/react-core\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport React, { useEffect, useState } from \"react\";\nimport { Design, DesignEvent } from \"@app/models\";\nimport { IfNotEmpty, IsLoading, ObjectSelect, RhosrEmptyState } from \"@app/components\";\nimport { IfRhosr } from \"@app/pages/components\";\nimport { DesignContext } from \"@app/models/designs/design-context.model\";\n\n\nexport interface TestRegistryModalProps {\n    design: Design;\n    isOpen?: boolean;\n    onCancel: () => void;\n    onSubmit: (registry: Registry, groupId: string | undefined, artifactId: string) => void;\n}\n\ntype ValidatedValue = \"error\" | \"default\" | \"warning\" | \"success\" | undefined;\n\nconst initialFormState = {\n    hasErrors: false,\n    groupValue: {\n        value: \"\",\n        validated: \"default\" as ValidatedValue,\n        errorMessage: \"\"\n    },\n    artifactIdValue: {\n        value: \"\",\n        validated: \"default\" as ValidatedValue,\n        errorMessage: \"\"\n    }\n};\n\nexport const TestRegistryModal: React.FunctionComponent<TestRegistryModalProps> = ({ design, isOpen, onCancel, onSubmit }) => {\n    const [isValid, setValid] = useState(false);\n    const [isLoadingRegistries, setLoadingRegistries] = useState(true);\n    const [registries, setRegistries] = useState<Registry[]>([]);\n    const [registry, setRegistry] = useState<Registry>();\n    const [formState, setFormState] = useState(initialFormState);\n\n    const designs: DesignsService = useDesignsService();\n    const rhosr = useRhosrService();\n\n    const setGroupAndId = (group: string, id: string) => {\n        setFormState({\n            ...formState,\n            groupValue: {\n                ...formState.groupValue,\n                validated: \"default\",\n                value: group\n            },\n            artifactIdValue: {\n                ...formState.artifactIdValue,\n                validated: \"default\",\n                value: id\n            }\n        });\n    };\n\n    const setGroupValue = (val: string) => {\n        setFormState({\n            ...formState,\n            groupValue: {\n                ...formState.groupValue,\n                validated: \"default\",\n                value: val\n            }\n        });\n    };\n\n    const setArtifactIdValue = (val: string) => {\n        const hasErrors = !val;\n\n        setFormState({\n            ...formState,\n            hasErrors,\n            artifactIdValue: {\n                ...formState.artifactIdValue,\n                validated: hasErrors ? \"error\" : \"default\",\n                errorMessage: \"ID is a required field.\",\n                value: val\n            }\n        });\n    };\n\n    const detectRhosrContext = (events: DesignEvent[]): DesignContext|undefined => {\n        if (events) {\n            const filteredEvents: DesignEvent[] = events.filter(event => event.type === \"register\");\n            if (filteredEvents && filteredEvents.length > 0) {\n                const regEvent: DesignEvent = filteredEvents[0];\n                return {\n                    type: \"rhosr\",\n                    rhosr: regEvent.data\n                };\n            }\n        }\n        if (design?.origin?.type === \"rhosr\") {\n            return design.origin;\n        }\n\n        return undefined;\n    };\n\n    const defaultRegistry = (registries: Registry[], context: DesignContext|undefined): Registry | undefined => {\n        if (context) {\n            const filteredRegistries: Registry[] = registries.filter(registry => registry.id === design.origin.rhosr?.instanceId);\n            if (filteredRegistries?.length > 0) {\n                return filteredRegistries[0];\n            }\n        }\n\n        if (registries?.length > 0) {\n            return registries[0];\n        } else {\n            return undefined;\n        }\n    };\n\n    const setFormValues = (context: DesignContext | undefined): void => {\n        setGroupAndId(context?.rhosr?.groupId || \"\", context?.rhosr?.artifactId || \"\");\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setFormState(initialFormState);\n            setLoadingRegistries(true);\n\n            // Load all events for this design.\n            designs.getEvents(design.id).then(events => {\n                // Get the list of registries.\n                rhosr.getRegistries().then(registries => {\n                    setRegistries(registries.sort((a, b) => {\n                        const name1: string = a.name as string;\n                        const name2: string = b.name as string;\n                        return name1.localeCompare(name2);\n                    }));\n                    const context: DesignContext | undefined = detectRhosrContext(events);\n                    setFormValues(context);\n                    setRegistry(defaultRegistry(registries, context));\n                    setLoadingRegistries(false);\n                }).catch(error => {\n                    // TODO handle this error case\n                    console.error(\"[ExportToRhosrModal] Error getting registry list: \", error);\n                    setRegistries([]);\n                    setFormValues(undefined);\n                    setLoadingRegistries(false);\n                });\n            }).catch(error => {\n                console.error(\"[ExportToRhosrModal] Error getting events for design: \", error);\n                setRegistries([]);\n                setFormValues(undefined);\n                setLoadingRegistries(false);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        setValid(formState.artifactIdValue.value !== undefined && formState.artifactIdValue.value.length > 0);\n    }, [formState]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Test using Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"confirm\" isDisabled={!isValid || registries?.length === 0} variant=\"primary\" onClick={() => onSubmit(\n                    registry as Registry,\n                    formState.groupValue.value,\n                    formState.artifactIdValue.value\n                )}>\n                    Test\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <IsLoading condition={isLoadingRegistries}>\n                <IfNotEmpty collection={registries} emptyState={<RhosrEmptyState message=\"To test your design using Service Registry, you must create a Service Registry instance first.\" />}>\n                    <Form>\n                        <FormGroup\n                            isRequired={true}\n                            label=\"Registry instance\"\n                            fieldId=\"test-in-registry-registry-instance\"\n                        >\n                            <ObjectSelect toggleId=\"test-in-registry-instance\" value={registry} items={registries} onSelect={setRegistry} itemToString={item => item.name} />\n                        </FormGroup>\n                        <IfRhosr registry={registry} scope=\"write\">\n                            <FormGroup\n                                label=\"Group\"\n                                validated={formState.groupValue.validated}\n                                helperTextInvalid={formState.groupValue.errorMessage}\n                                fieldId=\"test-in-registry-group\"\n                            >\n                                <TextInput\n                                    id=\"test-in-registry-group\"\n                                    value={formState.groupValue.value}\n                                    placeholder=\"Enter group (optional) or leave blank for default group\"\n                                    onChange={setGroupValue} />\n                            </FormGroup>\n                            <FormGroup\n                                label=\"ID\"\n                                validated={formState.artifactIdValue.validated}\n                                helperTextInvalid={formState.artifactIdValue.errorMessage}\n                                isRequired={true}\n                                fieldId=\"test-in-registry-artifactId\"\n                            >\n                                <TextInput\n                                    id=\"test-in-registry-artifactId\"\n                                    placeholder=\"Enter ID of artifact\"\n                                    value={formState.artifactIdValue.value}\n                                    onChange={setArtifactIdValue} />\n                            </FormGroup>\n                        </IfRhosr>\n                    </Form>\n                </IfNotEmpty>\n            </IsLoading>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./compare-modal.css\";\nimport { Modal, ToggleGroup, ToggleGroupItem } from \"@patternfly/react-core\";\nimport { editor } from \"monaco-editor\";\nimport { DiffEditor } from \"@monaco-editor/react\";\nimport { ArrowsAltHIcon } from \"@patternfly/react-icons\";\nimport { contentToString } from \"@app/utils\";\nimport IDiffEditorConstructionOptions = editor.IDiffEditorConstructionOptions;\n\n/**\n * Properties\n */\nexport type CompareModalProps = {\n    isOpen: boolean|undefined;\n    before: any;\n    beforeName: string;\n    after: any;\n    afterName: string;\n    onClose: () => void;\n};\n\nexport const CompareModal: FunctionComponent<CompareModalProps> = ({ isOpen, onClose, before, beforeName, after, afterName }: CompareModalProps) => {\n    const [diffEditorContentOptions, setDiffEditorContentOptions] = useState({\n        renderSideBySide: true,\n        automaticLayout: true,\n        wordWrap: \"off\",\n        readOnly: true,\n        inDiffEditor: true,\n        originalAriaLabel: \"Original\",\n        modifiedAriaLabel: \"Modified\"\n    } as IDiffEditorConstructionOptions);\n\n    const [beforeAsString, setBeforeAsString] = useState<string>();\n    const [afterAsString, setAfterAsString] = useState<string>();\n\n    const [isDiffInline, setIsDiffInline] = useState(false);\n    const [isDiffWrapped, setIsDiffWrapped] = useState(false);\n\n    const switchInlineCompare = () => {\n        setDiffEditorContentOptions({\n            ...diffEditorContentOptions as IDiffEditorConstructionOptions,\n            renderSideBySide: !diffEditorContentOptions.renderSideBySide\n        });\n        setIsDiffInline(!!diffEditorContentOptions.renderSideBySide);\n    };\n\n    const switchWordWrap = () => {\n        setDiffEditorContentOptions({\n            ...diffEditorContentOptions as IDiffEditorConstructionOptions,\n            wordWrap: diffEditorContentOptions.wordWrap == \"off\" ? \"on\" : \"off\"\n        });\n        setIsDiffWrapped(diffEditorContentOptions.wordWrap != \"on\");\n    };\n\n    useEffect(() => {\n        setBeforeAsString(contentToString(before));\n    }, [before]);\n\n    useEffect(() => {\n        setAfterAsString(contentToString(after));\n    }, [after]);\n\n    return (\n        <Modal id=\"compare-modal\"\n            title=\"Unsaved changes\"\n            isOpen={isOpen}\n            onClose={onClose}>\n            <div className=\"compare-view\">\n                <ToggleGroup className=\"compare-toggle-group\"\n                    aria-label=\"Compare view toggle group\">\n                    <ToggleGroupItem text=\"Inline\" key={1} buttonId=\"second\"\n                        isSelected={isDiffInline}\n                        onChange={switchInlineCompare}/>\n                    <ToggleGroupItem text=\"Wrap text\" key={0} buttonId=\"first\"\n                        isSelected={isDiffWrapped}\n                        onChange={switchWordWrap}/>\n                </ToggleGroup>\n                <div className=\"compare-label\">\n                    <span className=\"before\">Original: {beforeName}</span>\n                    <span className=\"divider\">\n                        <ArrowsAltHIcon />\n                    </span>\n                    <span className=\"after\">Modified: {afterName}</span>\n                </div>\n                <div className=\"compare-editor\">\n                    <DiffEditor\n                        className=\"text-editor\"\n                        original={beforeAsString}\n                        modified={afterAsString}\n                        options={diffEditorContentOptions}\n                    />\n                </div>\n            </div>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Modal,\n    ModalVariant,\n    SelectVariant,\n    Spinner,\n    TextInput\n} from \"@patternfly/react-core\";\nimport { Design, DesignEvent } from \"@app/models\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport {\n    DesignsService,\n    RhosrInstanceService,\n    RhosrInstanceServiceFactory,\n    RhosrService,\n    useDesignsService,\n    useRhosrInstanceServiceFactory,\n    useRhosrService\n} from \"@app/services\";\nimport { If, IfNotEmpty, IsLoading, ObjectSelect, RhosrEmptyState } from \"@app/components\";\nimport { DesignContext } from \"@app/models/designs/design-context.model\";\nimport { CreateOrUpdateArtifactData } from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\nimport { IfRhosr, RegistrationError } from \"@app/pages/components\";\n\nexport type ExportToRhosrData = {\n    registry: Registry;\n    design: Design;\n    context: DesignContext;\n};\n\nexport type ExportToRhosrModalProps = {\n    design: Design;\n    isOpen: boolean | undefined;\n    onExported: (event: ExportToRhosrData) => void;\n    onCancel: () => void;\n}\n\n\nexport const ExportToRhosrModal: FunctionComponent<ExportToRhosrModalProps> = (\n    { design, isOpen, onExported, onCancel }: ExportToRhosrModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [isExporting, setExporting] = useState(false);\n    const [isLoadingRegistries, setLoadingRegistries] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [registry, setRegistry] = useState<Registry>();\n    const [group, setGroup] = useState<string>();\n    const [artifactId, setArtifactId] = useState<string>();\n    const [version, setVersion] = useState<string>();\n    const [rhosrInstance, setRhosrInstance] = useState<RhosrInstanceService>();\n    const [hasRhosrAccess, setHasRhosrAccess] = useState<boolean>(false);\n    const [registrationError, setRegistrationError] = useState<any>();\n\n    const designs: DesignsService = useDesignsService();\n    const rhosr: RhosrService = useRhosrService();\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    // Called when the user clicks \"export\"\n    const doExport = () => {\n        setExporting(true);\n        designs.getDesignContent(design.id).then(content => {\n            const data: CreateOrUpdateArtifactData = {\n                type: design.type,\n                groupId: group,\n                id: artifactId,\n                version: version,\n                content: content.data,\n                contentType: content.contentType\n            };\n            rhosrInstance?.createOrUpdateArtifact(data).then(amd => {\n                const context: DesignContext = {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: amd.groupId as string,\n                        artifactId: amd.id,\n                        version: amd.version\n                    }\n                };\n                const data: ExportToRhosrData = {\n                    registry: registry as Registry,\n                    design,\n                    context\n                };\n\n                const event: DesignEvent = {\n                    id: design.id,\n                    type: \"register\",\n                    on: new Date(),\n                    data: context.rhosr\n                };\n\n                // Create an event (add to the design's history).\n                designs.createEvent(event).then(() => {\n                    setExporting(false);\n                    onExported(data);\n                }).catch(() => {\n                    console.warn(\"[ExportToRhosrModal] Failed to create a history event (not fatal).\");\n                    setExporting(false);\n                    onExported(data);\n                });\n            }).catch(error => {\n                console.error(\"[ExportToRhosrModal] Error registering artifact in RHOSR: \", error);\n                setRegistrationError(error);\n                setExporting(false);\n            });\n        }).catch(error => {\n            // TODO error handling - low priority as this error is extremely unlikely to happen...but what to do if it does??\n            console.error(\"[ExportToRhosrModal] Error fetching design content!\", error);\n        });\n    };\n\n    const onRegistrySelect = (registry: Registry): void => {\n        setHasRhosrAccess(false); // the IfRhosr component will change this to \"true\" if the user has access\n        setRegistry(registry);\n    };\n\n    const detectRhosrContext = (events: DesignEvent[]): DesignContext|undefined => {\n        if (events) {\n            const filteredEvents: DesignEvent[] = events.filter(event => event.type === \"register\");\n            if (filteredEvents && filteredEvents.length > 0) {\n                const regEvent: DesignEvent = filteredEvents[0];\n                return {\n                    type: \"rhosr\",\n                    rhosr: regEvent.data\n                };\n            }\n        }\n        if (design?.origin?.type === \"rhosr\") {\n            return design.origin;\n        }\n\n        return undefined;\n    };\n\n    const defaultRegistry = (registries: Registry[], context: DesignContext|undefined): Registry | undefined => {\n        if (context) {\n            const filteredRegistries: Registry[] = registries.filter(registry => registry.id === design.origin.rhosr?.instanceId);\n            if (filteredRegistries?.length > 0) {\n                return filteredRegistries[0];\n            }\n        }\n\n        if (registries?.length > 0) {\n            return registries[0];\n        } else {\n            return undefined;\n        }\n    };\n\n    const setFormDefaults = (): void => {\n        setGroup(undefined);\n        setArtifactId(undefined);\n        setVersion(undefined);\n    };\n\n    const setFormValues = (context: DesignContext | undefined): void => {\n        setGroup(context?.rhosr?.groupId);\n        setArtifactId(context?.rhosr?.artifactId);\n        setVersion(context?.rhosr?.version);\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setLoadingRegistries(true);\n            setExporting(false);\n            setValid(false);\n            setRegistries([]);\n            setFormDefaults();\n\n            // Load all events for this design.\n            designs.getEvents(design.id).then(events => {\n                // Get the list of registries.\n                rhosr.getRegistries().then(registries => {\n                    setRegistries(registries.sort((a, b) => {\n                        const name1: string = a.name as string;\n                        const name2: string = b.name as string;\n                        return name1.localeCompare(name2);\n                    }));\n                    const context: DesignContext | undefined = detectRhosrContext(events);\n                    setFormValues(context);\n                    setRegistry(defaultRegistry(registries, context));\n                    setLoadingRegistries(false);\n                }).catch(error => {\n                    // TODO handle this error case\n                    console.error(\"[ExportToRhosrModal] Error getting registry list: \", error);\n                    setRegistries([]);\n                    setFormValues(undefined);\n                    setLoadingRegistries(false);\n                });\n            }).catch(error => {\n                console.error(\"[ExportToRhosrModal] Error getting events for design: \", error);\n                setRegistries([]);\n                setFormValues(undefined);\n                setLoadingRegistries(false);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        setFormDefaults();\n    }, [design]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!registry) {\n            valid = false;\n        }\n        if (!hasRhosrAccess) {\n            valid = false;\n        }\n        if (registrationError !== undefined) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [registry, group, artifactId, version, hasRhosrAccess, registrationError]);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    const actions: any[] =  [\n        <Button key=\"export\" variant=\"primary\" isDisabled={!isValid || isExporting || registries?.length === 0} onClick={doExport}>\n            <If condition={isExporting}>\n                <Spinner size=\"md\" className=\"export-spinner\" />\n            </If>\n            Export\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n            Cancel\n        </Button>\n    ];\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Export to Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={actions}\n        >\n            <IsLoading condition={isLoadingRegistries}>\n                <IfNotEmpty collection={registries} emptyState={<RhosrEmptyState message=\"To save a design as an artifact in Service Registry, you must create a Service Registry instance first.\" />}>\n                    <Form>\n                        <FormGroup label=\"Registry Instance\" isRequired={true} fieldId=\"export-registry-instance\">\n                            <ObjectSelect items={registries}\n                                value={registry}\n                                onSelect={onRegistrySelect}\n                                variant={SelectVariant.single}\n                                toggleId=\"export-registry\"\n                                menuAppendTo=\"parent\"\n                                itemToString={item => item.name} />\n                        </FormGroup>\n                        <IfRhosr registry={registry} scope=\"write\" onHasAccess={setHasRhosrAccess}>\n                            <If condition={registrationError !== undefined}>\n                                <RegistrationError design={design} error={registrationError}\n                                    onCancel={onCancel}\n                                    onTryAgain={() => setRegistrationError(undefined)} />\n                            </If>\n                            <If condition={registrationError === undefined}>\n                                <FormGroup label=\"Group\" isRequired={false} fieldId=\"export-group\">\n                                    <TextInput\n                                        isRequired\n                                        type=\"text\"\n                                        id=\"export-group\"\n                                        name=\"export-group\"\n                                        placeholder=\"Enter group (optional) or leave blank for default group\"\n                                        aria-describedby=\"export-group-helper\"\n                                        value={group}\n                                        onChange={(value) => setGroup(value)}\n                                    />\n                                </FormGroup>\n                                <FormGroup label=\"ID\" isRequired={false} fieldId=\"export-artifact-id\">\n                                    <TextInput\n                                        isRequired\n                                        type=\"text\"\n                                        id=\"export-artifact-id\"\n                                        name=\"export-artifact-id\"\n                                        placeholder=\"Enter ID (optional) or leave blank for generated ID\"\n                                        aria-describedby=\"export-artifact-id-helper\"\n                                        value={artifactId}\n                                        onChange={(value) => setArtifactId(value)}\n                                    />\n                                </FormGroup>\n                                <FormGroup label=\"Version\" isRequired={false} fieldId=\"export-version\">\n                                    <TextInput\n                                        isRequired\n                                        type=\"text\"\n                                        id=\"export-version\"\n                                        name=\"export-version\"\n                                        placeholder=\"Enter version (optional) or leave blank for generated version number\"\n                                        aria-describedby=\"export-version-helper\"\n                                        value={version}\n                                        onChange={(value) => setVersion(value)}\n                                    />\n                                </FormGroup>\n                            </If>\n                        </IfRhosr>\n                    </Form>\n                </IfNotEmpty>\n            </IsLoading>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport { Button, Form, FormGroup, Modal, ModalVariant, TextArea, TextInput } from \"@patternfly/react-core\";\nimport { Design } from \"@app/models\";\n\nexport type RenameData = {\n    name: string;\n    summary: string;\n};\n\nexport type RenameModalProps = {\n    design: Design|undefined;\n    isOpen: boolean | undefined;\n    onRename: (event: RenameData) => void;\n    onCancel: () => void;\n}\n\n\nexport const RenameModal: FunctionComponent<RenameModalProps> = (\n    { design, isOpen, onRename, onCancel }: RenameModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState<string>();\n    const [summary, setSummary] = useState<string>();\n\n    // Called when the user clicks \"edit\"\n    const doRename = () => {\n        onRename({\n            name: name as string,\n            summary: summary as string\n        });\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setName(design?.name);\n            setSummary(design?.summary);\n        }\n    }, [isOpen]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Edit design metadata\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"edit\" variant=\"primary\" isDisabled={!isValid} onClick={doRename}>Save</Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>Cancel</Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"edit-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"edit-name\"\n                        name=\"edit-name\"\n                        placeholder=\"Enter new name for design\"\n                        aria-describedby=\"edit-name-helper\"\n                        value={name}\n                        onChange={(value) => setName(value)}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"edit-description\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"edit-description\"\n                        name=\"edit-description\"\n                        aria-describedby=\"edit-description-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value);}}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { RhosrInstanceServiceFactory, useRhosrInstanceServiceFactory } from \"@app/services\";\nimport { UserInfo } from \"@app/models\";\nimport { Alert } from \"@patternfly/react-core\";\nimport { IsLoading } from \"@app/components\";\n\nexport type RhosrScopeType = \"read\" | \"write\" | \"admin\";\n\n\n/**\n * Properties\n */\nexport type IfRhosrProps = {\n    registry: Registry | undefined;\n    scope: RhosrScopeType;\n    onHasAccess?: (accessible: boolean) => void;\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * given registry instance is accessible by the user at the level needed.  This\n * component can be used to guard functionality that will only work if the user\n * has permission to interact with the registry in the required way.\n */\nexport const IfRhosr: FunctionComponent<IfRhosrProps> = ({ registry, scope, onHasAccess, children }: IfRhosrProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [userInfo, setUserInfo] = useState<UserInfo>();\n\n    const rhosrFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    const userHasAccess = (info: UserInfo|undefined): boolean => {\n        switch (scope) {\n            case \"read\":\n                return (info?.viewer||false) || (info?.developer||false) || (info?.admin||false);\n            case \"write\":\n                return (info?.developer||false) || (info?.admin||false);\n            case \"admin\":\n                return (info?.admin||false);\n        }\n        return false;\n    };\n\n    useEffect(() => {\n        setLoading(true);\n        if (registry !== undefined) {\n            rhosrFactory.createFor(registry).getCurrentUser().then(userInfo => {\n                setUserInfo(userInfo);\n                if (onHasAccess) {\n                    onHasAccess(userHasAccess(userInfo));\n                }\n                setLoading(false);\n            }).catch(error => {\n                console.info(\"[IfRhosr] Error response getting user info for registry instance: \", error);\n                setUserInfo({\n                    admin: false,\n                    developer: false,\n                    viewer: false,\n                    displayName: \"\",\n                    username: \"\"\n                });\n                if (onHasAccess) {\n                    onHasAccess(false);\n                }\n                setLoading(false);\n            });\n        } else {\n            if (onHasAccess) {\n                onHasAccess(false);\n            }\n        }\n    }, [registry]);\n\n    return (\n        <IsLoading condition={isLoading}>\n            {\n                userHasAccess(userInfo) ? (\n                    <React.Fragment children={children}/>\n                ) : (\n                    <Alert variant=\"danger\" isInline={true} title=\"Permission denied (no access)\">\n                        <p>\n                            You do not have sufficient access privileges to Service Registry instance\n                            <span style={{ fontWeight: \"bold\" }}> {registry?.name}</span>.\n\n                            Contact your organization admin or the owner of the Service Registry instance to request the appropriate access.\n                        </p>\n                    </Alert>\n                )\n            }\n        </IsLoading>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Design } from \"@app/models\";\nimport { Alert, AlertActionLink, CodeBlock, CodeBlockCode } from \"@patternfly/react-core\";\n\n\nexport type RegistrationErrorProps = {\n    design: Design;\n    error: any;\n    onTryAgain: () => void;\n    onCancel: () => void;\n};\n\nexport const RegistrationError: FunctionComponent<RegistrationErrorProps> = ({ design, error, onTryAgain, onCancel }: RegistrationErrorProps) => {\n    return (\n        <Alert variant=\"danger\"\n            isInline={true}\n            actionLinks={\n                <React.Fragment>\n                    <AlertActionLink onClick={onTryAgain}>Try again</AlertActionLink>\n                    <AlertActionLink onClick={onCancel}>Cancel export</AlertActionLink>\n                </React.Fragment>\n            }\n            title={`Error exporting '${design.name}' to service registry`}>\n            <CodeBlock style={{ marginTop: \"15px\", marginBottom: \"15px\" }}>\n                <CodeBlockCode id=\"code-content\">{JSON.stringify(error, null, 4)}</CodeBlockCode>\n            </CodeBlock>\n        </Alert>\n    );\n\n};\n","import { Auth, useAuth } from \"@rhoas/app-services-ui-shared\";\nimport {\n    ArtifactMetaData,\n    ArtifactSearchResults,\n    ContentTypes,\n    CreateArtifactData,\n    CreateVersionData,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedVersion, UserInfo,\n    VersionMetaData\n} from \"@app/models\";\nimport { createEndpoint, createHref, createOptions, httpGet, httpPut, httpPostWithReturn } from \"@app/utils/rest.utils\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { isJson, isXml, isYaml } from \"@app/utils\";\nimport { CreateOrUpdateArtifactData } from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\n\n/**\n * Determines the content type of the given content.\n * @param type\n * @param content\n */\nfunction determineContentType(type: string, content: string): string {\n    switch (type) {\n        case \"PROTOBUF\":\n            return ContentTypes.APPLICATION_PROTOBUF;\n        case \"WSDL\":\n        case \"XSD\":\n        case \"XML\":\n            return ContentTypes.APPLICATION_XML;\n        case \"GRAPHQL\":\n            return ContentTypes.APPLICATION_GRAPHQL;\n    }\n    if (isJson(content)) {\n        return ContentTypes.APPLICATION_JSON;\n    } else if (isXml(content)) {\n        return ContentTypes.APPLICATION_XML;\n    } else if (isYaml(content)) {\n        return ContentTypes.APPLICATION_YAML;\n    } else {\n        return \"application/octet-stream\";\n    }\n}\n\n\nfunction normalizeGroupId(groupId: string | undefined): string {\n    return groupId || \"default\";\n}\n\n\nasync function createArtifact(auth: Auth, basePath: string, data: CreateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts\", { groupId: data.groupId });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function createOrUpdateArtifact(auth: Auth, basePath: string, data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath,\n        \"/groups/:groupId/artifacts\",\n        { groupId: data.groupId || \"default\" },\n        { ifExists: \"UPDATE\" }\n    );\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    if (data.version) {\n        headers[\"X-Registry-Version\"] = data.version;\n    }\n    headers[\"Content-Type\"] = data.contentType;\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function createArtifactVersion(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId: groupId || \"default\",\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, VersionMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function getArtifacts(auth: Auth, basePath: string, criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults> {\n    console.debug(\"[RhosrInstanceService] Getting artifacts: \", criteria, paging);\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const start: number = (paging.page - 1) * paging.pageSize;\n    const end: number = start + paging.pageSize;\n    const queryParams: any = {\n        limit: end,\n        offset: start,\n        order: criteria.sortAscending ? \"asc\" : \"desc\",\n        orderby: \"name\"\n    };\n    if (criteria.value) {\n        if (criteria.type == \"everything\") {\n            queryParams[\"name\"] = criteria.value;\n            queryParams[\"description\"] = criteria.value;\n            queryParams[\"labels\"] = criteria.value;\n        } else {\n            queryParams[criteria.type] = criteria.value;\n        }\n    }\n    const endpoint: string = createEndpoint(basePath, \"/search/artifacts\", {}, queryParams);\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<ArtifactSearchResults>(endpoint, createOptions(headers), (data) => {\n        const results: ArtifactSearchResults = {\n            artifacts: data.artifacts,\n            count: data.count,\n            page: paging.page,\n            pageSize: paging.pageSize\n        };\n        return results;\n    });\n}\n\n\nasync function getArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, version: string): Promise<string> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    let endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions/:version\", {\n        groupId,\n        artifactId,\n        version\n    });\n    const headers: any = {\n        \"Accept\": \"*\",\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (version === \"latest\") {\n        endpoint = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId\", { groupId, artifactId });\n    }\n\n    const options: any = createOptions(headers);\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\nasync function getArtifactVersions(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Getting the list of versions for artifact: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId,\n        artifactId\n    }, {\n        limit: 500,\n        offset: 0\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<SearchedVersion[]>(endpoint, createOptions(headers), (data) => {\n        return data.versions;\n    });\n}\n\nasync function testUpdateArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, content: string): Promise<void> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Testing updating of artifact content: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/test\", {\n        groupId,\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpPut<any>(endpoint, content, createOptions(headers));\n}\n\nasync function getCurrentUser(auth: Auth, basePath: string): Promise<UserInfo> {\n    // TODO cache this information for some period of time... perhaps 5 minutes or so?\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    console.info(\"[RhosrInstanceService] Getting information for the current user.\");\n    const endpoint: string = createEndpoint(basePath, \"/users/me\");\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    const options: any = createOptions(headers);\n    return httpGet<UserInfo>(endpoint, options);\n}\n\n\n/**\n * The RHOSR Instance service interface.\n */\nexport interface RhosrInstanceService {\n    createArtifact(data: CreateArtifactData): Promise<ArtifactMetaData>;\n    createArtifactVersion(groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData>;\n    createOrUpdateArtifact(data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData>;\n    getArtifacts(criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults>;\n    getArtifactContent(groupId: string | undefined, artifactId: string, version: string): Promise<string>;\n    getArtifactVersions(groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]>;\n    testUpdateArtifactContent(groupId: string | undefined, artifactId: string, content: string): Promise<void>;\n    getCurrentUser(): Promise<UserInfo>;\n}\n\n/**\n * Factory for creating RHOSR instance services.\n */\nexport interface RhosrInstanceServiceFactory {\n    createFor(registry: Registry): RhosrInstanceService;\n}\n\n\n/**\n * React hook to get the RHOSR instance service.\n */\nexport const useRhosrInstanceServiceFactory: () => RhosrInstanceServiceFactory = (): RhosrInstanceServiceFactory => {\n    const auth: Auth = useAuth();\n\n    return {\n        createFor: (registry) => {\n            const instanceUrl: string = createHref(registry.registryUrl as string, \"/apis/registry/v2\");\n            return {\n                createArtifact: (data) => createArtifact(auth, instanceUrl, data),\n                createArtifactVersion: (groupId, artifactId, data) => createArtifactVersion(auth, instanceUrl, groupId, artifactId, data),\n                createOrUpdateArtifact: (data: CreateOrUpdateArtifactData) => createOrUpdateArtifact(auth, instanceUrl, data),\n                getArtifacts: (criteria, paging) => getArtifacts(auth, instanceUrl, criteria, paging),\n                getArtifactContent: (groupId, artifactId, version) => getArtifactContent(auth, instanceUrl, groupId, artifactId, version),\n                getArtifactVersions: (groupId, artifactId) => getArtifactVersions(auth, instanceUrl, groupId, artifactId),\n                testUpdateArtifactContent: (groupId, artifactId, content) => testUpdateArtifactContent(auth, instanceUrl, groupId, artifactId, content),\n                getCurrentUser: () => getCurrentUser(auth, instanceUrl)\n            };\n        }\n    };\n};\n","import {\n    CreateDesign,\n    CreateDesignContent,\n    Design,\n    DesignContent,\n    DesignEvent,\n    DesignsSearchCriteria,\n    DesignsSearchResults,\n    DesignsSort,\n    Paging\n} from \"@app/models\";\nimport Dexie from \"dexie\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { cloneObject, limit } from \"@app/utils\";\n\n\nconst db = new Dexie(\"designsDB\");\ndb.version(4).stores({\n    designs: \"++id, type, name, createdOn, modifiedOn\", // Primary key and indexed props\n    content: \"++id\",\n    events: \"++eventId, id, type, on\"\n});\n\n\nasync function createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design> {\n    const id: string = uuidv4();\n    const newDesign: Design = {\n        id,\n        name: limit(cd.name, 64) as string,\n        summary: limit(cd.summary, 256),\n        type: cd.type,\n        createdOn: new Date(),\n        modifiedOn: new Date(),\n        origin: cloneObject(cd.context)\n    };\n    const newDesignContent: DesignContent = {\n        id,\n        contentType: cdc.contentType,\n        data: cdc.data\n    };\n    const newEvent: DesignEvent = {\n        id,\n        type: \"create\",\n        on: new Date(),\n        data: {}\n    };\n    if (cd.context) {\n        newEvent.data.context = cloneObject(cd.context);\n        if (cd.context.type !== \"create\") {\n            newEvent.type = \"import\";\n        }\n    }\n    // Make sure the ID is properly set always.\n    newEvent.id = id;\n\n    return Promise.all([\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        db.designs.add(newDesign),\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        db.content.add(newDesignContent),\n        createEvent(newEvent)\n    ]).then(() => newDesign);\n}\n\nasync function getDesigns(): Promise<Design[]> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return db.designs.toArray();\n}\n\nasync function searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults> {\n    console.debug(\"[DesignsService] Searching for designs: \", criteria, paging);\n    const accept = (design: Design): boolean => {\n        let matches: boolean = false;\n        if (!criteria.filterValue || criteria.filterValue.trim().length === 0) {\n            matches = true;\n        } else if (design.name.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.summary && design.summary.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.type.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        }\n        return matches;\n    };\n\n    return getDesigns().then(designs => {\n        // TODO Explore whether we can use dexie to filter and page the results.\n\n        // filter and sort the results\n        const filteredDesigns: Design[] = designs.filter(accept).sort((design1, design2) => {\n            let rval: number = sort.by === \"name\" ? (\n                design1.name.localeCompare(design2.name)\n            ) : (\n                design1.modifiedOn.getTime() - design2.modifiedOn.getTime()\n            );\n            if (sort.direction !== \"asc\") {\n                rval *= -1;\n            }\n            return rval;\n        });\n        // get the total count\n        const totalCount: number = filteredDesigns.length;\n        // get the subset of results based on paging\n        const start: number = (paging.page - 1) * paging.pageSize;\n        const end: number = start + paging.pageSize;\n        const pagedDesigns: Design[] = filteredDesigns.slice(start, end);\n        return {\n            designs: pagedDesigns,\n            page: paging.page,\n            pageSize: paging.pageSize,\n            count: totalCount\n        };\n    });\n}\n\n\nasync function getDesign(id: string): Promise<Design> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return db.designs.where(\"id\").equals(id).first();\n}\n\nasync function deleteDesign(id: string): Promise<void> {\n    return Promise.all([\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        db.designs.where(\"id\").equals(id).delete(),\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        db.content.where(\"id\").equals(id).delete(),\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        db.events.where(\"id\").equals(id).delete(),\n    ]).then(() => {\n        // This space intentionally left blank.\n    });\n}\n\nasync function renameDesign(id: string, newName: string, newSummary?: string): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return db.designs.update(id, {\n        name: limit(newName, 64) as string,\n        summary: limit(newSummary, 256),\n    });\n}\n\nasync function getDesignContent(id: string): Promise<DesignContent> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return db.content.where(\"id\").equals(id).first();\n}\n\nasync function updateDesignContent(content: DesignContent): Promise<void> {\n    const newEvent: DesignEvent = {\n        id: content.id,\n        type: \"update\",\n        on: new Date(),\n        data: {}\n    };\n\n    return Promise.all([\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        db.content.update(content.id, {\n            data: content.data\n        }),\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        db.designs.update(content.id, {\n            modifiedOn: new Date()\n        }),\n        createEvent(newEvent)\n    ]).then(() => {\n        // This space intentionally left blank.\n    });\n}\n\n\nasync function getEvents(id: string): Promise<DesignEvent[]> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return db.events.where(\"id\").equals(id).reverse().sortBy(\"on\");\n}\n\n\nasync function createEvent(event: DesignEvent): Promise<void> {\n    event.eventId = uuidv4();\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return db.events.add(event);\n}\n\n\n/**\n * The Designs Service interface.\n */\nexport interface DesignsService {\n    createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design>;\n    getDesigns(): Promise<Design[]>;\n    getDesign(id: string): Promise<Design>;\n    searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults>;\n    deleteDesign(id: string): Promise<void>;\n    renameDesign(id: string, newName: string, newSummary?: string): Promise<void>;\n    getDesignContent(id: string): Promise<DesignContent>;\n    updateDesignContent(content: DesignContent): Promise<void>;\n    getEvents(id: string): Promise<DesignEvent[]>;\n    createEvent(event: DesignEvent): Promise<void>;\n}\n\n\n/**\n * React hook to get the Designs service.\n */\nexport const useDesignsService: () => DesignsService = (): DesignsService => {\n    return {\n        createDesign,\n        getDesigns,\n        searchDesigns,\n        getDesign,\n        deleteDesign,\n        renameDesign,\n        getDesignContent,\n        updateDesignContent,\n        getEvents,\n        createEvent\n    };\n};\n","import { ContentTypes, Template } from \"@app/models\";\nimport ASYNCAPI_2_BLANK from \"./asyncapi/asyncapi-2-blank.json\";\nimport ASYNCAPI_2_STREETLIGHTS from \"./asyncapi/asyncapi-2-streetlights.json\";\n\nexport const ASYNCAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"asyncapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_BLANK\n        }\n    },\n    {\n        id: \"asyncapi_2_streetlights\",\n        name: \"Street Lights Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_STREETLIGHTS\n        }\n    }\n];\n","import { ContentTypes, Template } from \"@app/models\";\nimport OPENAPI_3_BLANK from \"./openapi/openapi-3-blank.json\";\nimport OPENAPI_3_PETSTORE from \"./openapi/openapi-3-petstore.json\";\nimport OPENAPI_3_USPTO from \"./openapi/openapi-3-uspto.json\";\nimport OPENAPI_2_BLANK from \"./openapi/openapi-2-blank.json\";\nimport OPENAPI_2_PETSTORE from \"./openapi/openapi-2-petstore.json\";\n\n\nexport const OPENAPI_3_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_3_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_BLANK\n        }\n    },\n    {\n        id: \"openapi_3_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_PETSTORE\n        }\n    },\n    {\n        id: \"openapi_3_uspto\",\n        name: \"USPTO Dataset API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_USPTO\n        }\n    }\n];\n\nexport const OPENAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_BLANK\n        }\n    },\n    {\n        id: \"openapi_2_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_PETSTORE\n        }\n    }\n];\n","import { ContentTypes, Template } from \"@app/models\";\nimport JSON_BLANK from \"./json/json-blank.json\";\n\nexport const JSON_TEMPLATES: Template[] = [\n    {\n        id: \"json_blank\",\n        name: \"Blank JSON Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: JSON_BLANK\n        }\n    }\n];\n","import { ContentTypes, Template } from \"@app/models\";\nimport AVRO_BLANK from \"./avro/avro-blank.json\";\n\nexport const AVRO_TEMPLATES: Template[] = [\n    {\n        id: \"avro_blank\",\n        name: \"Blank Avro Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: AVRO_BLANK\n        }\n    }\n];\n","import { ContentTypes, Template } from \"@app/models\";\nimport PROTOBUF_BLANK from \"./protobuf/protobuf-blank.json\";\n\nexport const PROTOBUF_TEMPLATES: Template[] = [\n    {\n        id: \"protobuf_blank\",\n        name: \"Blank Protobuf Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            data: PROTOBUF_BLANK.template\n        }\n    }\n];\n","import { Template } from \"@app/models/templates/template.model\";\nimport {\n    ASYNCAPI_2_TEMPLATES,\n    AVRO_TEMPLATES,\n    JSON_TEMPLATES,\n    OPENAPI_2_TEMPLATES,\n    OPENAPI_3_TEMPLATES,\n    PROTOBUF_TEMPLATES\n} from \"@app/services/_templates\";\nimport { ArtifactTypes } from \"@app/models\";\n\n\nasync function getTemplatesFor(type: string, version?: string): Promise<Template[]> {\n    if (type === ArtifactTypes.AVRO) {\n        return Promise.resolve(AVRO_TEMPLATES);\n    }\n    if (type === ArtifactTypes.PROTOBUF) {\n        return Promise.resolve(PROTOBUF_TEMPLATES);\n    }\n    if (type === ArtifactTypes.JSON) {\n        return Promise.resolve(JSON_TEMPLATES);\n    }\n    if (type === ArtifactTypes.ASYNCAPI) {\n        return Promise.resolve(ASYNCAPI_2_TEMPLATES);\n    }\n    if (type === ArtifactTypes.OPENAPI) {\n        if (version && version.startsWith(\"3\")) {\n            return Promise.resolve(OPENAPI_3_TEMPLATES);\n        } else {\n            return Promise.resolve(OPENAPI_2_TEMPLATES);\n        }\n    }\n    return Promise.reject(`No templates found for type ${type} and version ${version}.`);\n}\n\n\n/**\n * The Templates Service interface.\n */\nexport interface TemplatesService {\n    getTemplatesFor(type: string, version?: string): Promise<Template[]>;\n}\n\n\n/**\n * React hook to get the Templates service.\n */\nexport const useTemplatesService: () => TemplatesService = (): TemplatesService => {\n    return {\n        getTemplatesFor\n    };\n};\n","/**\n * Downloads the given content to the filesystem using the given content type and\n * file name.\n * @param content\n * @param contentType\n * @param filename\n */\nimport { DesignsService, useDesignsService } from \"@app/services/designs\";\nimport { Design, DesignEvent } from \"@app/models\";\n\n\nasync function downloadToFS(designsSvc: DesignsService, design: Design, content: string, contentType: string, filename: string): Promise<void> {\n    console.info(\"[DownloadService] Downloading a design.\");\n    const _w: any = window;\n\n    if (_w.chrome !== undefined) {\n        // Chrome version\n        const link = document.createElement(\"a\");\n        const blob = new Blob([content], { type: contentType });\n        link.href = _w.URL.createObjectURL(blob);\n        link.download = filename;\n        link.click();\n    } else if (_w.navigator !== undefined && _w.navigator.msSaveBlob !== undefined) {\n        // IE version\n        const blob = new Blob([content], { type: contentType });\n        _w.navigator.msSaveBlob(blob, filename);\n    } else {\n        // Firefox version\n        const file = new File([content], filename, { type: \"application/force-download\" });\n        _w.open(URL.createObjectURL(file));\n    }\n\n    // Create an event for this download\n    const event: DesignEvent = {\n        id: design.id,\n        type: \"download\",\n        on: new Date(),\n        data: {\n            filename\n        }\n    };\n\n    return designsSvc.createEvent(event);\n}\n\n\n/**\n * The Download Service interface.\n */\nexport interface DownloadService {\n    downloadToFS(design: Design, content: string, contentType: string, filename: string): Promise<void>;\n}\n\n\n/**\n * React hook to get the Download service.\n */\nexport const useDownloadService: () => DownloadService = (): DownloadService => {\n    // Note: inject the designs services so that events can be created.\n    const designsSvc: DesignsService = useDesignsService();\n    return {\n        downloadToFS: (design: Design, content: string, contentType: string, filename: string): Promise<void> => {\n            return downloadToFS(designsSvc, design, content, contentType, filename);\n        }\n    };\n};\n","import { createOptions, httpGet } from \"@app/utils\";\n\nconst githubRegex: RegExp = /^https:\\/\\/github\\.com\\/([^/]+)\\/([^/]+)\\/blob\\/([^/]+)\\/(.+)$/;\n\n\nasync function fetchUrlContent(url: string): Promise<string> {\n    const match: RegExpMatchArray | null = url.match(githubRegex);\n    if (match !== null) {\n        const org: string = match[1];\n        const repo: string = match[2];\n        const branch: string = match[3];\n        const path: string = match[4];\n\n        url = `https://raw.githubusercontent.com/${org}/${repo}/${branch}/${path}`;\n    }\n\n    console.info(\"[UrlService] Fetching content from a URL: \", url);\n\n    const endpoint: string = url;\n    const options: any = createOptions({\n        \"Accept\": \"*\"\n    });\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\n/**\n * The URL Service interface.\n */\nexport interface UrlService {\n    fetchUrlContent(url: string): Promise<string>;\n}\n\n\n/**\n * React hook to get the URL service.\n */\nexport const useUrlService: () => UrlService = (): UrlService => {\n    return {\n        fetchUrlContent\n    };\n};\n","import { AlertVariant, useAlert } from \"@rhoas/app-services-ui-shared\";\nimport { Design } from \"@app/models\";\nimport { ExportToRhosrData, RenameData } from \"@app/pages/components\";\nimport React from \"react\";\nimport { RegistryNavLink } from \"@app/components\";\n\n\nexport interface AlertsService {\n    designDeleted(design: Design): void;\n    designDeleteFailed(design: Design, error: any): void;\n    designSaved(design: Design): void;\n    designRenamed(event: RenameData): void;\n    designExportedToRhosr(event: ExportToRhosrData): void;\n}\n\n\n/**\n * React hook to get the Alerts service.\n */\nexport const useAlertsService: () => AlertsService = (): AlertsService => {\n    const { addAlert } = useAlert() || {};\n\n    return {\n        designDeleted(design: Design): void {\n            addAlert({\n                title: \"Delete successful\",\n                description: `Design '${design.name}' was successfully deleted.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-deleted\"\n            });\n        },\n\n        designDeleteFailed(design: Design, error: any): void {\n            addAlert({\n                title: \"Delete failed\",\n                description: `Failed to delete design '${design.name}'.  ${error}`,\n                variant: AlertVariant.danger,\n                dataTestId: \"toast-design-delete-error\"\n            });\n        },\n\n        designRenamed(event: RenameData): void {\n            addAlert({\n                title: \"Details successfully changed\",\n                description: `Details (name, summary) of design '${event.name}' were successfully changed.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-renamed\"\n            });\n        },\n\n        designSaved(design: Design): void {\n            const description: React.ReactNode = (\n                <React.Fragment>\n                    <div>\n                        Design '{design?.name}' was <span style={{ fontWeight: \"bold\" }}>successfully saved locally in your browser</span>.\n                    </div>\n                </React.Fragment>\n            );\n\n            addAlert({\n                title: \"Save successful\",\n                description,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-saved\"\n            });\n        },\n\n        designExportedToRhosr(event: ExportToRhosrData): void {\n            const description: React.ReactNode = (\n                <React.Fragment>\n                    <div>{`Design '${event.design.name}' was successfully exported to Service Registry.`}</div>\n                    <RegistryNavLink registry={event.registry} context={event.context}>View artifact in Service Registry</RegistryNavLink>\n                </React.Fragment>\n            );\n\n            addAlert({\n                title: \"Export successful\",\n                description,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-registered\"\n            });\n        },\n    };\n};\n","\nfunction setConfigProperty(propertyName: string, propertyValue: string | object): void {\n    console.info(`[LocalStorageService] Setting config property ${propertyName} to value ${propertyValue}.`);\n    const value: string = typeof propertyValue === \"string\" ? propertyValue as string : JSON.stringify(propertyValue);\n    localStorage.setItem(\"apicurio-studio.\" + propertyName, value);\n}\n\nfunction getConfigProperty(propertyName: string, defaultValue: string | object | undefined): string | object | undefined {\n    console.info(`[LocalStorageService] Getting config property ${propertyName}`);\n    const value: string|null = localStorage.getItem(\"apicurio-studio.\" + propertyName);\n    if (!value) {\n        return defaultValue;\n    }\n    if (value.startsWith(\"{\")) {\n        return JSON.parse(value);\n    }\n    return value as string;\n}\n\nfunction clearConfigProperty(propertyName: string): void {\n    console.info(`[LocalStorageService] Clearing config property ${propertyName}`);\n    localStorage.removeItem(propertyName);\n}\n\n/**\n * The Local Storage Service interface.\n */\nexport interface LocalStorageService {\n    setConfigProperty(propertyName: string, propertyValue: string | object): void;\n    getConfigProperty(propertyName: string, defaultValue: string | object | undefined): string | object | undefined;\n    clearConfigProperty(propertyName: string);\n}\n\n\n/**\n * React hook to get the LocalStorage service.\n */\nexport const useLocalStorageService: () => LocalStorageService = (): LocalStorageService => {\n    return {\n        setConfigProperty,\n        getConfigProperty,\n        clearConfigProperty\n    };\n};\n","import { Configuration, RegistriesApi, Registry, RegistryList } from \"@rhoas/registry-management-sdk\";\nimport { Auth, Config, useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { LocalStorageService, useLocalStorageService } from \"@app/services/local-storage\";\n\nconst RHOSR_MOCK_DATA: Registry[] = [\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    {\n        id: \"1\",\n        name: \"Local Registry 1 (localhost:8081)\",\n        registryUrl: \"http://localhost:8081/\",\n        browserUrl: \"http://localhost:8081/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    {\n        id: \"2\",\n        name: \"Local Registry 2 (localhost:8082)\",\n        registryUrl: \"http://localhost:8082/\",\n        browserUrl: \"http://localhost:8082/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n];\n\nconst RHOSR_MOCK_DATA_OF: Registry[] = [\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    {\n        id: \"101\",\n        name: \"Operate First Registry 1\",\n        registryUrl: \"https://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/\",\n        browserUrl: \"https://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    {\n        id: \"201\",\n        name: \"Operate First Registry 2\",\n        registryUrl: \"https://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/\",\n        browserUrl: \"https://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n];\n\n\n/**\n * Async function to get the RHOSR instances.  Uses a provided auth token and API\n * base path to create a RHOSR SDK instance.\n * @param auth the application auth\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistries(auth: Auth, basePath: string): Promise<Registry[]> {\n    console.debug(\"[RhosrService] Getting a list of registries from: \", basePath);\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistries(1, 50).then(res => {\n        const registries: RegistryList = res?.data;\n        return registries.items;\n    });\n}\n\n/**\n * Gets information about a single registry instances by its unique ID.\n * @param auth the application auth\n * @param local the local storage service\n * @param id the registry instance ID\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistry(auth: Auth, local: LocalStorageService, id: string, basePath: string): Promise<Registry> {\n    console.debug(\"[RhosrService] Getting a single registry from: \", basePath);\n    const cacheKey: string = `services.rhosr.getRegistry.${id}`;\n    const cachedRegistry: Registry | undefined = local.getConfigProperty(cacheKey, undefined) as Registry | undefined;\n\n    if (cachedRegistry) {\n        // TODO limit the TTL of the cache entry somehow\n        console.debug(\"[RhosrService] Cache hit for registry with ID: \", id);\n        return Promise.resolve(cachedRegistry);\n    }\n\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistry(id).then(res => {\n        const registry: Registry = res?.data as Registry;\n        local.setConfigProperty(cacheKey, registry);\n        return registry;\n    });\n}\n\n\n/**\n * The RHOSR Service interface.\n */\nexport interface RhosrService {\n    getRegistries(): Promise<Registry[]>;\n    getRegistry(id: string): Promise<Registry>;\n}\n\n\n/**\n * A mock version of the RHOSR service.\n */\nfunction createMockService(mockData: Registry[]): RhosrService {\n    return {\n        getRegistries(): Promise<Registry[]> {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(mockData);\n                }, 150);\n            });\n        },\n        getRegistry(id: string): Promise<Registry> {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    const matching: Registry[] = mockData.filter(registry => registry.id === id);\n                    if (matching && matching.length > 0) {\n                        return resolve(matching[0]);\n                    } else {\n                        return resolve({} as Registry);\n                    }\n                }, 150);\n            });\n        }\n    };\n}\n\nlet mockWarningSent: boolean = false;\nconst mockWarning = (message: string): void => {\n    if (!mockWarningSent) {\n        console.info(\"[RhosrService] ----------------------------------\");\n        console.info(\"[RhosrService]\", message);\n        console.info(\"[RhosrService] ----------------------------------\");\n        mockWarningSent = true;\n    }\n};\n\n/**\n * React hook to get the RHOSR service.\n */\nexport const useRhosrService: () => RhosrService = (): RhosrService => {\n    const auth: Auth = useAuth();\n    const cfg: Config = useConfig();\n    const local: LocalStorageService = useLocalStorageService();\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"local-mock\")) {\n        mockWarning(\"RHOSR mocking enabled.\");\n        return createMockService(RHOSR_MOCK_DATA);\n    }\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"operate-first-mock\")) {\n        mockWarning(\"RHOSR mocking enabled (Operate First).\");\n        return createMockService(RHOSR_MOCK_DATA_OF);\n    }\n\n    return {\n        getRegistries: () => getRegistries(auth, cfg.srs.apiBasePath),\n        getRegistry: (id) => getRegistry(auth, local, id, cfg.srs.apiBasePath),\n    };\n};\n","/**\n * Clones an object by stringifying it and then parsing it.  Not efficient\n * but effective.  Use sparingly.\n * @param object\n */\nexport function cloneObject(object: any): any {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Function to search a JS object for a property value that matches a criteria (from) and\n * replaces it with a new value (to);\n * @param object\n * @param from\n * @param to\n */\nexport function propertyReplace(object: any, from: string, to: string): void {\n    Object.keys(object).forEach(key => {\n        const value: any = object[key];\n        if (typeof value === \"object\") {\n            propertyReplace(value, from, to);\n        } else if (value === from) {\n            object[key] = to;\n        }\n    });\n}\n","import YAML from \"yaml\";\nimport { parse } from \"protobufjs\";\nimport { ArtifactTypes, ContentTypes, Design, DesignContent } from \"@app/models\";\n\n/**\n * Returns true if the given content is JSON formatted.\n * @param content the content to check\n */\nexport function isJson(content: string): boolean {\n    try {\n        JSON.parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nexport function parseJson(content: string): any {\n    return JSON.parse(content);\n}\nexport function toJsonString(content: any): string {\n    return JSON.stringify(content, null, 4);\n}\n\n\n/**\n * Returns true if the given content is YAML formatted.\n * @param content the content to check\n */\nexport function isYaml(content: string): boolean {\n    try {\n        const result: any = YAML.parse(content);\n        if (typeof result === \"object\") {\n            return true;\n        }\n    } catch (e) {\n        // Do nothing - it's not a YAML file.\n    }\n    return false;\n}\nexport function parseYaml(content: string): any {\n    return YAML.parse(content);\n}\nexport function toYamlString(content: any): string {\n    return YAML.stringify(content, null, 4);\n}\n\n/**\n * Returns true if the given content is XML formatted.\n * @param content the content to check\n */\nexport function isXml(content: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isXmlWithRootNode(content: string, namespace: string, localName: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError &&\n               dom.documentElement.namespaceURI === namespace &&\n               dom.documentElement.localName === localName;\n    } catch (e) {\n        return false;\n    }\n}\nexport function isWsdl(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://schemas.xmlsoap.org/wsdl/\", \"definitions\");\n}\nexport function isXsd(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://www.w3.org/2001/XMLSchema\", \"schema\");\n}\n\n\n/**\n * Returns true if the given content is PROTO formatted.\n * @param content the content to check\n */\nexport function isProto(content: string): boolean {\n    try {\n        /*const result: IParserResult = */parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n\nexport function fileExtensionForDesign(design: Design, content: DesignContent): string {\n    // If the design was originally imported from a file, let's just use the extension\n    // from that file.\n    if (design.origin && design.origin.type === \"file\") {\n        const filename: string = design.origin.file?.fileName as string;\n        if (filename.indexOf(\".\") > 0) {\n            const split: string[] = filename.split(\".\");\n            return split[split.length - 1];\n        }\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return \"proto\";\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return \"wsdl\";\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return \"xsd\";\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return \"xml\";\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return \"graphql\";\n    }\n\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_JSON) {\n        return \"json\";\n    }\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_YAML) {\n        return \"yaml\";\n    }\n\n    return \"txt\";\n}\n\nexport function contentTypeForDesign(design: Design, content: DesignContent): string {\n    if (content.contentType) {\n        return content.contentType;\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return ContentTypes.APPLICATION_PROTOBUF;\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return ContentTypes.APPLICATION_WSDL;\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return ContentTypes.APPLICATION_GRAPHQL;\n    }\n\n    return ContentTypes.APPLICATION_JSON;\n}\n\n\n/**\n * Called to format (pretty print) the given content.  For example, if the content is JSON\n * then the content will be parsed and then stringified with better whitespace.\n * @param value\n * @param contentType\n */\nexport function formatContent(value: string, contentType: string): string {\n    try {\n        if (contentType === ContentTypes.APPLICATION_JSON) {\n            const parsed: any = JSON.parse(value);\n            return JSON.stringify(parsed, null, 4);\n        }\n    } catch (e) {\n        console.error(e);\n        return value;\n    }\n    return value;\n}\n\n/**\n * Converts a given string to something that's allowed in a filename.\n * @param value\n */\nexport function convertToValidFilename(value: string): string {\n    return (value.replace(/[/|\\\\:*?\"<>]/g, \"\"));\n}\n\n/**\n * Converts content (which might be a JS object) to a string.\n * @param content\n */\nexport function contentToString(content: any): string {\n    if (typeof content === \"string\") {\n        return content as string;\n    } else {\n        return JSON.stringify(content as string, null, 4);\n    }\n}\n","import { Design } from \"@app/models\";\nimport { DesignContextType } from \"@app/models/designs/design-context.model\";\n\n\nexport function hasOrigin(design: Design | undefined, contextType: DesignContextType): boolean {\n    return design?.origin?.type === contextType;\n}\n\n\nexport function limit(value: string | undefined, length: number): string | undefined {\n    if (!value || value.length < length) {\n        return value;\n    }\n    return value.substring(0, length - 3) + \"...\";\n}\n","import { ContentTypes } from \"@app/models/rhosr-instance\";\nimport axios, { AxiosRequestConfig } from \"axios\";\n\nconst AXIOS = axios.create();\n\n\nfunction createAxiosConfig(method: string, url: string, options: any, data?: any): AxiosRequestConfig {\n    if (typeof data === \"string\") {\n        data = new Blob([data]);\n    }\n    return {\n        ...{\n            data,\n            method,\n            url,\n            validateStatus: (status) => {\n                return status >= 200 && status < 300;\n            }\n        }, ...options\n    };\n}\n\n\nfunction unwrapErrorData(error: any): any {\n    console.debug(\"Error detected, unwrapping...\");\n    if (error && error.response && error.response.data) {\n        return {\n            message: error.message,\n            ...error.response.data,\n            status: error.response.status\n        };\n    } else if (error && error.response) {\n        return {\n            message: error.message,\n            status: error.response.status\n        };\n    } else if (error) {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: error.message,\n            status: 500\n        };\n    } else {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: \"Unknown error\",\n            status: 500\n        };\n    }\n}\n\n/**\n * Creates an endpoint to use when making a REST call.  Supports path params and query params.\n * @param baseHref\n * @param path\n * @param params\n * @param queryParams\n */\nexport function createEndpoint(baseHref: string, path: string, params?: any, queryParams?: any): string {\n    if (params) {\n        Object.keys(params).forEach(key => {\n            const value: string = encodeURIComponent(params[key]);\n            path = path.replace(\":\" + key, value);\n        });\n    }\n    let rval: string = createHref(baseHref, path);\n    if (queryParams) {\n        let first: boolean = true;\n        for (const key in queryParams) {\n            if (queryParams[key]) {\n                const value: string = encodeURIComponent(queryParams[key]);\n                if (first) {\n                    rval = rval + \"?\" + key;\n                } else {\n                    rval = rval + \"&\" + key;\n                }\n                if (value !== null && value !== undefined) {\n                    rval = rval + \"=\" + value;\n                }\n                first = false;\n            }\n        }\n    }\n    return rval;\n}\n\n/**\n * Creates the request options used by the HTTP service when making API calls.\n * @param headers\n */\nexport function createOptions(headers: { [header: string]: string }): AxiosRequestConfig {\n    const options: AxiosRequestConfig = { headers };\n    return options;\n}\n\n\n/**\n * Performs an HTTP GET operation to the given URL with the given options.  Returns\n * a Promise to the HTTP response data.\n */\nexport function httpGet<T>(url: string, options?: AxiosRequestConfig, successCallback?: (value: any) => T): Promise<T> {\n    console.info(\"[BaseService] Making a GET request to: \", url);\n\n    if (!options) {\n        options = createOptions({ \"Accept\": ContentTypes.APPLICATION_JSON });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"get\", url, options);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: T = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n * @param successCallback\n * @param progressCallback\n */\nexport function httpPost<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void,\n                            progressCallback?: (progressEvent: any) => void): Promise<void> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({ \"Content-Type\": ContentTypes.APPLICATION_JSON });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    if (progressCallback) {\n        const fiftyMB: number = 50 * 1024 * 1024;\n        config.onUploadProgress = progressCallback;\n        config.maxContentLength = fiftyMB;\n        config.maxBodyLength = fiftyMB;\n    }\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPostWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: any) => O): Promise<O> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n */\nexport function httpPut<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void): Promise<void> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({ \"Content-Type\": ContentTypes.APPLICATION_JSON });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPutWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: O) => O): Promise<O> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP DELETE operation to the given URL with the given body and options.\n * @param url\n * @param options\n */\nexport function httpDelete<T>(url: string, options?: AxiosRequestConfig, successCallback?: () => T): Promise<T> {\n    console.info(\"[BaseService] Making a DELETE request to: \", url);\n\n    if (!options) {\n        options = {};\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"delete\", url, options);\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return AXIOS.request(config)\n        .then(() => {\n            return successCallback ? successCallback() : null;\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\nexport function stripTrailingSlash(baseHref: string | undefined): string {\n    if (!baseHref) {\n        return \"\";\n    }\n    if (baseHref.endsWith(\"/\")) {\n        return baseHref.substring(0, baseHref.length - 1);\n    }\n    return baseHref;\n}\n\nexport function createHref(baseHref: string, path: string): string {\n    let url: string =  baseHref;\n    if (url.endsWith(\"/\")) {\n        url = url.substring(0, url.length - 1);\n    }\n    url += path;\n    return url;\n}\n\n"],"names":["If","condition","children","NavLink","location","title","className","basename","useBasename","to","getBasename","Link","ArtifactTypeIcon","type","isShowIcon","isShowLabel","classes","getClassNames","getTitle","getLabel","IsLoading","loadingComponent","lc","Spinner","IfNotEmpty","collection","emptyState","emptyStateTitle","emptyStateMessage","empty","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","EmptyStateBody","length","ListWithToolbar","toolbar","alwaysShowToolbar","filteredEmptyState","isLoading","isEmpty","isFiltered","ToggleIcon","expanded","onClick","ChevronDownIcon","ChevronRightIcon","DesignDescription","description","truncate","Truncate","content","tooltipPosition","RegistryNavLink","registry","context","useState","href","setHref","rhosr","undefined","setHrefFrom","group","groupId","id","artifactId","browserUrl","useEffect","getRegistry","instanceId","then","ServicePreviewWarning","Alert","isInline","style","marginBottom","RhosrEmptyState","message","EmptyStateIcon","icon","AddCircleOIcon","DateTime","date","format","utc","ObjectSelect","value","items","onSelect","itemToString","noSelectionLabel","toggleId","menuAppendTo","isToggled","setToggled","selectObjects","setSelectObjects","selections","setSelections","map","item","toString","noSelection","filtered","filter","soo","Select","SelectVariant","onToggle","event","isOpen","index","SelectOption","isPlaceholder","key","useNavigation","history","useHistory","navigateTo","path","setTimeout","push","AVRO","PROTOBUF","JSON","OPENAPI","ASYNCAPI","GRAPHQL","KCONNECT","WSDL","XSD","XML","APPLICATION_JSON","APPLICATION_YAML","APPLICATION_XML","APPLICATION_PROTOBUF","APPLICATION_GRAPHQL","TEXT_XML","APPLICATION_WSDL","ImportFrom","ArtifactGroup","ArtifactName","name","ArtifactSelector","registries","onSelected","querying","setQuerying","pageSize","page","paging","setPaging","filterValue","ascending","filterSelection","criteria","setCriteria","setRegistry","artifacts","setArtifacts","rhosrInstance","setRhosrInstance","rhosrInstanceFactory","createFor","gac","sortAscending","getArtifacts","results","catch","error","console","count","ArtifactListToolbar","onRegistrySelected","document","getElementById","onCriteriaChange","onPagingChange","IfRhosr","scope","marginTop","ArtifactList","fetchArtifactContent","artifact","version","getArtifactContent","onArtifactSelected","fetchArtifactVersions","getArtifactVersions","selectedArtifact","setSelectedArtifact","onArtifactSelectedInternal","debug","onArtifactUnselectedInternal","onArtifactLoaded","idx","ArtifactListItem","onUnselected","isSelected","rval","setLoading","versions","setVersions","selectedVersion","setSelectedVersion","setContent","isContentLoaded","setContentLoaded","onVersionSelect","contentType","data","target","localName","Radio","isChecked","state","status","Badge","isRead","setFilterValue","Toolbar","ToolbarContent","ToolbarItem","SearchInput","onChange","onSearch","onClear","Button","SortAlphaDownIcon","SortAlphaDownAltIcon","Pagination","padding","dropDirection","isCompact","itemCount","perPage","onSetPage","newPage","onPerPageSelect","newPerPage","widgetId","TYPE_OPTIONS","label","CreateDesignModal","onCreate","onCancel","isValid","setValid","setName","summary","setSummary","setType","typeSelection","setTypeSelection","isTypeToggled","setTypeToggled","setVersion","isVersionToggled","setVersionToggled","templates","setTemplates","template","setTemplate","templatesSvc","valid","getTemplatesFor","Modal","ModalVariant","onClose","actions","isDisabled","Form","FormGroup","isRequired","fieldId","TextInput","TextArea","selection","onTypeSelect","Gallery","hasGutter","minWidths","default","maxWidths","t","GalleryItem","TemplateItem","DeleteDesignModal","design","onDelete","onDownload","titleIconVariant","TextContent","Text","component","lineHeight","paddingLeft","Checkbox","checked","DesignList","designs","selectedDesign","sort","onSort","onEdit","onRename","onRegister","sortByIndex","setSortByIndex","renderColumnData","column","colIndex","modifiedOn","fromNow","DesignOriginLabel","renderActionsToggle","props","KebabToggle","preventDefault","stopPropagation","sortParams","sortable","sortBy","direction","_event","by","columnIndex","ResponsiveTable","ariaLabel","columns","width","expectedLength","minimumColumnWidth","onRowClick","row","renderHeader","Th","modifier","renderCell","Td","renderActions","ActionsColumn","actionsToggle","isSeparator","isRowSelected","DesignsPanel","onDesignSelected","onImport","showDataWarning","setShowDataWarning","refresh","setRefresh","setFiltered","filterOn","setSort","setDesigns","designToDelete","setDesignToDelete","isDeleteModalOpen","setDeleteModalOpen","designToRegister","setDesignToRegister","isRegisterModalOpen","setRegisterModalOpen","designToRename","setDesignToRename","isRenameModalOpen","setRenameModalOpen","designsSvc","downloadSvc","nav","alerts","local","doRefresh","onDownloadDesign","getDesignContent","filename","theContent","stringify","downloadToFS","trim","getConfigProperty","searchDesigns","DesignsEmptyState","emptyStateFiltered","DesignsEmptyStateFiltered","DesignsToolbar","Card","isSelectable","CardBody","actionClose","AlertActionCloseButton","setConfigProperty","deleteDesign","designDeleted","designDeleteFailed","ExportToRhosrModal","onExported","designExportedToRhosr","RenameModal","renameDesign","designRenamed","EmptyStateSecondaryActions","ImportDropdown","Bullseye","backgroundColor","SearchIcon","PLACEHOLDER_TYPE_OPTION","compareTo","selectOption","this","ImportDesignModal","importType","designContent","setDesignContent","fileName","setFileName","url","setUrl","setContentType","detectJsonOrYamlInfo","contentObj","openapi","info","swagger","asyncapi","$schema","detectInfo","detectXmlInfo","warn","setTheType","newType","newTypeSelection","option","FILE","file","cd","cdc","FileUpload","filenamePlaceholder","fname","URL","UrlUpload","urlPlaceholder","toggle","DropdownToggle","toggleVariant","Dropdown","action","attributes","RHOSR","isPlain","dropdownItems","DropdownItem","position","ImportFromRhosrModal","setRegistries","setDesign","getRegistries","a","b","name1","name2","localeCompare","PlusCircleIcon","previewContent","setPreviewContent","downloadError","setDownloadError","urlService","hasUrl","hasError","spinner","placeholder","fetchUrlContent","isReadOnly","DesignDetailsPanel","activeTabKey","setActiveTabKey","Tabs","activeKey","eventKey","Tab","TabTitleText","createdOn","DesignEvents","DesignHistory","events","setEvents","designsService","getEvents","DesignEventType","on","exports","setExports","originUrl","origin","originGroupId","originArtifactId","originVersion","originFilename","Divider","importTypeLabel","typeLabel","Label","color","menuActions","accept","includes","dirty","EditorContext","lss","designContext","setDesignContext","isActionMenuToggled","setActionMenuToggled","isExpanded","setExpanded","isTestRegistryModalOpen","setIsTestRegistryModalOpen","actionMenuToggle","menuItems","DropdownSeparator","TestRegistryModal","onSubmit","onRegistrationTestRegistry","params","Breadcrumb","BreadcrumbItem","isActive","onCompareContent","onFormat","zIndex","onSave","newExpanded","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","initialFormState","hasErrors","groupValue","validated","errorMessage","artifactIdValue","isLoadingRegistries","setLoadingRegistries","formState","setFormState","setFormValues","filteredEvents","detectRhosrContext","filteredRegistries","defaultRegistry","helperTextInvalid","val","CompareModal","before","beforeName","after","afterName","renderSideBySide","automaticLayout","wordWrap","readOnly","inDiffEditor","originalAriaLabel","modifiedAriaLabel","diffEditorContentOptions","setDiffEditorContentOptions","beforeAsString","setBeforeAsString","afterAsString","setAfterAsString","isDiffInline","setIsDiffInline","isDiffWrapped","setIsDiffWrapped","ToggleGroup","ToggleGroupItem","text","buttonId","ArrowsAltHIcon","DiffEditor","original","modified","options","isExporting","setExporting","setGroup","setArtifactId","hasRhosrAccess","setHasRhosrAccess","registrationError","setRegistrationError","setFormDefaults","createOrUpdateArtifact","amd","Date","createEvent","onHasAccess","RegistrationError","onTryAgain","userInfo","setUserInfo","rhosrFactory","userHasAccess","viewer","developer","admin","getCurrentUser","displayName","username","fontWeight","actionLinks","AlertActionLink","CodeBlock","CodeBlockCode","determineContentType","normalizeGroupId","useRhosrInstanceServiceFactory","auth","useAuth","instanceUrl","registryUrl","createArtifact","basePath","Promise","apicurio_registry","getToken","token","endpoint","headers","createArtifactVersion","ifExists","start","end","queryParams","limit","offset","order","orderby","maxContentLength","responseType","transformResponse","testUpdateArtifactContent","db","createDesign","newDesign","newDesignContent","newEvent","all","add","getDesigns","toArray","matches","toLowerCase","indexOf","filteredDesigns","design1","design2","getTime","totalCount","slice","getDesign","where","equals","first","delete","newName","newSummary","update","updateDesignContent","reverse","eventId","stores","useDesignsService","ASYNCAPI_2_TEMPLATES","OPENAPI_3_TEMPLATES","OPENAPI_2_TEMPLATES","JSON_TEMPLATES","AVRO_TEMPLATES","PROTOBUF_TEMPLATES","resolve","startsWith","reject","useTemplatesService","useDownloadService","_w","window","chrome","link","createElement","blob","Blob","createObjectURL","download","click","navigator","msSaveBlob","File","open","githubRegex","match","org","repo","branch","useUrlService","useAlertsService","addAlert","useAlert","AlertVariant","dataTestId","designSaved","propertyName","propertyValue","localStorage","setItem","defaultValue","getItem","parse","clearConfigProperty","removeItem","useLocalStorageService","RHOSR_MOCK_DATA","created_at","updated_at","instance_type","RHOSR_MOCK_DATA_OF","createMockService","mockData","matching","mockWarningSent","mockWarning","useRhosrService","cfg","useConfig","srs","apiBasePath","RegistriesApi","Configuration","accessToken","res","cacheKey","cachedRegistry","cloneObject","object","propertyReplace","from","Object","keys","forEach","isJson","e","parseJson","toJsonString","isYaml","parseYaml","toYamlString","isXml","DOMParser","parseFromString","getElementsByTagName","isXmlWithRootNode","namespace","dom","documentElement","namespaceURI","isWsdl","isXsd","isProto","fileExtensionForDesign","split","contentTypeForDesign","formatContent","parsed","convertToValidFilename","replace","contentToString","hasOrigin","contextType","substring","AXIOS","createAxiosConfig","method","validateStatus","unwrapErrorData","response","createEndpoint","baseHref","encodeURIComponent","createHref","createOptions","httpGet","successCallback","config","request","httpPostWithReturn","body","httpPut","stripTrailingSlash","endsWith"],"sourceRoot":""}