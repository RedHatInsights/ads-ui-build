{"version":3,"file":"509.9afa7b6f.js","mappings":"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","sources":["webpack://ads-ui/./src/app/components/if.tsx","webpack://ads-ui/./src/app/components/navlink.tsx","webpack://ads-ui/./src/app/components/artifact-type-icon.tsx","webpack://ads-ui/./src/app/components/is-loading.tsx","webpack://ads-ui/./src/app/components/if-not-empty.tsx","webpack://ads-ui/./src/app/components/list-with-toolbar.tsx","webpack://ads-ui/./src/app/components/toggle-icon.tsx","webpack://ads-ui/./src/app/components/object-select.tsx","webpack://ads-ui/./src/app/contexts/navigation.ts","webpack://ads-ui/./src/app/models/rhosr-instance/artifact-types.model.ts","webpack://ads-ui/./src/app/models/rhosr-instance/content-types.model.ts","webpack://ads-ui/./src/app/pages/components/home/artifact-group.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-name.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-selector.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-item.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/create-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/delete-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/design-list.tsx","webpack://ads-ui/./src/app/pages/components/home/designs.panel.tsx","webpack://ads-ui/./src/app/pages/components/home/import-dropdown.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state-filtered.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/import-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/import-from-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/template-item.tsx","webpack://ads-ui/./src/app/pages/components/home/url-upload.tsx","webpack://ads-ui/./src/app/pages/components/home/design-details-panel.tsx","webpack://ads-ui/./src/app/pages/components/home/design-history.tsx","webpack://ads-ui/./src/app/pages/components/home/design-events.tsx","webpack://ads-ui/./src/app/pages/components/home/design-event-type.tsx","webpack://ads-ui/./src/app/pages/components/home/design-origin-label.tsx","webpack://ads-ui/./src/app/pages/components/editor/dry-run.modal.tsx","webpack://ads-ui/./src/app/pages/components/editor/editor-context.tsx","webpack://ads-ui/./src/app/pages/components/shared/export-to-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/rename.modal.tsx","webpack://ads-ui/./src/app/services/rhosr-instance.ts","webpack://ads-ui/./src/app/services/designs.ts","webpack://ads-ui/./src/app/services/_templates/asyncapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/openapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/json.templates.ts","webpack://ads-ui/./src/app/services/_templates/avro.templates.ts","webpack://ads-ui/./src/app/services/_templates/protobuf.templates.ts","webpack://ads-ui/./src/app/services/templates.ts","webpack://ads-ui/./src/app/services/download.ts","webpack://ads-ui/./src/app/services/url.ts","webpack://ads-ui/./src/app/services/local-storage.ts","webpack://ads-ui/./src/app/services/rhosr.ts","webpack://ads-ui/./src/app/utils/object.utils.ts","webpack://ads-ui/./src/app/utils/content.utils.ts","webpack://ads-ui/./src/app/utils/design.utils.ts","webpack://ads-ui/./src/app/utils/rest.utils.ts"],"sourcesContent":["import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type IfProps = {\n    condition: boolean | (() => boolean);\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const If: FunctionComponent<IfProps> = ({condition, children}: IfProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n\n    return (accept() ? <React.Fragment children={children} /> : <React.Fragment />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Basename, useBasename} from \"@rhoas/app-services-ui-shared\";\n\nexport type NavLinkProps = {\n    location: string;\n    className?: string;\n    children?: React.ReactNode;\n}\n\nexport const NavLink: FunctionComponent<NavLinkProps> = ({location, className, children}: NavLinkProps) => {\n\n    const basename: Basename = useBasename();\n    const to: string = `${basename.getBasename()}${location}`;\n\n    return (\n        <Link className={className} to={to} children={children} />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./artifact-type-icon.css\";\nimport {ArtifactTypes} from \"@app/models\";\n\n/**\n * Properties\n */\nexport type ArtifactTypeIconProps = {\n    type: string;\n    isShowIcon?: boolean; // defaults to true\n    isShowLabel?: boolean; // defaults to false\n}\n\n\nexport const ArtifactTypeIcon: FunctionComponent<ArtifactTypeIconProps> = ({type, isShowIcon, isShowLabel}: ArtifactTypeIconProps) => {\n    const getTitle = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro Schema\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf Schema\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON Schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI Definition\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI Definition\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL Definition\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect Schema\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getLabel = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getClassNames = (): string => {\n        let classes: string = \"artifact-type-icon\";\n        if (isShowLabel) {\n            classes += \" has-label\";\n        }\n        if (isShowIcon !== false) {\n            classes += \" has-icon\";\n            switch (type) {\n                case ArtifactTypes.AVRO:\n                    classes += \" avro-icon24\";\n                    break;\n                case ArtifactTypes.PROTOBUF:\n                    classes += \" protobuf-icon24\";\n                    break;\n                case ArtifactTypes.JSON:\n                    classes += \" json-icon24\";\n                    break;\n                case ArtifactTypes.OPENAPI:\n                    classes += \" oai-icon24\";\n                    break;\n                case ArtifactTypes.ASYNCAPI:\n                    classes += \" aai-icon24\";\n                    break;\n                case ArtifactTypes.GRAPHQL:\n                    classes += \" graphql-icon24\";\n                    break;\n                case ArtifactTypes.KCONNECT:\n                    classes += \" kconnect-icon24\";\n                    break;\n                case ArtifactTypes.WSDL:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XSD:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XML:\n                    classes += \" xml-icon24\";\n                    break;\n            }\n        }\n        return classes;\n    }\n\n    const renderLabel = (): React.ReactNode | undefined => {\n        if (isShowLabel) {\n            return <span>{getLabel()}</span>\n        } else {\n            return undefined;\n        }\n    };\n\n    return (\n        <div className={getClassNames()} title={getTitle()} children={renderLabel()} />\n    );\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Spinner} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IsLoadingProps = {\n    condition: boolean | (() => boolean);\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n}\n\n/**\n * Displays a Spinner control while the condition property is true.  When false, the provided children\n * are displayed.  Useful when displaying content from the results of an async operation such as a REST\n * call.\n */\nexport const IsLoading: FunctionComponent<IsLoadingProps> = ({condition, loadingComponent, children}: IsLoadingProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n    const lc: React.ReactNode = loadingComponent || <Spinner />;\n    return (accept() ? <React.Fragment children={lc} /> : <React.Fragment children={children} />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Button, EmptyState, EmptyStateBody, EmptyStateVariant, Title} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IfNotEmptyProps = {\n    collection?: any[];\n    emptyState?: React.ReactNode;\n    emptyStateTitle?: string;\n    emptyStateMessage?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * provided collection is not empty.  If the provided collection is empty, then\n * an empty state control is displayed instead.\n */\nexport const IfNotEmpty: FunctionComponent<IfNotEmptyProps> = ({collection, emptyState, emptyStateTitle, emptyStateMessage, children}: IfNotEmptyProps) => {\n    const isEmpty = () => {\n        return !collection || collection.length === 0;\n    };\n\n    const empty: React.ReactNode = emptyState || (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{emptyStateTitle || \"None found\"}</Title>\n            <EmptyStateBody>{emptyStateMessage || \"No items found.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    return isEmpty() ?\n        <React.Fragment children={empty}/> :\n        <React.Fragment children={children} />\n};\n","import React, {FunctionComponent} from \"react\";\nimport {IsLoading} from \"@app/components/is-loading\";\nimport {If} from \"@app/components/if\";\nimport {IfNotEmpty} from \"@app/components/if-not-empty\";\n\n/**\n * Properties\n */\nexport type ListWithToolbarProps = {\n    toolbar: React.ReactNode;\n    alwaysShowToolbar?: boolean;\n    emptyState: React.ReactNode;\n    filteredEmptyState: React.ReactNode;\n    isLoading: boolean;\n    isFiltered: boolean;\n    isEmpty: boolean;\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const ListWithToolbar: FunctionComponent<ListWithToolbarProps> = (\n    {toolbar, alwaysShowToolbar, emptyState, filteredEmptyState, isLoading, loadingComponent, isEmpty, isFiltered, children}: ListWithToolbarProps) => {\n\n    return (\n        <React.Fragment>\n            <If condition={alwaysShowToolbar || !isEmpty || isFiltered} children={toolbar} />\n            <IsLoading condition={isLoading} loadingComponent={loadingComponent}>\n                <If condition={!isEmpty} children={children} />\n                <If condition={isEmpty && isFiltered} children={filteredEmptyState} />\n                <If condition={isEmpty && !isFiltered} children={emptyState} />\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {ChevronRightIcon, ChevronDownIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type ToggleIconProps = {\n    expanded: boolean;\n    onClick: () => void;\n};\n\nexport const ToggleIcon: FunctionComponent<ToggleIconProps> = ({expanded, onClick}: ToggleIconProps) => {\n    return expanded ? (\n        <ChevronDownIcon />\n    ) : (\n        <ChevronRightIcon />\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Select, SelectOption, SelectVariant} from \"@patternfly/react-core\";\nimport {SelectOptionObject} from \"@patternfly/react-core/src/components/Select/SelectOption\";\n\ninterface ObjectSelectOptionObject extends SelectOptionObject {\n    item: any;\n}\n\n/**\n * Properties\n */\nexport type ObjectSelectProps = {\n    value: any;\n    items: any[];\n    onSelect: (value: any) => void;\n    itemToString: (value: any) => string;\n    noSelectionLabel?: string;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline';\n    variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n};\n\n/**\n * A generic control that makes it easier to create a <Select> from an array of objects.\n */\nexport const ObjectSelect: FunctionComponent<ObjectSelectProps> = (\n    {value, items, onSelect, itemToString, noSelectionLabel, menuAppendTo, variant}: ObjectSelectProps) => {\n\n    const [isToggled, setToggled] = useState<boolean>(false);\n    const [selectObjects, setSelectObjects] = useState<ObjectSelectOptionObject[]>();\n    const [selections, setSelections] = useState<ObjectSelectOptionObject[]>();\n\n    const onSelectInternal = (event: React.MouseEvent | React.ChangeEvent, value: string | SelectOptionObject): void => {\n        setToggled(false);\n        onSelect((value as ObjectSelectOptionObject).item);\n    };\n\n    useEffect(() => {\n        const theItems: any[] = items || [];\n        const selectObjects: ObjectSelectOptionObject[] = theItems.map((item, index) => {\n            return {\n                item: item,\n                toString: () => {\n                    return itemToString(item)\n                }\n            }\n        });\n        if (noSelectionLabel !== undefined) {\n            const noSelection: ObjectSelectOptionObject = {\n                item: undefined,\n                toString(): string {\n                    return noSelectionLabel;\n                }\n            }\n            setSelectObjects([\n                noSelection, ...selectObjects\n            ]);\n        } else {\n            setSelectObjects(selectObjects);\n        }\n    }, [items]);\n\n    useEffect(() => {\n        const filtered: ObjectSelectOptionObject[]|undefined = selectObjects?.filter(soo => soo.item === value);\n        setSelections(filtered);\n    }, [value]);\n\n    return (\n        <Select menuAppendTo={menuAppendTo} variant={variant || SelectVariant.single} onToggle={setToggled} onSelect={onSelectInternal} isOpen={isToggled} selections={selections}>\n            {\n                selectObjects?.map((soo, index) => (\n                    <SelectOption isPlaceholder={soo.item === undefined} key={index} value={soo} />\n                ))\n            }\n        </Select>\n    )\n};\n","import {Basename, useBasename} from \"@rhoas/app-services-ui-shared\";\nimport {History} from \"history\";\nimport {useHistory} from \"react-router-dom\";\n\nexport const navigateTo: (path: string, basename: Basename, history: History) => void = (path: string, basename: Basename, history: History) => {\n    const to: string = `${basename.getBasename()}${path}`;\n    setTimeout(() => {\n        history.push(to);\n    }, 50);\n};\n\nexport type Navigation = {\n    navigateTo: (path: string) => void;\n};\n\nexport const useNavigation: () => Navigation = (): Navigation => {\n    const history: History = useHistory();\n    const basename: Basename = useBasename();\n\n    return {\n        navigateTo: (path: string) => {\n            return navigateTo(path, basename, history);\n        }\n    };\n}\n","\nexport class ArtifactTypes {\n\n    public static AVRO: string = \"AVRO\";\n    public static PROTOBUF: string = \"PROTOBUF\";\n    public static JSON: string = \"JSON\";\n    public static OPENAPI: string = \"OPENAPI\";\n    public static ASYNCAPI: string = \"ASYNCAPI\";\n    public static GRAPHQL: string = \"GRAPHQL\";\n    public static KCONNECT: string = \"KCONNECT\";\n    public static WSDL: string = \"WSDL\";\n    public static XSD: string = \"XSD\";\n    public static XML: string = \"XML\";\n\n}\n","\nexport class ContentTypes {\n\n    public static APPLICATION_JSON: string = \"application/json\";\n    public static APPLICATION_YAML: string = \"application/x-yaml\";\n    public static APPLICATION_XML: string = \"application/xml\";\n    public static APPLICATION_PROTOBUF: string = \"application/x-protobuf\";\n    public static APPLICATION_GRAPHQL: string = \"application/graphql\";\n\n    public static TEXT_XML: string = \"text/xml\";\n    public static APPLICATION_WSDL: string = \"application/wsdl+xml\";\n}\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactGroupProps = {\n    groupId: string|undefined;\n}\n\n/**\n * Displays a RHOSR artifact's group.\n */\nexport const ArtifactGroup: FunctionComponent<ArtifactGroupProps> = ({groupId}: ArtifactGroupProps) => {\n    const style = (): string => {\n        return !groupId ? \"nogroup\" : \"group\";\n    };\n\n    return (\n        <span className={style()}>{groupId}</span>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactNameProps = {\n    id: string;\n    name: string;\n}\n\n/**\n * Displays a RHOSR artifact's name.\n */\nexport const ArtifactName: FunctionComponent<ArtifactNameProps> = ({id, name}: ArtifactNameProps) => {\n    return name ? (\n        <React.Fragment>\n            <span className=\"name\">{name}</span>\n            <span className=\"id\">{id}</span>\n        </React.Fragment>\n    ) : (\n        <React.Fragment>\n            <span className=\"name\">{id}</span>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    ArtifactSearchResults,\n    CreateDesignContent,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedArtifact,\n    SearchedVersion\n} from \"@app/models\";\nimport {RhosrInstanceService, RhosrInstanceServiceFactory, useRhosrInstanceServiceFactory} from \"@app/services\";\nimport {ArtifactList, ArtifactListToolbar, ArtifactListToolbarCriteria} from \"@app/pages/components\";\nimport {IfNotEmpty, IsLoading, ListWithToolbar} from \"@app/components\";\nimport {EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type ArtifactSelectorProps = {\n    registries: Registry[];\n    onSelected: (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n};\n\n/**\n * A control that allows the user to find and select a single version of a single artifact from\n * a service registry instance.\n */\nexport const ArtifactSelector: FunctionComponent<ArtifactSelectorProps> = ({registries, onSelected}: ArtifactSelectorProps) => {\n    const [ querying, setQuerying ] = useState(true);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<ArtifactListToolbarCriteria>({\n        filterValue: \"\",\n        ascending: true,\n        filterSelection: \"name\"\n    });\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ artifacts, setArtifacts ] = useState<ArtifactSearchResults|undefined>();\n    const [ rhosrInstance, setRhosrInstance ] = useState<RhosrInstanceService>();\n\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    const onRegistrySelected = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    const onCriteriaChange = (criteria: ArtifactListToolbarCriteria): void =>  {\n        setCriteria(criteria);\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n    };\n\n    const fetchArtifactVersions = (artifact: SearchedArtifact): Promise<SearchedVersion[]> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactVersions(artifact.groupId, artifact.id);\n    };\n\n    const fetchArtifactContent = (artifact: SearchedArtifact, version?: SearchedVersion): Promise<string> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactContent(artifact.groupId, artifact.id, version?.version||\"latest\");\n    };\n\n    const onArtifactSelected = (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        onSelected(registry, artifact, version, content);\n    };\n\n    // Initialization\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, []);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    // Query for artifacts when relevant changes occur.\n    useEffect(() => {\n        if (rhosrInstance) {\n            const gac: GetArtifactsCriteria = {\n                sortAscending: criteria.ascending,\n                type: criteria.filterSelection,\n                value: criteria.filterValue\n            };\n            setQuerying(true);\n            rhosrInstance.getArtifacts(gac, paging).then(results => {\n                setArtifacts(results);\n                setQuerying(false);\n            }).catch(error => {\n                // TODO handle error\n                console.error(\"[RegistryPage] Error searching for artifacts: \", error);\n            });\n        }\n        onSelected(undefined, undefined, undefined);\n    }, [rhosrInstance, criteria, paging]);\n\n    const toolbar: React.ReactNode = (\n        <ArtifactListToolbar registries={registries} criteria={criteria} paging={paging}\n                             onRegistrySelected={onRegistrySelected}\n                             menuAppendTo={document.getElementById('artifact-selector')}\n                             onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange}\n                             artifacts={artifacts} />\n    );\n\n    const emptyState: React.ReactNode = (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n            <EmptyStateBody>{\"No artifacts found in the registry instance.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    const filteredEmptyState: React.ReactNode = (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n            <EmptyStateBody>{\"No artifacts matched the filter criteria.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    const loadingComponent: React.ReactNode = (\n        <Spinner size=\"lg\" style={{marginTop: \"10px\"}} />\n    );\n\n    return (\n        <div id=\"artifact-selector\">\n            <ListWithToolbar toolbar={toolbar}\n                alwaysShowToolbar={true}\n                emptyState={emptyState}\n                filteredEmptyState={filteredEmptyState}\n                isFiltered={criteria.filterValue !== \"\"}\n                isLoading={querying}\n                loadingComponent={loadingComponent}\n                isEmpty={!artifacts || artifacts.count === 0}\n            >\n                <ArtifactList artifacts={artifacts?.artifacts} fetchArtifactContent={fetchArtifactContent}\n                    onArtifactSelected={onArtifactSelected}\n                    fetchArtifactVersions={fetchArtifactVersions} />\n            </ListWithToolbar>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./artifact-list.css\";\nimport {CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {ArtifactListItem} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type ArtifactListProps = {\n    artifacts?: SearchedArtifact[];\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n    onArtifactSelected: (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactList: FunctionComponent<ArtifactListProps> = (\n    {artifacts, fetchArtifactVersions, fetchArtifactContent, onArtifactSelected}: ArtifactListProps) => {\n\n    const [selectedArtifact, setSelectedArtifact] = useState<SearchedArtifact>();\n\n    const onArtifactSelectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact selected: \", artifact);\n        setSelectedArtifact(artifact);\n    };\n\n    const onArtifactUnselectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact unselected: \", artifact);\n        setSelectedArtifact(undefined);\n        onArtifactSelected(undefined, undefined, undefined);\n    };\n\n    const onArtifactLoaded = (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent): void => {\n        console.debug(\"[ArtifactList] Artifact loaded: \", artifact);\n        console.debug(\"[ArtifactList] Selected Artifact: \", selectedArtifact);\n        if (artifact === selectedArtifact) {\n            onArtifactSelected(artifact, version, content);\n        }\n    };\n\n    return (\n        <div className=\"artifact-list\">\n            {\n                artifacts?.map( (artifact, idx) =>\n                    <ArtifactListItem artifact={artifact} key={idx}\n                                      onSelected={onArtifactSelectedInternal}\n                                      onUnselected={onArtifactUnselectedInternal}\n                                      fetchArtifactVersions={fetchArtifactVersions}\n                                      fetchArtifactContent={fetchArtifactContent}\n                                      onArtifactLoaded={onArtifactLoaded}\n                                      isSelected={selectedArtifact === artifact} />\n                )\n            }\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-item.css\";\nimport {ArtifactTypes, ContentTypes, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Badge, Radio, Spinner} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {ArtifactGroup, ArtifactName} from \"@app/pages/components\";\nimport {isJson, isXml, isYaml} from \"@app/utils\";\n\n/**\n * Properties\n */\nexport type ArtifactListItemProps = {\n    artifact: SearchedArtifact;\n    isSelected: boolean;\n    onSelected: (artifact: SearchedArtifact) => void;\n    onUnselected: (artifact: SearchedArtifact) => void;\n    onArtifactLoaded: (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent) => void;\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactListItem: FunctionComponent<ArtifactListItemProps> = (\n    {artifact, isSelected, onSelected, onUnselected, onArtifactLoaded, fetchArtifactVersions, fetchArtifactContent}: ArtifactListItemProps) => {\n\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [versions, setVersions] = useState<SearchedVersion[]>();\n    const [selectedVersion, setSelectedVersion] = useState<SearchedVersion>();\n    const [content, setContent] = useState<string>();\n    const [isContentLoaded, setContentLoaded] = useState<boolean>(false);\n\n    const labels = (): string[] => {\n        return artifact.labels ? artifact.labels : [];\n    };\n    const statuses = (): string[] => {\n        const rval: string[] = [];\n        if (artifact.state === \"DISABLED\") {\n            rval.push(\"Disabled\");\n        }\n        if (artifact.state === \"DEPRECATED\") {\n            rval.push(\"Deprecated\");\n        }\n        return rval;\n    };\n    const description = (): string => {\n        if (artifact.description) {\n            return artifact.description;\n        }\n        return `An artifact of type ${artifact.type} with no description.`;\n    };\n\n    const shouldLoadVersions = (): boolean => {\n        return versions === undefined || versions.length === 0;\n    };\n\n    const loadVersions = (): void => {\n        setContentLoaded(false);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Loading versions for ${artifact.id}`);\n        fetchArtifactVersions(artifact).then(versions => {\n            setVersions(versions);\n            setLoading(false);\n            onVersionSelect(undefined);\n        }).catch(error => {\n            // TODO handle errors\n        });\n    };\n\n    const onToggleSelected = (event: any): void => {\n        // Bit of a hack - if the user clicks the Version drop-down, don't do the\n        // artifact item toggling behavior.\n        if (event && event.target && event.target.localName === \"button\") {\n            return;\n        }\n\n        if (isSelected) {\n            onUnselected(artifact);\n        } else {\n            if (shouldLoadVersions()) {\n                loadVersions();\n            } else {\n                onVersionSelect(undefined);\n            }\n            onSelected(artifact);\n        }\n    };\n\n    const onVersionSelect = (version?: SearchedVersion): void => {\n        setSelectedVersion(version);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Version selected for ${artifact.id}, loading content. Version: `, version);\n        fetchArtifactContent(artifact, version).then(content => {\n            console.debug(\"[ArtifactListItem] Artifact content successfully fetched for: \", artifact.id)\n            setContent(content);\n            setLoading(false);\n            setContentLoaded(true);\n        }).catch(error => {\n            // TODO handle errors loading the artifact content\n        });\n    };\n\n    // Whenever the content changes, fire the \"onArtifactLoaded\" event.  Do this\n    // from inside useEffect() so that it's not happening from an async callback.\n    useEffect(() => {\n        if (content !== undefined) {\n            let contentType: string;\n            if (isJson(content)) {\n                contentType = ContentTypes.APPLICATION_JSON;\n            } else if (isYaml(content)) {\n                contentType = ContentTypes.APPLICATION_YAML;\n            } else if (isXml(content)) {\n                contentType = ContentTypes.APPLICATION_XML;\n            } else if (artifact.type === ArtifactTypes.PROTOBUF) {\n                contentType = ContentTypes.APPLICATION_PROTOBUF;\n            } else if (artifact.type === ArtifactTypes.GRAPHQL) {\n                contentType = ContentTypes.APPLICATION_GRAPHQL;\n            } else {\n                contentType = ContentTypes.APPLICATION_JSON;\n            }\n            const cdc: CreateDesignContent = {\n                contentType,\n                data: content\n            };\n            onArtifactLoaded(artifact, selectedVersion as SearchedVersion, cdc);\n        }\n    }, [content]);\n\n    return (\n        <div className={`artifact-list-item ${isSelected ? \"selected\" : \"\"} ${isContentLoaded ? \"loaded\" : \"\"}`}\n             onClick={onToggleSelected}>\n            <div className=\"artifact-list-item-radio\">\n                <IsLoading condition={isLoading} loadingComponent={(<Spinner size=\"sm\" />)}>\n                    <Radio id={`artifact-radio-${artifact.id}`} name=\"\" isChecked={isSelected} />\n                </IsLoading>\n            </div>\n            <div className=\"artifact-list-item-icon\">\n                <ArtifactTypeIcon type={artifact.type}/>\n            </div>\n            <div className=\"artifact-list-item-info\">\n                <div className=\"artifact-title\">\n                    <ArtifactGroup groupId={artifact.groupId} />\n                    <ArtifactName id={artifact.id} name={artifact.name} />\n                    {\n                        statuses().map( status =>\n                            <Badge className=\"status-badge\" key={status} isRead={true}>{status}</Badge>\n                        )\n                    }\n                </div>\n                <div className=\"artifact-description\">{description()}</div>\n            </div>\n            <div className=\"artifact-list-item-versions\">\n                <If condition={isSelected}>\n                    <ObjectSelect value={selectedVersion} items={versions as SearchedVersion[]}\n                                  noSelectionLabel=\"latest\" menuAppendTo=\"parent\"\n                                  onSelect={onVersionSelect} itemToString={version => version.version} />\n                </If>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-toolbar.css\";\nimport {\n    Button,\n    Dropdown,\n    DropdownItem,\n    DropdownToggle,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    SelectVariant,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {ArtifactSearchResults, Paging} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {ObjectSelect} from \"@app/components/object-select\";\n\n\nexport interface ArtifactListToolbarCriteria {\n    filterSelection: string;\n    filterValue: string;\n    ascending: boolean;\n}\n\nexport type ArtifactListToolbarProps = {\n    registries: Registry[];\n    criteria: ArtifactListToolbarCriteria;\n    paging: Paging;\n    artifacts?: ArtifactSearchResults;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline' | undefined | null;\n    onRegistrySelected: (registry: Registry) => void;\n    onCriteriaChange: (criteria: ArtifactListToolbarCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n}\n\n\nexport const ArtifactListToolbar: FunctionComponent<ArtifactListToolbarProps> = ({registries, criteria, onCriteriaChange, paging,\n                                                                            onPagingChange, artifacts, onRegistrySelected, menuAppendTo}: ArtifactListToolbarProps) => {\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    const onRegistrySelectInternal = (registry: Registry): void => {\n        setRegistry(registry);\n        onRegistrySelected(registry);\n    };\n\n    const onToggleAscending = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            ascending: !criteria.ascending\n        });\n    };\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    }\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    }\n\n    const totalArtifactCount = (): number => {\n        return artifacts?.count || 0;\n    };\n\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, [registries]);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    return (\n        <Toolbar id=\"artifacts-toolbar-1\" className=\"artifacts-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <ObjectSelect value={registry} items={registries}\n                                  variant={SelectVariant.typeahead}\n                                  onSelect={onRegistrySelectInternal}\n                                  menuAppendTo={menuAppendTo || 'parent'}\n                                  itemToString={item => item.name} />\n                </ToolbarItem>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter artifacts\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem className=\"sort-icon-item\">\n                    <Button variant=\"plain\" aria-label=\"edit\" data-testid=\"toolbar-btn-sort\" onClick={onToggleAscending}>\n                        {\n                            criteria.ascending ? <SortAlphaDownIcon/> : <SortAlphaDownAltIcon/>\n                        }\n                    </Button>\n                </ToolbarItem>\n                <ToolbarItem className=\"artifact-paging-item\">\n                    <Pagination\n                        style={{padding: \"5px\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalArtifactCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"artifact-list-pagination\"\n                        className=\"artifact-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Alert,\n    Button,\n    Form,\n    FormGroup, Gallery, GalleryItem,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, CreateDesign, Template} from \"@app/models\";\nimport {TemplatesService, useTemplatesService} from \"@app/services\";\nimport {If} from \"@app/components\";\nimport {TemplateItem} from \"@app/pages/components\";\n\nexport type CreateDesignModalProps = {\n    isOpen: boolean|undefined;\n    onCreate: (event: CreateDesign, template: Template) => void;\n    onCancel: () => void;\n}\n\n\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        }\n    };\n});\n\n\nexport const CreateDesignModal: FunctionComponent<CreateDesignModalProps> = ({isOpen, onCreate, onCancel}: CreateDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState(ArtifactTypes.OPENAPI);\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [templates, setTemplates] = useState<Template[]>();\n    const [template, setTemplate] = useState<Template>();\n\n    const templatesSvc: TemplatesService = useTemplatesService();\n\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setType((selection as any).value);\n        setTypeSelection(selection);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Create button in the modal\n    const doCreate = (): void => {\n        const cd: CreateDesign = {\n            type,\n            name,\n            summary,\n            context: {\n                type: \"create\"\n            }\n        };\n        onCreate(cd, template as Template);\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        if (!template) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, template]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setName(\"\");\n        setSummary(\"\");\n        setType(ArtifactTypes.OPENAPI);\n        if (templates) {\n            setTemplate(templates[0]);\n        } else {\n            setTemplate(undefined);\n        }\n    }, [isOpen]);\n\n    // Whenever the type changes, load the templates for that type. If the type is\n    // OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI) {\n            setVersion(\"3.0.2\");\n        }\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [type]);\n\n    // Whenever the version changes, fetch the templates for the current type and version.\n    useEffect(() => {\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [version]);\n\n    // Whenever the templates changes, auto-select the first one\n    useEffect(() => {\n        if (templates && templates.length > 0) {\n            setTemplate(templates[0]);\n        }\n    }, [templates]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Create a new design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doCreate}>\n                    Create\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <Alert isInline variant=\"warning\" title=\"Warning\" style={{ marginBottom: \"15px\"}}>\n                <p>\n                    All new designs are stored locally in your browser.  Clearing your browser cache or\n                    switching to a new browser <em>might</em> result in loss of data.  Make sure you save your\n                    work locally or in a Red Hat OpenShift Service Registry instance!\n                </p>\n            </Alert>\n\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"create-design-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"create-design-name\"\n                        name=\"create-design-name\"\n                        aria-describedby=\"create-design-name-helper\"\n                        value={name}\n                        onChange={(value) => {setName(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Summary\" fieldId=\"create-design-summary\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"create-design-summary\"\n                        name=\"create-design-summary\"\n                        aria-describedby=\"create-design-summary-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Type\" isRequired={true} fieldId=\"create-design-type\">\n                    <Select\n                        variant={SelectVariant.single}\n                        aria-label=\"Select type\"\n                        onToggle={() => {setTypeToggled(!isTypeToggled)}}\n                        onSelect={(event, selection) => onTypeSelect(selection)}\n                        isOpen={isTypeToggled}\n                        selections={typeSelection}\n                        menuAppendTo=\"parent\"\n                    >\n                        {\n                            TYPE_OPTIONS.map(to => <SelectOption key={(to as any).value} value={to} />)\n                        }\n                    </Select>\n                </FormGroup>\n                <If condition={type === ArtifactTypes.OPENAPI}>\n                    <FormGroup label=\"Version\" isRequired={true} fieldId=\"create-design-version\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select version\"\n                            onToggle={() => {setVersionToggled(!isVersionToggled)}}\n                            onSelect={(event, selection) => onVersionSelect(selection as string)}\n                            isOpen={isVersionToggled}\n                            selections={version}\n                            menuAppendTo=\"parent\"\n                        >\n                            <SelectOption value={\"3.0.2\"} />\n                            <SelectOption value={\"2.0\"} />\n                        </Select>\n                    </FormGroup>\n                </If>\n                <If condition={(templates && templates.length > 1) as boolean}>\n                    <FormGroup label=\"Template\" fieldId=\"create-design-template\">\n                        <Gallery hasGutter minWidths={{default: \"125px\"}} maxWidths={{default: \"125px\"}}>\n                        {\n                            templates?.map(t => (\n                                <GalleryItem key={t.id}>\n                                    <TemplateItem template={t} isSelected={t === template} onSelect={() => {\n                                        setTemplate(t)\n                                    }} />\n                                </GalleryItem>\n                            ))\n                        }\n                        </Gallery>\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, Text, TextContent} from \"@patternfly/react-core\";\nimport {Design} from \"@app/models\";\n\nexport type DeleteDesignModalProps = {\n    design: Design|undefined;\n    isOpen: boolean|undefined;\n    onDelete: (design: Design) => void;\n    onCancel: () => void;\n    onDownload: (design: Design) => void;\n}\n\nexport const DeleteDesignModal: FunctionComponent<DeleteDesignModalProps> = ({design, isOpen, onDelete, onDownload, onCancel}: DeleteDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    // Called when the user clicks the Delete button in the modal\n    const doDelete = (): void => {\n        onDelete(design as Design);\n    };\n\n    const doDownload = (): void => {\n        onDownload(design as Design);\n    };\n\n    useEffect(() => {\n        setValid(false);\n    }, [design, isOpen]);\n\n    return (\n        <Modal\n            variant={ModalVariant.small}\n            title=\"Delete design?\"\n            titleIconVariant=\"warning\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"delete\" variant=\"primary\" isDisabled={!isValid} onClick={doDelete}>\n                    Delete\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent style={{marginBottom: \"15px\"}}>\n                <Text component=\"p\">The following API or schema design will be deleted.</Text>\n            </TextContent>\n\n            <Form>\n                <FormGroup label=\"Name\" fieldId=\"delete-design-name\">\n                    <TextContent>{design?.name}</TextContent>\n                </FormGroup>\n                <FormGroup label=\"Summary\" fieldId=\"delete-design-summary\">\n                    <TextContent>{design?.summary}</TextContent>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-warning\">\n                    <Alert isInline variant=\"info\" title=\"To save your data for future use, download the design.\">\n                        <p style={{lineHeight: \"18px\"}}>\n                            To ensure your data is successfully saved, wait for the download to complete\n                            before deleting the design.\n                        </p>\n                        <Button variant=\"link\" onClick={doDownload} style={{paddingLeft:\"0px\"}}>Download design</Button>\n                    </Alert>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-confirm\">\n                    <Checkbox id=\"valid-checkbox\" name=\"\" label=\"I have downloaded the design or do not need to!\"\n                              isChecked={isValid} onChange={(checked) => setValid(checked)} />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-list.css\";\nimport {Design, DesignsSearchResults, DesignsSort} from \"@app/models\";\nimport {ResponsiveTable} from \"@rhoas/app-services-ui-components\";\nimport {ArtifactTypeIcon, NavLink} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {KebabToggle, Label} from \"@patternfly/react-core\";\nimport {IAction} from \"@patternfly/react-table\";\nimport {ThProps} from \"@patternfly/react-table/src/components/TableComposable/Th\";\nimport {CustomActionsToggleProps} from \"@patternfly/react-table/src/components/Table/ActionsColumn\";\nimport {hasOrigin} from \"@app/utils\";\nimport {DesignOriginLabel} from \"@app/pages/components\";\n\n\nexport type DesignListProps = {\n    designs: DesignsSearchResults;\n    sort: DesignsSort;\n    onSort: (sort: DesignsSort) => void;\n    onRename: (design: Design) => void;\n    onEdit: (design: Design) => void;\n    onDelete: (design: Design) => void;\n    onRegister: (design: Design) => void;\n    onDownload: (design: Design) => void;\n    onSelect: (design: Design|undefined) => void;\n}\n\nexport const DesignList: FunctionComponent<DesignListProps> = (\n    {designs, sort, onSort, onEdit, onRename, onDelete, onRegister, onDownload, onSelect}: DesignListProps) => {\n\n    const [selectedDesign, setSelectedDesign] = useState<Design>();\n    const [sortByIndex, setSortByIndex] = useState<number>();\n\n    const columns: any[] = [\n        { index: 0, id: \"name\", label: \"Name\", width: 40, sortable: true },\n        { index: 1, id: \"type\", label: \"Type\", width: 15, sortable: false },\n        { index: 2, id: \"modified-on\", label: \"Modified on\", width: 15, sortable: true },\n        { index: 3, id: \"context\", label: \"Origin\", width: 25, sortable: false },\n    ];\n\n    const renderColumnData = (column: Design, colIndex: number): React.ReactNode => {\n        // Name.\n        if (colIndex === 0) {\n            return (\n                <div>\n                    <NavLink className=\"design-title\" location={`/designs/${column.id}/editor`}>{column.name}</NavLink>\n                    <div className=\"design-summary\">{column.summary||\"(A design without a description)\"}</div>\n                </div>\n            );\n        }\n        // Type.\n        if (colIndex === 1) {\n            return <ArtifactTypeIcon type={column.type} isShowLabel={true} />\n        }\n        // Modified on.\n        if (colIndex === 2) {\n            return <Moment date={column.modifiedOn} fromNow={true} />\n        }\n        // Origin.\n        if (colIndex === 3) {\n            return <DesignOriginLabel design={column} />;\n        }\n        return <span />\n    };\n\n    const renderActionsToggle = (props: CustomActionsToggleProps): React.ReactNode => {\n        return <KebabToggle isDisabled={props.isDisabled} isOpen={props.isOpen} onToggle={(value, event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            props.onToggle(value);\n        }} />\n    }\n\n    const actionsFor = (design: any): IAction[] => {\n        return [\n            { title: \"View details\", onClick: () => setSelectedDesign(design) },\n            { isSeparator: true, },\n            { title: \"Rename\", onClick: () => onRename(design) },\n            { title: \"Edit\", onClick: () => onEdit(design) },\n            { title: \"Download\", onClick: () => onDownload(design) },\n            { title: \"Register in Service Registry\", onClick: () => onRegister(design) },\n            { isSeparator: true, },\n            { title: \"Delete\", onClick: () => onDelete(design) }\n        ];\n    }\n\n    const sortParams = (column: any): ThProps[\"sort\"] | undefined => {\n        return column.sortable ? {\n            sortBy: {\n                index: sortByIndex,\n                direction: sort.direction\n            },\n            onSort: (_event, index, direction) => {\n                const sort: DesignsSort = {\n                    by: index === 0 ? \"name\" : \"modified-on\",\n                    direction\n                };\n                onSort(sort);\n            },\n            columnIndex: column.index\n        } : undefined;\n    };\n\n    useEffect(() => {\n        setSortByIndex(sort.by === \"name\" ? 0 : 2);\n    }, [sort]);\n\n    useEffect(() => {\n        onSelect(selectedDesign);\n    }, [selectedDesign]);\n\n    useEffect(() => {\n        setSelectedDesign(undefined);\n    }, [designs]);\n\n    return (\n        <div className=\"design-list\">\n            <ResponsiveTable\n                ariaLabel=\"list of designs\"\n                columns={columns}\n                data={designs.designs}\n                expectedLength={designs.count}\n                onRowClick={(row) => setSelectedDesign(row.row.id === selectedDesign?.id ? undefined : row.row)}\n                renderHeader={({ column, Th, key }) => (\n                    <Th sort={sortParams(column)}\n                        className=\"design-list-header\"\n                        key={`header-${column.id}`}\n                        width={column.width}\n                        modifier=\"truncate\">{column.label}</Th>\n                )}\n                renderCell={({ column, row, colIndex, Td, key }) => (\n                    <Td className=\"design-list-cell\" key={`cell-${colIndex}-${row.id}`} children={renderColumnData(row as Design, colIndex)} />\n                )}\n                renderActions={({row, ActionsColumn}) => (\n                    <ActionsColumn key={`actions-${row['id']}`}\n                                   actionsToggle={renderActionsToggle}\n                                   items={actionsFor(row)}/>\n                )}\n                isRowSelected={({ row }) => row.id === selectedDesign?.id}\n            />\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs.panel.css\";\nimport {Alert, Card, CardBody} from \"@patternfly/react-core\";\nimport {DesignsService, DownloadService, useDesignsService, useDownloadService} from \"@app/services\";\nimport {Design, DesignsSearchCriteria, DesignsSearchResults, DesignsSort, Paging} from \"@app/models\";\nimport {ListWithToolbar} from \"@app/components\";\nimport {\n    DeleteDesignModal,\n    DesignList,\n    DesignsEmptyState,\n    DesignsEmptyStateFiltered,\n    DesignsToolbar,\n    ExportToRhosrData,\n    ExportToRhosrModal,\n    ImportFrom, RenameData, RenameModal\n} from \"@app/pages/components\";\nimport {Navigation, useNavigation} from \"@app/contexts/navigation\";\nimport {contentTypeForDesign, fileExtensionForDesign} from \"@app/utils\";\nimport {AlertVariant, useAlert} from \"@rhoas/app-services-ui-shared\";\n\n\nfunction convertToValidFilename(value: string): string {\n    return (value.replace(/[\\/|\\\\:*?\"<>]/g, \"\"));\n}\n\nexport type DesignsPanelProps = {\n    onDesignSelected: (design: Design | undefined) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n}\n\n\nexport const DesignsPanel: FunctionComponent<DesignsPanelProps> = ({onDesignSelected, onCreate, onImport}: DesignsPanelProps) => {\n    const [ isLoading, setLoading ] = useState(false);\n    const [ refresh, setRefresh ] = useState(1);\n    const [ isFiltered, setFiltered ] = useState(false);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<DesignsSearchCriteria>({\n        filterValue: \"\",\n        filterOn: \"name\"\n    });\n    const [ sort, setSort ] = useState<DesignsSort>({\n        by: \"name\",\n        direction: \"asc\"\n    });\n    const [ designs, setDesigns ] = useState<DesignsSearchResults>();\n    const [ designToDelete, setDesignToDelete ] = useState<Design>();\n    const [ isDeleteModalOpen, setDeleteModalOpen ] = useState(false);\n    const [ designToRegister, setDesignToRegister ] = useState<Design>();\n    const [ isRegisterModalOpen, setRegisterModalOpen ] = useState(false);\n    const [ designToRename, setDesignToRename ] = useState<Design>();\n    const [ isRenameModalOpen, setRenameModalOpen ] = useState(false);\n\n    const designsSvc: DesignsService = useDesignsService();\n    const downloadSvc: DownloadService = useDownloadService();\n    const nav: Navigation = useNavigation();\n    const { addAlert } = useAlert() || {};\n\n    const doRefresh = (): void => {\n        setRefresh(refresh + 1);\n    };\n\n    const onEditDesign = (design: Design): void => {\n        nav.navigateTo(`/designs/${design.id}/editor`);\n    };\n\n    const onRenameDesign = (design: Design): void => {\n        setDesignToRename(design);\n        setRenameModalOpen(true);\n    };\n\n    const doRenameDesign = (event: RenameData): void => {\n        designsSvc.renameDesign(designToRename?.id as string, event.name, event.summary).then(() => {\n            if (designToRename) {\n                designToRename.name = event.name;\n                designToRename.summary = event.summary;\n            }\n            setRenameModalOpen(false);\n            addAlert({\n                title: `Design '${event.name}' successfully renamed.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-renamed\"\n            });\n        }).catch(e => {\n            // TODO error handling\n        })\n    };\n\n    const onDeleteDesign = (design: Design): void => {\n        setDesignToDelete(design);\n        setDeleteModalOpen(true);\n    };\n\n    const onDeleteDesignConfirmed = (design: Design): void => {\n        designsSvc.deleteDesign(design.id).then(() => {\n            doRefresh();\n            addAlert({\n                title: `Design '${design.name}' successfully deleted.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-deleted\"\n            });\n        }).catch(error => {\n            console.error(error);\n            addAlert({\n                title: `Failed to delete design '${design.name}'.`,\n                variant: AlertVariant.danger,\n                dataTestId: \"toast-design-delete-error\"\n            });\n        });\n        setDeleteModalOpen(false);\n    };\n\n    const onRegisterDesign = (design: Design): void => {\n        setDesignToRegister(design);\n        setRegisterModalOpen(true);\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        addAlert({\n            title: `Design '${event.design.name}' successfully registered in Service Registry.`,\n            variant: AlertVariant.success,\n            dataTestId: \"toast-design-registered\"\n        });\n    };\n\n    const onDownloadDesign = (design: Design): void => {\n        designsSvc.getDesignContent(design.id).then(content => {\n            const filename: string = `${convertToValidFilename(design.name)}.${fileExtensionForDesign(design, content)}`;\n            const contentType: string = contentTypeForDesign(design, content);\n            const theContent: string = typeof content.data === \"object\" ? JSON.stringify(content.data, null, 4) : content.data as string;\n            downloadSvc.downloadToFS(design, theContent, contentType, filename);\n        });\n    };\n\n    const onCriteriaChange = (criteria: DesignsSearchCriteria): void =>  {\n        setCriteria(criteria);\n        setPaging({\n            page: 1,\n            pageSize: paging.pageSize\n        });\n        setFiltered(criteria.filterValue != undefined && criteria.filterValue.trim().length > 0);\n        doRefresh();\n    };\n\n    const onSortDesigns = (sort: DesignsSort): void => {\n        setSort(sort);\n        doRefresh();\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n        doRefresh();\n    };\n\n    useEffect(() => {\n        setLoading(true);\n        onDesignSelected(undefined);\n        designsSvc.searchDesigns(criteria, paging, sort).then(designs => {\n            console.debug(\"[DesignsPanel] Designs loaded: \", designs);\n            setDesigns(designs);\n            setLoading(false);\n        }).catch(error => {\n            // TODO need error handling\n            console.error(error);\n        });\n    }, [refresh]);\n\n    const emptyState: React.ReactNode = (\n        <DesignsEmptyState onCreate={onCreate} onImport={onImport} />\n    );\n\n    const emptyStateFiltered: React.ReactNode = (\n        <DesignsEmptyStateFiltered />\n    );\n\n    const toolbar: React.ReactNode = (\n        <DesignsToolbar designs={designs} criteria={criteria} paging={paging}\n                        onCreate={onCreate} onImport={onImport}\n                        onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange} />\n    );\n\n    return (\n        <React.Fragment>\n            <Card isSelectable={false}>\n                <CardBody className=\"panel-body\">\n                    <ListWithToolbar toolbar={toolbar}\n                                     emptyState={emptyState}\n                                     filteredEmptyState={emptyStateFiltered}\n                                     isLoading={isLoading}\n                                     isFiltered={isFiltered}\n                                     isEmpty={!designs || designs.count === 0}>\n                        <Alert className=\"panel-alert\" isInline variant=\"info\" title=\"About your data\" style={{ marginBottom: \"15px\"}}>\n                            <p>\n                                All designs are stored locally in your browser.  Clearing your browser cache or\n                                switching to a new browser <em>might</em> result in loss of data.  Make sure you save your\n                                work locally or in a Red Hat OpenShift Service Registry instance!  In the future your\n                                designs will be saved to a persistent server, stay tuned!\n                            </p>\n                        </Alert>\n                        <DesignList designs={designs as DesignsSearchResults}\n                                    sort={sort}\n                                    onSelect={onDesignSelected}\n                                    onSort={onSortDesigns}\n                                    onEdit={onEditDesign}\n                                    onRename={onRenameDesign}\n                                    onDownload={onDownloadDesign}\n                                    onRegister={onRegisterDesign}\n                                    onDelete={onDeleteDesign} />\n                    </ListWithToolbar>\n                </CardBody>\n            </Card>\n            <DeleteDesignModal design={designToDelete}\n                              isOpen={isDeleteModalOpen}\n                              onDelete={onDeleteDesignConfirmed}\n                              onDownload={onDownloadDesign}\n                              onCancel={() => setDeleteModalOpen(false)} />\n            <ExportToRhosrModal design={designToRegister as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n            <RenameModal design={designToRename}\n                         isOpen={isRenameModalOpen}\n                         onRename={doRenameDesign}\n                         onCancel={() => setRenameModalOpen(false)} />\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Dropdown, DropdownItem, DropdownSeparator, KebabToggle, MenuToggle} from \"@patternfly/react-core\";\n\nexport enum ImportFrom {\n    FILE,\n    URL,\n    RHOSR\n};\n\n/**\n * Properties\n */\nexport type ImportDropdownProps = {\n    variant: \"long\"|\"short\";\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * A control to display the Import dropdown on the main page (used to select how to import content\n * into the API Designer).\n */\nexport const ImportDropdown: FunctionComponent<ImportDropdownProps> = ({variant, onImport}: ImportDropdownProps) => {\n    const [isToggled, setToggled] = useState(false);\n\n    const onToggle = (): void => {\n        setToggled(!isToggled);\n    };\n\n    const menuToggle: React.ReactNode = (\n        <MenuToggle variant=\"secondary\" onClick={onToggle} isExpanded={isToggled}>{variant === \"short\" ? \"Import\" : \"Import a schema or API design\"}</MenuToggle>\n    );\n\n    const onMenuSelect: (event?: React.SyntheticEvent<HTMLDivElement>) => void = (event) => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setToggled(false);\n        switch (action) {\n            case \"action-file\":\n                onImport(ImportFrom.FILE);\n                return;\n            case \"action-url\":\n                onImport(ImportFrom.URL);\n                return;\n            case \"action-rhosr\":\n                onImport(ImportFrom.RHOSR);\n                return;\n        }\n    };\n\n    return (\n        <Dropdown\n            onSelect={onMenuSelect}\n            toggle={menuToggle}\n            isOpen={isToggled}\n            isPlain\n            dropdownItems={\n                [\n                    <DropdownItem key=\"action-file\" data-id=\"action-file\">Import from file</DropdownItem>,\n                    <DropdownItem key=\"action-url\" data-id=\"action-url\">Import from URL</DropdownItem>,\n                    <DropdownItem key=\"action-rhosr\" data-id=\"action-rhosr\">Import from Service Registry</DropdownItem>,\n                ]\n            }\n            position=\"right\"\n        />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    Title\n} from \"@patternfly/react-core\";\nimport {AddCircleOIcon} from \"@patternfly/react-icons\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateProps = {\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyState: FunctionComponent<DesignsEmptyStateProps> = ({onCreate, onImport}: DesignsEmptyStateProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No designs\n            </Title>\n            <EmptyStateBody>\n                Create and edit schema and API designs with the API Designer.  To get started,\n                create a new design or import one.\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={onCreate}>Create a schema or API design</Button>\n            <EmptyStateSecondaryActions>\n                <ImportDropdown  variant=\"long\" onImport={onImport} />\n            </EmptyStateSecondaryActions>\n        </EmptyState>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {EmptyState, EmptyStateBody, EmptyStateIcon, Title} from \"@patternfly/react-core\";\nimport {AddCircleOIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateFilteredProps = {\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyStateFiltered: FunctionComponent<DesignsEmptyStateFilteredProps> = ({}: DesignsEmptyStateFilteredProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No matching designs\n            </Title>\n            <EmptyStateBody>\n                No designs matched your filter criteria.  Trying changing your criteria and\n                searching again.\n            </EmptyStateBody>\n        </EmptyState>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {DesignsSearchCriteria, DesignsSearchResults, Paging} from \"@app/models\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n\n/**\n * Properties\n */\nexport type DesignsToolbarProps = {\n    criteria: DesignsSearchCriteria;\n    paging: Paging;\n    designs?: DesignsSearchResults;\n    onCriteriaChange: (criteria: DesignsSearchCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n\n/**\n * The toolbar to filter (and paginate) the collection of designs.\n */\nexport const DesignsToolbar: FunctionComponent<DesignsToolbarProps> = (\n    {criteria, paging, designs, onCriteriaChange, onPagingChange, onCreate, onImport}: DesignsToolbarProps) => {\n\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    };\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    };\n\n    const totalDesignCount = (): number => {\n        return designs?.count || 0;\n    };\n\n    return (\n        <Toolbar id=\"designs-toolbar\" className=\"designs-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter designs\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem>\n                    <Button variant=\"primary\" onClick={onCreate}>Create a schema or API design</Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                    <ImportDropdown variant=\"long\" onImport={onImport} />\n                </ToolbarItem>\n                <ToolbarItem className=\"design-paging-item\">\n                    <Pagination\n                        style={{padding: \"0\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalDesignCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"design-list-pagination\"\n                        className=\"design-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Alert,\n    Button, FileUpload, Form,\n    FormGroup,\n    Modal,\n    ModalVariant,\n    Select, SelectOption, SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, ContentTypes, CreateDesign, CreateDesignContent} from \"@app/models\";\nimport {If} from \"@app/components\";\nimport {ImportFrom, UrlUpload} from \"@app/pages/components\";\nimport {isJson, isProto, isWsdl, isXml, isXsd, isYaml, parseJson, parseYaml} from \"@app/utils\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\n\n\nexport type ImportDesignModalProps = {\n    importType: ImportFrom;\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nconst PLACEHOLDER_TYPE_OPTION: SelectOptionObject = {\n    // @ts-ignore\n    value: undefined,\n    label: \"Select a type...\",\n    toString: () => {\n        return \"Select a type...\";\n    },\n    compareTo(selectOption: any): boolean {\n        return selectOption === this;\n    }\n}\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        },\n        compareTo(selectOption: any): boolean {\n            return this.value === selectOption.value;\n        }\n    };\n});\n\n\ntype DetectionInfo = {\n    type?: string;\n    contentType?: string;\n    version?: string;\n    name?: string;\n    summary?: string;\n}\n\n\nexport const ImportDesignModal: FunctionComponent<ImportDesignModalProps> = ({importType, isOpen, onImport, onCancel}: ImportDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    const [designContent, setDesignContent] = useState<string>();\n    const [fileName, setFileName] = useState<string>();\n    const [url, setUrl] = useState<string>();\n\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState<string>();\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [contentType, setContentType] = useState<string>();\n\n    const onFileChange = (value: string | File, fname: string): void => {\n        setDesignContent(value as string);\n        setFileName(fname);\n    };\n\n    const onUrlChange = (value: string|undefined, url: string|undefined): void => {\n        setDesignContent(value);\n        setUrl(url);\n    };\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setTheType((selection as any).value);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        const context: DesignContext = importType === ImportFrom.FILE ? {\n            type: \"file\",\n            file: {\n                fileName: fileName as string\n            }\n        } : {\n            type: \"url\",\n            url: {\n                url: url as string\n            }\n        };\n        const cd: CreateDesign = {\n            type: type as string,\n            name,\n            summary,\n            context\n        };\n        const cdc: CreateDesignContent = {\n            contentType: contentType as string,\n            data: designContent\n        };\n\n        console.debug(\"[ImportDesignModal] Importing design: \", cd);\n        console.debug(\"[ImportDesignModal] Importing content-type: \", contentType);\n        onImport(cd, cdc);\n    };\n\n    const hasDesignContent = (): boolean => {\n        return designContent !== undefined && designContent.trim().length > 0;\n    };\n\n    const title = (): string => {\n        if (importType === ImportFrom.FILE) {\n            return \"Import from file\";\n        } else {\n            return \"Import from URL\";\n        }\n    };\n\n    const detectJsonOrYamlInfo = (contentObj: any, contentType: string): DetectionInfo => {\n        if (contentObj.openapi) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"3.0.2\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.swagger) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"2.0\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.asyncapi) {\n            return {\n                type: ArtifactTypes.ASYNCAPI,\n                contentType: contentType,\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.$schema) {\n            return {\n                type: ArtifactTypes.JSON,\n                contentType: contentType,\n                name: contentObj.title,\n                summary: contentObj.description\n            };\n        }\n\n        return {\n            type: ArtifactTypes.AVRO,\n            contentType: contentType,\n            name: contentObj.name\n        }\n    }\n\n    const detectXmlInfo = (content: string): DetectionInfo => {\n        let type: string = ArtifactTypes.XML;\n        if (isWsdl(content)) {\n            type = ArtifactTypes.WSDL;\n        } else if (isXsd(content)) {\n            type = ArtifactTypes.XSD;\n        }\n        return {\n            type,\n            contentType: ContentTypes.TEXT_XML\n        };\n    }\n\n    const detectProtoInfo = (): DetectionInfo => {\n        return {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            type: ArtifactTypes.PROTOBUF\n        };\n    }\n\n    // Tries to figure out the type and meta-data of the content by parsing it and looking\n    // for key indicators.\n    const detectInfo = (content: string): DetectionInfo => {\n        if (isJson(content)) {\n            return detectJsonOrYamlInfo(parseJson(content), ContentTypes.APPLICATION_JSON);\n        } else if (isYaml(content)) {\n            return detectJsonOrYamlInfo(parseYaml(content), ContentTypes.APPLICATION_YAML);\n        } else if (isXml(content)) {\n            return detectXmlInfo(content);\n        } else if (isProto(content)) {\n            return detectProtoInfo();\n        }\n        console.warn(\"[ImportDesignModal] Failed to detect the type of the content.\");\n        // Default: nothing detected\n        return {\n        };\n\n        // TODO handle parsing of protobuf\n        // TODO handle parsing of GraphQL\n    };\n\n    const setTheType = (newType: string|undefined): void => {\n        if (newType === undefined) {\n            setType(undefined);\n            setTypeSelection(undefined);\n        } else {\n            setType(newType);\n            // @ts-ignore (there really is a value on the option)\n            const newTypeSelection: SelectOptionObject = TYPE_OPTIONS.filter(option => option.value === newType)[0];\n            setTypeSelection(newTypeSelection);\n        }\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!designContent) {\n            valid = false;\n        }\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, designContent]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setDesignContent(undefined);\n        setName(\"\");\n        setSummary(\"\");\n        setFileName(undefined);\n        setTheType(undefined);\n    }, [isOpen]);\n\n    // Whenever the content changes (e.g. loaded from file) try to detect the\n    // type of the content.\n    useEffect(() => {\n        if (designContent && designContent.trim().length > 0) {\n            const info: DetectionInfo = detectInfo(designContent as string);\n            console.debug(\"[ImportDesignModal] Content detection: \", info);\n            console.debug(\"[ImportDesignModal] Version detected: \", info.version || \"\");\n\n            setTheType(info.type);\n            setVersion(info.version || \"\");\n            setName(info.name || \"\");\n            setSummary(info.summary || \"\");\n            setContentType(info.contentType);\n        } else {\n            console.debug(\"[ImportDesignModal] Content empty, resetting form fields.\");\n            setName(\"\");\n            setSummary(\"\");\n            setTheType(undefined);\n            setContentType(undefined);\n        }\n    }, [designContent]);\n\n    // Whenever the type changes to OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI && version === undefined) {\n            setVersion(\"3.0.2\");\n        }\n    }, [type]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title={title()}\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n                    Import\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <Alert isInline variant=\"warning\" title=\"Warning\" style={{marginBottom: \"15px\"}}>\n                <p>\n                    All new designs are stored locally in your browser. Clearing your browser cache or\n                    switching to a new browser <em>might</em> result in loss of data. Make sure you save your\n                    work locally or in a Red Hat OpenShift Service Registry instance!\n                </p>\n            </Alert>\n\n            <Form>\n                <If condition={importType === ImportFrom.FILE}>\n                    <FormGroup label=\"File\" isRequired={true} fieldId=\"import-design-file\">\n                        <FileUpload\n                            isRequired={true}\n                            id=\"design-text-file\"\n                            type=\"text\"\n                            value={designContent}\n                            filename={fileName}\n                            filenamePlaceholder=\"Drag and drop a file or upload one\"\n                            onChange={onFileChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={importType === ImportFrom.URL}>\n                    <FormGroup label=\"URL\" isRequired={true} fieldId=\"import-design-url\">\n                        <UrlUpload\n                            id=\"design-text-url\"\n                            urlPlaceholder=\"Enter a valid and accessible URL\"\n                            onChange={onUrlChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={hasDesignContent}>\n                    <FormGroup label=\"Type\" isRequired={true} fieldId=\"import-design-type\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select type\"\n                            onToggle={() => setTypeToggled(!isTypeToggled)}\n                            onSelect={(event, selection) => onTypeSelect(selection)}\n                            isOpen={isTypeToggled}\n                            selections={typeSelection}\n                            menuAppendTo=\"parent\"\n                        >\n                            {\n                                [\n                                    <SelectOption key={-1} value={PLACEHOLDER_TYPE_OPTION} isPlaceholder={true}/>,\n                                    ...TYPE_OPTIONS.map((to, index) => <SelectOption key={index} value={to}/>)\n                                ]\n                            }\n                        </Select>\n                    </FormGroup>\n                    <If condition={type === ArtifactTypes.OPENAPI}>\n                        <FormGroup label=\"Version\" isRequired={true} fieldId=\"import-design-version\">\n                            <Select\n                                variant={SelectVariant.single}\n                                aria-label=\"Select version\"\n                                onToggle={() => setVersionToggled(!isVersionToggled)}\n                                onSelect={(event, selection) => onVersionSelect(selection as string)}\n                                isOpen={isVersionToggled}\n                                selections={version}\n                                menuAppendTo=\"parent\"\n                            >\n                                <SelectOption key={1} value=\"3.0.2\"/>\n                                <SelectOption key={2} value=\"2.0\"/>\n                            </Select>\n                        </FormGroup>\n                    </If>\n                    <FormGroup label=\"Name\" isRequired={true} fieldId=\"import-design-name\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"import-design-name\"\n                            name=\"import-design-name\"\n                            aria-describedby=\"import-design-name-helper\"\n                            value={name}\n                            onChange={(value) => setName(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Summary\" fieldId=\"import-design-summary\">\n                        <TextArea\n                            type=\"text\"\n                            id=\"import-design-summary\"\n                            name=\"import-design-summary\"\n                            aria-describedby=\"import-design-summary-helper\"\n                            value={summary}\n                            onChange={(value) => setSummary(value)}\n                        />\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Button, Modal, ModalVariant} from \"@patternfly/react-core\";\nimport {CreateDesign, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {RhosrService, useRhosrService} from \"@app/services\";\nimport {IsLoading} from \"@app/components\";\nimport {ArtifactSelector} from \"@app/pages/components\";\n\n\nexport type ImportFromRhosrModalProps = {\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nexport const ImportFromRhosrModal: FunctionComponent<ImportFromRhosrModalProps> = ({isOpen, onImport, onCancel}: ImportFromRhosrModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [isLoading, setLoading] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [design, setDesign] = useState<CreateDesign>();\n    const [designContent, setDesignContent] = useState<CreateDesignContent>();\n\n    const rhosr: RhosrService = useRhosrService();\n\n    // Called when the user selects an artifact from the artifact selector.\n    const onArtifactSelected = (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        if (artifact === undefined) {\n            setDesign(undefined);\n            setDesignContent(undefined);\n        } else {\n            const cd: CreateDesign = {\n                type: artifact.type,\n                name: artifact.name || artifact.id,\n                summary: artifact.description || \"\",\n                context: {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: artifact.groupId as string,\n                        artifactId: artifact.id,\n                        version: version?.version as string\n                    }\n                }\n            };\n            setDesign(cd);\n            setDesignContent(content);\n        }\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        onImport(design as CreateDesign, designContent as CreateDesignContent);\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                setLoading(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[HomePage] Error getting registry list: \", error);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        let valid: boolean = true;\n        if (design === undefined) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [design, designContent]);\n\n    return (\n        <Modal\n            variant={ModalVariant.large}\n            title=\"Import from Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n                    Import\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <IsLoading condition={isLoading}>\n                <ArtifactSelector registries={registries} onSelected={onArtifactSelected} />\n            </IsLoading>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Template} from \"@app/models\";\nimport \"./template-item.css\";\nimport {PlusCircleIcon} from \"@patternfly/react-icons\";\n\nexport type TemplateItemProps = {\n    template: Template;\n    isSelected: boolean;\n    onSelect: (template: Template) => void;\n}\n\nexport const TemplateItem: FunctionComponent<TemplateItemProps> = ({template, isSelected, onSelect}: TemplateItemProps) => {\n    const onClick = (): void => {\n        if (!isSelected) {\n            onSelect(template);\n        }\n    };\n\n    return (\n        <div className={`template-item ${isSelected ? \"selected\" : \"not-selected\"}`} onClick={onClick}>\n            <div className=\"icon\">\n                <PlusCircleIcon />\n            </div>\n            <div className=\"name\">{template.name}</div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./url-upload.css\";\nimport {Button, Spinner, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {If, IsLoading} from \"@app/components\";\nimport {UrlService, useUrlService} from \"@app/services\";\n\n/**\n * Properties\n */\nexport type UrlUploadProps = {\n    id: string|\"url-upload\";\n    urlPlaceholder: string|\"\";\n    onChange: (value: string|undefined, url: string|undefined) => void;\n};\n\n/**\n * A control similar to the FileUpload control from patternfly that allows uploading from\n * a URL instead of a file.\n */\nexport const UrlUpload: FunctionComponent<UrlUploadProps> = ({id, urlPlaceholder, onChange}: UrlUploadProps) => {\n    const [url, setUrl] = useState<string>();\n    const [previewContent, setPreviewContent] = useState<string>();\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [downloadError, setDownloadError] = useState<string>();\n\n    const urlService: UrlService = useUrlService();\n\n    const onTextInputChange = (value: string): void => {\n        setUrl(value);\n    };\n\n    const hasUrl = (): boolean => {\n        return url != undefined && url.trim().length > 0;\n    };\n\n    const hasError = (): boolean => {\n        return downloadError != undefined && downloadError.trim().length > 0;\n    };\n\n    const onFetch = (): void => {\n        setLoading(true);\n        urlService.fetchUrlContent(url as string).then(content => {\n            setDownloadError(undefined);\n            setPreviewContent(content);\n            setLoading(false);\n            onChange(content, url);\n        }).catch(error => {\n            setDownloadError(error.message);\n            setLoading(false);\n        });\n    };\n\n    const onClear = (): void => {\n        setUrl(\"\");\n        setPreviewContent(\"\");\n        onChange(undefined, undefined);\n    };\n\n    const spinner: React.ReactNode = (\n        <div className=\"url-upload-loading\">\n            <Spinner size=\"md\" className=\"spinner\" />\n            <span className=\"spinner-message\">Loading URL content</span>\n        </div>\n    );\n\n    return (\n        <div className=\"url-upload\">\n            <div className=\"url-upload-flex\">\n                <div className=\"url-upload-url\">\n                    <TextInput value={url} type=\"text\" placeholder={urlPlaceholder}\n                               onChange={onTextInputChange} aria-label=\"url input\" />\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onFetch}>Fetch</Button>\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onClear}>Clear</Button>\n                </div>\n            </div>\n            <div className=\"url-upload-preview\">\n                <IsLoading condition={isLoading} loadingComponent={spinner}>\n                    <If condition={hasError}>\n                        <div className=\"url-upload-error\">\n                            <div>\n                                Error getting content from URL.\n                            </div>\n                            <div>\n                                {downloadError}\n                            </div>\n                        </div>\n                    </If>\n                    <If condition={!hasError()}>\n                        <TextArea value={previewContent} isReadOnly={true}></TextArea>\n                    </If>\n                </IsLoading>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./design-details-panel.css\";\nimport {Design} from \"@app/models\";\nimport {Flex, FlexItem, Form, FormGroup, Tab, Tabs, TabTitleText} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {DesignEvents, DesignHistory, DesignOriginLabel} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignDetailsPanelProps = {\n    design: Design | undefined;\n};\n\n/**\n * Details panel with metadata and history about a single selected design.\n */\nexport const DesignDetailsPanel: FunctionComponent<DesignDetailsPanelProps> = ({design}: DesignDetailsPanelProps) => {\n\n    const [activeTabKey, setActiveTabKey] = useState<string>(\"details\");\n\n    return (\n        <React.Fragment>\n            <Tabs\n                activeKey={activeTabKey}\n                onSelect={(event, eventKey) => {setActiveTabKey(eventKey as string)}}\n                aria-label=\"Design panel detail tabs\"\n            >\n                <Tab eventKey=\"details\" title={<TabTitleText>Details</TabTitleText>}>\n                    <div className=\"design-details-grid\">\n                        <div className=\"design-details-label\">Description</div>\n                        <div className=\"design-details-value\">{design?.summary || \"(A design without a description)\"}</div>\n\n                        <div className=\"design-details-label\">Type</div>\n                        <div className=\"design-details-value\">\n                            <ArtifactTypeIcon type={design?.type as string} isShowLabel={true} isShowIcon={false} />\n                        </div>\n\n                        <div className=\"design-details-label\">Time created</div>\n                        <div className=\"design-details-value\"><Moment date={design?.createdOn} format=\"MMMM DD, YYYY h:mma\" /></div>\n\n                        <div className=\"design-details-label\">Time updated</div>\n                        <div className=\"design-details-value\"><Moment date={design?.modifiedOn} format=\"MMMM DD, YYYY h:mma\" /></div>\n\n                        <div className=\"design-details-label\">Origin</div>\n                        <div className=\"design-details-value\">\n                            <DesignOriginLabel design={design} />\n                        </div>\n                    </div>\n                </Tab>\n                <Tab eventKey=\"events\" title={<TabTitleText>Events</TabTitleText>}>\n                    <DesignEvents design={design as Design} />\n                </Tab>\n                <Tab eventKey=\"history\" title={<TabTitleText>History</TabTitleText>}>\n                    <DesignHistory design={design as Design} />\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-history.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport Moment from \"react-moment\";\nimport {IfNotEmpty, IsLoading} from \"@app/components\";\nimport {DesignEventType} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignHistoryProps = {\n    design: Design;\n};\n\nexport const DesignHistory: FunctionComponent<DesignHistoryProps> = ({design}: DesignHistoryProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [events, setEvents] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setEvents(events);\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <IsLoading condition={isLoading}>\n            <IfNotEmpty collection={events}>\n                <div className=\"design-history\">\n                    {\n                        events?.map((event, idx) => (\n                            <React.Fragment key={idx}>\n                                <div key={`${idx}-type`} className=\"event-type\"><DesignEventType event={event} /></div>\n                                <div key={`${idx}-time`} className=\"event-time\"><Moment date={event.on} format=\"MMMM DD, YYYY h:mma\" /></div>\n                            </React.Fragment>\n                        ))\n                    }\n                </div>\n            </IfNotEmpty>\n        </IsLoading>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-events.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport Moment from \"react-moment\";\nimport {If, IfNotEmpty, IsLoading} from \"@app/components\";\nimport {DesignEventType, DesignOriginLabel} from \"@app/pages/components\";\nimport {hasOrigin} from \"@app/utils\";\nimport {Divider} from \"@patternfly/react-core\";\n\n\nexport type DesignEventsProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignEvents: FunctionComponent<DesignEventsProps> = ({design}: DesignEventsProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [exports, setExports] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    const originGroupId = (): string => {\n        return design?.origin.rhosr?.groupId || \"default\";\n    };\n    const originArtifactId = (): string => {\n        return design?.origin.rhosr?.artifactId || \"Unknown\";\n    };\n    const originVersion = (): string => {\n        return design?.origin.rhosr?.version || \"latest\";\n    };\n    const originFilename = (): string => {\n        return design?.origin.file?.fileName || \"\";\n    };\n    const originUrl = (): string => {\n        return design?.origin.url?.url || \"\";\n    };\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setExports(events?.filter(event => event.type === \"download\" || event.type === \"register\"));\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <React.Fragment>\n            <div className=\"design-events-origin\">\n                <div className=\"design-events-origin-label\">Origin</div>\n                <div className=\"design-events-origin-value\">\n                    <DesignOriginLabel design={design} />\n                </div>\n\n                <div className=\"design-events-origin-label\">Time created</div>\n                <div className=\"design-events-origin-value\"><Moment date={design?.createdOn} format=\"MMMM DD, YYYY h:mma\" /></div>\n\n                <If condition={hasOrigin(design, \"rhosr\")}>\n                    <div className=\"design-events-origin-label\">Group ID</div>\n                    <div className=\"design-events-origin-value\">{originGroupId()}</div>\n\n                    <div className=\"design-events-origin-label\">Artifact ID</div>\n                    <div className=\"design-events-origin-value\">{originArtifactId()}</div>\n\n                    <div className=\"design-events-origin-label\">Version</div>\n                    <div className=\"design-events-origin-value\">{originVersion()}</div>\n                </If>\n\n                <If condition={hasOrigin(design, \"file\")}>\n                    <div className=\"design-events-origin-label\">Filename</div>\n                    <div className=\"design-events-origin-value\">{originFilename()}</div>\n                </If>\n\n                <If condition={hasOrigin(design, \"url\")}>\n                    <div className=\"design-events-origin-label\">URL</div>\n                    <div className=\"design-events-origin-value\">{originUrl()}</div>\n                </If>\n            </div>\n            <Divider className=\"design-events-divider\" />\n            <IsLoading condition={isLoading}>\n                <div className=\"design-events-origin-exports\">\n                    <div className=\"design-events-origin-exports-label\">Exported to</div>\n                    <div></div>\n\n                    <IfNotEmpty collection={exports} emptyState={(\n                        <span>This design has never been exported.</span>\n                    )}>\n                        {\n                            exports?.map((event, idx) => (\n                                <React.Fragment key={idx}>\n                                    <div key={`${idx}-type`} className=\"design-events-origin-exports-item\"><DesignEventType event={event} variant=\"short\" /></div>\n                                    <div key={`${idx}-time`} className=\"design-events-origin-exports-time\"><Moment date={event.on} format=\"MMMM DD, YYYY h:mma\" /></div>\n                                </React.Fragment>\n                            ))\n                        }\n                    </IfNotEmpty>\n                </div>\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {DesignEvent} from \"@app/models\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\n\n\nexport type DesignEventTypeProps = {\n    event: DesignEvent;\n    variant?: \"long\" | \"short\";  // Default is \"long\"\n};\n\n\nexport const DesignEventType: FunctionComponent<DesignEventTypeProps> = ({event, variant}: DesignEventTypeProps) => {\n\n    const typeLabel = (): string => {\n        switch (event.type) {\n            case \"download\":\n                return variant === \"short\" ? \"Local file\" : \"Downloaded to local file system\";\n            case \"create\":\n                return variant === \"short\" ? \"New\" : \"Created new design\";\n            case \"import\":\n                return importTypeLabel();\n            case \"register\":\n                return variant === \"short\" ? \"Service Registry\" : \"Registered in Service Registry\";\n            case \"update\":\n                return variant === \"short\" ? \"Edited\" : \"Modified using the editor\";\n        }\n    };\n\n    const importTypeLabel = (): string => {\n        const context: DesignContext = event.data.context;\n        switch (context.type) {\n            case \"file\":\n                return variant === \"short\" ? \"Local file\" : `Imported from local file ${context.file?.fileName}`;\n            case \"rhosr\":\n                return variant === \"short\" ? \"Service Registry\" : `Imported from Service Registry artifact (${context.rhosr?.groupId||'default'}/${context.rhosr?.artifactId}/${context.rhosr?.version||'latest'})`;\n            case \"url\":\n                return variant === \"short\" ? \"URL\" : `Imported from URL ${context.url?.url}`\n        }\n        return \"Imported content\";\n    };\n\n    return (\n        <span>{typeLabel()}</span>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Design} from \"@app/models\";\nimport {Label} from \"@patternfly/react-core\";\nimport {hasOrigin} from \"@app/utils\";\n\n\nexport type DesignOriginLabelProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignOriginLabel: FunctionComponent<DesignOriginLabelProps> = ({design}: DesignOriginLabelProps) => {\n\n    const label = (): string => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"Local file\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"Service Registry\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"URL\";\n            } else if (hasOrigin(design, \"create\")) {\n                return \"New design\";\n            }\n        }\n        return \"n/a\";\n    };\n\n    return (\n        <Label color=\"blue\">{label()}</Label>\n    );\n};\n","import { useRhosrService } from \"@app/services\";\nimport { Button, Dropdown, DropdownItem, DropdownToggle, Form, FormGroup, Modal, ModalVariant, Popover, TextInput } from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport React, { useEffect, useState } from \"react\";\n\nexport interface DryRunArgs {\n\tregistry: Registry\n\tgroup?: string\n\tartifactId: string\n}\n\nexport interface RegistryDryRunFormModalProps {\n\tisOpen?: boolean;\n\tonCancel: () => void;\n\tonSubmit: (registry: Registry, groupId: string | undefined, artifactId: string) => void;\n}\n\ntype ValidatedValue = \"error\" | \"default\" | \"warning\" | \"success\" | undefined;\n\nconst initialFormState = {\n\thasErrors: false,\n\tgroupValue: {\n\t\tvalue: '',\n\t\tvalidated: 'default' as ValidatedValue,\n\t\terrorMessage: \"\"\n\t},\n\tartifactIdValue: {\n\t\tvalue: '',\n\t\tvalidated: 'default' as ValidatedValue,\n\t\terrorMessage: \"\"\n\t}\n}\n\nexport const RegistryDryRunFormModal: React.FunctionComponent<RegistryDryRunFormModalProps> = (props) => {\n\tconst [registryList, setRegistryList] = useState<Registry[]>([]);\n\tconst [registryValue, setRegistryValue] = useState<Registry>();\n\tconst [formState, setFormState] = useState(initialFormState);\n\n\tconst [isRegistryInstanceDropdownOpen, setIsRegistryInstanceDropdownOpen] = useState(false);\n\n\tconst rhosrService = useRhosrService();\n\n\tuseEffect(() => {\n\t\trhosrService.getRegistries().then((results) => {\n\t\t\tsetRegistryList(results);\n\t\t\tsetRegistryValue(results[0]);\n\t\t}).catch((error) => {\n\t\t\tconsole.error(\"[RegistryDryRunForm] Error fetching available registries: \", error);\n\t\t});\n\t}, []);\n\n\tconst onToggleRegistryInstanceDropdown = (isOpen: boolean) => {\n\t\tsetIsRegistryInstanceDropdownOpen(isOpen);\n\t};\n\n\tconst onSelectRegistryInstance: (event?: React.SyntheticEvent<HTMLDivElement>) => void = (event) => {\n\t\t// @ts-ignore\n\t\tconst registryId: string = event?.target.attributes[\"data-id\"].value;\n\t\trhosrService.getRegistry(registryId).then(setRegistryValue).catch(error => {\n\t\t\tconsole.log(`[RegistryDryRunForm] Error fetching registry with ID ${registryId} registries:`, error);\n\t\t});\n\t\tsetIsRegistryInstanceDropdownOpen(false);\n\t}\n\n\tconst registryDropdownItems = (registries: Registry[]) => registries.map((registry => <DropdownItem key={'registry-' + registry.id} data-id={registry.id}>{registry.name}</DropdownItem>));\n\n\tconst setGroupValue = (val: string) => {\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\tgroupValue: {\n\t\t\t\t...formState.groupValue,\n\t\t\t\tvalidated: 'default',\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t})\n\t}\n\n\tconst setArtifactIdValue = (val: string) => {\n\t\tconst hasErrors = !val;\n\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\thasErrors,\n\t\t\tartifactIdValue: {\n\t\t\t\t...formState.artifactIdValue,\n\t\t\t\tvalidated: hasErrors ? 'error' : 'default',\n\t\t\t\terrorMessage: 'Artifact ID is a required field.',\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t});\n\t}\n\n\treturn (\n\t\t<Modal\n\t\t\tvariant={ModalVariant.medium}\n\t\t\ttitle=\"Registration dry-run\"\n\t\t\tisOpen={props.isOpen}\n\t\t\tonClose={props.onCancel}\n\t\t\tactions={[\n\t\t\t\t<Button key=\"confirm\" variant=\"primary\" onClick={() => props.onSubmit(\n\t\t\t\t\tregistryValue as Registry,\n\t\t\t\t\tformState.groupValue.value,\n\t\t\t\t\tformState.artifactIdValue.value\n\t\t\t\t)}>\n\t\t\t\t\tRun dry-run\n\t\t\t\t</Button>,\n\t\t\t\t<Button key=\"cancel\" variant=\"link\" onClick={props.onCancel}>\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t]}\n\t\t>\n\t\t\t<Form>\n\t\t\t\t<FormGroup\n\t\t\t\t\tlabel=\"Registry instance\"\n\t\t\t\t\tlabelIcon={\n\t\t\t\t\t\t<Popover\n\t\t\t\t\t\t\theaderContent=\"TODO title\"\n\t\t\t\t\t\t\tbodyContent=\"TODO body\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\taria-label=\"More info for Registry instance field\"\n\t\t\t\t\t\t\t\tonClick={e => e.preventDefault()}\n\t\t\t\t\t\t\t\taria-describedby=\"modal-with-form-form-registry-instance\"\n\t\t\t\t\t\t\t\tclassName=\"pf-c-form__group-label-help\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<HelpIcon noVerticalAlign />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</Popover>\n\t\t\t\t\t}\n\t\t\t\t\tfieldId=\"modal-with-form-form-registry-instance\"\n\t\t\t\t>\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tonSelect={onSelectRegistryInstance}\n\t\t\t\t\t\tmenuAppendTo=\"parent\"\n\t\t\t\t\t\ttoggle={\n\t\t\t\t\t\t\t<DropdownToggle id=\"toggle-basic\" onToggle={onToggleRegistryInstanceDropdown}>\n\t\t\t\t\t\t\t\t{registryValue ? registryValue.name : 'Select a Registry instance'}\n\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tisOpen={isRegistryInstanceDropdownOpen}\n\t\t\t\t\t\tdropdownItems={registryDropdownItems(registryList)}\n\t\t\t\t\t/>\n\t\t\t\t</FormGroup>\n\t\t\t\t<FormGroup\n\t\t\t\t\tlabel=\"Group\"\n\t\t\t\t\tvalidated={formState.groupValue.validated}\n\t\t\t\t\thelperTextInvalid={formState.groupValue.errorMessage}\n\t\t\t\t\tlabelIcon={\n\t\t\t\t\t\t<Popover\n\t\t\t\t\t\t\theaderContent=\"TODO title\"\n\t\t\t\t\t\t\tbodyContent=\"TODO body\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\taria-label=\"More info for Group field\"\n\t\t\t\t\t\t\t\tonClick={e => e.preventDefault()}\n\t\t\t\t\t\t\t\taria-describedby=\"modal-with-form-form-group\"\n\t\t\t\t\t\t\t\tclassName=\"pf-c-form__group-label-help\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<HelpIcon noVerticalAlign />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</Popover>\n\t\t\t\t\t}\n\t\t\t\t\tfieldId=\"modal-with-form-form-group\"\n\t\t\t\t>\n\t\t\t\t\t<TextInput value={formState.groupValue.value} onChange={setGroupValue} />\n\t\t\t\t</FormGroup>\n\t\t\t\t<FormGroup\n\t\t\t\t\tlabel=\"Artifact ID\"\n\t\t\t\t\tvalidated={formState.artifactIdValue.validated}\n\t\t\t\t\thelperTextInvalid={formState.artifactIdValue.errorMessage}\n\t\t\t\t\tlabelIcon={\n\t\t\t\t\t\t<Popover\n\t\t\t\t\t\t\theaderContent=\"TODO title\"\n\t\t\t\t\t\t\tbodyContent=\"TODO body\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\taria-label=\"More info for Artifact ID field\"\n\t\t\t\t\t\t\t\tonClick={e => e.preventDefault()}\n\t\t\t\t\t\t\t\taria-describedby=\"modal-with-form-form-artifactId\"\n\t\t\t\t\t\t\t\tclassName=\"pf-c-form__group-label-help\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<HelpIcon noVerticalAlign />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</Popover>\n\t\t\t\t\t}\n\t\t\t\t\tisRequired\n\t\t\t\t\tfieldId=\"modal-with-form-form-artifactId\"\n\t\t\t\t>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tid=\"modal-with-form-form-artifactId\"\n\t\t\t\t\t\tvalue={formState.artifactIdValue.value}\n\t\t\t\t\t\tonChange={setArtifactIdValue} />\n\t\t\t\t</FormGroup>\n\t\t\t</Form>\n\t\t</Modal>\n\t);\n}","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./editor-context.css\";\nimport {ArtifactTypes, Design} from \"@app/models\";\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Dropdown,\n    DropdownItem, DropdownSeparator,\n    Gallery,\n    GalleryItem,\n    MenuToggle,\n    Text,\n    TextContent\n} from \"@patternfly/react-core\";\nimport {If, NavLink, ToggleIcon} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {ExportToRhosrData, ExportToRhosrModal} from \"@app/pages/components\";\nimport {LocalStorageService, useLocalStorageService} from \"@app/services\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {RegistryDryRunFormModal} from \"./dry-run.modal\";\nimport {DryRunErrorResponse} from \"@app/pages/editor\";\nimport {AlertVariant, useAlert} from \"@rhoas/app-services-ui-shared\";\n\n/**\n * Properties\n */\nexport type EditorContextProps = {\n    design: Design;\n    dirty: boolean;\n    artifactContent: string;\n    onSave: () => void;\n    onFormat: () => void;\n    onRename: () => void;\n    onExpandDryRunCausesPanel: (error: DryRunErrorResponse) => void;\n    onRegistrationDryRun: (registry: Registry, group: string | undefined, artifactId: string) => void;\n    isPanelOpen?: boolean;\n}\n\n/**\n * The context of the design when editing a design on the editor page.\n */\nexport const EditorContext: FunctionComponent<EditorContextProps> = (\n    { design, dirty, onSave, onRegistrationDryRun, onFormat, onRename, onExpandDryRunCausesPanel }: EditorContextProps) => {\n\n    const lss: LocalStorageService = useLocalStorageService();\n\n    const [designContext, setDesignContext] = useState<DesignContext>();\n    const [isActionMenuToggled, setActionMenuToggled] = useState(false);\n    const [isExpanded, setExpanded] = useState(lss.getConfigProperty(\"editor-context.isExpanded\", \"false\") === \"true\");\n    const [isRegisterModalOpen, setRegisterModalOpen] = useState(false);\n    const [isDryRunModalOpen, setIsDryRunModalOpen] = useState(false);\n\n    const { addAlert } = useAlert() || {};\n\n    const onActionMenuToggle = (): void => {\n        setActionMenuToggled(!isActionMenuToggled);\n    };\n\n    const onToggleExpand = (): void => {\n        const newExpanded: boolean = !isExpanded;\n        lss.setConfigProperty(\"editor-context.isExpanded\", \"\" + newExpanded);\n        setExpanded(newExpanded);\n    };\n\n    const actionMenuToggle: React.ReactNode = (\n        <MenuToggle variant=\"secondary\" onClick={onActionMenuToggle} isExpanded={isActionMenuToggled}>Actions</MenuToggle>\n    );\n\n    const onActionMenuSelect = (event?: React.SyntheticEvent<HTMLDivElement>): void => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setActionMenuToggled(false);\n        switch (action) {\n            case \"action-compare\":\n                return;\n            case \"action-export-to-rhosr\":\n                setRegisterModalOpen(true);\n                return;\n            case \"action-format\":\n                onFormat();\n                return;\n            case \"action-rename\":\n                onRename();\n                return;\n        }\n    };\n\n    const typeForDisplay = (): string => {\n        switch (design.type) {\n            case ArtifactTypes.OPENAPI:\n                return \"OpenAPI\";\n            case ArtifactTypes.ASYNCAPI:\n                return \"AsyncAPI\";\n            case ArtifactTypes.AVRO:\n                return \"Apache Avro\";\n            case ArtifactTypes.JSON:\n                return \"JSON Schema\";\n            case ArtifactTypes.PROTOBUF:\n                return \"Google Protocol Buffers\";\n        }\n        return \"N/A\";\n    };\n\n    const hasRhosrContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"rhosr\";\n    };\n\n    const hasFileContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"file\";\n    };\n\n    const hasUrlContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"url\";\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        addAlert({\n            title: `Design '${event.design.name}' successfully registered in Service Registry.`,\n            variant: AlertVariant.success,\n            dataTestId: \"toast-design-registered\"\n        });\n    };\n\n    useEffect(() => {\n        if (design) {\n            const context: DesignContext|undefined = design.origin;\n            setDesignContext(context);\n        }\n    }, [design]);\n\n\n    const menuItems: any[] = [\n        <DropdownItem key=\"action-rename\" data-id=\"action-rename\">Rename</DropdownItem>,\n        <DropdownItem key=\"action-compare\" data-id=\"action-compare\">Show changes</DropdownItem>,\n        <DropdownSeparator key=\"action-separator-1\" />,\n        <DropdownItem key=\"action-export-to-rhosr\" data-id=\"action-export-to-rhosr\">Export to Service Registry</DropdownItem>,\n        <DropdownItem key=\"action-validate\" data-id=\"action-validate\" onClick={() => setIsDryRunModalOpen(true)}>Registration dry-run</DropdownItem>,\n    ];\n\n    if ([ArtifactTypes.AVRO, ArtifactTypes.JSON].includes(design.type)) {\n        menuItems.push(\n            <DropdownSeparator key=\"action-separator-2\" />\n        );\n        menuItems.push(\n            <DropdownItem key=\"action-format\" data-id=\"action-format\">Format content</DropdownItem>,\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <RegistryDryRunFormModal isOpen={isDryRunModalOpen} onCancel={() => setIsDryRunModalOpen(false)} onSubmit={(...params) => {\n                onRegistrationDryRun(...params);\n                setIsDryRunModalOpen(false);\n            }} />\n            <div className=\"editor-context\">\n                <div className=\"editor-context-breadcrumbs\">\n                    <Breadcrumb style={{ marginBottom: \"10px\" }}>\n                        <BreadcrumbItem component=\"button\">\n                            <NavLink location=\"/\">Schema and API Designs</NavLink>\n                        </BreadcrumbItem>\n                        <BreadcrumbItem isActive={true}>{design?.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                </div>\n                <div className=\"editor-context-last-modified\">\n                    <span>Last modified:</span>\n                    <Moment date={design.modifiedOn} fromNow={true} />\n                </div>\n                <div className=\"editor-context-actions\">\n                    <Dropdown\n                        onSelect={onActionMenuSelect}\n                        toggle={actionMenuToggle}\n                        style={{ zIndex: 1000 }}\n                        isOpen={isActionMenuToggled}\n                        isPlain\n                        dropdownItems={menuItems}\n                    />\n                </div>\n                <div className=\"editor-context-save\">\n                    <Button className=\"btn-save\" variant=\"primary\" onClick={onSave} isDisabled={!dirty}>Save</Button>\n                </div>\n                <div className=\"editor-context-toggle\">\n                    <Button className=\"btn-toggle\" variant=\"plain\" onClick={onToggleExpand}>\n                        <ToggleIcon expanded={isExpanded} onClick={() => { setExpanded(!isExpanded) }} />\n                    </Button>\n                </div>\n            </div>\n            <If condition={isExpanded}>\n                <div className=\"editor-context-details\">\n                    <TextContent>\n                        <Text component=\"h1\" className=\"title\">{design?.name}</Text>\n                        <Text component=\"p\" className=\"summary\">{design?.summary || \"(Design or schema with no summary)\"}</Text>\n                    </TextContent>\n                    <Gallery className=\"metadata\" minWidths={{ default: \"300px\" }}>\n                        <GalleryItem className=\"md-property\">\n                            <span className=\"md-name\">Type</span>\n                            <span className=\"md-value\">{typeForDisplay()}</span>\n                        </GalleryItem>\n                        <If condition={hasRhosrContext}>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">Group ID</span>\n                                <span className=\"md-value\">{designContext?.rhosr?.groupId || \"default\"}</span>\n                            </GalleryItem>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">Artifact ID</span>\n                                <span className=\"md-value\">{designContext?.rhosr?.artifactId}</span>\n                            </GalleryItem>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">Version</span>\n                                <span className=\"md-value\">{designContext?.rhosr?.version || \"latest\"}</span>\n                            </GalleryItem>\n                        </If>\n                        <If condition={hasFileContext}>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">Filename</span>\n                                <span className=\"md-value\">{designContext?.file?.fileName}</span>\n                            </GalleryItem>\n                        </If>\n                        <If condition={hasUrlContext}>\n                            <GalleryItem className=\"md-property\">\n                                <span className=\"md-name\">URL</span>\n                                <span className=\"md-value\">{designContext?.url?.url}</span>\n                            </GalleryItem>\n                        </If>\n                    </Gallery>\n                </div>\n            </If>\n            <ExportToRhosrModal design={design as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, SelectVariant, Spinner, TextInput} from \"@patternfly/react-core\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    DesignsService,\n    RhosrInstanceService,\n    RhosrInstanceServiceFactory,\n    RhosrService,\n    useDesignsService,\n    useRhosrInstanceServiceFactory,\n    useRhosrService\n} from \"@app/services\";\nimport {If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {CreateOrUpdateArtifactData} from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\nexport type ExportToRhosrData = {\n    design: Design;\n    context: DesignContext;\n};\n\nexport type ExportToRhosrModalProps = {\n    design: Design;\n    isOpen: boolean | undefined;\n    onExported: (event: ExportToRhosrData) => void;\n    onCancel: () => void;\n}\n\n\nexport const ExportToRhosrModal: FunctionComponent<ExportToRhosrModalProps> = (\n    {design, isOpen, onExported, onCancel}: ExportToRhosrModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [isExporting, setExporting] = useState(false);\n    const [isLoadingRegistries, setLoadingRegistries] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [registry, setRegistry] = useState<Registry>();\n    const [group, setGroup] = useState<string>();\n    const [artifactId, setArtifactId] = useState<string>();\n    const [version, setVersion] = useState<string>();\n    const [rhosrInstance, setRhosrInstance] = useState<RhosrInstanceService>();\n\n    const designs: DesignsService = useDesignsService();\n    const rhosr: RhosrService = useRhosrService();\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    // Called when the user clicks \"export\"\n    const doExport = () => {\n        setExporting(true);\n        designs.getDesignContent(design.id).then(content => {\n            const data: CreateOrUpdateArtifactData = {\n                type: design.type,\n                groupId: group,\n                id: artifactId,\n                version: version,\n                content: content.data,\n                contentType: content.contentType\n            };\n            rhosrInstance?.createOrUpdateArtifact(data).then(amd => {\n                const context: DesignContext = {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: amd.groupId as string,\n                        artifactId: amd.id,\n                        version: amd.version\n                    }\n                };\n                const data: ExportToRhosrData = {\n                    design,\n                    context\n                };\n\n                const event: DesignEvent = {\n                    id: design.id,\n                    type: \"register\",\n                    on: new Date(),\n                    data: context.rhosr\n                };\n\n                // Create an event (add to the design's history).\n                designs.createEvent(event).then(() => {\n                    setExporting(false);\n                    onExported(data);\n                }).catch(error => {\n                    // TODO error handling\n                });\n            }).catch(error => {\n                // TODO error handling\n            });\n        }).catch(error => {\n            // TODO error handling\n        });\n    };\n\n    const onRegistrySelect = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setLoadingRegistries(true);\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                if (registries && registries.length > 0) {\n                    setRegistry(registries[0]);\n                }\n                setLoadingRegistries(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[HomePage] Error getting registry list: \", error);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        if (design && design.origin && design.origin.type === \"rhosr\") {\n            const context: DesignContext = design.origin;\n            setGroup(context.rhosr?.groupId);\n            setArtifactId(context.rhosr?.artifactId);\n            setVersion(context.rhosr?.version);\n        } else {\n            setGroup(undefined);\n            setArtifactId(undefined);\n            setVersion(undefined);\n        }\n    }, [design]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!registry) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [registry, group, artifactId, version]);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Export to Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"export\" variant=\"primary\" isDisabled={!isValid || isExporting} onClick={doExport}>\n                    <If condition={isExporting}>\n                        <Spinner size=\"md\" className=\"export-spinner\" />\n                    </If>\n                    Export\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <IsLoading condition={isLoadingRegistries}>\n                <Form>\n                    <FormGroup label=\"Registry Instance\" isRequired={true} fieldId=\"export-registry-instance\">\n                        <ObjectSelect value={registry} items={registries}\n                                      onSelect={onRegistrySelect}\n                                      variant={SelectVariant.typeahead}\n                                      menuAppendTo=\"parent\"\n                                      itemToString={item => item.name} />\n                    </FormGroup>\n                    <FormGroup label=\"Group\" isRequired={false} fieldId=\"export-group\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-group\"\n                            name=\"export-group\"\n                            placeholder=\"Enter group ID (optional) or leave blank for default group\"\n                            aria-describedby=\"export-group-helper\"\n                            value={group}\n                            onChange={(value) => setGroup(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Artifact Id\" isRequired={false} fieldId=\"export-artifact-id\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-artifact-id\"\n                            name=\"export-artifact-id\"\n                            placeholder=\"Enter artifact ID (optional) or leave blank for generated ID\"\n                            aria-describedby=\"export-artifact-id-helper\"\n                            value={artifactId}\n                            onChange={(value) => setArtifactId(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Version\" isRequired={false} fieldId=\"export-version\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-version\"\n                            name=\"export-version\"\n                            placeholder=\"Enter version (optional) or leave blank for generated version #\"\n                            aria-describedby=\"export-version-helper\"\n                            value={version}\n                            onChange={(value) => setVersion(value)}\n                        />\n                    </FormGroup>\n                </Form>\n            </IsLoading>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {Design} from \"@app/models\";\n\nexport type RenameData = {\n    name: string;\n    summary: string;\n};\n\nexport type RenameModalProps = {\n    design: Design|undefined;\n    isOpen: boolean | undefined;\n    onRename: (event: RenameData) => void;\n    onCancel: () => void;\n}\n\n\nexport const RenameModal: FunctionComponent<RenameModalProps> = (\n    {design, isOpen, onRename, onCancel}: RenameModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState<string>();\n    const [summary, setSummary] = useState<string>();\n\n    // Called when the user clicks \"edit\"\n    const doRename = () => {\n        onRename({\n            name: name as string,\n            summary: summary as string\n        });\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setName(design?.name);\n            setSummary(design?.summary);\n        }\n    }, [isOpen]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Rename design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"edit\" variant=\"primary\" isDisabled={!isValid} onClick={doRename}>\n                    Rename\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"edit-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"edit-name\"\n                        name=\"edit-name\"\n                        placeholder=\"Enter new name for design\"\n                        aria-describedby=\"edit-name-helper\"\n                        value={name}\n                        onChange={(value) => setName(value)}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Summary\" fieldId=\"edit-summary\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"edit-summary\"\n                        name=\"edit-summary\"\n                        aria-describedby=\"edit-summary-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value)}}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    )\n};\n","import { Auth, useAuth } from \"@rhoas/app-services-ui-shared\";\nimport {\n    ArtifactMetaData,\n    ArtifactSearchResults,\n    ContentTypes,\n    CreateArtifactData,\n    CreateVersionData,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedVersion,\n    VersionMetaData\n} from \"@app/models\";\nimport { createEndpoint, createHref, createOptions, httpGet, httpPut, httpPostWithReturn } from \"@app/utils/rest.utils\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { isJson, isXml, isYaml } from \"@app/utils\";\nimport { CreateOrUpdateArtifactData } from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\n\n/**\n * Determines the content type of the given content.\n * @param type\n * @param content\n */\nfunction determineContentType(type: string, content: string): string {\n    switch (type) {\n        case \"PROTOBUF\":\n            return ContentTypes.APPLICATION_PROTOBUF;\n        case \"WSDL\":\n        case \"XSD\":\n        case \"XML\":\n            return ContentTypes.APPLICATION_XML;\n        case \"GRAPHQL\":\n            return ContentTypes.APPLICATION_GRAPHQL;\n    }\n    if (isJson(content)) {\n        return ContentTypes.APPLICATION_JSON;\n    } else if (isXml(content)) {\n        return ContentTypes.APPLICATION_XML;\n    } else if (isYaml(content)) {\n        return ContentTypes.APPLICATION_YAML;\n    } else {\n        return \"application/octet-stream\";\n    }\n}\n\n\nfunction normalizeGroupId(groupId: string | undefined): string {\n    return groupId || \"default\";\n}\n\n\nasync function createArtifact(auth: Auth, basePath: string, data: CreateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts\", { groupId: data.groupId });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function createOrUpdateArtifact(auth: Auth, basePath: string, data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath,\n        \"/groups/:groupId/artifacts\",\n        { groupId: data.groupId || \"default\" },\n        { ifExists: \"UPDATE\" }\n    );\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    if (data.version) {\n        headers[\"X-Registry-Version\"] = data.version;\n    }\n    headers[\"Content-Type\"] = data.contentType;\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n};\n\n\nasync function createArtifactVersion(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId: groupId || \"default\",\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, VersionMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function getArtifacts(auth: Auth, basePath: string, criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults> {\n    console.debug(\"[RhosrInstanceService] Getting artifacts: \", criteria, paging);\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const start: number = (paging.page - 1) * paging.pageSize;\n    const end: number = start + paging.pageSize;\n    const queryParams: any = {\n        limit: end,\n        offset: start,\n        order: criteria.sortAscending ? \"asc\" : \"desc\",\n        orderby: \"name\"\n    };\n    if (criteria.value) {\n        if (criteria.type == \"everything\") {\n            queryParams[\"name\"] = criteria.value;\n            queryParams[\"description\"] = criteria.value;\n            queryParams[\"labels\"] = criteria.value;\n        } else {\n            queryParams[criteria.type] = criteria.value;\n        }\n    }\n    const endpoint: string = createEndpoint(basePath, \"/search/artifacts\", {}, queryParams);\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<ArtifactSearchResults>(endpoint, createOptions(headers), (data) => {\n        const results: ArtifactSearchResults = {\n            artifacts: data.artifacts,\n            count: data.count,\n            page: paging.page,\n            pageSize: paging.pageSize\n        };\n        return results;\n    });\n}\n\n\nasync function getArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, version: string): Promise<string> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    let endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions/:version\", {\n        groupId,\n        artifactId,\n        version\n    });\n    const headers: any = {\n        \"Accept\": \"*\",\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (version === \"latest\") {\n        endpoint = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId\", { groupId, artifactId });\n    }\n\n    const options: any = createOptions(headers);\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\nasync function getArtifactVersions(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Getting the list of versions for artifact: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId,\n        artifactId\n    }, {\n        limit: 500,\n        offset: 0\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<SearchedVersion[]>(endpoint, createOptions(headers), (data) => {\n        return data.versions;\n    });\n}\n\nasync function testUpdateArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, content: string): Promise<void> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Testing updating of artifact content: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/test\", {\n        groupId,\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpPut<any>(endpoint, content, createOptions(headers));\n}\n\n\n/**\n * The RHOSR Instance service interface.\n */\nexport interface RhosrInstanceService {\n    createArtifact(data: CreateArtifactData): Promise<ArtifactMetaData>;\n    createArtifactVersion(groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData>;\n    createOrUpdateArtifact(data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData>;\n    getArtifacts(criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults>;\n    getArtifactContent(groupId: string | undefined, artifactId: string, version: string): Promise<string>;\n    getArtifactVersions(groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]>;\n    testUpdateArtifactContent(groupId: string | undefined, artifactId: string, content: string): Promise<void>;\n}\n\n/**\n * Factory for creating RHOSR instance services.\n */\nexport interface RhosrInstanceServiceFactory {\n    createFor(registry: Registry): RhosrInstanceService;\n}\n\n\n/**\n * React hook to get the RHOSR instance service.\n */\nexport const useRhosrInstanceServiceFactory: () => RhosrInstanceServiceFactory = (): RhosrInstanceServiceFactory => {\n    const auth: Auth = useAuth();\n\n    return {\n        createFor: (registry) => {\n            const instanceUrl: string = createHref(registry.registryUrl as string, \"/apis/registry/v2\");\n            return {\n                createArtifact: (data) => createArtifact(auth, instanceUrl, data),\n                createArtifactVersion: (groupId, artifactId, data) => createArtifactVersion(auth, instanceUrl, groupId, artifactId, data),\n                createOrUpdateArtifact: (data: CreateOrUpdateArtifactData) => createOrUpdateArtifact(auth, instanceUrl, data),\n                getArtifacts: (criteria, paging) => getArtifacts(auth, instanceUrl, criteria, paging),\n                getArtifactContent: (groupId, artifactId, version) => getArtifactContent(auth, instanceUrl, groupId, artifactId, version),\n                getArtifactVersions: (groupId, artifactId) => getArtifactVersions(auth, instanceUrl, groupId, artifactId),\n                testUpdateArtifactContent: (groupId, artifactId, content) => testUpdateArtifactContent(auth, instanceUrl, groupId, artifactId, content)\n\n            };\n        }\n    };\n};\n","import {\n    CreateDesign,\n    CreateDesignContent,\n    Design,\n    DesignContent,\n    DesignEvent,\n    DesignsSearchCriteria,\n    DesignsSearchResults,\n    DesignsSort,\n    Paging\n} from \"@app/models\";\nimport Dexie from \"dexie\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {cloneObject} from \"@app/utils\";\n\n\nconst db = new Dexie(\"designsDB\");\ndb.version(4).stores({\n    designs: \"++id, type, name, createdOn, modifiedOn\", // Primary key and indexed props\n    content: \"++id\",\n    events: \"++eventId, id, type, on\"\n});\n\n\nasync function createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design> {\n    const id: string = uuidv4();\n    const newDesign: Design = {\n        id,\n        name: cd.name,\n        summary: cd.summary,\n        type: cd.type,\n        createdOn: new Date(),\n        modifiedOn: new Date(),\n        origin: cloneObject(cd.context)\n    };\n    const newDesignContent: DesignContent = {\n        id,\n        contentType: cdc.contentType,\n        data: cdc.data\n    };\n    const newEvent: DesignEvent = {\n        id,\n        type: \"create\",\n        on: new Date(),\n        data: {}\n    };\n    if (cd.context) {\n        newEvent.data.context = cloneObject(cd.context);\n        if (cd.context.type !== \"create\") {\n            newEvent.type = \"import\";\n        }\n    }\n    // Make sure the ID is properly set always.\n    newEvent.id = id;\n\n    return Promise.all([\n        // @ts-ignore\n        db.designs.add(newDesign),\n        // @ts-ignore\n        db.content.add(newDesignContent),\n        createEvent(newEvent)\n    ]).then(() => newDesign);\n}\n\nasync function getDesigns(): Promise<Design[]> {\n    // @ts-ignore\n    return db.designs.toArray();\n}\n\nasync function searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults> {\n    console.debug(\"[DesignsService] Searching for designs: \", criteria, paging);\n    const accept = (design: Design): boolean => {\n        let matches: boolean = false;\n        if (!criteria.filterValue || criteria.filterValue.trim().length === 0) {\n            matches = true;\n        } else if (design.name.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.summary && design.summary.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        }\n        return matches;\n    };\n\n    return getDesigns().then(designs => {\n        // TODO Explore whether we can use dexie to filter and page the results.\n\n        // filter and sort the results\n        const filteredDesigns: Design[] = designs.filter(accept).sort((design1, design2) => {\n            let rval: number = sort.by === \"name\" ? (\n                design1.name.localeCompare(design2.name)\n            ) : (\n                design2.modifiedOn.getTime() - design1.modifiedOn.getTime()\n            );\n            if (sort.direction !== \"asc\") {\n                rval *= -1;\n            }\n            return rval;\n        });\n        // get the total count\n        const totalCount: number = filteredDesigns.length;\n        // get the subset of results based on paging\n        const start: number = (paging.page - 1) * paging.pageSize;\n        const end: number = start + paging.pageSize;\n        const pagedDesigns: Design[] = filteredDesigns.slice(start, end);\n        return {\n            designs: pagedDesigns,\n            page: paging.page,\n            pageSize: paging.pageSize,\n            count: totalCount\n        }\n    });\n}\n\n\nasync function getDesign(id: string): Promise<Design> {\n    // @ts-ignore\n    return db.designs.where(\"id\").equals(id).first();\n}\n\nasync function deleteDesign(id: string): Promise<void> {\n    return Promise.all([\n        // @ts-ignore\n        db.designs.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.content.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.events.where(\"id\").equals(id).delete(),\n    ]).then(r => {});\n}\n\nasync function renameDesign(id: string, newName: string, newSummary?: string): Promise<void> {\n    // @ts-ignore\n    return db.designs.update(id, {\n        name: newName,\n        summary: newSummary\n    });\n}\n\nasync function getDesignContent(id: string): Promise<DesignContent> {\n    // @ts-ignore\n    return db.content.where(\"id\").equals(id).first();\n}\n\nasync function updateDesignContent(content: DesignContent): Promise<void> {\n    const newEvent: DesignEvent = {\n        id: content.id,\n        type: \"update\",\n        on: new Date(),\n        data: {}\n    };\n\n    return Promise.all([\n        // @ts-ignore\n        db.content.update(content.id, {\n            data: content.data\n        }),\n        // @ts-ignore\n        db.designs.update(content.id, {\n            modifiedOn: new Date()\n        }),\n        createEvent(newEvent)\n    ]).then(() => {});\n}\n\n\nasync function getEvents(id: string): Promise<DesignEvent[]> {\n    // @ts-ignore\n    return db.events.where(\"id\").equals(id).reverse().sortBy(\"on\");\n}\n\n\nasync function createEvent(event: DesignEvent): Promise<void> {\n    event.eventId = uuidv4();\n    // @ts-ignore\n    return db.events.add(event);\n}\n\n\n/**\n * The Designs Service interface.\n */\nexport interface DesignsService {\n    createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design>;\n    getDesigns(): Promise<Design[]>;\n    getDesign(id: string): Promise<Design>;\n    searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults>;\n    deleteDesign(id: string): Promise<void>;\n    renameDesign(id: string, newName: string, newSummary?: string): Promise<void>;\n    getDesignContent(id: string): Promise<DesignContent>;\n    updateDesignContent(content: DesignContent): Promise<void>;\n    getEvents(id: string): Promise<DesignEvent[]>;\n    createEvent(event: DesignEvent): Promise<void>;\n}\n\n\n/**\n * React hook to get the Designs service.\n */\nexport const useDesignsService: () => DesignsService = (): DesignsService => {\n    return {\n        createDesign,\n        getDesigns,\n        searchDesigns,\n        getDesign,\n        deleteDesign,\n        renameDesign,\n        getDesignContent,\n        updateDesignContent,\n        getEvents,\n        createEvent\n    };\n};\n","import {ContentTypes, Template} from \"@app/models\";\nimport ASYNCAPI_2_BLANK from \"./asyncapi/asyncapi-2-blank.json\";\nimport ASYNCAPI_2_STREETLIGHTS from \"./asyncapi/asyncapi-2-streetlights.json\";\n\nexport const ASYNCAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"asyncapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_BLANK\n        }\n    },\n    {\n        id: \"asyncapi_2_streetlights\",\n        name: \"Street Lights Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_STREETLIGHTS\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport OPENAPI_3_BLANK from \"./openapi/openapi-3-blank.json\";\nimport OPENAPI_3_PETSTORE from \"./openapi/openapi-3-petstore.json\";\nimport OPENAPI_3_USPTO from \"./openapi/openapi-3-uspto.json\";\nimport OPENAPI_2_BLANK from \"./openapi/openapi-2-blank.json\";\nimport OPENAPI_2_PETSTORE from \"./openapi/openapi-2-petstore.json\";\n\n\nexport const OPENAPI_3_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_3_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_BLANK\n        }\n    },\n    {\n        id: \"openapi_3_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_PETSTORE\n        }\n    },\n    {\n        id: \"openapi_3_uspto\",\n        name: \"USPTO Dataset API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_USPTO\n        }\n    }\n]\n\nexport const OPENAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_BLANK\n        }\n    },\n    {\n        id: \"openapi_2_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_PETSTORE\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport JSON_BLANK from \"./json/json-blank.json\";\n\nexport const JSON_TEMPLATES: Template[] = [\n    {\n        id: \"json_blank\",\n        name: \"Blank JSON Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: JSON_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport AVRO_BLANK from \"./avro/avro-blank.json\";\n\nexport const AVRO_TEMPLATES: Template[] = [\n    {\n        id: \"avro_blank\",\n        name: \"Blank Avro Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: AVRO_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport PROTOBUF_BLANK from \"./protobuf/protobuf-blank.json\";\n\nexport const PROTOBUF_TEMPLATES: Template[] = [\n    {\n        id: \"protobuf_blank\",\n        name: \"Blank Protobuf Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            data: PROTOBUF_BLANK.template\n        }\n    }\n]\n","import {Template} from \"@app/models/templates/template.model\";\nimport {\n    ASYNCAPI_2_TEMPLATES,\n    AVRO_TEMPLATES,\n    JSON_TEMPLATES,\n    OPENAPI_2_TEMPLATES,\n    OPENAPI_3_TEMPLATES,\n    PROTOBUF_TEMPLATES\n} from \"@app/services/_templates\";\nimport {ArtifactTypes} from \"@app/models\";\n\n\nasync function getTemplatesFor(type: string, version?: string): Promise<Template[]> {\n    if (type === ArtifactTypes.AVRO) {\n        return Promise.resolve(AVRO_TEMPLATES);\n    }\n    if (type === ArtifactTypes.PROTOBUF) {\n        return Promise.resolve(PROTOBUF_TEMPLATES);\n    }\n    if (type === ArtifactTypes.JSON) {\n        return Promise.resolve(JSON_TEMPLATES);\n    }\n    if (type === ArtifactTypes.ASYNCAPI) {\n        return Promise.resolve(ASYNCAPI_2_TEMPLATES);\n    }\n    if (type === ArtifactTypes.OPENAPI) {\n        if (version && version.startsWith(\"3\")) {\n            return Promise.resolve(OPENAPI_3_TEMPLATES);\n        } else {\n            return Promise.resolve(OPENAPI_2_TEMPLATES);\n        }\n    }\n    return Promise.reject(`No templates found for type ${type} and version ${version}.`);\n}\n\n\n/**\n * The Templates Service interface.\n */\nexport interface TemplatesService {\n    getTemplatesFor(type: string, version?: string): Promise<Template[]>;\n}\n\n\n/**\n * React hook to get the Templates service.\n */\nexport const useTemplatesService: () => TemplatesService = (): TemplatesService => {\n    return {\n        getTemplatesFor\n    };\n};\n","/**\n * Downloads the given content to the filesystem using the given content type and\n * file name.\n * @param content\n * @param contentType\n * @param filename\n */\nimport {DesignsService, useDesignsService} from \"@app/services/designs\";\nimport {Design, DesignEvent} from \"@app/models\";\n\n\nasync function downloadToFS(designsSvc: DesignsService, design: Design, content: string, contentType: string, filename: string): Promise<void> {\n    console.info(\"[DownloadService] Downloading a design.\");\n    const _w: any = window;\n\n    if (_w.chrome !== undefined) {\n        // Chrome version\n        let link = document.createElement('a');\n        let blob = new Blob([content], { type: contentType });\n        link.href = _w.URL.createObjectURL(blob);\n        link.download = filename;\n        link.click();\n    } else if (_w.navigator !== undefined && _w.navigator.msSaveBlob !== undefined) {\n        // IE version\n        let blob = new Blob([content], { type: contentType });\n        _w.navigator.msSaveBlob(blob, filename);\n    } else {\n        // Firefox version\n        let file = new File([content], filename, { type: 'application/force-download' });\n        _w.open(URL.createObjectURL(file));\n    }\n\n    // Create an event for this download\n    const event: DesignEvent = {\n        id: design.id,\n        type: \"download\",\n        on: new Date(),\n        data: {\n            filename\n        }\n    };\n    designsSvc.createEvent(event);\n}\n\n\n/**\n * The Download Service interface.\n */\nexport interface DownloadService {\n    downloadToFS(design: Design, content: string, contentType: string, filename: string): Promise<void>;\n}\n\n\n/**\n * React hook to get the Download service.\n */\nexport const useDownloadService: () => DownloadService = (): DownloadService => {\n    // Note: inject the designs services so that events can be created.\n    const designsSvc: DesignsService = useDesignsService();\n    return {\n        downloadToFS: (design: Design, content: string, contentType: string, filename: string): Promise<void> => {\n            return downloadToFS(designsSvc, design, content, contentType, filename);\n        }\n    };\n};\n","import {createOptions, httpGet} from \"@app/utils\";\n\nconst githubRegex: RegExp = /^https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/blob\\/([^\\/]+)\\/(.+)$/;\n\n\nasync function fetchUrlContent(url: string): Promise<string> {\n    const match: RegExpMatchArray | null = url.match(githubRegex);\n    if (match !== null) {\n        const org: string = match[1];\n        const repo: string = match[2];\n        const branch: string = match[3];\n        const path: string = match[4];\n\n        url = `https://raw.githubusercontent.com/${org}/${repo}/${branch}/${path}`;\n    }\n\n    console.info(\"[UrlService] Fetching content from a URL: \", url);\n\n    let endpoint: string = url;\n    const options: any = createOptions({\n        \"Accept\": \"*\"\n    });\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\n/**\n * The URL Service interface.\n */\nexport interface UrlService {\n    fetchUrlContent(url: string): Promise<string>;\n}\n\n\n/**\n * React hook to get the URL service.\n */\nexport const useUrlService: () => UrlService = (): UrlService => {\n    return {\n        fetchUrlContent\n    };\n};\n","\nfunction setConfigProperty(propertyName: string, propertyValue: string): void {\n    console.info(`[LocalStorageService] Setting config property ${propertyName} to value ${propertyValue}.`);\n    localStorage.setItem(\"apicurio-studio.\" + propertyName, propertyValue);\n}\n\nfunction getConfigProperty(propertyName: string, defaultValue: string): string {\n    console.info(`[LocalStorageService] Getting config property ${propertyName}`);\n    const value: string|null = localStorage.getItem(\"apicurio-studio.\" + propertyName);\n    return value !== null ? value : defaultValue;\n}\n\n\n/**\n * The Local Storage Service interface.\n */\nexport interface LocalStorageService {\n    setConfigProperty(propertyName: string, propertyValue: string): void;\n    getConfigProperty(propertyName: string, defaultValue: string): string;\n}\n\n\n/**\n * React hook to get the LocalStorage service.\n */\nexport const useLocalStorageService: () => LocalStorageService = (): LocalStorageService => {\n    return {\n        setConfigProperty,\n        getConfigProperty\n    };\n};\n","import {Configuration, Registry, RegistriesApi, RegistryList} from '@rhoas/registry-management-sdk';\nimport {Auth, useAuth, Config, useConfig} from \"@rhoas/app-services-ui-shared\";\n\n\nconst RHOSR_MOCK_DATA: Registry[] = [\n    {\n        id: \"1\",\n        name: \"Local Registry 1 (localhost:8081)\",\n        registryUrl: \"http://localhost:8081/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"2\",\n        name: \"Local Registry 2 (localhost:8082)\",\n        registryUrl: \"http://localhost:8082/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n]\n\nconst RHOSR_MOCK_DATA_OF: Registry[] = [\n    {\n        id: \"101\",\n        name: \"Operate First Registry 1\",\n        registryUrl: \"http://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"201\",\n        name: \"Operate First Registry 2\",\n        registryUrl: \"http://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n]\n\n\n/**\n * Async function to get the RHOSR instances.  Uses a provided auth token and API\n * base path to create a RHOSR SDK instance.\n * @param auth the application auth\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistries(auth: Auth, basePath: string): Promise<Registry[]> {\n    console.debug(\"[RhosrService] Getting a list of registries from: \", basePath);\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistries().then(res => {\n        const registries: RegistryList = res?.data;\n        return registries.items;\n    });\n}\n\n/**\n * Gets information about a single registry instances by its unique ID.\n * @param id the registry instance ID\n * @param auth the application auth\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistry(id: string, auth: Auth, basePath: string): Promise<Registry> {\n    console.debug(\"[RhosrService] Getting a single registry from: \", basePath);\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistry(id).then(res => {\n        return res?.data;\n    });\n}\n\n\n/**\n * The RHOSR Service interface.\n */\nexport interface RhosrService {\n    getRegistries(): Promise<Registry[]>;\n    getRegistry(id: string): Promise<Registry>;\n}\n\n\n/**\n * A mock version of the RHOSR service.\n */\nfunction createMockService(mockData: Registry[]): RhosrService {\n    return {\n        getRegistries(): Promise<Registry[]> {\n            return Promise.resolve(mockData);\n        },\n        getRegistry(id: string): Promise<Registry> {\n            const matching: Registry[] = mockData.filter(registry => registry.id === id);\n            if (matching && matching.length > 0) {\n                return Promise.resolve(matching[0]);\n            } else {\n                return Promise.resolve({} as Registry);\n            }\n        }\n    };\n}\n\nlet mockWarningSent: boolean = false;\nconst mockWarning = (message: string): void => {\n    if (!mockWarningSent) {\n        console.info(\"[RhosrService] ----------------------------------\");\n        console.info(\"[RhosrService]\", message);\n        console.info(\"[RhosrService] ----------------------------------\");\n        mockWarningSent = true;\n    }\n};\n\n/**\n * React hook to get the RHOSR service.\n */\nexport const useRhosrService: () => RhosrService = (): RhosrService => {\n    const auth: Auth = useAuth();\n    const cfg: Config = useConfig();\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"local-mock\")) {\n        mockWarning(\"RHOSR mocking enabled.\");\n        return createMockService(RHOSR_MOCK_DATA);\n    }\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"operate-first-mock\")) {\n        mockWarning(\"RHOSR mocking enabled (Operate First).\");\n        return createMockService(RHOSR_MOCK_DATA_OF);\n    }\n\n    return {\n        getRegistries: () => getRegistries(auth, cfg.srs.apiBasePath),\n        getRegistry: (id) => getRegistry(id, auth, cfg.srs.apiBasePath),\n    };\n};\n","/**\n * Clones an object by stringifying it and then parsing it.  Not efficient\n * but effective.  Use sparingly.\n * @param object\n */\nexport function cloneObject(object: any): any {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Function to search a JS object for a property value that matches a criteria (from) and\n * replaces it with a new value (to);\n * @param object\n * @param from\n * @param to\n */\nexport function propertyReplace(object: any, from: string, to: string): void {\n    Object.keys(object).forEach(key => {\n        let value: any = object[key];\n        if (typeof value === \"object\") {\n            propertyReplace(value, from, to);\n        } else if (value === from) {\n            object[key] = to;\n        }\n    })\n}\n","import YAML from \"yaml\";\nimport {IParserResult, parse} from \"protobufjs\";\nimport {ArtifactTypes, ContentTypes, Design, DesignContent} from \"@app/models\";\n\n/**\n * Returns true if the given content is JSON formatted.\n * @param content the content to check\n */\nexport function isJson(content: string): boolean {\n    try {\n        JSON.parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nexport function parseJson(content: string): any {\n    return JSON.parse(content);\n}\nexport function toJsonString(content: any): string {\n    return JSON.stringify(content, null, 4);\n}\n\n\n/**\n * Returns true if the given content is YAML formatted.\n * @param content the content to check\n */\nexport function isYaml(content: string): boolean {\n    try {\n        const result: any = YAML.parse(content);\n        if (typeof result === \"object\") {\n            return true;\n        }\n    } catch (e) {\n    }\n    return false;\n}\nexport function parseYaml(content: string): any {\n    return YAML.parse(content);\n}\nexport function toYamlString(content: any): string {\n    return YAML.stringify(content, null, 4);\n}\n\n/**\n * Returns true if the given content is XML formatted.\n * @param content the content to check\n */\nexport function isXml(content: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isXmlWithRootNode(content: string, namespace: string, localName: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError &&\n               dom.documentElement.namespaceURI === namespace &&\n               dom.documentElement.localName === localName;\n    } catch (e) {\n        return false;\n    }\n}\nexport function isWsdl(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://schemas.xmlsoap.org/wsdl/\", \"definitions\");\n}\nexport function isXsd(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://www.w3.org/2001/XMLSchema\", \"schema\");\n}\n\n\n/**\n * Returns true if the given content is PROTO formatted.\n * @param content the content to check\n */\nexport function isProto(content: string): boolean {\n    try {\n        const result: IParserResult = parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n\nexport function fileExtensionForDesign(design: Design, content: DesignContent): string {\n    // If the design was originally imported from a file, let's just use the extension\n    // from that file.\n    if (design.origin && design.origin.type === \"file\") {\n        const filename: string = design.origin.file?.fileName as string;\n        if (filename.indexOf(\".\") > 0) {\n            const split: string[] = filename.split(\".\");\n            return split[split.length - 1];\n        }\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return \"proto\";\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return \"wsdl\";\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return \"xsd\";\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return \"xml\";\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return \"graphql\";\n    }\n\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_JSON) {\n        return \"json\";\n    }\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_YAML) {\n        return \"yaml\";\n    }\n\n    return \"txt\";\n}\n\nexport function contentTypeForDesign(design: Design, content: DesignContent): string {\n    if (content.contentType) {\n        return content.contentType;\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return ContentTypes.APPLICATION_PROTOBUF;\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return ContentTypes.APPLICATION_WSDL;\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return ContentTypes.APPLICATION_GRAPHQL;\n    }\n\n    return ContentTypes.APPLICATION_JSON;\n}\n\n\n/**\n * Called to format (pretty print) the given content.  For example, if the content is JSON\n * then the content will be parsed and then stringified with better whitespace.\n * @param value\n * @param contentType\n */\nexport function formatContent(value: string, contentType: string): string {\n    console.info(\"====> formatting content of type: \", contentType);\n    console.info(\"====> source value: \", value);\n    try {\n        if (contentType === ContentTypes.APPLICATION_JSON) {\n            console.info(\"====> DOING IT!\");\n            const parsed: any = JSON.parse(value);\n            return JSON.stringify(parsed, null, 4);\n        }\n    } catch (e) {\n        console.error(e);\n        return value;\n    }\n    return value;\n}\n","import {Design} from \"@app/models\";\nimport {DesignContext, DesignContextType} from \"@app/models/designs/design-context.model\";\n\nexport function hasOrigin(design: Design|undefined, contextType: DesignContextType): boolean {\n    return design?.origin?.type === contextType;\n};\n","import {ContentTypes} from \"@app/models/rhosr-instance\";\nimport axios, {AxiosRequestConfig} from \"axios\";\n\nconst AXIOS = axios.create();\n\n\nfunction createAxiosConfig(method: string, url: string, options: any, data?: any): AxiosRequestConfig {\n    if (typeof data === \"string\") {\n        data = new Blob([data]);\n    }\n    return {\n        ...{\n            data,\n            method,\n            url,\n            validateStatus: (status) => {\n                return status >= 200 && status < 300;\n            }\n        }, ...options\n    };\n}\n\n\nfunction unwrapErrorData(error: any): any {\n    console.debug(\"Error detected, unwrapping...\");\n    if (error && error.response && error.response.data) {\n        return {\n            message: error.message,\n            ...error.response.data,\n            status: error.response.status\n        }\n    } else if (error && error.response) {\n        return {\n            message: error.message,\n            status: error.response.status\n        }\n    } else if (error) {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: error.message,\n            status: 500\n        }\n    } else {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: \"Unknown error\",\n            status: 500\n        }\n    }\n}\n\n/**\n * Creates an endpoint to use when making a REST call.  Supports path params and query params.\n * @param baseHref\n * @param path\n * @param params\n * @param queryParams\n */\nexport function createEndpoint(baseHref: string, path: string, params?: any, queryParams?: any): string {\n    if (params) {\n        Object.keys(params).forEach(key => {\n            const value: string = encodeURIComponent(params[key]);\n            path = path.replace(\":\" + key, value);\n        });\n    }\n    let rval: string = createHref(baseHref, path);\n    if (queryParams) {\n        let first: boolean = true;\n        for (const key in queryParams) {\n            if (queryParams[key]) {\n                const value: string = encodeURIComponent(queryParams[key]);\n                if (first) {\n                    rval = rval + \"?\" + key;\n                } else {\n                    rval = rval + \"&\" + key;\n                }\n                if (value !== null && value !== undefined) {\n                    rval = rval + \"=\" + value;\n                }\n                first = false;\n            }\n        }\n    }\n    return rval;\n}\n\n/**\n * Creates the request options used by the HTTP service when making API calls.\n * @param headers\n */\nexport function createOptions(headers: { [header: string]: string }): AxiosRequestConfig {\n    const options: AxiosRequestConfig = {headers};\n    return options;\n}\n\n\n/**\n * Performs an HTTP GET operation to the given URL with the given options.  Returns\n * a Promise to the HTTP response data.\n */\nexport function httpGet<T>(url: string, options?: AxiosRequestConfig, successCallback?: (value: any) => T): Promise<T> {\n    console.info(\"[BaseService] Making a GET request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Accept\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"get\", url, options);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: T = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n * @param successCallback\n * @param progressCallback\n */\nexport function httpPost<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void,\n                            progressCallback?: (progressEvent: any) => void): Promise<void> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    if (progressCallback) {\n        const fiftyMB: number = 50 * 1024 * 1024;\n        config.onUploadProgress = progressCallback;\n        config.maxContentLength = fiftyMB;\n        config.maxBodyLength = fiftyMB;\n    }\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPostWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: any) => O): Promise<O> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n */\nexport function httpPut<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void): Promise<void> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPutWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: O) => O): Promise<O> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP DELETE operation to the given URL with the given body and options.\n * @param url\n * @param options\n */\nexport function httpDelete<T>(url: string, options?: AxiosRequestConfig, successCallback?: () => T): Promise<T> {\n    console.info(\"[BaseService] Making a DELETE request to: \", url);\n\n    if (!options) {\n        options = {};\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"delete\", url, options);\n// @ts-ignore\n    return AXIOS.request(config)\n        .then(() => {\n            return successCallback ? successCallback() : null;\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\nexport function createHref(baseHref: string, path: string): string {\n    let url: string =  baseHref;\n    if (url.endsWith(\"/\")) {\n        url = url.substring(0, url.length - 1);\n    }\n    url += path;\n    return url;\n}\n\n"],"names":["If","condition","children","NavLink","location","className","basename","useBasename","to","getBasename","Link","ArtifactTypeIcon","type","isShowIcon","isShowLabel","classes","getClassNames","title","getTitle","getLabel","IsLoading","loadingComponent","lc","Spinner","IfNotEmpty","collection","emptyState","emptyStateTitle","emptyStateMessage","empty","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","EmptyStateBody","length","ListWithToolbar","toolbar","alwaysShowToolbar","filteredEmptyState","isLoading","isEmpty","isFiltered","ToggleIcon","expanded","ChevronDownIcon","ChevronRightIcon","ObjectSelect","value","items","onSelect","itemToString","noSelectionLabel","menuAppendTo","useState","isToggled","setToggled","selectObjects","setSelectObjects","selections","setSelections","useEffect","map","item","index","toString","undefined","noSelection","filtered","filter","soo","Select","SelectVariant","onToggle","event","isOpen","SelectOption","isPlaceholder","key","useNavigation","history","useHistory","navigateTo","path","setTimeout","push","AVRO","PROTOBUF","JSON","OPENAPI","ASYNCAPI","GRAPHQL","KCONNECT","WSDL","XSD","XML","APPLICATION_JSON","APPLICATION_YAML","APPLICATION_XML","APPLICATION_PROTOBUF","APPLICATION_GRAPHQL","TEXT_XML","APPLICATION_WSDL","ArtifactGroup","groupId","ArtifactName","id","name","ArtifactSelector","registries","onSelected","querying","setQuerying","pageSize","page","paging","setPaging","filterValue","ascending","filterSelection","criteria","setCriteria","registry","setRegistry","artifacts","setArtifacts","rhosrInstance","setRhosrInstance","rhosrInstanceFactory","createFor","gac","sortAscending","getArtifacts","then","results","catch","error","console","ArtifactListToolbar","onRegistrySelected","document","getElementById","onCriteriaChange","onPagingChange","style","marginTop","count","ArtifactList","fetchArtifactContent","artifact","version","getArtifactContent","onArtifactSelected","content","fetchArtifactVersions","getArtifactVersions","selectedArtifact","setSelectedArtifact","onArtifactSelectedInternal","debug","onArtifactUnselectedInternal","onArtifactLoaded","idx","ArtifactListItem","onUnselected","isSelected","rval","setLoading","versions","setVersions","selectedVersion","setSelectedVersion","setContent","isContentLoaded","setContentLoaded","onVersionSelect","contentType","data","onClick","target","localName","Radio","isChecked","state","status","Badge","isRead","description","setFilterValue","Toolbar","ToolbarContent","ToolbarItem","SearchInput","onChange","onSearch","onClear","Button","SortAlphaDownIcon","SortAlphaDownAltIcon","Pagination","padding","dropDirection","isCompact","itemCount","perPage","onSetPage","newPage","onPerPageSelect","newPerPage","widgetId","TYPE_OPTIONS","label","CreateDesignModal","onCreate","onCancel","isValid","setValid","setName","summary","setSummary","setType","typeSelection","setTypeSelection","isTypeToggled","setTypeToggled","setVersion","isVersionToggled","setVersionToggled","templates","setTemplates","template","setTemplate","templatesSvc","valid","getTemplatesFor","Modal","ModalVariant","onClose","actions","isDisabled","context","Alert","isInline","marginBottom","Form","FormGroup","isRequired","fieldId","TextInput","TextArea","selection","onTypeSelect","Gallery","hasGutter","minWidths","default","maxWidths","t","GalleryItem","TemplateItem","DeleteDesignModal","design","onDelete","onDownload","titleIconVariant","TextContent","Text","component","lineHeight","paddingLeft","Checkbox","checked","DesignList","designs","sort","onSort","onEdit","onRename","onRegister","selectedDesign","setSelectedDesign","sortByIndex","setSortByIndex","renderColumnData","column","colIndex","date","modifiedOn","fromNow","DesignOriginLabel","renderActionsToggle","props","KebabToggle","preventDefault","stopPropagation","sortParams","sortable","sortBy","direction","_event","by","columnIndex","ResponsiveTable","ariaLabel","columns","width","expectedLength","onRowClick","row","renderHeader","Th","modifier","renderCell","Td","renderActions","ActionsColumn","actionsToggle","isSeparator","isRowSelected","ImportFrom","DesignsPanel","onDesignSelected","onImport","refresh","setRefresh","setFiltered","filterOn","setSort","setDesigns","designToDelete","setDesignToDelete","isDeleteModalOpen","setDeleteModalOpen","designToRegister","setDesignToRegister","isRegisterModalOpen","setRegisterModalOpen","designToRename","setDesignToRename","isRenameModalOpen","setRenameModalOpen","designsSvc","downloadSvc","nav","addAlert","useAlert","doRefresh","onDownloadDesign","getDesignContent","filename","replace","theContent","stringify","downloadToFS","searchDesigns","DesignsEmptyState","emptyStateFiltered","DesignsEmptyStateFiltered","DesignsToolbar","trim","Card","isSelectable","CardBody","deleteDesign","AlertVariant","dataTestId","ExportToRhosrModal","onExported","RenameModal","renameDesign","e","EmptyStateIcon","icon","AddCircleOIcon","EmptyStateSecondaryActions","ImportDropdown","PLACEHOLDER_TYPE_OPTION","compareTo","selectOption","this","ImportDesignModal","importType","designContent","setDesignContent","fileName","setFileName","url","setUrl","setContentType","detectJsonOrYamlInfo","contentObj","openapi","info","swagger","asyncapi","$schema","detectInfo","detectXmlInfo","warn","setTheType","newType","newTypeSelection","option","FILE","file","cd","cdc","FileUpload","filenamePlaceholder","fname","URL","UrlUpload","urlPlaceholder","menuToggle","MenuToggle","isExpanded","Dropdown","action","attributes","RHOSR","toggle","isPlain","dropdownItems","DropdownItem","position","ImportFromRhosrModal","setRegistries","setDesign","rhosr","getRegistries","a","b","name1","name2","localeCompare","instanceId","artifactId","PlusCircleIcon","previewContent","setPreviewContent","downloadError","setDownloadError","urlService","hasUrl","hasError","spinner","placeholder","fetchUrlContent","message","isReadOnly","DesignDetailsPanel","activeTabKey","setActiveTabKey","Tabs","activeKey","eventKey","Tab","TabTitleText","createdOn","format","DesignEvents","DesignHistory","events","setEvents","designsService","getEvents","DesignEventType","on","exports","setExports","origin","originGroupId","originArtifactId","originVersion","originFilename","originUrl","Divider","importTypeLabel","typeLabel","Label","color","initialFormState","hasErrors","groupValue","validated","errorMessage","artifactIdValue","RegistryDryRunFormModal","registryList","setRegistryList","registryValue","setRegistryValue","formState","setFormState","isRegistryInstanceDropdownOpen","setIsRegistryInstanceDropdownOpen","rhosrService","onSubmit","labelIcon","Popover","headerContent","bodyContent","HelpIcon","noVerticalAlign","registryId","getRegistry","log","DropdownToggle","helperTextInvalid","val","EditorContext","dirty","onSave","onRegistrationDryRun","onFormat","lss","designContext","setDesignContext","isActionMenuToggled","setActionMenuToggled","getConfigProperty","setExpanded","isDryRunModalOpen","setIsDryRunModalOpen","actionMenuToggle","menuItems","DropdownSeparator","includes","params","Breadcrumb","BreadcrumbItem","isActive","zIndex","newExpanded","setConfigProperty","typeForDisplay","isExporting","setExporting","isLoadingRegistries","setLoadingRegistries","group","setGroup","setArtifactId","createOrUpdateArtifact","amd","Date","createEvent","determineContentType","normalizeGroupId","useRhosrInstanceServiceFactory","auth","useAuth","instanceUrl","registryUrl","createArtifact","basePath","Promise","apicurio_registry","getToken","token","endpoint","headers","createArtifactVersion","ifExists","start","end","queryParams","limit","offset","order","orderby","options","maxContentLength","responseType","transformResponse","testUpdateArtifactContent","db","createDesign","newDesign","newDesignContent","newEvent","all","add","getDesigns","toArray","accept","matches","toLowerCase","indexOf","filteredDesigns","design1","design2","getTime","totalCount","slice","getDesign","where","equals","first","delete","r","newName","newSummary","update","updateDesignContent","reverse","eventId","stores","useDesignsService","ASYNCAPI_2_TEMPLATES","OPENAPI_3_TEMPLATES","OPENAPI_2_TEMPLATES","JSON_TEMPLATES","AVRO_TEMPLATES","PROTOBUF_TEMPLATES","resolve","startsWith","reject","useTemplatesService","useDownloadService","_w","window","chrome","link","createElement","blob","Blob","href","createObjectURL","download","click","navigator","msSaveBlob","File","open","githubRegex","match","org","repo","branch","useUrlService","propertyName","propertyValue","localStorage","setItem","defaultValue","getItem","useLocalStorageService","RHOSR_MOCK_DATA","created_at","updated_at","instance_type","RHOSR_MOCK_DATA_OF","createMockService","mockData","matching","mockWarningSent","mockWarning","useRhosrService","cfg","useConfig","srs","apiBasePath","RegistriesApi","Configuration","accessToken","res","cloneObject","object","parse","propertyReplace","from","Object","keys","forEach","isJson","parseJson","toJsonString","isYaml","parseYaml","toYamlString","isXml","DOMParser","parseFromString","getElementsByTagName","isXmlWithRootNode","namespace","dom","documentElement","namespaceURI","isWsdl","isXsd","isProto","fileExtensionForDesign","split","contentTypeForDesign","formatContent","parsed","hasOrigin","contextType","AXIOS","createAxiosConfig","method","validateStatus","unwrapErrorData","response","createEndpoint","baseHref","encodeURIComponent","createHref","createOptions","httpGet","successCallback","config","request","httpPostWithReturn","body","httpPut","endsWith","substring"],"sourceRoot":""}