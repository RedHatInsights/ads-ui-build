{"version":3,"file":"261.ed26c65b.js","mappings":"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","sources":["webpack://ads-ui/./src/app/components/if.tsx","webpack://ads-ui/./src/app/components/navlink.tsx","webpack://ads-ui/./src/app/components/artifact-type-icon.tsx","webpack://ads-ui/./src/app/components/is-loading.tsx","webpack://ads-ui/./src/app/components/if-not-empty.tsx","webpack://ads-ui/./src/app/components/list-with-toolbar.tsx","webpack://ads-ui/./src/app/components/toggle-icon.tsx","webpack://ads-ui/./src/app/components/design-description.tsx","webpack://ads-ui/./src/app/components/registry-navlink.tsx","webpack://ads-ui/./src/app/components/service-preview-warning.tsx","webpack://ads-ui/./src/app/components/rhosr-empty-state.tsx","webpack://ads-ui/./src/app/components/date-time.tsx","webpack://ads-ui/./src/app/components/object-select.tsx","webpack://ads-ui/./src/app/contexts/navigation.ts","webpack://ads-ui/./src/app/models/rhosr-instance/artifact-types.model.ts","webpack://ads-ui/./src/app/models/rhosr-instance/content-types.model.ts","webpack://ads-ui/./src/app/pages/components/home/import-dropdown.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-group.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-name.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-selector.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-item.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/create-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/delete-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/design-list.tsx","webpack://ads-ui/./src/app/pages/components/home/designs.panel.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state-filtered.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/import-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/import-from-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/template-item.tsx","webpack://ads-ui/./src/app/pages/components/home/url-upload.tsx","webpack://ads-ui/./src/app/pages/components/home/design-details-panel.tsx","webpack://ads-ui/./src/app/pages/components/home/design-history.tsx","webpack://ads-ui/./src/app/pages/components/home/design-events.tsx","webpack://ads-ui/./src/app/pages/components/home/design-event-type.tsx","webpack://ads-ui/./src/app/pages/components/home/design-origin-label.tsx","webpack://ads-ui/./src/app/pages/components/editor/editor-context.tsx","webpack://ads-ui/./src/app/pages/components/editor/test-registry.modal.tsx","webpack://ads-ui/./src/app/pages/components/editor/compare-modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/export-to-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/rename.modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/if-rhosr.tsx","webpack://ads-ui/./src/app/services/rhosr-instance.ts","webpack://ads-ui/./src/app/services/designs.ts","webpack://ads-ui/./src/app/services/_templates/asyncapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/openapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/json.templates.ts","webpack://ads-ui/./src/app/services/_templates/avro.templates.ts","webpack://ads-ui/./src/app/services/_templates/protobuf.templates.ts","webpack://ads-ui/./src/app/services/templates.ts","webpack://ads-ui/./src/app/services/download.ts","webpack://ads-ui/./src/app/services/url.ts","webpack://ads-ui/./src/app/services/alerts.tsx","webpack://ads-ui/./src/app/services/local-storage.ts","webpack://ads-ui/./src/app/services/rhosr.ts","webpack://ads-ui/./src/app/utils/object.utils.ts","webpack://ads-ui/./src/app/utils/content.utils.ts","webpack://ads-ui/./src/app/utils/design.utils.ts","webpack://ads-ui/./src/app/utils/rest.utils.ts"],"sourcesContent":["import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type IfProps = {\n    condition: boolean | (() => boolean);\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const If: FunctionComponent<IfProps> = ({condition, children}: IfProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n\n    return (accept() ? <React.Fragment children={children} /> : <React.Fragment />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Basename, useBasename} from \"@rhoas/app-services-ui-shared\";\n\nexport type NavLinkProps = {\n    location: string;\n    title?: string;\n    className?: string;\n    children?: React.ReactNode;\n}\n\nexport const NavLink: FunctionComponent<NavLinkProps> = ({location, title, className, children}: NavLinkProps) => {\n\n    const basename: Basename = useBasename();\n    const to: string = `${basename.getBasename()}${location}`;\n\n    return (\n        <Link className={className} title={title} to={to} children={children} />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./artifact-type-icon.css\";\nimport {ArtifactTypes} from \"@app/models\";\n\n/**\n * Properties\n */\nexport type ArtifactTypeIconProps = {\n    type: string;\n    isShowIcon?: boolean; // defaults to true\n    isShowLabel?: boolean; // defaults to false\n}\n\n\nexport const ArtifactTypeIcon: FunctionComponent<ArtifactTypeIconProps> = ({type, isShowIcon, isShowLabel}: ArtifactTypeIconProps) => {\n    const getTitle = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro Schema\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf Schema\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON Schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI Definition\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI Definition\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL Definition\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect Schema\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getLabel = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getClassNames = (): string => {\n        let classes: string = \"artifact-type-icon\";\n        if (isShowLabel) {\n            classes += \" has-label\";\n        }\n        if (isShowIcon !== false) {\n            classes += \" has-icon\";\n            switch (type) {\n                case ArtifactTypes.AVRO:\n                    classes += \" avro-icon24\";\n                    break;\n                case ArtifactTypes.PROTOBUF:\n                    classes += \" protobuf-icon24\";\n                    break;\n                case ArtifactTypes.JSON:\n                    classes += \" json-icon24\";\n                    break;\n                case ArtifactTypes.OPENAPI:\n                    classes += \" oai-icon24\";\n                    break;\n                case ArtifactTypes.ASYNCAPI:\n                    classes += \" aai-icon24\";\n                    break;\n                case ArtifactTypes.GRAPHQL:\n                    classes += \" graphql-icon24\";\n                    break;\n                case ArtifactTypes.KCONNECT:\n                    classes += \" kconnect-icon24\";\n                    break;\n                case ArtifactTypes.WSDL:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XSD:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XML:\n                    classes += \" xml-icon24\";\n                    break;\n            }\n        }\n        if (isShowIcon && !isShowLabel) {\n            classes += \" icon-only\";\n        }\n        return classes;\n    }\n\n    const renderLabel = (): React.ReactNode | undefined => {\n        if (isShowLabel) {\n            return <span>{getLabel()}</span>\n        } else {\n            return undefined;\n        }\n    };\n\n    return (\n        <div className={getClassNames()} title={getTitle()} children={renderLabel()} />\n    );\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Spinner} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IsLoadingProps = {\n    condition: boolean | (() => boolean);\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n}\n\n/**\n * Displays a Spinner control while the condition property is true.  When false, the provided children\n * are displayed.  Useful when displaying content from the results of an async operation such as a REST\n * call.\n */\nexport const IsLoading: FunctionComponent<IsLoadingProps> = ({condition, loadingComponent, children}: IsLoadingProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n    const lc: React.ReactNode = loadingComponent || <Spinner />;\n    return (accept() ? <React.Fragment children={lc} /> : <React.Fragment children={children} />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Button, EmptyState, EmptyStateBody, EmptyStateVariant, Title} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IfNotEmptyProps = {\n    collection?: any[];\n    emptyState?: React.ReactNode;\n    emptyStateTitle?: string;\n    emptyStateMessage?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * provided collection is not empty.  If the provided collection is empty, then\n * an empty state control is displayed instead.\n */\nexport const IfNotEmpty: FunctionComponent<IfNotEmptyProps> = ({collection, emptyState, emptyStateTitle, emptyStateMessage, children}: IfNotEmptyProps) => {\n    const isEmpty = () => {\n        return !collection || collection.length === 0;\n    };\n\n    const empty: React.ReactNode = emptyState || (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{emptyStateTitle || \"None found\"}</Title>\n            <EmptyStateBody>{emptyStateMessage || \"No items found.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    return isEmpty() ?\n        <React.Fragment children={empty}/> :\n        <React.Fragment children={children} />\n};\n","import React, {FunctionComponent} from \"react\";\nimport {IsLoading} from \"@app/components/is-loading\";\nimport {If} from \"@app/components/if\";\nimport {IfNotEmpty} from \"@app/components/if-not-empty\";\n\n/**\n * Properties\n */\nexport type ListWithToolbarProps = {\n    toolbar: React.ReactNode;\n    alwaysShowToolbar?: boolean;\n    emptyState: React.ReactNode;\n    filteredEmptyState: React.ReactNode;\n    isLoading: boolean;\n    isFiltered: boolean;\n    isEmpty: boolean;\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const ListWithToolbar: FunctionComponent<ListWithToolbarProps> = (\n    {toolbar, alwaysShowToolbar, emptyState, filteredEmptyState, isLoading, loadingComponent, isEmpty, isFiltered, children}: ListWithToolbarProps) => {\n\n    return (\n        <React.Fragment>\n            <If condition={alwaysShowToolbar || !isEmpty || isFiltered} children={toolbar} />\n            <IsLoading condition={isLoading} loadingComponent={loadingComponent}>\n                <If condition={!isEmpty} children={children} />\n                <If condition={isEmpty && isFiltered} children={filteredEmptyState} />\n                <If condition={isEmpty && !isFiltered} children={emptyState} />\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {ChevronRightIcon, ChevronDownIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type ToggleIconProps = {\n    expanded: boolean;\n    onClick: () => void;\n};\n\nexport const ToggleIcon: FunctionComponent<ToggleIconProps> = ({expanded, onClick}: ToggleIconProps) => {\n    return expanded ? (\n        <ChevronDownIcon />\n    ) : (\n        <ChevronRightIcon />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./design-description.css\";\nimport {Truncate} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type DesignDescriptionProps = {\n    description: string | undefined;\n    truncate?: boolean;\n    className?: string;\n}\n\n\nexport const DesignDescription: FunctionComponent<DesignDescriptionProps> = ({description, truncate, className}: DesignDescriptionProps) => {\n    let classes: string = \"\";\n    if (className) {\n        classes = className;\n    }\n    if (!description) {\n        classes = classes + \" no-description\";\n    }\n    return truncate ? (\n        <div>\n            <Truncate className={classes} content={description || \"No description.\"} tooltipPosition=\"top\" />\n        </div>\n    ) : (\n        <div className={classes}>{description || \"No description.\"}</div>\n    );\n}\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {RhosrService, useRhosrService} from \"@app/services\";\nimport {stripTrailingSlash} from \"@app/utils\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\n\n/**\n * Properties\n */\nexport type RegistryNavLinkProps = {\n    registry?: Registry;\n    context: DesignContext | undefined;\n    children?: React.ReactNode;\n};\n\n/**\n * A navigation link to an artifact in a service registry instance.  The context passed to this\n * component must be of type \"rhosr\".\n */\nexport const RegistryNavLink: FunctionComponent<RegistryNavLinkProps> = ({registry, context, children}: RegistryNavLinkProps) => {\n    const [href, setHref] = useState<string>();\n\n    const rhosr: RhosrService | undefined = registry === undefined ? useRhosrService() : undefined;\n\n    const setHrefFrom = (registry: Registry, context: DesignContext): void => {\n        const group: string = context.rhosr?.groupId || \"default\";\n        const id: string = context.rhosr?.artifactId as string;\n        setHref(`${stripTrailingSlash(registry.browserUrl)}/artifacts/${group}/${id}`);\n    };\n\n    useEffect(() => {\n        setHref(undefined);\n        if (context?.type === \"rhosr\") {\n            if (registry) {\n                setHrefFrom(registry, context);\n            } else {\n                (rhosr as RhosrService).getRegistry(context.rhosr?.instanceId as string).then(registry => {\n                    setHrefFrom(registry, context);\n                });\n            }\n        }\n    }, [context]);\n\n    return (\n        href ? <a href={href} children={children} /> : <span children={children} />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Alert} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type ServicePreviewWarningProps = {\n};\n\nexport const ServicePreviewWarning: FunctionComponent<ServicePreviewWarningProps> = ({}: ServicePreviewWarningProps) => {\n    return (\n        <Alert isInline variant=\"warning\" title=\"Service Preview: Data is stored locally in your browser\" style={{ marginBottom: \"15px\"}}>\n            <p>\n                In the Service Preview release of OpenShift API Designer, all designs are stored locally in your\n                browser. Clearing your browser cache or switching to a new browser might result in loss of data.\n                Make sure you save your work by downloading your designs locally or by exporting them to a Red Hat\n                OpenShift Service Registry instance.\n            </p>\n        </Alert>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {EmptyState, EmptyStateBody, EmptyStateIcon, Title} from \"@patternfly/react-core\";\nimport {AddCircleOIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type RhosrEmptyStateProps = {\n};\n\nexport const RhosrEmptyState: FunctionComponent<RhosrEmptyStateProps> = ({}: RhosrEmptyStateProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No Service Registry instances\n            </Title>\n            <EmptyStateBody>\n                To save a design as an artifact in Service Registry,\n                you must create a Service Registry instance first.\n            </EmptyStateBody>\n            <a href=\"/application-services/service-registry\">Create Service Registry instance</a>\n        </EmptyState>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport Moment from \"react-moment\";\n\ntype dateTypes = string|number|Array<string|number|object>|object;\n\n/**\n * Properties\n */\nexport type DateTimeProps = {\n    date: dateTypes|undefined;\n};\n\nexport const DateTime: FunctionComponent<DateTimeProps> = ({date}: DateTimeProps) => {\n    return <Moment date={date} format=\"DD MMM YYYY, hh:mm UTC\" utc={true} />;\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Select, SelectOption, SelectVariant} from \"@patternfly/react-core\";\nimport {SelectOptionObject} from \"@patternfly/react-core/src/components/Select/SelectOption\";\n\ninterface ObjectSelectOptionObject extends SelectOptionObject {\n    item: any;\n}\n\n/**\n * Properties\n */\nexport type ObjectSelectProps = {\n    value: any;\n    items: any[];\n    onSelect: (value: any) => void;\n    itemToString: (value: any) => string;\n    noSelectionLabel?: string;\n    toggleId?: string;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline';\n    variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n};\n\n/**\n * A generic control that makes it easier to create a <Select> from an array of objects.\n */\nexport const ObjectSelect: FunctionComponent<ObjectSelectProps> = (\n    {value, items, onSelect, itemToString, noSelectionLabel, toggleId, menuAppendTo, variant}: ObjectSelectProps) => {\n\n    const [isToggled, setToggled] = useState<boolean>(false);\n    const [selectObjects, setSelectObjects] = useState<ObjectSelectOptionObject[]>();\n    const [selections, setSelections] = useState<ObjectSelectOptionObject[]>();\n\n    const onSelectInternal = (event: React.MouseEvent | React.ChangeEvent, value: string | SelectOptionObject): void => {\n        setToggled(false);\n        onSelect((value as ObjectSelectOptionObject).item);\n    };\n\n    useEffect(() => {\n        const theItems: any[] = items || [];\n        const selectObjects: ObjectSelectOptionObject[] = theItems.map((item, index) => {\n            return {\n                item: item,\n                toString: () => {\n                    return itemToString(item)\n                }\n            }\n        });\n        if (noSelectionLabel !== undefined) {\n            const noSelection: ObjectSelectOptionObject = {\n                item: undefined,\n                toString(): string {\n                    return noSelectionLabel;\n                }\n            }\n            setSelectObjects([\n                noSelection, ...selectObjects\n            ]);\n        } else {\n            setSelectObjects(selectObjects);\n        }\n    }, [items]);\n\n    useEffect(() => {\n        const filtered: ObjectSelectOptionObject[]|undefined = selectObjects?.filter(soo => soo.item === value);\n        setSelections(filtered);\n    }, [value]);\n\n    return (\n        <Select menuAppendTo={menuAppendTo}\n                variant={variant || SelectVariant.single}\n                onToggle={setToggled}\n                toggleId={toggleId}\n                onSelect={onSelectInternal}\n                isOpen={isToggled}\n                selections={selections}>\n            {\n                selectObjects?.map((soo, index) => (\n                    <SelectOption isPlaceholder={soo.item === undefined} key={index} value={soo} />\n                ))\n            }\n        </Select>\n    )\n};\n","import {Basename, useBasename} from \"@rhoas/app-services-ui-shared\";\nimport {History} from \"history\";\nimport {useHistory} from \"react-router-dom\";\n\nexport const navigateTo: (path: string, basename: Basename, history: History) => void = (path: string, basename: Basename, history: History) => {\n    const to: string = `${basename.getBasename()}${path}`;\n    setTimeout(() => {\n        history.push(to);\n    }, 50);\n};\n\nexport type Navigation = {\n    navigateTo: (path: string) => void;\n};\n\nexport const useNavigation: () => Navigation = (): Navigation => {\n    const history: History = useHistory();\n    const basename: Basename = useBasename();\n\n    return {\n        navigateTo: (path: string) => {\n            return navigateTo(path, basename, history);\n        }\n    };\n}\n","\nexport class ArtifactTypes {\n\n    public static AVRO: string = \"AVRO\";\n    public static PROTOBUF: string = \"PROTOBUF\";\n    public static JSON: string = \"JSON\";\n    public static OPENAPI: string = \"OPENAPI\";\n    public static ASYNCAPI: string = \"ASYNCAPI\";\n    public static GRAPHQL: string = \"GRAPHQL\";\n    public static KCONNECT: string = \"KCONNECT\";\n    public static WSDL: string = \"WSDL\";\n    public static XSD: string = \"XSD\";\n    public static XML: string = \"XML\";\n\n}\n","\nexport class ContentTypes {\n\n    public static APPLICATION_JSON: string = \"application/json\";\n    public static APPLICATION_YAML: string = \"application/x-yaml\";\n    public static APPLICATION_XML: string = \"application/xml\";\n    public static APPLICATION_PROTOBUF: string = \"application/x-protobuf\";\n    public static APPLICATION_GRAPHQL: string = \"application/graphql\";\n\n    public static TEXT_XML: string = \"text/xml\";\n    public static APPLICATION_WSDL: string = \"application/wsdl+xml\";\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./import-dropdown.css\";\nimport {Dropdown, DropdownItem, DropdownToggle} from \"@patternfly/react-core\";\n\nexport enum ImportFrom {\n    FILE,\n    URL,\n    RHOSR\n};\n\n/**\n * Properties\n */\nexport type ImportDropdownProps = {\n    variant: \"long\"|\"short\";\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * A control to display the Import dropdown on the main page (used to select how to import content\n * into the API Designer).\n */\nexport const ImportDropdown: FunctionComponent<ImportDropdownProps> = ({variant, onImport}: ImportDropdownProps) => {\n    const [isToggled, setToggled] = useState(false);\n\n    const onToggle = (value: boolean): void => {\n        setToggled(value);\n    };\n\n    const toggle: React.ReactNode = (\n        <DropdownToggle id=\"import-toggle\" toggleVariant=\"secondary\" onToggle={onToggle}>\n            {variant === \"short\" ? \"Import\" : \"Import design\"}\n        </DropdownToggle>\n    );\n\n    const onMenuSelect: (event?: React.SyntheticEvent<HTMLDivElement>) => void = (event) => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setToggled(false);\n        switch (action) {\n            case \"action-file\":\n                onImport(ImportFrom.FILE);\n                return;\n            case \"action-url\":\n                onImport(ImportFrom.URL);\n                return;\n            case \"action-rhosr\":\n                onImport(ImportFrom.RHOSR);\n                return;\n        }\n    };\n\n    return (\n        <Dropdown\n            onSelect={onMenuSelect}\n            toggle={toggle}\n            isOpen={isToggled}\n            isPlain\n            dropdownItems={\n                [\n                    <DropdownItem key=\"action-rhosr\" data-id=\"action-rhosr\">Import from Service Registry</DropdownItem>,\n                    <DropdownItem key=\"action-url\" data-id=\"action-url\">Import from URL</DropdownItem>,\n                    <DropdownItem key=\"action-file\" data-id=\"action-file\">Import from file</DropdownItem>,\n                ]\n            }\n            position=\"right\"\n        />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactGroupProps = {\n    groupId: string|undefined;\n}\n\n/**\n * Displays a RHOSR artifact's group.\n */\nexport const ArtifactGroup: FunctionComponent<ArtifactGroupProps> = ({groupId}: ArtifactGroupProps) => {\n    const style = (): string => {\n        return !groupId ? \"nogroup\" : \"group\";\n    };\n\n    return (\n        <span className={style()}>{groupId}</span>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactNameProps = {\n    id: string;\n    name: string;\n}\n\n/**\n * Displays a RHOSR artifact's name.\n */\nexport const ArtifactName: FunctionComponent<ArtifactNameProps> = ({id, name}: ArtifactNameProps) => {\n    return name ? (\n        <React.Fragment>\n            <span className=\"name\">{name}</span>\n            <span className=\"id\">{id}</span>\n        </React.Fragment>\n    ) : (\n        <React.Fragment>\n            <span className=\"name\">{id}</span>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    ArtifactSearchResults,\n    CreateDesignContent,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedArtifact,\n    SearchedVersion\n} from \"@app/models\";\nimport {RhosrInstanceService, RhosrInstanceServiceFactory, useRhosrInstanceServiceFactory} from \"@app/services\";\nimport {ArtifactList, ArtifactListToolbar, ArtifactListToolbarCriteria, IfRhosr} from \"@app/pages/components\";\nimport {ListWithToolbar} from \"@app/components\";\nimport {EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type ArtifactSelectorProps = {\n    registries: Registry[];\n    onSelected: (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n};\n\n/**\n * A control that allows the user to find and select a single version of a single artifact from\n * a service registry instance.\n */\nexport const ArtifactSelector: FunctionComponent<ArtifactSelectorProps> = ({registries, onSelected}: ArtifactSelectorProps) => {\n    const [ querying, setQuerying ] = useState(true);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<ArtifactListToolbarCriteria>({\n        filterValue: \"\",\n        ascending: true,\n        filterSelection: \"name\"\n    });\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ artifacts, setArtifacts ] = useState<ArtifactSearchResults|undefined>();\n    const [ rhosrInstance, setRhosrInstance ] = useState<RhosrInstanceService>();\n\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    const onRegistrySelected = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    const onCriteriaChange = (criteria: ArtifactListToolbarCriteria): void =>  {\n        setCriteria(criteria);\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n    };\n\n    const fetchArtifactVersions = (artifact: SearchedArtifact): Promise<SearchedVersion[]> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactVersions(artifact.groupId, artifact.id);\n    };\n\n    const fetchArtifactContent = (artifact: SearchedArtifact, version?: SearchedVersion): Promise<string> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactContent(artifact.groupId, artifact.id, version?.version||\"latest\");\n    };\n\n    const onArtifactSelected = (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        onSelected(registry, artifact, version, content);\n    };\n\n    // Initialization\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, []);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    // Query for artifacts when relevant changes occur.\n    useEffect(() => {\n        if (rhosrInstance) {\n            const gac: GetArtifactsCriteria = {\n                sortAscending: criteria.ascending,\n                type: criteria.filterSelection,\n                value: criteria.filterValue\n            };\n            setQuerying(true);\n            rhosrInstance.getArtifacts(gac, paging).then(results => {\n                setArtifacts(results);\n                setQuerying(false);\n            }).catch(error => {\n                // TODO handle error\n                console.error(\"[RegistryPage] Error searching for artifacts: \", error);\n                setArtifacts({\n                    artifacts: [],\n                    count: 0,\n                    page: 1,\n                    pageSize: 20\n                });\n                setQuerying(false);\n            });\n        }\n        onSelected(undefined, undefined, undefined);\n    }, [rhosrInstance, criteria, paging]);\n\n    const toolbar: React.ReactNode = (\n        <ArtifactListToolbar registries={registries} criteria={criteria} paging={paging}\n                             onRegistrySelected={onRegistrySelected}\n                             menuAppendTo={document.getElementById('artifact-selector')}\n                             onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange}\n                             artifacts={artifacts} />\n    );\n\n    const emptyState: React.ReactNode = (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n            <EmptyStateBody>{\"No artifacts found in the registry instance.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    const filteredEmptyState: React.ReactNode = (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n            <EmptyStateBody>{\"No artifacts matched the filter criteria.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    const loadingComponent: React.ReactNode = (\n        <Spinner size=\"lg\" style={{marginTop: \"10px\"}} />\n    );\n\n    return (\n        <div id=\"artifact-selector\">\n            <ListWithToolbar toolbar={toolbar}\n                alwaysShowToolbar={true}\n                emptyState={emptyState}\n                filteredEmptyState={filteredEmptyState}\n                isFiltered={criteria.filterValue !== \"\"}\n                isLoading={querying}\n                loadingComponent={loadingComponent}\n                isEmpty={!artifacts || artifacts.count === 0}\n            >\n                <IfRhosr registry={registry as Registry} scope=\"read\" noAccess={<div/>}>\n                    <ArtifactList artifacts={artifacts?.artifacts} fetchArtifactContent={fetchArtifactContent}\n                        onArtifactSelected={onArtifactSelected}\n                        fetchArtifactVersions={fetchArtifactVersions} />\n                </IfRhosr>\n            </ListWithToolbar>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./artifact-list.css\";\nimport {CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {ArtifactListItem} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type ArtifactListProps = {\n    artifacts?: SearchedArtifact[];\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n    onArtifactSelected: (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactList: FunctionComponent<ArtifactListProps> = (\n    {artifacts, fetchArtifactVersions, fetchArtifactContent, onArtifactSelected}: ArtifactListProps) => {\n\n    const [selectedArtifact, setSelectedArtifact] = useState<SearchedArtifact>();\n\n    const onArtifactSelectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact selected: \", artifact);\n        setSelectedArtifact(artifact);\n    };\n\n    const onArtifactUnselectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact unselected: \", artifact);\n        setSelectedArtifact(undefined);\n        onArtifactSelected(undefined, undefined, undefined);\n    };\n\n    const onArtifactLoaded = (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent): void => {\n        console.debug(\"[ArtifactList] Artifact loaded: \", artifact);\n        console.debug(\"[ArtifactList] Selected Artifact: \", selectedArtifact);\n        if (artifact === selectedArtifact) {\n            onArtifactSelected(artifact, version, content);\n        }\n    };\n\n    return (\n        <div className=\"artifact-list\">\n            {\n                artifacts?.map( (artifact, idx) =>\n                    <ArtifactListItem artifact={artifact} key={idx}\n                                      onSelected={onArtifactSelectedInternal}\n                                      onUnselected={onArtifactUnselectedInternal}\n                                      fetchArtifactVersions={fetchArtifactVersions}\n                                      fetchArtifactContent={fetchArtifactContent}\n                                      onArtifactLoaded={onArtifactLoaded}\n                                      isSelected={selectedArtifact === artifact} />\n                )\n            }\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-item.css\";\nimport {ArtifactTypes, ContentTypes, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Badge, Radio, Spinner} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {ArtifactGroup, ArtifactName} from \"@app/pages/components\";\nimport {isJson, isXml, isYaml} from \"@app/utils\";\n\n/**\n * Properties\n */\nexport type ArtifactListItemProps = {\n    artifact: SearchedArtifact;\n    isSelected: boolean;\n    onSelected: (artifact: SearchedArtifact) => void;\n    onUnselected: (artifact: SearchedArtifact) => void;\n    onArtifactLoaded: (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent) => void;\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactListItem: FunctionComponent<ArtifactListItemProps> = (\n    {artifact, isSelected, onSelected, onUnselected, onArtifactLoaded, fetchArtifactVersions, fetchArtifactContent}: ArtifactListItemProps) => {\n\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [versions, setVersions] = useState<SearchedVersion[]>();\n    const [selectedVersion, setSelectedVersion] = useState<SearchedVersion>();\n    const [content, setContent] = useState<string>();\n    const [isContentLoaded, setContentLoaded] = useState<boolean>(false);\n\n    const labels = (): string[] => {\n        return artifact.labels ? artifact.labels : [];\n    };\n    const statuses = (): string[] => {\n        const rval: string[] = [];\n        if (artifact.state === \"DISABLED\") {\n            rval.push(\"Disabled\");\n        }\n        if (artifact.state === \"DEPRECATED\") {\n            rval.push(\"Deprecated\");\n        }\n        return rval;\n    };\n    const description = (): string => {\n        if (artifact.description) {\n            return artifact.description;\n        }\n        return `An artifact of type ${artifact.type} with no description.`;\n    };\n\n    const shouldLoadVersions = (): boolean => {\n        return versions === undefined || versions.length === 0;\n    };\n\n    const loadVersions = (): void => {\n        setContentLoaded(false);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Loading versions for ${artifact.id}`);\n        fetchArtifactVersions(artifact).then(versions => {\n            setVersions(versions);\n            setLoading(false);\n            onVersionSelect(undefined);\n        }).catch(error => {\n            // TODO handle errors\n        });\n    };\n\n    const onToggleSelected = (event: any): void => {\n        // Bit of a hack - if the user clicks the Version drop-down, don't do the\n        // artifact item toggling behavior.\n        if (event && event.target && event.target.localName === \"button\") {\n            return;\n        }\n\n        if (isSelected) {\n            onUnselected(artifact);\n        } else {\n            if (shouldLoadVersions()) {\n                loadVersions();\n            } else {\n                onVersionSelect(undefined);\n            }\n            onSelected(artifact);\n        }\n    };\n\n    const onVersionSelect = (version?: SearchedVersion): void => {\n        setSelectedVersion(version);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Version selected for ${artifact.id}, loading content. Version: `, version);\n        fetchArtifactContent(artifact, version).then(content => {\n            console.debug(\"[ArtifactListItem] Artifact content successfully fetched for: \", artifact.id)\n            setContent(content);\n            setLoading(false);\n            setContentLoaded(true);\n        }).catch(error => {\n            // TODO handle errors loading the artifact content\n        });\n    };\n\n    // Whenever the content changes, fire the \"onArtifactLoaded\" event.  Do this\n    // from inside useEffect() so that it's not happening from an async callback.\n    useEffect(() => {\n        if (content !== undefined) {\n            let contentType: string;\n            if (isJson(content)) {\n                contentType = ContentTypes.APPLICATION_JSON;\n            } else if (isYaml(content)) {\n                contentType = ContentTypes.APPLICATION_YAML;\n            } else if (isXml(content)) {\n                contentType = ContentTypes.APPLICATION_XML;\n            } else if (artifact.type === ArtifactTypes.PROTOBUF) {\n                contentType = ContentTypes.APPLICATION_PROTOBUF;\n            } else if (artifact.type === ArtifactTypes.GRAPHQL) {\n                contentType = ContentTypes.APPLICATION_GRAPHQL;\n            } else {\n                contentType = ContentTypes.APPLICATION_JSON;\n            }\n            const cdc: CreateDesignContent = {\n                contentType,\n                data: content\n            };\n            onArtifactLoaded(artifact, selectedVersion as SearchedVersion, cdc);\n        }\n    }, [content]);\n\n    return (\n        <div className={`artifact-list-item ${isSelected ? \"selected\" : \"\"} ${isContentLoaded ? \"loaded\" : \"\"}`}\n             onClick={onToggleSelected}>\n            <div className=\"artifact-list-item-radio\">\n                <IsLoading condition={isLoading} loadingComponent={(<Spinner size=\"sm\" />)}>\n                    <Radio id={`artifact-radio-${artifact.id}`} name=\"\" isChecked={isSelected} />\n                </IsLoading>\n            </div>\n            <div className=\"artifact-list-item-icon\">\n                <ArtifactTypeIcon type={artifact.type}/>\n            </div>\n            <div className=\"artifact-list-item-info\">\n                <div className=\"artifact-title\">\n                    <ArtifactGroup groupId={artifact.groupId} />\n                    <ArtifactName id={artifact.id} name={artifact.name} />\n                    {\n                        statuses().map( status =>\n                            <Badge className=\"status-badge\" key={status} isRead={true}>{status}</Badge>\n                        )\n                    }\n                </div>\n                <div className=\"artifact-description\">{description()}</div>\n            </div>\n            <div className=\"artifact-list-item-versions\">\n                <If condition={isSelected}>\n                    <ObjectSelect value={selectedVersion} items={versions as SearchedVersion[]}\n                                  toggleId={`artifact-list-item-${artifact.id}-version-select`}\n                                  noSelectionLabel=\"latest\" menuAppendTo=\"parent\"\n                                  onSelect={onVersionSelect} itemToString={version => version.version} />\n                </If>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    SelectVariant,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {ArtifactSearchResults, Paging} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {ObjectSelect} from \"@app/components/object-select\";\n\n\nexport interface ArtifactListToolbarCriteria {\n    filterSelection: string;\n    filterValue: string;\n    ascending: boolean;\n}\n\nexport type ArtifactListToolbarProps = {\n    registries: Registry[];\n    criteria: ArtifactListToolbarCriteria;\n    paging: Paging;\n    artifacts?: ArtifactSearchResults;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline' | undefined | null;\n    onRegistrySelected: (registry: Registry) => void;\n    onCriteriaChange: (criteria: ArtifactListToolbarCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n}\n\n\nexport const ArtifactListToolbar: FunctionComponent<ArtifactListToolbarProps> = ({registries, criteria, onCriteriaChange, paging,\n                                                                            onPagingChange, artifacts, onRegistrySelected, menuAppendTo}: ArtifactListToolbarProps) => {\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    const onRegistrySelectInternal = (registry: Registry): void => {\n        setRegistry(registry);\n        onRegistrySelected(registry);\n    };\n\n    const onToggleAscending = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            ascending: !criteria.ascending\n        });\n    };\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    }\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    }\n\n    const totalArtifactCount = (): number => {\n        return artifacts?.count || 0;\n    };\n\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, [registries]);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    return (\n        <Toolbar id=\"artifacts-toolbar-1\" className=\"artifacts-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <ObjectSelect value={registry} items={registries}\n                                  variant={SelectVariant.single}\n                                  onSelect={onRegistrySelectInternal}\n                                  toggleId=\"artifact-list-toolbar-registries\"\n                                  menuAppendTo={menuAppendTo || 'parent'}\n                                  itemToString={item => item.name} />\n                </ToolbarItem>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter artifacts\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem className=\"sort-icon-item\">\n                    <Button variant=\"plain\" aria-label=\"edit\" data-testid=\"toolbar-btn-sort\" onClick={onToggleAscending}>\n                        {\n                            criteria.ascending ? <SortAlphaDownIcon/> : <SortAlphaDownAltIcon/>\n                        }\n                    </Button>\n                </ToolbarItem>\n                <ToolbarItem className=\"artifact-paging-item\">\n                    <Pagination\n                        style={{padding: \"5px\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalArtifactCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"artifact-list-pagination\"\n                        className=\"artifact-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Gallery,\n    GalleryItem,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, CreateDesign, Template} from \"@app/models\";\nimport {TemplatesService, useTemplatesService} from \"@app/services\";\nimport {If, ServicePreviewWarning} from \"@app/components\";\nimport {TemplateItem} from \"@app/pages/components\";\n\nexport type CreateDesignModalProps = {\n    isOpen: boolean|undefined;\n    onCreate: (event: CreateDesign, template: Template) => void;\n    onCancel: () => void;\n}\n\n\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        }\n    };\n});\n\n\nexport const CreateDesignModal: FunctionComponent<CreateDesignModalProps> = ({isOpen, onCreate, onCancel}: CreateDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState(ArtifactTypes.OPENAPI);\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [templates, setTemplates] = useState<Template[]>();\n    const [template, setTemplate] = useState<Template>();\n\n    const templatesSvc: TemplatesService = useTemplatesService();\n\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setType((selection as any).value);\n        setTypeSelection(selection);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Create button in the modal\n    const doCreate = (): void => {\n        const cd: CreateDesign = {\n            type,\n            name,\n            summary,\n            context: {\n                type: \"create\"\n            }\n        };\n        onCreate(cd, template as Template);\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        if (!template) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, template]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setName(\"\");\n        setSummary(\"\");\n        setType(ArtifactTypes.OPENAPI);\n        if (templates) {\n            setTemplate(templates[0]);\n        } else {\n            setTemplate(undefined);\n        }\n    }, [isOpen]);\n\n    // Whenever the type changes, load the templates for that type. If the type is\n    // OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI) {\n            setVersion(\"3.0.2\");\n        }\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [type]);\n\n    // Whenever the version changes, fetch the templates for the current type and version.\n    useEffect(() => {\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [version]);\n\n    // Whenever the templates changes, auto-select the first one\n    useEffect(() => {\n        if (templates && templates.length > 0) {\n            setTemplate(templates[0]);\n        }\n    }, [templates]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Create a design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doCreate}>\n                    Create\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <ServicePreviewWarning />\n\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"create-design-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"create-design-name\"\n                        name=\"create-design-name\"\n                        aria-describedby=\"create-design-name-helper\"\n                        value={name}\n                        onChange={(value) => {setName(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"create-design-description\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"create-design-description\"\n                        name=\"create-design-description\"\n                        aria-describedby=\"create-design-description-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Type\" isRequired={true} fieldId=\"create-design-type\">\n                    <Select\n                        variant={SelectVariant.single}\n                        aria-label=\"Select type\"\n                        toggleId=\"create-design-type\"\n                        onToggle={() => {setTypeToggled(!isTypeToggled)}}\n                        onSelect={(event, selection) => onTypeSelect(selection)}\n                        isOpen={isTypeToggled}\n                        selections={typeSelection}\n                        menuAppendTo=\"parent\"\n                    >\n                        {\n                            TYPE_OPTIONS.map(to => <SelectOption key={(to as any).value} value={to} />)\n                        }\n                    </Select>\n                </FormGroup>\n                <If condition={type === ArtifactTypes.OPENAPI}>\n                    <FormGroup label=\"Version\" isRequired={true} fieldId=\"create-design-version\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select version\"\n                            toggleId=\"create-design-version\"\n                            onToggle={() => {setVersionToggled(!isVersionToggled)}}\n                            onSelect={(event, selection) => onVersionSelect(selection as string)}\n                            isOpen={isVersionToggled}\n                            selections={version}\n                            menuAppendTo=\"parent\"\n                        >\n                            <SelectOption value={\"3.0.2\"} />\n                            <SelectOption value={\"2.0\"} />\n                        </Select>\n                    </FormGroup>\n                </If>\n                <If condition={(templates && templates.length > 1) as boolean}>\n                    <FormGroup label=\"Template\" fieldId=\"create-design-template\">\n                        <Gallery hasGutter minWidths={{default: \"125px\"}} maxWidths={{default: \"125px\"}}>\n                        {\n                            templates?.map(t => (\n                                <GalleryItem key={t.id}>\n                                    <TemplateItem template={t} isSelected={t === template} onSelect={() => {\n                                        setTemplate(t)\n                                    }} />\n                                </GalleryItem>\n                            ))\n                        }\n                        </Gallery>\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, Text, TextContent} from \"@patternfly/react-core\";\nimport {Design} from \"@app/models\";\n\nexport type DeleteDesignModalProps = {\n    design: Design|undefined;\n    isOpen: boolean|undefined;\n    onDelete: (design: Design) => void;\n    onCancel: () => void;\n    onDownload: (design: Design) => void;\n}\n\nexport const DeleteDesignModal: FunctionComponent<DeleteDesignModalProps> = ({design, isOpen, onDelete, onDownload, onCancel}: DeleteDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    // Called when the user clicks the Delete button in the modal\n    const doDelete = (): void => {\n        onDelete(design as Design);\n    };\n\n    const doDownload = (): void => {\n        onDownload(design as Design);\n    };\n\n    useEffect(() => {\n        setValid(false);\n    }, [design, isOpen]);\n\n    return (\n        <Modal\n            variant={ModalVariant.small}\n            title=\"Delete design?\"\n            titleIconVariant=\"warning\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"delete\" variant=\"primary\" isDisabled={!isValid} onClick={doDelete}>\n                    Delete\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent style={{marginBottom: \"15px\"}}>\n                <Text component=\"p\">The following API or schema design will be deleted.</Text>\n            </TextContent>\n\n            <Form>\n                <FormGroup label=\"Name\" fieldId=\"delete-design-name\">\n                    <TextContent>{design?.name}</TextContent>\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"delete-design-description\">\n                    <TextContent>{design?.summary}</TextContent>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-warning\">\n                    <Alert isInline variant=\"info\" title=\"To save your data for future use, download the design.\">\n                        <p style={{lineHeight: \"18px\"}}>\n                            To ensure your data is successfully saved, wait for the download to complete\n                            before deleting the design.\n                        </p>\n                        <Button variant=\"link\" onClick={doDownload} style={{paddingLeft:\"0px\"}}>Download design</Button>\n                    </Alert>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-confirm\">\n                    <Checkbox id=\"valid-checkbox\" name=\"\" label=\"I understand that the design will be permanently deleted.\"\n                              isChecked={isValid} onChange={(checked) => setValid(checked)} />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-list.css\";\nimport {Design, DesignsSearchResults, DesignsSort} from \"@app/models\";\nimport {ResponsiveTable} from \"@rhoas/app-services-ui-components\";\nimport {ArtifactTypeIcon, DesignDescription, NavLink} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {KebabToggle, Truncate} from \"@patternfly/react-core\";\nimport {IAction} from \"@patternfly/react-table\";\nimport {ThProps} from \"@patternfly/react-table/src/components/TableComposable/Th\";\nimport {CustomActionsToggleProps} from \"@patternfly/react-table/src/components/Table/ActionsColumn\";\nimport {DesignOriginLabel} from \"@app/pages/components\";\n\n\nexport type DesignListProps = {\n    designs: DesignsSearchResults;\n    selectedDesign: Design | undefined;\n    sort: DesignsSort;\n    onSort: (sort: DesignsSort) => void;\n    onRename: (design: Design) => void;\n    onEdit: (design: Design) => void;\n    onDelete: (design: Design) => void;\n    onRegister: (design: Design) => void;\n    onDownload: (design: Design) => void;\n    onSelect: (design: Design|undefined) => void;\n}\n\nexport const DesignList: FunctionComponent<DesignListProps> = (\n    {designs, selectedDesign, sort, onSort, onEdit, onRename, onDelete, onRegister, onDownload, onSelect}: DesignListProps) => {\n\n    const [sortByIndex, setSortByIndex] = useState<number>();\n\n    const columns: any[] = [\n        { index: 0, id: \"name\", label: \"Name\", width: 40, sortable: true },\n        { index: 1, id: \"type\", label: \"Type\", width: 15, sortable: false },\n        { index: 2, id: \"modified-on\", label: \"Time updated\", width: 15, sortable: true },\n        { index: 3, id: \"context\", label: \"Origin\", width: 25, sortable: false },\n    ];\n\n    const renderColumnData = (column: Design, colIndex: number): React.ReactNode => {\n        // Name.\n        if (colIndex === 0) {\n            return (\n                <div>\n                    <NavLink className=\"design-title\"\n                             location={`/designs/${column.id}/editor`}>\n                        <Truncate content={column.name} tooltipPosition=\"top\" />\n                    </NavLink>\n                    <DesignDescription className=\"design-summary\"\n                                       description={column.summary}\n                                       truncate={true} />\n                </div>\n            );\n        }\n        // Type.\n        if (colIndex === 1) {\n            return <ArtifactTypeIcon type={column.type} isShowLabel={true} />\n        }\n        // Modified on.\n        if (colIndex === 2) {\n            return <Moment date={column.modifiedOn} fromNow={true} />\n        }\n        // Origin.\n        if (colIndex === 3) {\n            return <DesignOriginLabel design={column} />;\n        }\n        return <span />\n    };\n\n    const renderActionsToggle = (props: CustomActionsToggleProps): React.ReactNode => {\n        return <KebabToggle isDisabled={props.isDisabled} isOpen={props.isOpen} onToggle={(value, event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            props.onToggle(value);\n        }} />\n    }\n\n    const actionsFor = (design: any): IAction[] => {\n        return [\n            { title: \"View details\", onClick: () => onSelect(design) },\n            { isSeparator: true, },\n            { title: \"Edit design\", onClick: () => onEdit(design) },\n            { title: \"Rename design\", onClick: () => onRename(design) },\n            { title: \"Export to Service Registry\", onClick: () => onRegister(design) },\n            { title: \"Download design\", onClick: () => onDownload(design) },\n            { isSeparator: true, },\n            { title: \"Delete design\", onClick: () => onDelete(design) }\n        ];\n    }\n\n    const sortParams = (column: any): ThProps[\"sort\"] | undefined => {\n        return column.sortable ? {\n            sortBy: {\n                index: sortByIndex,\n                direction: sort.direction\n            },\n            onSort: (_event, index, direction) => {\n                const sort: DesignsSort = {\n                    by: index === 0 ? \"name\" : \"modified-on\",\n                    direction\n                };\n                onSort(sort);\n            },\n            columnIndex: column.index\n        } : undefined;\n    };\n\n    useEffect(() => {\n        setSortByIndex(sort.by === \"name\" ? 0 : 2);\n    }, [sort]);\n\n    return (\n        <div className=\"design-list\">\n            <ResponsiveTable\n                ariaLabel=\"list of designs\"\n                columns={columns}\n                data={designs.designs}\n                expectedLength={designs.count}\n                minimumColumnWidth={350}\n                onRowClick={(row) => onSelect(row.row.id === selectedDesign?.id ? undefined : row.row)}\n                renderHeader={({ column, Th, key }) => (\n                    <Th sort={sortParams(column)}\n                        className=\"design-list-header\"\n                        key={`header-${column.id}`}\n                        width={column.width}\n                        modifier=\"truncate\">{column.label}</Th>\n                )}\n                renderCell={({ column, row, colIndex, Td, key }) => (\n                    <Td className=\"design-list-cell\" key={`cell-${colIndex}-${row.id}`} children={renderColumnData(row as Design, colIndex)} />\n                )}\n                renderActions={({row, ActionsColumn}) => (\n                    <ActionsColumn key={`actions-${row['id']}`}\n                                   actionsToggle={renderActionsToggle}\n                                   items={actionsFor(row)}/>\n                )}\n                isRowSelected={({ row }) => row.id === selectedDesign?.id}\n            />\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs.panel.css\";\nimport {Alert, AlertActionCloseButton, Card, CardBody} from \"@patternfly/react-core\";\nimport {\n    AlertsService,\n    DesignsService,\n    DownloadService, LocalStorageService, useAlertsService,\n    useDesignsService,\n    useDownloadService,\n    useLocalStorageService\n} from \"@app/services\";\nimport {Design, DesignsSearchCriteria, DesignsSearchResults, DesignsSort, Paging} from \"@app/models\";\nimport {If, ListWithToolbar, RegistryNavLink} from \"@app/components\";\nimport {\n    DeleteDesignModal,\n    DesignList,\n    DesignsEmptyState,\n    DesignsEmptyStateFiltered,\n    DesignsToolbar,\n    ExportToRhosrData,\n    ExportToRhosrModal,\n    ImportFrom,\n    RenameData,\n    RenameModal\n} from \"@app/pages/components\";\nimport {Navigation, useNavigation} from \"@app/contexts/navigation\";\nimport {contentTypeForDesign, convertToValidFilename, fileExtensionForDesign} from \"@app/utils\";\nimport {AlertVariant, useAlert} from \"@rhoas/app-services-ui-shared\";\n\n\nexport type DesignsPanelProps = {\n    selectedDesign: Design | undefined;\n    onDesignSelected: (design: Design | undefined) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n}\n\n\nexport const DesignsPanel: FunctionComponent<DesignsPanelProps> = ({selectedDesign, onDesignSelected, onCreate, onImport}: DesignsPanelProps) => {\n    const [ isLoading, setLoading ] = useState(false);\n    const [ showDataWarning, setShowDataWarning ] = useState(true);\n    const [ refresh, setRefresh ] = useState(1);\n    const [ isFiltered, setFiltered ] = useState(false);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<DesignsSearchCriteria>({\n        filterValue: \"\",\n        filterOn: \"name\"\n    });\n    const [ sort, setSort ] = useState<DesignsSort>({\n        by: \"modified-on\",\n        direction: \"desc\"\n    });\n    const [ designs, setDesigns ] = useState<DesignsSearchResults>();\n    const [ designToDelete, setDesignToDelete ] = useState<Design>();\n    const [ isDeleteModalOpen, setDeleteModalOpen ] = useState(false);\n    const [ designToRegister, setDesignToRegister ] = useState<Design>();\n    const [ isRegisterModalOpen, setRegisterModalOpen ] = useState(false);\n    const [ designToRename, setDesignToRename ] = useState<Design>();\n    const [ isRenameModalOpen, setRenameModalOpen ] = useState(false);\n\n    const designsSvc: DesignsService = useDesignsService();\n    const downloadSvc: DownloadService = useDownloadService();\n    const nav: Navigation = useNavigation();\n    const alerts: AlertsService = useAlertsService();\n    const local: LocalStorageService = useLocalStorageService();\n\n    const doRefresh = (): void => {\n        setRefresh(refresh + 1);\n    };\n\n    const onEditDesign = (design: Design): void => {\n        nav.navigateTo(`/designs/${design.id}/editor`);\n    };\n\n    const onRenameDesign = (design: Design): void => {\n        setDesignToRename(design);\n        setRenameModalOpen(true);\n    };\n\n    const doRenameDesign = (event: RenameData): void => {\n        designsSvc.renameDesign(designToRename?.id as string, event.name, event.summary).then(() => {\n            if (designToRename) {\n                designToRename.name = event.name;\n                designToRename.summary = event.summary;\n            }\n            setRenameModalOpen(false);\n            alerts.designRenamed(event);\n        }).catch(e => {\n            // TODO error handling\n        })\n    };\n\n    const onDeleteDesign = (design: Design): void => {\n        setDesignToDelete(design);\n        setDeleteModalOpen(true);\n    };\n\n    const onDeleteDesignConfirmed = (design: Design): void => {\n        designsSvc.deleteDesign(design.id).then(() => {\n            doRefresh();\n            alerts.designDeleted(design);\n        }).catch(error => {\n            console.error(\"[DesignsPanel] Error deleting design: \", error);\n            alerts.designDeleteFailed(design, error);\n        });\n        setDeleteModalOpen(false);\n    };\n\n    const onRegisterDesign = (design: Design): void => {\n        setDesignToRegister(design);\n        setRegisterModalOpen(true);\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        alerts.designExportedToRhosr(event);\n    };\n\n    const onDownloadDesign = (design: Design): void => {\n        designsSvc.getDesignContent(design.id).then(content => {\n            const filename: string = `${convertToValidFilename(design.name)}.${fileExtensionForDesign(design, content)}`;\n            const contentType: string = contentTypeForDesign(design, content);\n            const theContent: string = typeof content.data === \"object\" ? JSON.stringify(content.data, null, 4) : content.data as string;\n            downloadSvc.downloadToFS(design, theContent, contentType, filename);\n        });\n    };\n\n    const onCriteriaChange = (criteria: DesignsSearchCriteria): void =>  {\n        setCriteria(criteria);\n        setPaging({\n            page: 1,\n            pageSize: paging.pageSize\n        });\n        setFiltered(criteria.filterValue != undefined && criteria.filterValue.trim().length > 0);\n        doRefresh();\n    };\n\n    const onSortDesigns = (sort: DesignsSort): void => {\n        setSort(sort);\n        doRefresh();\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n        doRefresh();\n    };\n\n    useEffect(() => {\n        setShowDataWarning(\"true\" === local.getConfigProperty(\"designs.panel.show-data-warning\", \"true\"));\n    }, []);\n\n    useEffect(() => {\n        setLoading(true);\n        onDesignSelected(undefined);\n        designsSvc.searchDesigns(criteria, paging, sort).then(designs => {\n            console.debug(\"[DesignsPanel] Designs loaded: \", designs);\n            setDesigns(designs);\n            setLoading(false);\n        }).catch(error => {\n            // TODO need error handling\n            console.error(error);\n        });\n    }, [refresh]);\n\n    const emptyState: React.ReactNode = (\n        <DesignsEmptyState onCreate={onCreate} onImport={onImport} />\n    );\n\n    const emptyStateFiltered: React.ReactNode = (\n        <DesignsEmptyStateFiltered onClear={() => {\n            onCriteriaChange({\n                filterValue: \"\",\n                filterOn: \"\"\n            });\n        }} />\n    );\n\n    const toolbar: React.ReactNode = (\n        <DesignsToolbar designs={designs} criteria={criteria} paging={paging}\n                        onCreate={onCreate} onImport={onImport}\n                        onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange} />\n    );\n\n    const onCloseDataWarning = (): void => {\n        setShowDataWarning(false);\n        local.setConfigProperty(\"designs.panel.show-data-warning\", \"false\");\n    };\n\n    return (\n        <div className=\"designs-panel\">\n            <ListWithToolbar toolbar={toolbar}\n                             emptyState={emptyState}\n                             filteredEmptyState={emptyStateFiltered}\n                             isLoading={isLoading}\n                             isFiltered={isFiltered}\n                             isEmpty={!designs || designs.count === 0}>\n                <Card isSelectable={false}>\n                    <CardBody className=\"panel-body\">\n                        <If condition={showDataWarning}>\n                            <Alert className=\"panel-alert\"\n                                   isInline={true}\n                                   variant=\"info\"\n                                   title=\"Service Preview: Data is stored locally in your browser\"\n                                   actionClose={<AlertActionCloseButton onClose={onCloseDataWarning} />}\n                                   style={{ marginBottom: \"15px\"}}>\n                                <p>\n                                    In the Service Preview release of OpenShift API Designer, all designs are stored\n                                    locally in your browser. Clearing your browser cache or switching to a new browser\n                                    might result in loss of data. Make sure you save your work by downloading your\n                                    designs locally or by exporting them to a Red Hat OpenShift Service Registry instance.\n                                </p>\n                            </Alert>\n                        </If>\n                        <DesignList designs={designs as DesignsSearchResults}\n                                    selectedDesign={selectedDesign}\n                                    sort={sort}\n                                    onSelect={onDesignSelected}\n                                    onSort={onSortDesigns}\n                                    onEdit={onEditDesign}\n                                    onRename={onRenameDesign}\n                                    onDownload={onDownloadDesign}\n                                    onRegister={onRegisterDesign}\n                                    onDelete={onDeleteDesign} />\n                    </CardBody>\n                </Card>\n            </ListWithToolbar>\n            <DeleteDesignModal design={designToDelete}\n                              isOpen={isDeleteModalOpen}\n                              onDelete={onDeleteDesignConfirmed}\n                              onDownload={onDownloadDesign}\n                              onCancel={() => setDeleteModalOpen(false)} />\n            <ExportToRhosrModal design={designToRegister as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n            <RenameModal design={designToRename}\n                         isOpen={isRenameModalOpen}\n                         onRename={doRenameDesign}\n                         onCancel={() => setRenameModalOpen(false)} />\n        </div>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    Title\n} from \"@patternfly/react-core\";\nimport {AddCircleOIcon} from \"@patternfly/react-icons\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateProps = {\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyState: FunctionComponent<DesignsEmptyStateProps> = ({onCreate, onImport}: DesignsEmptyStateProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                No designs\n            </Title>\n            <EmptyStateBody>\n                To get started, create or import a design.\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={onCreate}>Create design</Button>\n            <EmptyStateSecondaryActions>\n                <ImportDropdown variant=\"long\" onImport={onImport} />\n            </EmptyStateSecondaryActions>\n        </EmptyState>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {\n    Bullseye,\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from \"@patternfly/react-core\";\nimport {SearchIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateFilteredProps = {\n    onClear: () => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyStateFiltered: FunctionComponent<DesignsEmptyStateFilteredProps> = ({onClear}: DesignsEmptyStateFilteredProps) => {\n    return (\n        <Bullseye style={{backgroundColor: \"white\"}}>\n            <EmptyState variant={EmptyStateVariant.small}>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    No matching designs\n                </Title>\n                <EmptyStateBody>Adjust your filters and try again.</EmptyStateBody>\n                <Button variant=\"link\" onClick={onClear}>Clear all filters</Button>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {DesignsSearchCriteria, DesignsSearchResults, Paging} from \"@app/models\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n\n/**\n * Properties\n */\nexport type DesignsToolbarProps = {\n    criteria: DesignsSearchCriteria;\n    paging: Paging;\n    designs?: DesignsSearchResults;\n    onCriteriaChange: (criteria: DesignsSearchCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n\n/**\n * The toolbar to filter (and paginate) the collection of designs.\n */\nexport const DesignsToolbar: FunctionComponent<DesignsToolbarProps> = (\n    {criteria, paging, designs, onCriteriaChange, onPagingChange, onCreate, onImport}: DesignsToolbarProps) => {\n\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    };\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    };\n\n    const totalDesignCount = (): number => {\n        return designs?.count || 0;\n    };\n\n    return (\n        <Toolbar id=\"designs-toolbar\" className=\"designs-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter designs\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem>\n                    <Button variant=\"primary\" onClick={onCreate}>Create design</Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                    <ImportDropdown variant=\"long\" onImport={onImport} />\n                </ToolbarItem>\n                <ToolbarItem className=\"design-paging-item\">\n                    <Pagination\n                        style={{padding: \"0\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalDesignCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"design-list-pagination\"\n                        className=\"design-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Button,\n    FileUpload,\n    Form,\n    FormGroup,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, ContentTypes, CreateDesign, CreateDesignContent} from \"@app/models\";\nimport {If, ServicePreviewWarning} from \"@app/components\";\nimport {ImportFrom, UrlUpload} from \"@app/pages/components\";\nimport {isJson, isProto, isWsdl, isXml, isXsd, isYaml, parseJson, parseYaml} from \"@app/utils\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\n\n\nexport type ImportDesignModalProps = {\n    importType: ImportFrom;\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nconst PLACEHOLDER_TYPE_OPTION: SelectOptionObject = {\n    // @ts-ignore\n    value: undefined,\n    label: \"Select a type...\",\n    toString: () => {\n        return \"Select a type...\";\n    },\n    compareTo(selectOption: any): boolean {\n        return selectOption === this;\n    }\n};\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        },\n        compareTo(selectOption: any): boolean {\n            return this.value === selectOption.value;\n        }\n    };\n});\n\n\ntype DetectionInfo = {\n    type?: string;\n    contentType?: string;\n    version?: string;\n    name?: string;\n    summary?: string;\n}\n\n\nexport const ImportDesignModal: FunctionComponent<ImportDesignModalProps> = ({importType, isOpen, onImport, onCancel}: ImportDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    const [designContent, setDesignContent] = useState<string>();\n    const [fileName, setFileName] = useState<string>();\n    const [url, setUrl] = useState<string>();\n\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState<string>();\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [contentType, setContentType] = useState<string>();\n\n    const onFileChange = (value: string | File, fname: string): void => {\n        setDesignContent(value as string);\n        setFileName(fname);\n    };\n\n    const onUrlChange = (value: string|undefined, url: string|undefined): void => {\n        setDesignContent(value);\n        setUrl(url);\n    };\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setTheType((selection as any).value);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        const context: DesignContext = importType === ImportFrom.FILE ? {\n            type: \"file\",\n            file: {\n                fileName: fileName as string\n            }\n        } : {\n            type: \"url\",\n            url: {\n                url: url as string\n            }\n        };\n        const cd: CreateDesign = {\n            type: type as string,\n            name,\n            summary,\n            context\n        };\n        const cdc: CreateDesignContent = {\n            contentType: contentType as string,\n            data: designContent\n        };\n\n        console.debug(\"[ImportDesignModal] Importing design: \", cd);\n        console.debug(\"[ImportDesignModal] Importing content-type: \", contentType);\n        onImport(cd, cdc);\n    };\n\n    const hasDesignContent = (): boolean => {\n        return designContent !== undefined && designContent.trim().length > 0;\n    };\n\n    const title = (): string => {\n        if (importType === ImportFrom.FILE) {\n            return \"Import design from file\";\n        } else {\n            return \"Import design from URL\";\n        }\n    };\n\n    const detectJsonOrYamlInfo = (contentObj: any, contentType: string): DetectionInfo => {\n        if (contentObj.openapi) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"3.0.2\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.swagger) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"2.0\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.asyncapi) {\n            return {\n                type: ArtifactTypes.ASYNCAPI,\n                contentType: contentType,\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.$schema) {\n            return {\n                type: ArtifactTypes.JSON,\n                contentType: contentType,\n                name: contentObj.title,\n                summary: contentObj.description\n            };\n        }\n\n        return {\n            type: ArtifactTypes.AVRO,\n            contentType: contentType,\n            name: contentObj.name\n        }\n    }\n\n    const detectXmlInfo = (content: string): DetectionInfo => {\n        let type: string = ArtifactTypes.XML;\n        if (isWsdl(content)) {\n            type = ArtifactTypes.WSDL;\n        } else if (isXsd(content)) {\n            type = ArtifactTypes.XSD;\n        }\n        return {\n            type,\n            contentType: ContentTypes.TEXT_XML\n        };\n    }\n\n    const detectProtoInfo = (): DetectionInfo => {\n        return {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            type: ArtifactTypes.PROTOBUF\n        };\n    }\n\n    // Tries to figure out the type and meta-data of the content by parsing it and looking\n    // for key indicators.\n    const detectInfo = (content: string): DetectionInfo => {\n        if (isJson(content)) {\n            return detectJsonOrYamlInfo(parseJson(content), ContentTypes.APPLICATION_JSON);\n        } else if (isYaml(content)) {\n            return detectJsonOrYamlInfo(parseYaml(content), ContentTypes.APPLICATION_YAML);\n        } else if (isXml(content)) {\n            return detectXmlInfo(content);\n        } else if (isProto(content)) {\n            return detectProtoInfo();\n        }\n        console.warn(\"[ImportDesignModal] Failed to detect the type of the content.\");\n        // Default: nothing detected\n        return {\n        };\n\n        // TODO handle parsing of GraphQL\n    };\n\n    const setTheType = (newType: string|undefined): void => {\n        if (newType === undefined) {\n            setType(undefined);\n            setTypeSelection(undefined);\n        } else {\n            setType(newType);\n            // @ts-ignore (there really is a value on the option)\n            const newTypeSelection: SelectOptionObject = TYPE_OPTIONS.filter(option => option.value === newType)[0];\n            setTypeSelection(newTypeSelection);\n        }\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!designContent) {\n            valid = false;\n        }\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, designContent]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setDesignContent(undefined);\n        setName(\"\");\n        setSummary(\"\");\n        setFileName(undefined);\n        setTheType(undefined);\n    }, [isOpen]);\n\n    // Whenever the content changes (e.g. loaded from file) try to detect the\n    // type of the content.\n    useEffect(() => {\n        if (designContent && designContent.trim().length > 0) {\n            const info: DetectionInfo = detectInfo(designContent as string);\n            console.debug(\"[ImportDesignModal] Content detection: \", info);\n            console.debug(\"[ImportDesignModal] Version detected: \", info.version || \"\");\n\n            setTheType(info.type);\n            setVersion(info.version || \"\");\n            setName(info.name || \"\");\n            setSummary(info.summary || \"\");\n            setContentType(info.contentType);\n        } else {\n            console.debug(\"[ImportDesignModal] Content empty, resetting form fields.\");\n            setName(\"\");\n            setSummary(\"\");\n            setTheType(undefined);\n            setContentType(undefined);\n        }\n    }, [designContent]);\n\n    // Whenever the type changes to OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI && version === undefined) {\n            setVersion(\"3.0.2\");\n        }\n    }, [type]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title={title()}\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n                    Import\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <ServicePreviewWarning />\n\n            <Form>\n                <If condition={importType === ImportFrom.FILE}>\n                    <FormGroup label=\"File\" isRequired={true} fieldId=\"import-design-file\">\n                        <FileUpload\n                            isRequired={true}\n                            id=\"design-text-file\"\n                            type=\"text\"\n                            value={designContent}\n                            filename={fileName}\n                            filenamePlaceholder=\"Drag and drop a file or upload one\"\n                            onChange={onFileChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={importType === ImportFrom.URL}>\n                    <FormGroup label=\"URL\" isRequired={true} fieldId=\"import-design-url\">\n                        <UrlUpload\n                            id=\"design-text-url\"\n                            urlPlaceholder=\"Enter a valid and accessible URL\"\n                            onChange={onUrlChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={hasDesignContent}>\n                    <FormGroup label=\"Type\" isRequired={true} fieldId=\"import-design-type\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select type\"\n                            onToggle={() => setTypeToggled(!isTypeToggled)}\n                            onSelect={(event, selection) => onTypeSelect(selection)}\n                            isOpen={isTypeToggled}\n                            selections={typeSelection}\n                            menuAppendTo=\"parent\"\n                        >\n                            {\n                                [\n                                    <SelectOption key={-1} value={PLACEHOLDER_TYPE_OPTION} isPlaceholder={true}/>,\n                                    ...TYPE_OPTIONS.map((to, index) => <SelectOption key={index} value={to}/>)\n                                ]\n                            }\n                        </Select>\n                    </FormGroup>\n                    <If condition={type === ArtifactTypes.OPENAPI}>\n                        <FormGroup label=\"Version\" isRequired={true} fieldId=\"import-design-version\">\n                            <Select\n                                variant={SelectVariant.single}\n                                aria-label=\"Select version\"\n                                onToggle={() => setVersionToggled(!isVersionToggled)}\n                                onSelect={(event, selection) => onVersionSelect(selection as string)}\n                                isOpen={isVersionToggled}\n                                selections={version}\n                                menuAppendTo=\"parent\"\n                            >\n                                <SelectOption key={1} value=\"3.0.2\"/>\n                                <SelectOption key={2} value=\"2.0\"/>\n                            </Select>\n                        </FormGroup>\n                    </If>\n                    <FormGroup label=\"Name\" isRequired={true} fieldId=\"import-design-name\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"import-design-name\"\n                            name=\"import-design-name\"\n                            aria-describedby=\"import-design-name-helper\"\n                            value={name}\n                            onChange={(value) => setName(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Description\" fieldId=\"import-design-description\">\n                        <TextArea\n                            type=\"text\"\n                            id=\"import-design-description\"\n                            name=\"import-design-description\"\n                            aria-describedby=\"import-design-description-helper\"\n                            value={summary}\n                            onChange={(value) => setSummary(value)}\n                        />\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Button, Modal, ModalVariant} from \"@patternfly/react-core\";\nimport {CreateDesign, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {RhosrService, useRhosrService} from \"@app/services\";\nimport {If, IsLoading, RhosrEmptyState, ServicePreviewWarning} from \"@app/components\";\nimport {ArtifactSelector} from \"@app/pages/components\";\n\n\nexport type ImportFromRhosrModalProps = {\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nexport const ImportFromRhosrModal: FunctionComponent<ImportFromRhosrModalProps> = ({isOpen, onImport, onCancel}: ImportFromRhosrModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [isLoading, setLoading] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [design, setDesign] = useState<CreateDesign>();\n    const [designContent, setDesignContent] = useState<CreateDesignContent>();\n\n    const rhosr: RhosrService = useRhosrService();\n\n    // Called when the user selects an artifact from the artifact selector.\n    const onArtifactSelected = (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        if (artifact === undefined) {\n            setDesign(undefined);\n            setDesignContent(undefined);\n        } else {\n            const cd: CreateDesign = {\n                type: artifact.type,\n                name: artifact.name || artifact.id,\n                summary: artifact.description || \"\",\n                context: {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: artifact.groupId as string,\n                        artifactId: artifact.id,\n                        version: version?.version as string\n                    }\n                }\n            };\n            setDesign(cd);\n            setDesignContent(content);\n        }\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        onImport(design as CreateDesign, designContent as CreateDesignContent);\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                setLoading(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[ImportFromRhosrModal] Error getting registry list: \", error);\n                setRegistries([]);\n                setLoading(false);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        let valid: boolean = true;\n        if (design === undefined) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [design, designContent]);\n\n    let actions: any[] = registries.length === 0 ? [] : [\n        <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n            Import\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n            Cancel\n        </Button>\n    ];\n\n    return (\n        <Modal\n            variant={ModalVariant.large}\n            title=\"Import design from Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={actions}\n        >\n            <IsLoading condition={isLoading}>\n                <If condition={registries.length === 0}>\n                    <RhosrEmptyState />\n                </If>\n                <If condition={registries.length > 0}>\n                    <ServicePreviewWarning />\n                    <ArtifactSelector registries={registries} onSelected={onArtifactSelected} />\n                </If>\n            </IsLoading>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Template} from \"@app/models\";\nimport \"./template-item.css\";\nimport {PlusCircleIcon} from \"@patternfly/react-icons\";\n\nexport type TemplateItemProps = {\n    template: Template;\n    isSelected: boolean;\n    onSelect: (template: Template) => void;\n}\n\nexport const TemplateItem: FunctionComponent<TemplateItemProps> = ({template, isSelected, onSelect}: TemplateItemProps) => {\n    const onClick = (): void => {\n        if (!isSelected) {\n            onSelect(template);\n        }\n    };\n\n    return (\n        <div className={`template-item ${isSelected ? \"selected\" : \"not-selected\"}`} onClick={onClick}>\n            <div className=\"icon\">\n                <PlusCircleIcon />\n            </div>\n            <div className=\"name\">{template.name}</div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./url-upload.css\";\nimport {Button, Spinner, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {If, IsLoading} from \"@app/components\";\nimport {UrlService, useUrlService} from \"@app/services\";\n\n/**\n * Properties\n */\nexport type UrlUploadProps = {\n    id: string|\"url-upload\";\n    urlPlaceholder: string|\"\";\n    onChange: (value: string|undefined, url: string|undefined) => void;\n};\n\n/**\n * A control similar to the FileUpload control from patternfly that allows uploading from\n * a URL instead of a file.\n */\nexport const UrlUpload: FunctionComponent<UrlUploadProps> = ({id, urlPlaceholder, onChange}: UrlUploadProps) => {\n    const [url, setUrl] = useState<string>();\n    const [previewContent, setPreviewContent] = useState<string>();\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [downloadError, setDownloadError] = useState<string>();\n\n    const urlService: UrlService = useUrlService();\n\n    const onTextInputChange = (value: string): void => {\n        setUrl(value);\n    };\n\n    const hasUrl = (): boolean => {\n        return url != undefined && url.trim().length > 0;\n    };\n\n    const hasError = (): boolean => {\n        return downloadError != undefined && downloadError.trim().length > 0;\n    };\n\n    const onFetch = (): void => {\n        setLoading(true);\n        urlService.fetchUrlContent(url as string).then(content => {\n            setDownloadError(undefined);\n            setPreviewContent(content);\n            setLoading(false);\n            onChange(content, url);\n        }).catch(error => {\n            setDownloadError(error.message);\n            setLoading(false);\n        });\n    };\n\n    const onClear = (): void => {\n        setUrl(\"\");\n        setPreviewContent(\"\");\n        onChange(undefined, undefined);\n    };\n\n    const spinner: React.ReactNode = (\n        <div className=\"url-upload-loading\">\n            <Spinner size=\"md\" className=\"spinner\" />\n            <span className=\"spinner-message\">Loading URL content</span>\n        </div>\n    );\n\n    return (\n        <div className=\"url-upload\">\n            <div className=\"url-upload-flex\">\n                <div className=\"url-upload-url\">\n                    <TextInput value={url} type=\"text\" placeholder={urlPlaceholder}\n                               onChange={onTextInputChange} aria-label=\"url input\" />\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onFetch}>Fetch</Button>\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onClear}>Clear</Button>\n                </div>\n            </div>\n            <div className=\"url-upload-preview\">\n                <IsLoading condition={isLoading} loadingComponent={spinner}>\n                    <If condition={hasError}>\n                        <div className=\"url-upload-error\">\n                            <div>\n                                Error getting content from URL.\n                            </div>\n                            <div>\n                                {downloadError}\n                            </div>\n                        </div>\n                    </If>\n                    <If condition={!hasError()}>\n                        <TextArea value={previewContent} isReadOnly={true}></TextArea>\n                    </If>\n                </IsLoading>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./design-details-panel.css\";\nimport {Design} from \"@app/models\";\nimport {Tab, Tabs, TabTitleText} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, DateTime, DesignDescription} from \"@app/components\";\nimport {DesignEvents, DesignHistory, DesignOriginLabel} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignDetailsPanelProps = {\n    design: Design | undefined;\n};\n\n/**\n * Details panel with metadata and history about a single selected design.\n */\nexport const DesignDetailsPanel: FunctionComponent<DesignDetailsPanelProps> = ({design}: DesignDetailsPanelProps) => {\n\n    const [activeTabKey, setActiveTabKey] = useState<string>(\"details\");\n\n    return (\n        <React.Fragment>\n            <Tabs\n                activeKey={activeTabKey}\n                onSelect={(event, eventKey) => {setActiveTabKey(eventKey as string)}}\n                aria-label=\"Design panel detail tabs\"\n            >\n                <Tab eventKey=\"details\" title={<TabTitleText>Details</TabTitleText>}>\n                    <div className=\"design-details-grid\">\n                        <div className=\"design-details-label\">Description</div>\n                        <DesignDescription className=\"design-details-value\" description={design?.summary} />\n\n                        <div className=\"design-details-label\">Type</div>\n                        <div className=\"design-details-value\">\n                            <ArtifactTypeIcon type={design?.type as string} isShowLabel={true} isShowIcon={false} />\n                        </div>\n\n                        <div className=\"design-details-label\">Time created</div>\n                        <div className=\"design-details-value\"><DateTime date={design?.createdOn} /></div>\n\n                        <div className=\"design-details-label\">Time updated</div>\n                        <div className=\"design-details-value\"><DateTime date={design?.modifiedOn} /></div>\n\n                        <div className=\"design-details-label\">Origin</div>\n                        <div className=\"design-details-value\">\n                            <DesignOriginLabel design={design} />\n                        </div>\n                    </div>\n                </Tab>\n                <Tab eventKey=\"events\" title={<TabTitleText>Events</TabTitleText>}>\n                    <DesignEvents design={design as Design} />\n                </Tab>\n                <Tab eventKey=\"history\" title={<TabTitleText>History</TabTitleText>}>\n                    <DesignHistory design={design as Design} />\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-history.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport {DateTime, IfNotEmpty, IsLoading} from \"@app/components\";\nimport {DesignEventType} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignHistoryProps = {\n    design: Design;\n};\n\nexport const DesignHistory: FunctionComponent<DesignHistoryProps> = ({design}: DesignHistoryProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [events, setEvents] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setEvents(events);\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <IsLoading condition={isLoading}>\n            <IfNotEmpty collection={events}>\n                <div className=\"design-history\">\n                    {\n                        events?.map((event, idx) => (\n                            <React.Fragment key={idx}>\n                                <div key={`${idx}-type`} className=\"event-type\"><DesignEventType event={event} /></div>\n                                <div key={`${idx}-time`} className=\"event-time\"><DateTime date={event.on} /></div>\n                            </React.Fragment>\n                        ))\n                    }\n                </div>\n            </IfNotEmpty>\n        </IsLoading>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-events.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport {DateTime, If, IfNotEmpty, IsLoading, RegistryNavLink} from \"@app/components\";\nimport {DesignEventType, DesignOriginLabel} from \"@app/pages/components\";\nimport {hasOrigin} from \"@app/utils\";\nimport {Divider} from \"@patternfly/react-core\";\n\n\nexport type DesignEventsProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignEvents: FunctionComponent<DesignEventsProps> = ({design}: DesignEventsProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [exports, setExports] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    const originGroupId = (): string => {\n        return design?.origin?.rhosr?.groupId || \"default\";\n    };\n    const originArtifactId = (): string => {\n        return design?.origin?.rhosr?.artifactId || \"Unknown\";\n    };\n    const originVersion = (): string => {\n        return design?.origin?.rhosr?.version || \"latest\";\n    };\n    const originFilename = (): string => {\n        return design?.origin?.file?.fileName || \"\";\n    };\n    const originUrl = (): string => {\n        return design?.origin?.url?.url || \"\";\n    };\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setExports(events?.filter(event => event.type === \"download\" || event.type === \"register\"));\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <React.Fragment>\n            <div className=\"design-events-origin\">\n                <div className=\"design-events-origin-label\">Origin</div>\n                <div className=\"design-events-origin-value\">\n                    <DesignOriginLabel design={design} />\n                </div>\n\n                <div className=\"design-events-origin-label\">Time created</div>\n                <div className=\"design-events-origin-value\"><DateTime date={design?.createdOn} /></div>\n\n                <If condition={hasOrigin(design, \"rhosr\")}>\n                    <div className=\"design-events-origin-label\">Group</div>\n                    <div className=\"design-events-origin-value\">{originGroupId()}</div>\n\n                    <div className=\"design-events-origin-label\">ID</div>\n                    <div className=\"design-events-origin-value\">{originArtifactId()}</div>\n\n                    <div className=\"design-events-origin-label\">Version</div>\n                    <div className=\"design-events-origin-value\">{originVersion()}</div>\n\n                    <div className=\"design-events-origin-colspan\">\n                        <RegistryNavLink context={design?.origin}>View artifact in Service Registry</RegistryNavLink>\n                    </div>\n                </If>\n\n                <If condition={hasOrigin(design, \"file\")}>\n                    <div className=\"design-events-origin-label\">File name</div>\n                    <div className=\"design-events-origin-value\">{originFilename()}</div>\n                </If>\n\n                <If condition={hasOrigin(design, \"url\")}>\n                    <div className=\"design-events-origin-label\">URL</div>\n                    <div className=\"design-events-origin-value\">\n                        <a href={originUrl()}>{originUrl()}</a>\n                    </div>\n                </If>\n            </div>\n            <Divider className=\"design-events-divider\" />\n            <IsLoading condition={isLoading}>\n                <div className=\"design-events-origin-exports\">\n                    <div className=\"design-events-origin-exports-label\">Exported to</div>\n                    <div></div>\n\n                    <IfNotEmpty collection={exports} emptyState={(\n                        <span>This design has not been exported.</span>\n                    )}>\n                        {\n                            exports?.map((event, idx) => (\n                                <React.Fragment key={idx}>\n                                    <div key={`${idx}-type`} className=\"design-events-origin-exports-item\"><DesignEventType event={event} variant=\"short\" /></div>\n                                    <div key={`${idx}-time`} className=\"design-events-origin-exports-time\"><DateTime date={event.on} /></div>\n                                </React.Fragment>\n                            ))\n                        }\n                    </IfNotEmpty>\n                </div>\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {DesignEvent} from \"@app/models\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {RegistryNavLink} from \"@app/components\";\n\n\nexport type DesignEventTypeProps = {\n    event: DesignEvent;\n    variant?: \"long\" | \"short\";  // Default is \"long\"\n};\n\n\nexport const DesignEventType: FunctionComponent<DesignEventTypeProps> = ({event, variant}: DesignEventTypeProps) => {\n    const typeLabel = (): React.ReactNode => {\n        switch (event.type) {\n            case \"download\":\n                return variant === \"short\" ? <span>File</span> : <span>Downloaded to file system</span>;\n            case \"create\":\n                return variant === \"short\" ? <span>New</span> : <span>Created new design</span>;\n            case \"import\":\n                return importTypeLabel();\n            case \"register\":\n                return variant === \"short\" ? <span>Service Registry</span> : <span>Exported to Service Registry</span>;\n            case \"update\":\n                return variant === \"short\" ? <span>Edited</span> : <span>Modified using the editor</span>;\n        }\n    };\n\n    const importTypeLabel = (): React.ReactNode => {\n        const context: DesignContext = event.data.context;\n        switch (context.type) {\n            case \"file\":\n                return variant === \"short\" ? <span>File</span> : <span>{`Imported from file ${context.file?.fileName}`}</span>;\n            case \"rhosr\":\n                return variant === \"short\" ? <span>Service Registry</span> : (\n                    <React.Fragment>\n                        <span>Imported from Service Registry </span>\n                        <RegistryNavLink context={context}>\n                            <span>(Group: {context.rhosr?.groupId || \"default\"} </span>\n                            <span>ID: {context.rhosr?.artifactId} </span>\n                            <span>Version: {context.rhosr?.version || \"latest\"})</span>\n                        </RegistryNavLink>\n                    </React.Fragment>\n                );\n            case \"url\":\n                return variant === \"short\" ? <span>URL</span> : (\n                    <React.Fragment>\n                        <span>Imported from URL: </span>\n                        <a href={context.url?.url}>{context.url?.url}</a>\n                    </React.Fragment>\n                );\n        }\n        return <span>Imported content</span>;\n    };\n\n    return <React.Fragment children={typeLabel()} />\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Design} from \"@app/models\";\nimport {Label} from \"@patternfly/react-core\";\nimport {hasOrigin} from \"@app/utils\";\n\n\nexport type DesignOriginLabelProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignOriginLabel: FunctionComponent<DesignOriginLabelProps> = ({design}: DesignOriginLabelProps) => {\n\n    const label = (): string => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"File\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"Service Registry\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"URL\";\n            } else if (hasOrigin(design, \"create\")) {\n                return \"New design\";\n            }\n        }\n        return \"n/a\";\n    };\n\n    const color = (): \"blue\" | \"cyan\" | \"green\" | \"orange\" | \"purple\" | \"red\" | \"grey\" => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"purple\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"blue\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"green\";\n            }\n        }\n        return \"grey\";\n    };\n\n    return (\n        <Label color={color()}>{label()}</Label>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./editor-context.css\";\nimport {ArtifactTypes, Design, TestRegistryErrorResponse} from \"@app/models\";\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Dropdown,\n    DropdownItem,\n    DropdownSeparator,\n    DropdownToggle,\n    GalleryItem,\n    Text,\n    TextContent\n} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, DesignDescription, If, NavLink, RegistryNavLink, ToggleIcon} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {ExportToRhosrData, ExportToRhosrModal, TestRegistryModal} from \"@app/pages/components\";\nimport {AlertsService, LocalStorageService, useAlertsService, useLocalStorageService} from \"@app/services\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\n\n/**\n * Properties\n */\nexport type EditorContextProps = {\n    design: Design;\n    dirty: boolean;\n    artifactContent: string;\n    onSave: () => void;\n    onFormat: () => void;\n    onDelete: () => void;\n    onDownload: () => void;\n    onRename: () => void;\n    onCompareContent: () => void;\n    onExpandTestRegistryCausesPanel: (error: TestRegistryErrorResponse) => void;\n    onRegistrationTestRegistry: (registry: Registry, group: string | undefined, artifactId: string) => void;\n    isPanelOpen?: boolean;\n}\n\ntype EditorContextMenuItem = {\n    label?: string;\n    key: string;\n    isSeparator?: boolean;\n    accept?: (design: Design) => boolean;\n};\n\nconst menuActions: EditorContextMenuItem[] = [\n    {\n        label: \"Rename design\",\n        key: \"action-rename\",\n    },\n    {\n        label: \"Format content\",\n        key: \"action-format\",\n        accept: (design: Design) => { return [ArtifactTypes.AVRO, ArtifactTypes.JSON].includes(design.type); },\n    },\n    {\n        label: \"Show changes\",\n        key: \"action-compare\",\n    },\n    {\n        key: \"action-separator-1\",\n        isSeparator: true\n    },\n    {\n        label: \"Export to Service Registry\",\n        key: \"action-export-to-rhosr\",\n    },\n    {\n        label: \"Test using Service Registry\",\n        key: \"action-test-registry\"\n    },\n    {\n        label: \"Download design\",\n        key: \"action-download\"\n    },\n    {\n        key: \"action-separator-2\",\n        isSeparator: true\n    },\n    {\n        label: \"Delete design\",\n        key: \"action-delete\"\n    },\n];\n\n\n/**\n * The context of the design when editing a design on the editor page.\n */\nexport const EditorContext: FunctionComponent<EditorContextProps> = (\n    { design, dirty, onSave, onRegistrationTestRegistry, onFormat, onRename, onExpandTestRegistryCausesPanel, onDownload, onDelete, onCompareContent }: EditorContextProps) => {\n\n    const lss: LocalStorageService = useLocalStorageService();\n\n    const [designContext, setDesignContext] = useState<DesignContext>();\n    const [isActionMenuToggled, setActionMenuToggled] = useState(false);\n    const [isExpanded, setExpanded] = useState(lss.getConfigProperty(\"editor-context.isExpanded\", \"false\") === \"true\");\n    const [isRegisterModalOpen, setRegisterModalOpen] = useState(false);\n    const [isTestRegistryModalOpen, setIsTestRegistryModalOpen] = useState(false);\n\n    const alerts: AlertsService = useAlertsService();\n\n    const onActionMenuToggle = (value: boolean): void => {\n        setActionMenuToggled(value);\n    };\n\n    const onToggleExpand = (): void => {\n        const newExpanded: boolean = !isExpanded;\n        lss.setConfigProperty(\"editor-context.isExpanded\", \"\" + newExpanded);\n        setExpanded(newExpanded);\n    };\n\n    const actionMenuToggle: React.ReactNode = (\n        <DropdownToggle id=\"action-toggle\" toggleVariant=\"secondary\" onToggle={onActionMenuToggle}>Actions</DropdownToggle>\n    );\n\n    const onActionMenuSelect = (event?: React.SyntheticEvent<HTMLDivElement>): void => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setActionMenuToggled(false);\n        switch (action) {\n            case \"action-compare\":\n                onCompareContent();\n                return;\n            case \"action-export-to-rhosr\":\n                setRegisterModalOpen(true);\n                return;\n            case \"action-format\":\n                onFormat();\n                return;\n            case \"action-rename\":\n                onRename();\n                return;\n            case \"action-delete\":\n                onDelete();\n                return;\n            case \"action-download\":\n                onDownload();\n                return;\n            case \"action-test-registry\":\n                setIsTestRegistryModalOpen(true);\n                return;\n        }\n    };\n\n    const typeForDisplay = (): string => {\n        switch (design.type) {\n            case ArtifactTypes.OPENAPI:\n                return \"OpenAPI\";\n            case ArtifactTypes.ASYNCAPI:\n                return \"AsyncAPI\";\n            case ArtifactTypes.AVRO:\n                return \"Apache Avro\";\n            case ArtifactTypes.JSON:\n                return \"JSON Schema\";\n            case ArtifactTypes.PROTOBUF:\n                return \"Google Protocol Buffers\";\n        }\n        return \"N/A\";\n    };\n\n    const hasRhosrContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"rhosr\";\n    };\n\n    const hasFileContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"file\";\n    };\n\n    const hasUrlContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"url\";\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        alerts.designExportedToRhosr(event);\n    };\n\n    useEffect(() => {\n        if (design) {\n            const context: DesignContext|undefined = design.origin;\n            setDesignContext(context);\n        }\n    }, [design]);\n\n    const menuItems: any[] = menuActions.filter(action => !action.accept ? true : action.accept(design)).map(action => (\n        action.isSeparator ? (\n            <DropdownSeparator key={action.key} />\n        ) : (\n            <DropdownItem key={action.key} data-id={action.key}>{action.label}</DropdownItem>\n        )\n    ));\n\n    return (\n        <React.Fragment>\n            <TestRegistryModal isOpen={isTestRegistryModalOpen}\n                               design={design}\n                               onCancel={() => setIsTestRegistryModalOpen(false)}\n                               onSubmit={(...params) => {\n                                    onRegistrationTestRegistry(...params);\n                                    setIsTestRegistryModalOpen(false);\n                               }} />\n            <div className=\"editor-context\">\n                <div className=\"editor-context-breadcrumbs\">\n                    <Breadcrumb style={{ marginBottom: \"10px\" }}>\n                        <BreadcrumbItem component=\"button\">\n                            <NavLink location=\"/\">API and Schema Designs</NavLink>\n                        </BreadcrumbItem>\n                        <BreadcrumbItem isActive={true}>{design?.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                </div>\n                <div className=\"editor-context-last-modified\">\n                    <span>Last modified:</span>\n                    <Moment date={design.modifiedOn} fromNow={true} />\n                </div>\n                <div className=\"editor-context-actions\">\n                    <Dropdown\n                        onSelect={onActionMenuSelect}\n                        toggle={actionMenuToggle}\n                        style={{ zIndex: 1000 }}\n                        isOpen={isActionMenuToggled}\n                        isPlain\n                        dropdownItems={menuItems}\n                    />\n                </div>\n                <div className=\"editor-context-save\">\n                    <Button className=\"btn-save\" variant=\"primary\" onClick={onSave} isDisabled={!dirty}>Save</Button>\n                </div>\n                <div className=\"editor-context-toggle\">\n                    <Button className=\"btn-toggle\" variant=\"plain\" onClick={onToggleExpand}>\n                        <ToggleIcon expanded={isExpanded} onClick={() => { setExpanded(!isExpanded) }} />\n                    </Button>\n                </div>\n            </div>\n            <If condition={isExpanded}>\n                <div className=\"editor-context-details\">\n                    <TextContent>\n                        <Text component=\"h1\" className=\"title\">{design?.name}</Text>\n                        <DesignDescription className=\"summary\" description={design?.summary} />\n                    </TextContent>\n                    <div className=\"metadata\">\n                        <DescriptionList isHorizontal={true} isCompact={true}>\n                            <DescriptionListGroup>\n                                <DescriptionListTerm>Type</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                    <ArtifactTypeIcon type={design.type} isShowLabel={true} isShowIcon={true} />\n                                </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <If condition={hasRhosrContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Artifact</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <span className=\"group\">{designContext?.rhosr?.groupId || \"default\"}</span>\n                                        <span> / </span>\n                                        <RegistryNavLink context={designContext}>\n                                            <span className=\"group\">{designContext?.rhosr?.artifactId}</span>\n                                            <span> </span>\n                                            <span>(</span>\n                                            <span className=\"group\">{designContext?.rhosr?.version || \"latest\"}</span>\n                                            <span>)</span>\n                                        </RegistryNavLink>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                            <If condition={hasFileContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>File name</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <span>{designContext?.file?.fileName}</span>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                            <If condition={hasUrlContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>URL</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <a href={designContext?.url?.url}>{designContext?.url?.url}</a>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                        </DescriptionList>\n                    </div>\n                </div>\n            </If>\n            <ExportToRhosrModal design={design as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n        </React.Fragment>\n    );\n};\n","import {useRhosrService} from \"@app/services\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, TextInput} from \"@patternfly/react-core\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport React, {useEffect, useState} from \"react\";\nimport {Design} from \"@app/models\";\nimport {IsLoading, ObjectSelect} from \"@app/components\";\nimport {cloneObject} from \"@app/utils\";\nimport {IfRhosr} from \"@app/pages/components\";\n\n\nexport interface TestRegistryModalProps {\n\tdesign: Design;\n\tisOpen?: boolean;\n\tonCancel: () => void;\n\tonSubmit: (registry: Registry, groupId: string | undefined, artifactId: string) => void;\n}\n\ntype ValidatedValue = \"error\" | \"default\" | \"warning\" | \"success\" | undefined;\n\nconst initialFormState = {\n\thasErrors: false,\n\tgroupValue: {\n\t\tvalue: \"\",\n\t\tvalidated: \"default\" as ValidatedValue,\n\t\terrorMessage: \"\"\n\t},\n\tartifactIdValue: {\n\t\tvalue: \"\",\n\t\tvalidated: \"default\" as ValidatedValue,\n\t\terrorMessage: \"\"\n\t}\n}\n\nexport const TestRegistryModal: React.FunctionComponent<TestRegistryModalProps> = ({design, isOpen, onCancel, onSubmit}) => {\n\tconst [isLoadingRegistries, setLoadingRegistries] = useState(true);\n\tconst [registries, setRegistries] = useState<Registry[]>([]);\n\tconst [registry, setRegistry] = useState<Registry>();\n\tconst [formState, setFormState] = useState(initialFormState);\n\tconst [isValid, setValid] = useState(false);\n\n\tconst rhosr = useRhosrService();\n\n\tconst defaultRegistry = (registries: Registry[]): Registry | undefined => {\n\t\tif (design?.origin?.type === \"rhosr\" && design.origin.rhosr?.instanceId) {\n\t\t\tconst filtered: Registry[] = registries.filter(registry => registry.id === design.origin.rhosr?.instanceId);\n\t\t\tif (filtered && filtered.length > 0) {\n\t\t\t\treturn filtered[0];\n\t\t\t}\n\t\t}\n\t\treturn registries.length > 0 ? registries[0] : undefined;\n\t}\n\n\n\tuseEffect(() => {\n\t\tif (isOpen) {\n\t\t\tsetLoadingRegistries(true);\n\t\t\t// Get the list of registries.\n\t\t\trhosr.getRegistries().then(registries => {\n\t\t\t\tsetRegistries(registries.sort((a, b) => {\n\t\t\t\t\tconst name1: string = a.name as string;\n\t\t\t\t\tconst name2: string = b.name as string;\n\t\t\t\t\treturn name1.localeCompare(name2);\n\t\t\t\t}));\n\t\t\t\tsetRegistry(defaultRegistry(registries));\n\t\t\t\tsetLoadingRegistries(false);\n\t\t\t}).catch(error => {\n\t\t\t\t// TODO handle this error case\n\t\t\t\tconsole.error(\"[HomePage] Error getting registry list: \", error);\n\t\t\t});\n\t\t}\n\t}, [isOpen]);\n\n\tuseEffect(() => {\n\t\tif (isOpen && design && design.origin && design.origin.type === \"rhosr\") {\n\t\t\tconst state: any = cloneObject(initialFormState);\n\t\t\tstate.groupValue.value = design.origin.rhosr?.groupId as string\n\t\t\tstate.artifactIdValue.value = design.origin.rhosr?.artifactId as string;\n\t\t\tsetFormState(state);\n\t\t} else {\n\t\t\tsetFormState(initialFormState);\n\t\t}\n\t}, [isOpen]);\n\n\tuseEffect(() => {\n\t\tsetValid(formState.artifactIdValue.value !== undefined && formState.artifactIdValue.value.length > 0);\n\t}, [formState]);\n\n\tconst setGroupValue = (val: string) => {\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\tgroupValue: {\n\t\t\t\t...formState.groupValue,\n\t\t\t\tvalidated: \"default\",\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t});\n\t}\n\n\tconst setArtifactIdValue = (val: string) => {\n\t\tconst hasErrors = !val;\n\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\thasErrors,\n\t\t\tartifactIdValue: {\n\t\t\t\t...formState.artifactIdValue,\n\t\t\t\tvalidated: hasErrors ? \"error\" : \"default\",\n\t\t\t\terrorMessage: \"ID is a required field.\",\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t});\n\t}\n\n\treturn (\n\t\t<Modal\n\t\t\tvariant={ModalVariant.medium}\n\t\t\ttitle=\"Test using Service Registry\"\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onCancel}\n\t\t\tactions={[\n\t\t\t\t<Button key=\"confirm\" isDisabled={!isValid} variant=\"primary\" onClick={() => onSubmit(\n\t\t\t\t\tregistry as Registry,\n\t\t\t\t\tformState.groupValue.value,\n\t\t\t\t\tformState.artifactIdValue.value\n\t\t\t\t)}>\n\t\t\t\t\tTest\n\t\t\t\t</Button>,\n\t\t\t\t<Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t]}\n\t\t>\n\t\t\t<IsLoading condition={isLoadingRegistries}>\n\t\t\t\t<Form>\n\t\t\t\t\t<FormGroup\n\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\tlabel=\"Registry instance\"\n\t\t\t\t\t\tfieldId=\"test-in-registry-registry-instance\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ObjectSelect toggleId=\"test-in-registry-instance\" value={registry} items={registries} onSelect={setRegistry} itemToString={item => item.name} />\n\t\t\t\t\t</FormGroup>\n\t\t\t\t\t<IfRhosr registry={registry as Registry} scope=\"write\" noAccess={<div/>}>\n\t\t\t\t\t\t<FormGroup\n\t\t\t\t\t\t\tlabel=\"Group\"\n\t\t\t\t\t\t\tvalidated={formState.groupValue.validated}\n\t\t\t\t\t\t\thelperTextInvalid={formState.groupValue.errorMessage}\n\t\t\t\t\t\t\tfieldId=\"test-in-registry-group\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\tid=\"test-in-registry-group\"\n\t\t\t\t\t\t\t\tvalue={formState.groupValue.value}\n\t\t\t\t\t\t\t\tplaceholder=\"Enter group (optional) or leave blank for default group\"\n\t\t\t\t\t\t\t\tonChange={setGroupValue} />\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t<FormGroup\n\t\t\t\t\t\t\tlabel=\"ID\"\n\t\t\t\t\t\t\tvalidated={formState.artifactIdValue.validated}\n\t\t\t\t\t\t\thelperTextInvalid={formState.artifactIdValue.errorMessage}\n\t\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\t\tfieldId=\"test-in-registry-artifactId\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\tid=\"test-in-registry-artifactId\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter ID of artifact\"\n\t\t\t\t\t\t\t\tvalue={formState.artifactIdValue.value}\n\t\t\t\t\t\t\t\tonChange={setArtifactIdValue} />\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t</IfRhosr>\n\t\t\t\t</Form>\n\t\t\t</IsLoading>\n\t\t</Modal>\n\t);\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./compare-modal.css\";\nimport {Modal, ToggleGroup, ToggleGroupItem} from \"@patternfly/react-core\";\nimport {editor} from \"monaco-editor\";\nimport IDiffEditorConstructionOptions = editor.IDiffEditorConstructionOptions;\nimport {DiffEditor} from \"@monaco-editor/react\";\nimport {ArrowsAltHIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type CompareModalProps = {\n    isOpen: boolean|undefined;\n    before: any;\n    beforeName: string;\n    after: any;\n    afterName: string;\n    onClose: () => void;\n};\n\nexport const CompareModal: FunctionComponent<CompareModalProps> = ({isOpen, onClose, before, beforeName, after, afterName}: CompareModalProps) => {\n    const [diffEditorContentOptions, setDiffEditorContentOptions] = useState({\n        renderSideBySide: true,\n        automaticLayout: true,\n        wordWrap: \"off\",\n        readOnly: true,\n        inDiffEditor: true,\n        originalAriaLabel: \"Original\",\n        modifiedAriaLabel: \"Modified\"\n    } as IDiffEditorConstructionOptions)\n\n    const [isDiffInline, setIsDiffInline] = useState(false);\n    const [isDiffWrapped, setIsDiffWrapped] = useState(false);\n\n    const switchInlineCompare = () => {\n        setDiffEditorContentOptions({\n            ...diffEditorContentOptions as IDiffEditorConstructionOptions,\n            renderSideBySide: !diffEditorContentOptions.renderSideBySide\n        });\n        setIsDiffInline(!!diffEditorContentOptions.renderSideBySide);\n    }\n\n    const switchWordWrap = () => {\n        setDiffEditorContentOptions({\n            ...diffEditorContentOptions as IDiffEditorConstructionOptions,\n            wordWrap: diffEditorContentOptions.wordWrap == \"off\" ? \"on\" : \"off\"\n        });\n        setIsDiffWrapped(diffEditorContentOptions.wordWrap != \"on\");\n    }\n\n    return (\n        <Modal id=\"compare-modal\"\n               title=\"Unsaved changes\"\n               isOpen={isOpen}\n               onClose={onClose}>\n            <div className=\"compare-view\">\n                <ToggleGroup className=\"compare-toggle-group\"\n                             aria-label=\"Compare view toggle group\">\n                    <ToggleGroupItem text=\"Inline\" key={1} buttonId=\"second\"\n                                     isSelected={isDiffInline}\n                                     onChange={switchInlineCompare}/>\n                    <ToggleGroupItem text=\"Wrap text\" key={0} buttonId=\"first\"\n                                     isSelected={isDiffWrapped}\n                                     onChange={switchWordWrap}/>\n                </ToggleGroup>\n                <div className=\"compare-label\">\n                    <span className=\"before\">Original: {beforeName}</span>\n                    <span className=\"divider\">\n                        <ArrowsAltHIcon />\n                    </span>\n                    <span className=\"after\">Modified: {afterName}</span>\n                </div>\n                <div className=\"compare-editor\">\n                    <DiffEditor\n                        className=\"text-editor\"\n                        original={before}\n                        modified={after}\n                        options={diffEditorContentOptions}\n                    />\n                </div>\n            </div>\n        </Modal>\n\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, SelectVariant, Spinner, TextInput} from \"@patternfly/react-core\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    DesignsService,\n    RhosrInstanceService,\n    RhosrInstanceServiceFactory,\n    RhosrService,\n    useDesignsService,\n    useRhosrInstanceServiceFactory,\n    useRhosrService\n} from \"@app/services\";\nimport {If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {CreateOrUpdateArtifactData} from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\nimport {IfRhosr} from \"@app/pages/components\";\n\nexport type ExportToRhosrData = {\n    registry: Registry;\n    design: Design;\n    context: DesignContext;\n};\n\nexport type ExportToRhosrModalProps = {\n    design: Design;\n    isOpen: boolean | undefined;\n    onExported: (event: ExportToRhosrData) => void;\n    onCancel: () => void;\n}\n\n\nexport const ExportToRhosrModal: FunctionComponent<ExportToRhosrModalProps> = (\n    {design, isOpen, onExported, onCancel}: ExportToRhosrModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [isExporting, setExporting] = useState(false);\n    const [isLoadingRegistries, setLoadingRegistries] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [registry, setRegistry] = useState<Registry>();\n    const [group, setGroup] = useState<string>();\n    const [artifactId, setArtifactId] = useState<string>();\n    const [version, setVersion] = useState<string>();\n    const [rhosrInstance, setRhosrInstance] = useState<RhosrInstanceService>();\n\n    const designs: DesignsService = useDesignsService();\n    const rhosr: RhosrService = useRhosrService();\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    // Called when the user clicks \"export\"\n    const doExport = () => {\n        setExporting(true);\n        designs.getDesignContent(design.id).then(content => {\n            const data: CreateOrUpdateArtifactData = {\n                type: design.type,\n                groupId: group,\n                id: artifactId,\n                version: version,\n                content: content.data,\n                contentType: content.contentType\n            };\n            rhosrInstance?.createOrUpdateArtifact(data).then(amd => {\n                const context: DesignContext = {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: amd.groupId as string,\n                        artifactId: amd.id,\n                        version: amd.version\n                    }\n                };\n                const data: ExportToRhosrData = {\n                    registry: registry as Registry,\n                    design,\n                    context\n                };\n\n                const event: DesignEvent = {\n                    id: design.id,\n                    type: \"register\",\n                    on: new Date(),\n                    data: context.rhosr\n                };\n\n                // Create an event (add to the design's history).\n                designs.createEvent(event).then(() => {\n                    setExporting(false);\n                    onExported(data);\n                }).catch(error => {\n                    // TODO error handling\n                    console.warn(\"[ExportToRhosrModal] Failed to create a history event (not fatal).\");\n                });\n            }).catch(error => {\n                // TODO error handling\n                console.error(\"[ExportToRhosrModal] Error registering artifact in RHOSR: \", error);\n            });\n        }).catch(error => {\n            // TODO error handling - low priority as this error is extremely unlikely to happen\n        });\n    };\n\n    const onRegistrySelect = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    const defaultRegistry = (registries: Registry[]): Registry | undefined => {\n        if (design?.origin?.type === \"rhosr\" && design.origin.rhosr?.instanceId) {\n            const filtered: Registry[] = registries.filter(registry => registry.id === design.origin.rhosr?.instanceId);\n            if (filtered && filtered.length > 0) {\n                return filtered[0];\n            }\n        }\n        return registries.length > 0 ? registries[0] : undefined;\n    };\n\n    const setFormDefaults = (): void => {\n        if (design && design.origin && design.origin.type === \"rhosr\") {\n            const context: DesignContext = design.origin;\n            setGroup(context.rhosr?.groupId);\n            setArtifactId(context.rhosr?.artifactId);\n            setVersion(context.rhosr?.version);\n        } else {\n            setGroup(undefined);\n            setArtifactId(undefined);\n            setVersion(undefined);\n        }\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setLoadingRegistries(true);\n            setExporting(false);\n            setValid(false);\n            setRegistries([]);\n            setFormDefaults();\n\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                setRegistry(defaultRegistry(registries));\n                setLoadingRegistries(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[ExportToRhosrModal] Error getting registry list: \", error);\n                setRegistries([]);\n                setLoadingRegistries(false);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        setFormDefaults();\n    }, [design]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!registry) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [registry, group, artifactId, version]);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    let actions: any[] = registries.length === 0 ? [] : [\n        <Button key=\"export\" variant=\"primary\" isDisabled={!isValid || isExporting} onClick={doExport}>\n            <If condition={isExporting}>\n                <Spinner size=\"md\" className=\"export-spinner\" />\n            </If>\n            Export\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n            Cancel\n        </Button>\n    ];\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Export to Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={actions}\n        >\n            <IsLoading condition={isLoadingRegistries}>\n                <Form>\n                    <FormGroup label=\"Registry Instance\" isRequired={true} fieldId=\"export-registry-instance\">\n                        <ObjectSelect value={registry}\n                                      items={registries}\n                                      onSelect={onRegistrySelect}\n                                      variant={SelectVariant.single}\n                                      toggleId=\"export-registry\"\n                                      menuAppendTo=\"parent\"\n                                      itemToString={item => item.name} />\n                    </FormGroup>\n                    <IfRhosr registry={registry as Registry} scope=\"write\" noAccess={<div/>}>\n                        <FormGroup label=\"Group\" isRequired={false} fieldId=\"export-group\">\n                            <TextInput\n                                isRequired\n                                type=\"text\"\n                                id=\"export-group\"\n                                name=\"export-group\"\n                                placeholder=\"Enter group (optional) or leave blank for default group\"\n                                aria-describedby=\"export-group-helper\"\n                                value={group}\n                                onChange={(value) => setGroup(value)}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"ID\" isRequired={false} fieldId=\"export-artifact-id\">\n                            <TextInput\n                                isRequired\n                                type=\"text\"\n                                id=\"export-artifact-id\"\n                                name=\"export-artifact-id\"\n                                placeholder=\"Enter ID (optional) or leave blank for generated ID\"\n                                aria-describedby=\"export-artifact-id-helper\"\n                                value={artifactId}\n                                onChange={(value) => setArtifactId(value)}\n                            />\n                        </FormGroup>\n                        <FormGroup label=\"Version\" isRequired={false} fieldId=\"export-version\">\n                            <TextInput\n                                isRequired\n                                type=\"text\"\n                                id=\"export-version\"\n                                name=\"export-version\"\n                                placeholder=\"Enter version (optional) or leave blank for generated version number\"\n                                aria-describedby=\"export-version-helper\"\n                                value={version}\n                                onChange={(value) => setVersion(value)}\n                            />\n                        </FormGroup>\n                    </IfRhosr>\n                </Form>\n            </IsLoading>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {Design} from \"@app/models\";\n\nexport type RenameData = {\n    name: string;\n    summary: string;\n};\n\nexport type RenameModalProps = {\n    design: Design|undefined;\n    isOpen: boolean | undefined;\n    onRename: (event: RenameData) => void;\n    onCancel: () => void;\n}\n\n\nexport const RenameModal: FunctionComponent<RenameModalProps> = (\n    {design, isOpen, onRename, onCancel}: RenameModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState<string>();\n    const [summary, setSummary] = useState<string>();\n\n    // Called when the user clicks \"edit\"\n    const doRename = () => {\n        onRename({\n            name: name as string,\n            summary: summary as string\n        });\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setName(design?.name);\n            setSummary(design?.summary);\n        }\n    }, [isOpen]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Rename design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"edit\" variant=\"primary\" isDisabled={!isValid} onClick={doRename}>Save</Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>Cancel</Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"edit-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"edit-name\"\n                        name=\"edit-name\"\n                        placeholder=\"Enter new name for design\"\n                        aria-describedby=\"edit-name-helper\"\n                        value={name}\n                        onChange={(value) => setName(value)}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"edit-description\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"edit-description\"\n                        name=\"edit-description\"\n                        aria-describedby=\"edit-description-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value)}}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\n\nexport type RhosrScopeType = \"read\" | \"write\" | \"admin\";\n\n\n/**\n * Properties\n */\nexport type IfRhosrProps = {\n    registry: Registry;\n    scope: RhosrScopeType;\n    noAccess: string | React.ReactNode;\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * given registry instance is accessible by the user at the level needed.  This\n * component can be used to guard functionality that will only work if the user\n * has permission to interact with the registry in the required way.\n */\nexport const IfRhosr: FunctionComponent<IfRhosrProps> = ({registry, scope, noAccess, children}: IfRhosrProps) => {\n    return (\n        <React.Fragment children={children} />\n    );\n};\n","import { Auth, useAuth } from \"@rhoas/app-services-ui-shared\";\nimport {\n    ArtifactMetaData,\n    ArtifactSearchResults,\n    ContentTypes,\n    CreateArtifactData,\n    CreateVersionData,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedVersion,\n    VersionMetaData\n} from \"@app/models\";\nimport { createEndpoint, createHref, createOptions, httpGet, httpPut, httpPostWithReturn } from \"@app/utils/rest.utils\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { isJson, isXml, isYaml } from \"@app/utils\";\nimport { CreateOrUpdateArtifactData } from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\n\n/**\n * Determines the content type of the given content.\n * @param type\n * @param content\n */\nfunction determineContentType(type: string, content: string): string {\n    switch (type) {\n        case \"PROTOBUF\":\n            return ContentTypes.APPLICATION_PROTOBUF;\n        case \"WSDL\":\n        case \"XSD\":\n        case \"XML\":\n            return ContentTypes.APPLICATION_XML;\n        case \"GRAPHQL\":\n            return ContentTypes.APPLICATION_GRAPHQL;\n    }\n    if (isJson(content)) {\n        return ContentTypes.APPLICATION_JSON;\n    } else if (isXml(content)) {\n        return ContentTypes.APPLICATION_XML;\n    } else if (isYaml(content)) {\n        return ContentTypes.APPLICATION_YAML;\n    } else {\n        return \"application/octet-stream\";\n    }\n}\n\n\nfunction normalizeGroupId(groupId: string | undefined): string {\n    return groupId || \"default\";\n}\n\n\nasync function createArtifact(auth: Auth, basePath: string, data: CreateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts\", { groupId: data.groupId });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function createOrUpdateArtifact(auth: Auth, basePath: string, data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath,\n        \"/groups/:groupId/artifacts\",\n        { groupId: data.groupId || \"default\" },\n        { ifExists: \"UPDATE\" }\n    );\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    if (data.version) {\n        headers[\"X-Registry-Version\"] = data.version;\n    }\n    headers[\"Content-Type\"] = data.contentType;\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n};\n\n\nasync function createArtifactVersion(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId: groupId || \"default\",\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, VersionMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function getArtifacts(auth: Auth, basePath: string, criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults> {\n    console.debug(\"[RhosrInstanceService] Getting artifacts: \", criteria, paging);\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const start: number = (paging.page - 1) * paging.pageSize;\n    const end: number = start + paging.pageSize;\n    const queryParams: any = {\n        limit: end,\n        offset: start,\n        order: criteria.sortAscending ? \"asc\" : \"desc\",\n        orderby: \"name\"\n    };\n    if (criteria.value) {\n        if (criteria.type == \"everything\") {\n            queryParams[\"name\"] = criteria.value;\n            queryParams[\"description\"] = criteria.value;\n            queryParams[\"labels\"] = criteria.value;\n        } else {\n            queryParams[criteria.type] = criteria.value;\n        }\n    }\n    const endpoint: string = createEndpoint(basePath, \"/search/artifacts\", {}, queryParams);\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<ArtifactSearchResults>(endpoint, createOptions(headers), (data) => {\n        const results: ArtifactSearchResults = {\n            artifacts: data.artifacts,\n            count: data.count,\n            page: paging.page,\n            pageSize: paging.pageSize\n        };\n        return results;\n    });\n}\n\n\nasync function getArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, version: string): Promise<string> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    let endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions/:version\", {\n        groupId,\n        artifactId,\n        version\n    });\n    const headers: any = {\n        \"Accept\": \"*\",\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (version === \"latest\") {\n        endpoint = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId\", { groupId, artifactId });\n    }\n\n    const options: any = createOptions(headers);\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\nasync function getArtifactVersions(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Getting the list of versions for artifact: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId,\n        artifactId\n    }, {\n        limit: 500,\n        offset: 0\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<SearchedVersion[]>(endpoint, createOptions(headers), (data) => {\n        return data.versions;\n    });\n}\n\nasync function testUpdateArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, content: string): Promise<void> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Testing updating of artifact content: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/test\", {\n        groupId,\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpPut<any>(endpoint, content, createOptions(headers));\n}\n\n\n/**\n * The RHOSR Instance service interface.\n */\nexport interface RhosrInstanceService {\n    createArtifact(data: CreateArtifactData): Promise<ArtifactMetaData>;\n    createArtifactVersion(groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData>;\n    createOrUpdateArtifact(data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData>;\n    getArtifacts(criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults>;\n    getArtifactContent(groupId: string | undefined, artifactId: string, version: string): Promise<string>;\n    getArtifactVersions(groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]>;\n    testUpdateArtifactContent(groupId: string | undefined, artifactId: string, content: string): Promise<void>;\n}\n\n/**\n * Factory for creating RHOSR instance services.\n */\nexport interface RhosrInstanceServiceFactory {\n    createFor(registry: Registry): RhosrInstanceService;\n}\n\n\n/**\n * React hook to get the RHOSR instance service.\n */\nexport const useRhosrInstanceServiceFactory: () => RhosrInstanceServiceFactory = (): RhosrInstanceServiceFactory => {\n    const auth: Auth = useAuth();\n\n    return {\n        createFor: (registry) => {\n            const instanceUrl: string = createHref(registry.registryUrl as string, \"/apis/registry/v2\");\n            return {\n                createArtifact: (data) => createArtifact(auth, instanceUrl, data),\n                createArtifactVersion: (groupId, artifactId, data) => createArtifactVersion(auth, instanceUrl, groupId, artifactId, data),\n                createOrUpdateArtifact: (data: CreateOrUpdateArtifactData) => createOrUpdateArtifact(auth, instanceUrl, data),\n                getArtifacts: (criteria, paging) => getArtifacts(auth, instanceUrl, criteria, paging),\n                getArtifactContent: (groupId, artifactId, version) => getArtifactContent(auth, instanceUrl, groupId, artifactId, version),\n                getArtifactVersions: (groupId, artifactId) => getArtifactVersions(auth, instanceUrl, groupId, artifactId),\n                testUpdateArtifactContent: (groupId, artifactId, content) => testUpdateArtifactContent(auth, instanceUrl, groupId, artifactId, content)\n\n            };\n        }\n    };\n};\n","import {\n    CreateDesign,\n    CreateDesignContent,\n    Design,\n    DesignContent,\n    DesignEvent,\n    DesignsSearchCriteria,\n    DesignsSearchResults,\n    DesignsSort,\n    Paging\n} from \"@app/models\";\nimport Dexie from \"dexie\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {cloneObject, limit} from \"@app/utils\";\n\n\nconst db = new Dexie(\"designsDB\");\ndb.version(4).stores({\n    designs: \"++id, type, name, createdOn, modifiedOn\", // Primary key and indexed props\n    content: \"++id\",\n    events: \"++eventId, id, type, on\"\n});\n\n\nasync function createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design> {\n    const id: string = uuidv4();\n    const newDesign: Design = {\n        id,\n        name: limit(cd.name, 64) as string,\n        summary: limit(cd.summary, 256),\n        type: cd.type,\n        createdOn: new Date(),\n        modifiedOn: new Date(),\n        origin: cloneObject(cd.context)\n    };\n    const newDesignContent: DesignContent = {\n        id,\n        contentType: cdc.contentType,\n        data: cdc.data\n    };\n    const newEvent: DesignEvent = {\n        id,\n        type: \"create\",\n        on: new Date(),\n        data: {}\n    };\n    if (cd.context) {\n        newEvent.data.context = cloneObject(cd.context);\n        if (cd.context.type !== \"create\") {\n            newEvent.type = \"import\";\n        }\n    }\n    // Make sure the ID is properly set always.\n    newEvent.id = id;\n\n    return Promise.all([\n        // @ts-ignore\n        db.designs.add(newDesign),\n        // @ts-ignore\n        db.content.add(newDesignContent),\n        createEvent(newEvent)\n    ]).then(() => newDesign);\n}\n\nasync function getDesigns(): Promise<Design[]> {\n    // @ts-ignore\n    return db.designs.toArray();\n}\n\nasync function searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults> {\n    console.debug(\"[DesignsService] Searching for designs: \", criteria, paging);\n    const accept = (design: Design): boolean => {\n        let matches: boolean = false;\n        if (!criteria.filterValue || criteria.filterValue.trim().length === 0) {\n            matches = true;\n        } else if (design.name.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.summary && design.summary.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.type.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        }\n        return matches;\n    };\n\n    return getDesigns().then(designs => {\n        // TODO Explore whether we can use dexie to filter and page the results.\n\n        // filter and sort the results\n        const filteredDesigns: Design[] = designs.filter(accept).sort((design1, design2) => {\n            let rval: number = sort.by === \"name\" ? (\n                design1.name.localeCompare(design2.name)\n            ) : (\n                design1.modifiedOn.getTime() - design2.modifiedOn.getTime()\n            );\n            if (sort.direction !== \"asc\") {\n                rval *= -1;\n            }\n            return rval;\n        });\n        // get the total count\n        const totalCount: number = filteredDesigns.length;\n        // get the subset of results based on paging\n        const start: number = (paging.page - 1) * paging.pageSize;\n        const end: number = start + paging.pageSize;\n        const pagedDesigns: Design[] = filteredDesigns.slice(start, end);\n        return {\n            designs: pagedDesigns,\n            page: paging.page,\n            pageSize: paging.pageSize,\n            count: totalCount\n        }\n    });\n}\n\n\nasync function getDesign(id: string): Promise<Design> {\n    // @ts-ignore\n    return db.designs.where(\"id\").equals(id).first();\n}\n\nasync function deleteDesign(id: string): Promise<void> {\n    return Promise.all([\n        // @ts-ignore\n        db.designs.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.content.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.events.where(\"id\").equals(id).delete(),\n    ]).then(r => {});\n}\n\nasync function renameDesign(id: string, newName: string, newSummary?: string): Promise<void> {\n    // @ts-ignore\n    return db.designs.update(id, {\n        name: limit(newName, 64) as string,\n        summary: limit(newSummary, 256),\n    });\n}\n\nasync function getDesignContent(id: string): Promise<DesignContent> {\n    // @ts-ignore\n    return db.content.where(\"id\").equals(id).first();\n}\n\nasync function updateDesignContent(content: DesignContent): Promise<void> {\n    const newEvent: DesignEvent = {\n        id: content.id,\n        type: \"update\",\n        on: new Date(),\n        data: {}\n    };\n\n    return Promise.all([\n        // @ts-ignore\n        db.content.update(content.id, {\n            data: content.data\n        }),\n        // @ts-ignore\n        db.designs.update(content.id, {\n            modifiedOn: new Date()\n        }),\n        createEvent(newEvent)\n    ]).then(() => {});\n}\n\n\nasync function getEvents(id: string): Promise<DesignEvent[]> {\n    // @ts-ignore\n    return db.events.where(\"id\").equals(id).reverse().sortBy(\"on\");\n}\n\n\nasync function createEvent(event: DesignEvent): Promise<void> {\n    event.eventId = uuidv4();\n    // @ts-ignore\n    return db.events.add(event);\n}\n\n\n/**\n * The Designs Service interface.\n */\nexport interface DesignsService {\n    createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design>;\n    getDesigns(): Promise<Design[]>;\n    getDesign(id: string): Promise<Design>;\n    searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults>;\n    deleteDesign(id: string): Promise<void>;\n    renameDesign(id: string, newName: string, newSummary?: string): Promise<void>;\n    getDesignContent(id: string): Promise<DesignContent>;\n    updateDesignContent(content: DesignContent): Promise<void>;\n    getEvents(id: string): Promise<DesignEvent[]>;\n    createEvent(event: DesignEvent): Promise<void>;\n}\n\n\n/**\n * React hook to get the Designs service.\n */\nexport const useDesignsService: () => DesignsService = (): DesignsService => {\n    return {\n        createDesign,\n        getDesigns,\n        searchDesigns,\n        getDesign,\n        deleteDesign,\n        renameDesign,\n        getDesignContent,\n        updateDesignContent,\n        getEvents,\n        createEvent\n    };\n};\n","import {ContentTypes, Template} from \"@app/models\";\nimport ASYNCAPI_2_BLANK from \"./asyncapi/asyncapi-2-blank.json\";\nimport ASYNCAPI_2_STREETLIGHTS from \"./asyncapi/asyncapi-2-streetlights.json\";\n\nexport const ASYNCAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"asyncapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_BLANK\n        }\n    },\n    {\n        id: \"asyncapi_2_streetlights\",\n        name: \"Street Lights Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_STREETLIGHTS\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport OPENAPI_3_BLANK from \"./openapi/openapi-3-blank.json\";\nimport OPENAPI_3_PETSTORE from \"./openapi/openapi-3-petstore.json\";\nimport OPENAPI_3_USPTO from \"./openapi/openapi-3-uspto.json\";\nimport OPENAPI_2_BLANK from \"./openapi/openapi-2-blank.json\";\nimport OPENAPI_2_PETSTORE from \"./openapi/openapi-2-petstore.json\";\n\n\nexport const OPENAPI_3_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_3_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_BLANK\n        }\n    },\n    {\n        id: \"openapi_3_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_PETSTORE\n        }\n    },\n    {\n        id: \"openapi_3_uspto\",\n        name: \"USPTO Dataset API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_USPTO\n        }\n    }\n]\n\nexport const OPENAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_BLANK\n        }\n    },\n    {\n        id: \"openapi_2_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_PETSTORE\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport JSON_BLANK from \"./json/json-blank.json\";\n\nexport const JSON_TEMPLATES: Template[] = [\n    {\n        id: \"json_blank\",\n        name: \"Blank JSON Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: JSON_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport AVRO_BLANK from \"./avro/avro-blank.json\";\n\nexport const AVRO_TEMPLATES: Template[] = [\n    {\n        id: \"avro_blank\",\n        name: \"Blank Avro Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: AVRO_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport PROTOBUF_BLANK from \"./protobuf/protobuf-blank.json\";\n\nexport const PROTOBUF_TEMPLATES: Template[] = [\n    {\n        id: \"protobuf_blank\",\n        name: \"Blank Protobuf Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            data: PROTOBUF_BLANK.template\n        }\n    }\n]\n","import {Template} from \"@app/models/templates/template.model\";\nimport {\n    ASYNCAPI_2_TEMPLATES,\n    AVRO_TEMPLATES,\n    JSON_TEMPLATES,\n    OPENAPI_2_TEMPLATES,\n    OPENAPI_3_TEMPLATES,\n    PROTOBUF_TEMPLATES\n} from \"@app/services/_templates\";\nimport {ArtifactTypes} from \"@app/models\";\n\n\nasync function getTemplatesFor(type: string, version?: string): Promise<Template[]> {\n    if (type === ArtifactTypes.AVRO) {\n        return Promise.resolve(AVRO_TEMPLATES);\n    }\n    if (type === ArtifactTypes.PROTOBUF) {\n        return Promise.resolve(PROTOBUF_TEMPLATES);\n    }\n    if (type === ArtifactTypes.JSON) {\n        return Promise.resolve(JSON_TEMPLATES);\n    }\n    if (type === ArtifactTypes.ASYNCAPI) {\n        return Promise.resolve(ASYNCAPI_2_TEMPLATES);\n    }\n    if (type === ArtifactTypes.OPENAPI) {\n        if (version && version.startsWith(\"3\")) {\n            return Promise.resolve(OPENAPI_3_TEMPLATES);\n        } else {\n            return Promise.resolve(OPENAPI_2_TEMPLATES);\n        }\n    }\n    return Promise.reject(`No templates found for type ${type} and version ${version}.`);\n}\n\n\n/**\n * The Templates Service interface.\n */\nexport interface TemplatesService {\n    getTemplatesFor(type: string, version?: string): Promise<Template[]>;\n}\n\n\n/**\n * React hook to get the Templates service.\n */\nexport const useTemplatesService: () => TemplatesService = (): TemplatesService => {\n    return {\n        getTemplatesFor\n    };\n};\n","/**\n * Downloads the given content to the filesystem using the given content type and\n * file name.\n * @param content\n * @param contentType\n * @param filename\n */\nimport {DesignsService, useDesignsService} from \"@app/services/designs\";\nimport {Design, DesignEvent} from \"@app/models\";\n\n\nasync function downloadToFS(designsSvc: DesignsService, design: Design, content: string, contentType: string, filename: string): Promise<void> {\n    console.info(\"[DownloadService] Downloading a design.\");\n    const _w: any = window;\n\n    if (_w.chrome !== undefined) {\n        // Chrome version\n        let link = document.createElement('a');\n        let blob = new Blob([content], { type: contentType });\n        link.href = _w.URL.createObjectURL(blob);\n        link.download = filename;\n        link.click();\n    } else if (_w.navigator !== undefined && _w.navigator.msSaveBlob !== undefined) {\n        // IE version\n        let blob = new Blob([content], { type: contentType });\n        _w.navigator.msSaveBlob(blob, filename);\n    } else {\n        // Firefox version\n        let file = new File([content], filename, { type: 'application/force-download' });\n        _w.open(URL.createObjectURL(file));\n    }\n\n    // Create an event for this download\n    const event: DesignEvent = {\n        id: design.id,\n        type: \"download\",\n        on: new Date(),\n        data: {\n            filename\n        }\n    };\n    designsSvc.createEvent(event);\n}\n\n\n/**\n * The Download Service interface.\n */\nexport interface DownloadService {\n    downloadToFS(design: Design, content: string, contentType: string, filename: string): Promise<void>;\n}\n\n\n/**\n * React hook to get the Download service.\n */\nexport const useDownloadService: () => DownloadService = (): DownloadService => {\n    // Note: inject the designs services so that events can be created.\n    const designsSvc: DesignsService = useDesignsService();\n    return {\n        downloadToFS: (design: Design, content: string, contentType: string, filename: string): Promise<void> => {\n            return downloadToFS(designsSvc, design, content, contentType, filename);\n        }\n    };\n};\n","import {createOptions, httpGet} from \"@app/utils\";\n\nconst githubRegex: RegExp = /^https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/blob\\/([^\\/]+)\\/(.+)$/;\n\n\nasync function fetchUrlContent(url: string): Promise<string> {\n    const match: RegExpMatchArray | null = url.match(githubRegex);\n    if (match !== null) {\n        const org: string = match[1];\n        const repo: string = match[2];\n        const branch: string = match[3];\n        const path: string = match[4];\n\n        url = `https://raw.githubusercontent.com/${org}/${repo}/${branch}/${path}`;\n    }\n\n    console.info(\"[UrlService] Fetching content from a URL: \", url);\n\n    let endpoint: string = url;\n    const options: any = createOptions({\n        \"Accept\": \"*\"\n    });\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\n/**\n * The URL Service interface.\n */\nexport interface UrlService {\n    fetchUrlContent(url: string): Promise<string>;\n}\n\n\n/**\n * React hook to get the URL service.\n */\nexport const useUrlService: () => UrlService = (): UrlService => {\n    return {\n        fetchUrlContent\n    };\n};\n","import {AlertVariant, useAlert} from \"@rhoas/app-services-ui-shared\";\nimport {Design} from \"@app/models\";\nimport {ExportToRhosrData, RenameData} from \"@app/pages/components\";\nimport React from \"react\";\nimport {RegistryNavLink} from \"@app/components\";\n\n\nexport interface AlertsService {\n    designDeleted(design: Design): void;\n    designDeleteFailed(design: Design, error: any): void;\n    designSaved(design: Design): void;\n    designRenamed(event: RenameData): void;\n    designExportedToRhosr(event: ExportToRhosrData): void;\n}\n\n\n/**\n * React hook to get the Alerts service.\n */\nexport const useAlertsService: () => AlertsService = (): AlertsService => {\n    const { addAlert } = useAlert() || {};\n\n    return {\n        designDeleted(design: Design): void {\n            addAlert({\n                title: \"Delete successful\",\n                description: `Design '${design.name}' was successfully deleted.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-deleted\"\n            });\n        },\n\n        designDeleteFailed(design: Design, error: any): void {\n            addAlert({\n                title: \"Delete failed\",\n                description: `Failed to delete design '${design.name}'.  ${error}`,\n                variant: AlertVariant.danger,\n                dataTestId: \"toast-design-delete-error\"\n            });\n        },\n\n        designRenamed(event: RenameData): void {\n            addAlert({\n                title: \"Details successfully changed\",\n                description: `Details (name, summary) of design '${event.name}' were successfully changed.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-renamed\"\n            });\n        },\n\n        designSaved(design: Design): void {\n            const description: React.ReactNode = (\n                <React.Fragment>\n                    <div>\n                        Design '{design?.name}' was <span style={{fontWeight: \"bold\"}}>successfully saved locally in your browser</span>.\n                    </div>\n                </React.Fragment>\n            );\n\n            addAlert({\n                title: \"Save successful\",\n                description,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-saved\"\n            });\n        },\n\n        designExportedToRhosr(event: ExportToRhosrData): void {\n            const description: React.ReactNode = (\n                <React.Fragment>\n                    <div>{`Design '${event.design.name}' was successfully exported to Service Registry.`}</div>\n                    <RegistryNavLink registry={event.registry} context={event.context}>View artifact in Service Registry</RegistryNavLink>\n                </React.Fragment>\n            );\n\n            addAlert({\n                title: \"Export successful\",\n                description,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-registered\"\n            });\n        },\n    };\n};\n","\nfunction setConfigProperty(propertyName: string, propertyValue: string | object): void {\n    console.info(`[LocalStorageService] Setting config property ${propertyName} to value ${propertyValue}.`);\n    const value: string = typeof propertyValue === \"string\" ? propertyValue as string : JSON.stringify(propertyValue);\n    localStorage.setItem(\"apicurio-studio.\" + propertyName, value);\n}\n\nfunction getConfigProperty(propertyName: string, defaultValue: string | object | undefined): string | object | undefined {\n    console.info(`[LocalStorageService] Getting config property ${propertyName}`);\n    const value: string|null = localStorage.getItem(\"apicurio-studio.\" + propertyName);\n    if (!value) {\n        return defaultValue;\n    }\n    if (value.startsWith(\"{\")) {\n        return JSON.parse(value);\n    }\n    return value as string;\n}\n\nfunction clearConfigProperty(propertyName: string): void {\n    console.info(`[LocalStorageService] Clearing config property ${propertyName}`);\n    localStorage.removeItem(propertyName)\n}\n\n/**\n * The Local Storage Service interface.\n */\nexport interface LocalStorageService {\n    setConfigProperty(propertyName: string, propertyValue: string | object): void;\n    getConfigProperty(propertyName: string, defaultValue: string | object | undefined): string | object | undefined;\n    clearConfigProperty(propertyName: string);\n}\n\n\n/**\n * React hook to get the LocalStorage service.\n */\nexport const useLocalStorageService: () => LocalStorageService = (): LocalStorageService => {\n    return {\n        setConfigProperty,\n        getConfigProperty,\n        clearConfigProperty\n    };\n};\n","import {Configuration, Registry, RegistriesApi, RegistryList} from '@rhoas/registry-management-sdk';\nimport {Auth, useAuth, Config, useConfig} from \"@rhoas/app-services-ui-shared\";\nimport {LocalStorageService, useLocalStorageService} from \"@app/services/local-storage\";\n\nconst RHOSR_MOCK_DATA: Registry[] = [\n    {\n        id: \"1\",\n        name: \"Local Registry 1 (localhost:8081)\",\n        registryUrl: \"http://localhost:8081/\",\n        browserUrl: \"http://localhost:8081/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"2\",\n        name: \"Local Registry 2 (localhost:8082)\",\n        registryUrl: \"http://localhost:8082/\",\n        browserUrl: \"http://localhost:8082/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n];\n\nconst RHOSR_MOCK_DATA_OF: Registry[] = [\n    {\n        id: \"101\",\n        name: \"Operate First Registry 1\",\n        registryUrl: \"http://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/\",\n        browserUrl: \"http://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"201\",\n        name: \"Operate First Registry 2\",\n        registryUrl: \"http://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/\",\n        browserUrl: \"http://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n];\n\n\n/**\n * Async function to get the RHOSR instances.  Uses a provided auth token and API\n * base path to create a RHOSR SDK instance.\n * @param auth the application auth\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistries(auth: Auth, basePath: string): Promise<Registry[]> {\n    console.debug(\"[RhosrService] Getting a list of registries from: \", basePath);\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistries().then(res => {\n        const registries: RegistryList = res?.data;\n        return registries.items;\n    });\n}\n\n/**\n * Gets information about a single registry instances by its unique ID.\n * @param auth the application auth\n * @param local the local storage service\n * @param id the registry instance ID\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistry(auth: Auth, local: LocalStorageService, id: string, basePath: string): Promise<Registry> {\n    console.debug(\"[RhosrService] Getting a single registry from: \", basePath);\n    const cacheKey: string = `services.rhosr.getRegistry.${id}`;\n    const cachedRegistry: Registry | undefined = local.getConfigProperty(cacheKey, undefined) as Registry | undefined;\n\n    if (cachedRegistry) {\n        // TODO limit the TTL of the cache entry somehow\n        console.debug(\"[RhosrService] Cache hit for registry with ID: \", id);\n        return Promise.resolve(cachedRegistry);\n    }\n\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistry(id).then(res => {\n        const registry: Registry = res?.data as Registry;\n        local.setConfigProperty(cacheKey, registry);\n        return registry;\n    });\n}\n\n\n/**\n * The RHOSR Service interface.\n */\nexport interface RhosrService {\n    getRegistries(): Promise<Registry[]>;\n    getRegistry(id: string): Promise<Registry>;\n}\n\n\n/**\n * A mock version of the RHOSR service.\n */\nfunction createMockService(mockData: Registry[]): RhosrService {\n    return {\n        getRegistries(): Promise<Registry[]> {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    resolve(mockData);\n                }, 150);\n            });\n            //return Promise.resolve(mockData);\n        },\n        getRegistry(id: string): Promise<Registry> {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    const matching: Registry[] = mockData.filter(registry => registry.id === id);\n                    if (matching && matching.length > 0) {\n                        return resolve(matching[0]);\n                    } else {\n                        return resolve({} as Registry);\n                    }\n                }, 150);\n            });\n        }\n    };\n}\n\nlet mockWarningSent: boolean = false;\nconst mockWarning = (message: string): void => {\n    if (!mockWarningSent) {\n        console.info(\"[RhosrService] ----------------------------------\");\n        console.info(\"[RhosrService]\", message);\n        console.info(\"[RhosrService] ----------------------------------\");\n        mockWarningSent = true;\n    }\n};\n\n/**\n * React hook to get the RHOSR service.\n */\nexport const useRhosrService: () => RhosrService = (): RhosrService => {\n    const auth: Auth = useAuth();\n    const cfg: Config = useConfig();\n    const local: LocalStorageService = useLocalStorageService();\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"local-mock\")) {\n        mockWarning(\"RHOSR mocking enabled.\");\n        return createMockService(RHOSR_MOCK_DATA);\n    }\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"operate-first-mock\")) {\n        mockWarning(\"RHOSR mocking enabled (Operate First).\");\n        return createMockService(RHOSR_MOCK_DATA_OF);\n    }\n\n    return {\n        getRegistries: () => getRegistries(auth, cfg.srs.apiBasePath),\n        getRegistry: (id) => getRegistry(auth, local, id, cfg.srs.apiBasePath),\n    };\n};\n","/**\n * Clones an object by stringifying it and then parsing it.  Not efficient\n * but effective.  Use sparingly.\n * @param object\n */\nexport function cloneObject(object: any): any {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Function to search a JS object for a property value that matches a criteria (from) and\n * replaces it with a new value (to);\n * @param object\n * @param from\n * @param to\n */\nexport function propertyReplace(object: any, from: string, to: string): void {\n    Object.keys(object).forEach(key => {\n        let value: any = object[key];\n        if (typeof value === \"object\") {\n            propertyReplace(value, from, to);\n        } else if (value === from) {\n            object[key] = to;\n        }\n    })\n}\n","import YAML from \"yaml\";\nimport {IParserResult, parse} from \"protobufjs\";\nimport {ArtifactTypes, ContentTypes, Design, DesignContent} from \"@app/models\";\n\n/**\n * Returns true if the given content is JSON formatted.\n * @param content the content to check\n */\nexport function isJson(content: string): boolean {\n    try {\n        JSON.parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nexport function parseJson(content: string): any {\n    return JSON.parse(content);\n}\nexport function toJsonString(content: any): string {\n    return JSON.stringify(content, null, 4);\n}\n\n\n/**\n * Returns true if the given content is YAML formatted.\n * @param content the content to check\n */\nexport function isYaml(content: string): boolean {\n    try {\n        const result: any = YAML.parse(content);\n        if (typeof result === \"object\") {\n            return true;\n        }\n    } catch (e) {\n    }\n    return false;\n}\nexport function parseYaml(content: string): any {\n    return YAML.parse(content);\n}\nexport function toYamlString(content: any): string {\n    return YAML.stringify(content, null, 4);\n}\n\n/**\n * Returns true if the given content is XML formatted.\n * @param content the content to check\n */\nexport function isXml(content: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isXmlWithRootNode(content: string, namespace: string, localName: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError &&\n               dom.documentElement.namespaceURI === namespace &&\n               dom.documentElement.localName === localName;\n    } catch (e) {\n        return false;\n    }\n}\nexport function isWsdl(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://schemas.xmlsoap.org/wsdl/\", \"definitions\");\n}\nexport function isXsd(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://www.w3.org/2001/XMLSchema\", \"schema\");\n}\n\n\n/**\n * Returns true if the given content is PROTO formatted.\n * @param content the content to check\n */\nexport function isProto(content: string): boolean {\n    try {\n        const result: IParserResult = parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n\nexport function fileExtensionForDesign(design: Design, content: DesignContent): string {\n    // If the design was originally imported from a file, let's just use the extension\n    // from that file.\n    if (design.origin && design.origin.type === \"file\") {\n        const filename: string = design.origin.file?.fileName as string;\n        if (filename.indexOf(\".\") > 0) {\n            const split: string[] = filename.split(\".\");\n            return split[split.length - 1];\n        }\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return \"proto\";\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return \"wsdl\";\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return \"xsd\";\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return \"xml\";\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return \"graphql\";\n    }\n\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_JSON) {\n        return \"json\";\n    }\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_YAML) {\n        return \"yaml\";\n    }\n\n    return \"txt\";\n}\n\nexport function contentTypeForDesign(design: Design, content: DesignContent): string {\n    if (content.contentType) {\n        return content.contentType;\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return ContentTypes.APPLICATION_PROTOBUF;\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return ContentTypes.APPLICATION_WSDL;\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return ContentTypes.APPLICATION_GRAPHQL;\n    }\n\n    return ContentTypes.APPLICATION_JSON;\n}\n\n\n/**\n * Called to format (pretty print) the given content.  For example, if the content is JSON\n * then the content will be parsed and then stringified with better whitespace.\n * @param value\n * @param contentType\n */\nexport function formatContent(value: string, contentType: string): string {\n    try {\n        if (contentType === ContentTypes.APPLICATION_JSON) {\n            const parsed: any = JSON.parse(value);\n            return JSON.stringify(parsed, null, 4);\n        }\n    } catch (e) {\n        console.error(e);\n        return value;\n    }\n    return value;\n}\n\n/**\n * Converts a given string to something that's allowed in a filename.\n * @param value\n */\nexport function convertToValidFilename(value: string): string {\n    return (value.replace(/[\\/|\\\\:*?\"<>]/g, \"\"));\n}\n\n/**\n * Converts content (which might be a JS object) to a string.\n * @param content\n */\nexport function contentToString(content: any): string {\n    if (typeof content === \"string\") {\n        return content as string;\n    } else {\n        return JSON.stringify(content as string, null, 4);\n    }\n}\n","import {Design} from \"@app/models\";\nimport {DesignContextType} from \"@app/models/designs/design-context.model\";\n\n\nexport function hasOrigin(design: Design|undefined, contextType: DesignContextType): boolean {\n    return design?.origin?.type === contextType;\n};\n\n\nexport function limit(value: string | undefined, length: number): string | undefined {\n    if (!value || value.length < length) {\n        return value;\n    }\n    return value.substring(0, length - 3) + \"...\";\n}\n","import {ContentTypes} from \"@app/models/rhosr-instance\";\nimport axios, {AxiosRequestConfig} from \"axios\";\n\nconst AXIOS = axios.create();\n\n\nfunction createAxiosConfig(method: string, url: string, options: any, data?: any): AxiosRequestConfig {\n    if (typeof data === \"string\") {\n        data = new Blob([data]);\n    }\n    return {\n        ...{\n            data,\n            method,\n            url,\n            validateStatus: (status) => {\n                return status >= 200 && status < 300;\n            }\n        }, ...options\n    };\n}\n\n\nfunction unwrapErrorData(error: any): any {\n    console.debug(\"Error detected, unwrapping...\");\n    if (error && error.response && error.response.data) {\n        return {\n            message: error.message,\n            ...error.response.data,\n            status: error.response.status\n        }\n    } else if (error && error.response) {\n        return {\n            message: error.message,\n            status: error.response.status\n        }\n    } else if (error) {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: error.message,\n            status: 500\n        }\n    } else {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: \"Unknown error\",\n            status: 500\n        }\n    }\n}\n\n/**\n * Creates an endpoint to use when making a REST call.  Supports path params and query params.\n * @param baseHref\n * @param path\n * @param params\n * @param queryParams\n */\nexport function createEndpoint(baseHref: string, path: string, params?: any, queryParams?: any): string {\n    if (params) {\n        Object.keys(params).forEach(key => {\n            const value: string = encodeURIComponent(params[key]);\n            path = path.replace(\":\" + key, value);\n        });\n    }\n    let rval: string = createHref(baseHref, path);\n    if (queryParams) {\n        let first: boolean = true;\n        for (const key in queryParams) {\n            if (queryParams[key]) {\n                const value: string = encodeURIComponent(queryParams[key]);\n                if (first) {\n                    rval = rval + \"?\" + key;\n                } else {\n                    rval = rval + \"&\" + key;\n                }\n                if (value !== null && value !== undefined) {\n                    rval = rval + \"=\" + value;\n                }\n                first = false;\n            }\n        }\n    }\n    return rval;\n}\n\n/**\n * Creates the request options used by the HTTP service when making API calls.\n * @param headers\n */\nexport function createOptions(headers: { [header: string]: string }): AxiosRequestConfig {\n    const options: AxiosRequestConfig = {headers};\n    return options;\n}\n\n\n/**\n * Performs an HTTP GET operation to the given URL with the given options.  Returns\n * a Promise to the HTTP response data.\n */\nexport function httpGet<T>(url: string, options?: AxiosRequestConfig, successCallback?: (value: any) => T): Promise<T> {\n    console.info(\"[BaseService] Making a GET request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Accept\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"get\", url, options);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: T = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n * @param successCallback\n * @param progressCallback\n */\nexport function httpPost<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void,\n                            progressCallback?: (progressEvent: any) => void): Promise<void> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    if (progressCallback) {\n        const fiftyMB: number = 50 * 1024 * 1024;\n        config.onUploadProgress = progressCallback;\n        config.maxContentLength = fiftyMB;\n        config.maxBodyLength = fiftyMB;\n    }\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPostWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: any) => O): Promise<O> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n */\nexport function httpPut<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void): Promise<void> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPutWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: O) => O): Promise<O> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP DELETE operation to the given URL with the given body and options.\n * @param url\n * @param options\n */\nexport function httpDelete<T>(url: string, options?: AxiosRequestConfig, successCallback?: () => T): Promise<T> {\n    console.info(\"[BaseService] Making a DELETE request to: \", url);\n\n    if (!options) {\n        options = {};\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"delete\", url, options);\n// @ts-ignore\n    return AXIOS.request(config)\n        .then(() => {\n            return successCallback ? successCallback() : null;\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\nexport function stripTrailingSlash(baseHref: string | undefined): string {\n    if (!baseHref) {\n        return \"\";\n    }\n    if (baseHref.endsWith(\"/\")) {\n        return baseHref.substring(0, baseHref.length - 1);\n    }\n    return baseHref;\n}\n\nexport function createHref(baseHref: string, path: string): string {\n    let url: string =  baseHref;\n    if (url.endsWith(\"/\")) {\n        url = url.substring(0, url.length - 1);\n    }\n    url += path;\n    return url;\n}\n\n"],"names":["If","condition","children","NavLink","location","title","className","basename","useBasename","to","getBasename","Link","ArtifactTypeIcon","type","isShowIcon","isShowLabel","classes","getClassNames","getTitle","getLabel","IsLoading","loadingComponent","lc","Spinner","IfNotEmpty","collection","emptyState","emptyStateTitle","emptyStateMessage","empty","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","EmptyStateBody","length","ListWithToolbar","toolbar","alwaysShowToolbar","filteredEmptyState","isLoading","isEmpty","isFiltered","ToggleIcon","expanded","ChevronDownIcon","ChevronRightIcon","DesignDescription","description","truncate","Truncate","content","tooltipPosition","RegistryNavLink","registry","context","useState","href","setHref","rhosr","undefined","setHrefFrom","group","groupId","id","artifactId","browserUrl","useEffect","getRegistry","instanceId","then","ServicePreviewWarning","Alert","isInline","style","marginBottom","RhosrEmptyState","EmptyStateIcon","icon","AddCircleOIcon","DateTime","date","format","utc","ObjectSelect","value","items","onSelect","itemToString","noSelectionLabel","toggleId","menuAppendTo","isToggled","setToggled","selectObjects","setSelectObjects","selections","setSelections","map","item","index","toString","noSelection","filtered","filter","soo","Select","SelectVariant","onToggle","event","isOpen","SelectOption","isPlaceholder","key","useNavigation","history","useHistory","navigateTo","path","setTimeout","push","AVRO","PROTOBUF","JSON","OPENAPI","ASYNCAPI","GRAPHQL","KCONNECT","WSDL","XSD","XML","APPLICATION_JSON","APPLICATION_YAML","APPLICATION_XML","APPLICATION_PROTOBUF","APPLICATION_GRAPHQL","TEXT_XML","APPLICATION_WSDL","ImportFrom","ArtifactGroup","ArtifactName","name","ArtifactSelector","registries","onSelected","querying","setQuerying","pageSize","page","paging","setPaging","filterValue","ascending","filterSelection","criteria","setCriteria","setRegistry","artifacts","setArtifacts","rhosrInstance","setRhosrInstance","rhosrInstanceFactory","createFor","gac","sortAscending","getArtifacts","results","catch","error","console","count","ArtifactListToolbar","onRegistrySelected","document","getElementById","onCriteriaChange","onPagingChange","marginTop","IfRhosr","scope","noAccess","ArtifactList","fetchArtifactContent","artifact","version","getArtifactContent","onArtifactSelected","fetchArtifactVersions","getArtifactVersions","selectedArtifact","setSelectedArtifact","onArtifactSelectedInternal","debug","onArtifactUnselectedInternal","onArtifactLoaded","idx","ArtifactListItem","onUnselected","isSelected","rval","setLoading","versions","setVersions","selectedVersion","setSelectedVersion","setContent","isContentLoaded","setContentLoaded","onVersionSelect","contentType","data","onClick","target","localName","Radio","isChecked","state","status","Badge","isRead","setFilterValue","Toolbar","ToolbarContent","ToolbarItem","SearchInput","onChange","onSearch","onClear","Button","SortAlphaDownIcon","SortAlphaDownAltIcon","Pagination","padding","dropDirection","isCompact","itemCount","perPage","onSetPage","newPage","onPerPageSelect","newPerPage","widgetId","TYPE_OPTIONS","label","CreateDesignModal","onCreate","onCancel","isValid","setValid","setName","summary","setSummary","setType","typeSelection","setTypeSelection","isTypeToggled","setTypeToggled","setVersion","isVersionToggled","setVersionToggled","templates","setTemplates","template","setTemplate","templatesSvc","valid","getTemplatesFor","Modal","ModalVariant","onClose","actions","isDisabled","Form","FormGroup","isRequired","fieldId","TextInput","TextArea","selection","onTypeSelect","Gallery","hasGutter","minWidths","default","maxWidths","t","GalleryItem","TemplateItem","DeleteDesignModal","design","onDelete","onDownload","titleIconVariant","TextContent","Text","component","lineHeight","paddingLeft","Checkbox","checked","DesignList","designs","selectedDesign","sort","onSort","onEdit","onRename","onRegister","sortByIndex","setSortByIndex","renderColumnData","column","colIndex","modifiedOn","fromNow","DesignOriginLabel","renderActionsToggle","props","KebabToggle","preventDefault","stopPropagation","sortParams","sortable","sortBy","direction","_event","by","columnIndex","ResponsiveTable","ariaLabel","columns","width","expectedLength","minimumColumnWidth","onRowClick","row","renderHeader","Th","modifier","renderCell","Td","renderActions","ActionsColumn","actionsToggle","isSeparator","isRowSelected","DesignsPanel","onDesignSelected","onImport","showDataWarning","setShowDataWarning","refresh","setRefresh","setFiltered","filterOn","setSort","setDesigns","designToDelete","setDesignToDelete","isDeleteModalOpen","setDeleteModalOpen","designToRegister","setDesignToRegister","isRegisterModalOpen","setRegisterModalOpen","designToRename","setDesignToRename","isRenameModalOpen","setRenameModalOpen","designsSvc","downloadSvc","nav","alerts","local","doRefresh","onDownloadDesign","getDesignContent","filename","theContent","stringify","downloadToFS","trim","getConfigProperty","searchDesigns","DesignsEmptyState","emptyStateFiltered","DesignsEmptyStateFiltered","DesignsToolbar","Card","isSelectable","CardBody","actionClose","AlertActionCloseButton","setConfigProperty","deleteDesign","designDeleted","designDeleteFailed","ExportToRhosrModal","onExported","designExportedToRhosr","RenameModal","renameDesign","designRenamed","e","EmptyStateSecondaryActions","ImportDropdown","Bullseye","backgroundColor","SearchIcon","PLACEHOLDER_TYPE_OPTION","compareTo","selectOption","this","ImportDesignModal","importType","designContent","setDesignContent","fileName","setFileName","url","setUrl","setContentType","detectJsonOrYamlInfo","contentObj","openapi","info","swagger","asyncapi","$schema","detectInfo","detectXmlInfo","warn","setTheType","newType","newTypeSelection","option","FILE","file","cd","cdc","FileUpload","filenamePlaceholder","fname","URL","UrlUpload","urlPlaceholder","toggle","DropdownToggle","toggleVariant","Dropdown","action","attributes","RHOSR","isPlain","dropdownItems","DropdownItem","position","ImportFromRhosrModal","setRegistries","setDesign","getRegistries","a","b","name1","name2","localeCompare","PlusCircleIcon","previewContent","setPreviewContent","downloadError","setDownloadError","urlService","hasUrl","hasError","spinner","placeholder","fetchUrlContent","message","isReadOnly","DesignDetailsPanel","activeTabKey","setActiveTabKey","Tabs","activeKey","eventKey","Tab","TabTitleText","createdOn","DesignEvents","DesignHistory","events","setEvents","designsService","getEvents","DesignEventType","on","exports","setExports","originUrl","origin","originGroupId","originArtifactId","originVersion","originFilename","Divider","importTypeLabel","typeLabel","Label","color","menuActions","accept","includes","EditorContext","dirty","onSave","onRegistrationTestRegistry","onFormat","onCompareContent","lss","designContext","setDesignContext","isActionMenuToggled","setActionMenuToggled","isExpanded","setExpanded","isTestRegistryModalOpen","setIsTestRegistryModalOpen","actionMenuToggle","menuItems","DropdownSeparator","TestRegistryModal","onSubmit","params","Breadcrumb","BreadcrumbItem","isActive","zIndex","newExpanded","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","initialFormState","hasErrors","groupValue","validated","errorMessage","artifactIdValue","isLoadingRegistries","setLoadingRegistries","formState","setFormState","defaultRegistry","helperTextInvalid","val","CompareModal","before","beforeName","after","afterName","renderSideBySide","automaticLayout","wordWrap","readOnly","inDiffEditor","originalAriaLabel","modifiedAriaLabel","diffEditorContentOptions","setDiffEditorContentOptions","isDiffInline","setIsDiffInline","isDiffWrapped","setIsDiffWrapped","ToggleGroup","ToggleGroupItem","text","buttonId","ArrowsAltHIcon","DiffEditor","original","modified","options","isExporting","setExporting","setGroup","setArtifactId","setFormDefaults","createOrUpdateArtifact","amd","Date","createEvent","determineContentType","normalizeGroupId","useRhosrInstanceServiceFactory","auth","useAuth","instanceUrl","registryUrl","createArtifact","basePath","Promise","apicurio_registry","getToken","token","endpoint","headers","createArtifactVersion","ifExists","start","end","queryParams","limit","offset","order","orderby","maxContentLength","responseType","transformResponse","testUpdateArtifactContent","db","createDesign","newDesign","newDesignContent","newEvent","all","add","getDesigns","toArray","matches","toLowerCase","indexOf","filteredDesigns","design1","design2","getTime","totalCount","slice","getDesign","where","equals","first","delete","r","newName","newSummary","update","updateDesignContent","reverse","eventId","stores","useDesignsService","ASYNCAPI_2_TEMPLATES","OPENAPI_3_TEMPLATES","OPENAPI_2_TEMPLATES","JSON_TEMPLATES","AVRO_TEMPLATES","PROTOBUF_TEMPLATES","resolve","startsWith","reject","useTemplatesService","useDownloadService","_w","window","chrome","link","createElement","blob","Blob","createObjectURL","download","click","navigator","msSaveBlob","File","open","githubRegex","match","org","repo","branch","useUrlService","useAlertsService","addAlert","useAlert","AlertVariant","dataTestId","designSaved","fontWeight","propertyName","propertyValue","localStorage","setItem","defaultValue","getItem","parse","clearConfigProperty","removeItem","useLocalStorageService","RHOSR_MOCK_DATA","created_at","updated_at","instance_type","RHOSR_MOCK_DATA_OF","createMockService","mockData","matching","mockWarningSent","mockWarning","useRhosrService","cfg","useConfig","srs","apiBasePath","RegistriesApi","Configuration","accessToken","res","cacheKey","cachedRegistry","cloneObject","object","propertyReplace","from","Object","keys","forEach","isJson","parseJson","toJsonString","isYaml","parseYaml","toYamlString","isXml","DOMParser","parseFromString","getElementsByTagName","isXmlWithRootNode","namespace","dom","documentElement","namespaceURI","isWsdl","isXsd","isProto","fileExtensionForDesign","split","contentTypeForDesign","formatContent","parsed","convertToValidFilename","replace","hasOrigin","contextType","substring","AXIOS","createAxiosConfig","method","validateStatus","unwrapErrorData","response","createEndpoint","baseHref","encodeURIComponent","createHref","createOptions","httpGet","successCallback","config","request","httpPostWithReturn","body","httpPut","stripTrailingSlash","endsWith"],"sourceRoot":""}