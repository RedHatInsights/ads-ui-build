{"version":3,"file":"313.15059140.js","mappings":"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","sources":["webpack://ads-ui/./src/app/components/if.tsx","webpack://ads-ui/./src/app/components/navlink.tsx","webpack://ads-ui/./src/app/components/artifact-type-icon.tsx","webpack://ads-ui/./src/app/components/is-loading.tsx","webpack://ads-ui/./src/app/components/if-not-empty.tsx","webpack://ads-ui/./src/app/components/list-with-toolbar.tsx","webpack://ads-ui/./src/app/components/toggle-icon.tsx","webpack://ads-ui/./src/app/components/design-description.tsx","webpack://ads-ui/./src/app/components/registry-navlink.tsx","webpack://ads-ui/./src/app/components/service-preview-warning.tsx","webpack://ads-ui/./src/app/components/object-select.tsx","webpack://ads-ui/./src/app/contexts/navigation.ts","webpack://ads-ui/./src/app/models/rhosr-instance/artifact-types.model.ts","webpack://ads-ui/./src/app/models/rhosr-instance/content-types.model.ts","webpack://ads-ui/./src/app/pages/components/home/import-dropdown.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-group.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-name.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-selector.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-item.tsx","webpack://ads-ui/./src/app/pages/components/home/artifact-list-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/create-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/delete-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/design-list.tsx","webpack://ads-ui/./src/app/pages/components/home/designs.panel.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-empty-state-filtered.tsx","webpack://ads-ui/./src/app/pages/components/home/designs-toolbar.tsx","webpack://ads-ui/./src/app/pages/components/home/import-design.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/import-from-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/home/template-item.tsx","webpack://ads-ui/./src/app/pages/components/home/url-upload.tsx","webpack://ads-ui/./src/app/pages/components/home/design-details-panel.tsx","webpack://ads-ui/./src/app/pages/components/home/design-history.tsx","webpack://ads-ui/./src/app/pages/components/home/design-events.tsx","webpack://ads-ui/./src/app/pages/components/home/design-event-type.tsx","webpack://ads-ui/./src/app/pages/components/home/design-origin-label.tsx","webpack://ads-ui/./src/app/pages/components/editor/editor-context.tsx","webpack://ads-ui/./src/app/pages/components/editor/test-registry.modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/export-to-rhosr.modal.tsx","webpack://ads-ui/./src/app/pages/components/shared/rename.modal.tsx","webpack://ads-ui/./src/app/services/rhosr-instance.ts","webpack://ads-ui/./src/app/services/designs.ts","webpack://ads-ui/./src/app/services/_templates/asyncapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/openapi.templates.ts","webpack://ads-ui/./src/app/services/_templates/json.templates.ts","webpack://ads-ui/./src/app/services/_templates/avro.templates.ts","webpack://ads-ui/./src/app/services/_templates/protobuf.templates.ts","webpack://ads-ui/./src/app/services/templates.ts","webpack://ads-ui/./src/app/services/download.ts","webpack://ads-ui/./src/app/services/url.ts","webpack://ads-ui/./src/app/services/alerts.tsx","webpack://ads-ui/./src/app/services/local-storage.ts","webpack://ads-ui/./src/app/services/rhosr.ts","webpack://ads-ui/./src/app/utils/object.utils.ts","webpack://ads-ui/./src/app/utils/content.utils.ts","webpack://ads-ui/./src/app/utils/design.utils.ts","webpack://ads-ui/./src/app/utils/rest.utils.ts"],"sourcesContent":["import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type IfProps = {\n    condition: boolean | (() => boolean);\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const If: FunctionComponent<IfProps> = ({condition, children}: IfProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n\n    return (accept() ? <React.Fragment children={children} /> : <React.Fragment />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Basename, useBasename} from \"@rhoas/app-services-ui-shared\";\n\nexport type NavLinkProps = {\n    location: string;\n    title?: string;\n    className?: string;\n    children?: React.ReactNode;\n}\n\nexport const NavLink: FunctionComponent<NavLinkProps> = ({location, title, className, children}: NavLinkProps) => {\n\n    const basename: Basename = useBasename();\n    const to: string = `${basename.getBasename()}${location}`;\n\n    return (\n        <Link className={className} title={title} to={to} children={children} />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./artifact-type-icon.css\";\nimport {ArtifactTypes} from \"@app/models\";\n\n/**\n * Properties\n */\nexport type ArtifactTypeIconProps = {\n    type: string;\n    isShowIcon?: boolean; // defaults to true\n    isShowLabel?: boolean; // defaults to false\n}\n\n\nexport const ArtifactTypeIcon: FunctionComponent<ArtifactTypeIconProps> = ({type, isShowIcon, isShowLabel}: ArtifactTypeIconProps) => {\n    const getTitle = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro Schema\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf Schema\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON Schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI Definition\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI Definition\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL Definition\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect Schema\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getLabel = (): string => {\n        let title: string = type;\n        switch (type) {\n            case ArtifactTypes.AVRO:\n                title = \"Avro\";\n                break;\n            case ArtifactTypes.PROTOBUF:\n                title = \"Protobuf\";\n                break;\n            case ArtifactTypes.JSON:\n                title = \"JSON schema\";\n                break;\n            case ArtifactTypes.OPENAPI:\n                title = \"OpenAPI\";\n                break;\n            case ArtifactTypes.ASYNCAPI:\n                title = \"AsyncAPI\";\n                break;\n            case ArtifactTypes.GRAPHQL:\n                title = \"GraphQL\";\n                break;\n            case ArtifactTypes.KCONNECT:\n                title = \"Kafka Connect\";\n                break;\n            case ArtifactTypes.WSDL:\n                title = \"WSDL\";\n                break;\n            case ArtifactTypes.XSD:\n                title = \"XML Schema\";\n                break;\n            case ArtifactTypes.XML:\n                title = \"XML\";\n                break;\n        }\n        return title;\n    };\n\n    const getClassNames = (): string => {\n        let classes: string = \"artifact-type-icon\";\n        if (isShowLabel) {\n            classes += \" has-label\";\n        }\n        if (isShowIcon !== false) {\n            classes += \" has-icon\";\n            switch (type) {\n                case ArtifactTypes.AVRO:\n                    classes += \" avro-icon24\";\n                    break;\n                case ArtifactTypes.PROTOBUF:\n                    classes += \" protobuf-icon24\";\n                    break;\n                case ArtifactTypes.JSON:\n                    classes += \" json-icon24\";\n                    break;\n                case ArtifactTypes.OPENAPI:\n                    classes += \" oai-icon24\";\n                    break;\n                case ArtifactTypes.ASYNCAPI:\n                    classes += \" aai-icon24\";\n                    break;\n                case ArtifactTypes.GRAPHQL:\n                    classes += \" graphql-icon24\";\n                    break;\n                case ArtifactTypes.KCONNECT:\n                    classes += \" kconnect-icon24\";\n                    break;\n                case ArtifactTypes.WSDL:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XSD:\n                    classes += \" xml-icon24\";\n                    break;\n                case ArtifactTypes.XML:\n                    classes += \" xml-icon24\";\n                    break;\n            }\n        }\n        if (isShowIcon && !isShowLabel) {\n            classes += \" icon-only\";\n        }\n        return classes;\n    }\n\n    const renderLabel = (): React.ReactNode | undefined => {\n        if (isShowLabel) {\n            return <span>{getLabel()}</span>\n        } else {\n            return undefined;\n        }\n    };\n\n    return (\n        <div className={getClassNames()} title={getTitle()} children={renderLabel()} />\n    );\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Spinner} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IsLoadingProps = {\n    condition: boolean | (() => boolean);\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n}\n\n/**\n * Displays a Spinner control while the condition property is true.  When false, the provided children\n * are displayed.  Useful when displaying content from the results of an async operation such as a REST\n * call.\n */\nexport const IsLoading: FunctionComponent<IsLoadingProps> = ({condition, loadingComponent, children}: IsLoadingProps) => {\n    const accept = () => {\n        if (typeof condition === \"boolean\") {\n            return condition;\n        } else {\n            return condition();\n        }\n    }\n    const lc: React.ReactNode = loadingComponent || <Spinner />;\n    return (accept() ? <React.Fragment children={lc} /> : <React.Fragment children={children} />);\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Button, EmptyState, EmptyStateBody, EmptyStateVariant, Title} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type IfNotEmptyProps = {\n    collection?: any[];\n    emptyState?: React.ReactNode;\n    emptyStateTitle?: string;\n    emptyStateMessage?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * provided collection is not empty.  If the provided collection is empty, then\n * an empty state control is displayed instead.\n */\nexport const IfNotEmpty: FunctionComponent<IfNotEmptyProps> = ({collection, emptyState, emptyStateTitle, emptyStateMessage, children}: IfNotEmptyProps) => {\n    const isEmpty = () => {\n        return !collection || collection.length === 0;\n    };\n\n    const empty: React.ReactNode = emptyState || (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{emptyStateTitle || \"None found\"}</Title>\n            <EmptyStateBody>{emptyStateMessage || \"No items found.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    return isEmpty() ?\n        <React.Fragment children={empty}/> :\n        <React.Fragment children={children} />\n};\n","import React, {FunctionComponent} from \"react\";\nimport {IsLoading} from \"@app/components/is-loading\";\nimport {If} from \"@app/components/if\";\nimport {IfNotEmpty} from \"@app/components/if-not-empty\";\n\n/**\n * Properties\n */\nexport type ListWithToolbarProps = {\n    toolbar: React.ReactNode;\n    alwaysShowToolbar?: boolean;\n    emptyState: React.ReactNode;\n    filteredEmptyState: React.ReactNode;\n    isLoading: boolean;\n    isFiltered: boolean;\n    isEmpty: boolean;\n    loadingComponent?: React.ReactNode;\n    children?: React.ReactNode;\n};\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport const ListWithToolbar: FunctionComponent<ListWithToolbarProps> = (\n    {toolbar, alwaysShowToolbar, emptyState, filteredEmptyState, isLoading, loadingComponent, isEmpty, isFiltered, children}: ListWithToolbarProps) => {\n\n    return (\n        <React.Fragment>\n            <If condition={alwaysShowToolbar || !isEmpty || isFiltered} children={toolbar} />\n            <IsLoading condition={isLoading} loadingComponent={loadingComponent}>\n                <If condition={!isEmpty} children={children} />\n                <If condition={isEmpty && isFiltered} children={filteredEmptyState} />\n                <If condition={isEmpty && !isFiltered} children={emptyState} />\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {ChevronRightIcon, ChevronDownIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type ToggleIconProps = {\n    expanded: boolean;\n    onClick: () => void;\n};\n\nexport const ToggleIcon: FunctionComponent<ToggleIconProps> = ({expanded, onClick}: ToggleIconProps) => {\n    return expanded ? (\n        <ChevronDownIcon />\n    ) : (\n        <ChevronRightIcon />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./design-description.css\";\n\n/**\n * Properties\n */\nexport type DesignDescriptionProps = {\n    description: string | undefined;\n    title?: string;\n    className?: string;\n}\n\n\nexport const DesignDescription: FunctionComponent<DesignDescriptionProps> = ({description, title, className}: DesignDescriptionProps) => {\n    let classes: string = \"\";\n    if (className) {\n        classes = className;\n    }\n    if (!description) {\n        classes = classes + \" no-description\";\n    }\n    return (\n        <div className={classes} title={title}>{description || \"No description.\"}</div>\n    );\n}\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {RhosrService, useRhosrService} from \"@app/services\";\nimport {stripTrailingSlash} from \"@app/utils\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\n\n/**\n * Properties\n */\nexport type RegistryNavLinkProps = {\n    registry?: Registry;\n    context: DesignContext | undefined;\n    children?: React.ReactNode;\n};\n\n/**\n * A navigation link to an artifact in a service registry instance.  The context passed to this\n * component must be of type \"rhosr\".\n */\nexport const RegistryNavLink: FunctionComponent<RegistryNavLinkProps> = ({registry, context, children}: RegistryNavLinkProps) => {\n    const [href, setHref] = useState<string>();\n\n    const rhosr: RhosrService | undefined = registry === undefined ? useRhosrService() : undefined;\n\n    const setHrefFrom = (registry: Registry, context: DesignContext): void => {\n        const group: string = context.rhosr?.groupId || \"default\";\n        const id: string = context.rhosr?.artifactId as string;\n        setHref(`${stripTrailingSlash(registry.browserUrl)}/artifacts/${group}/${id}`);\n    };\n\n    useEffect(() => {\n        setHref(undefined);\n        if (context?.type === \"rhosr\") {\n            if (registry) {\n                setHrefFrom(registry, context);\n            } else {\n                (rhosr as RhosrService).getRegistry(context.rhosr?.instanceId as string).then(registry => {\n                    setHrefFrom(registry, context);\n                });\n            }\n        }\n    }, [context]);\n\n    return (\n        href ? <a href={href} children={children} /> : <span children={children} />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Alert} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type ServicePreviewWarningProps = {\n};\n\nexport const ServicePreviewWarning: FunctionComponent<ServicePreviewWarningProps> = ({}: ServicePreviewWarningProps) => {\n    return (\n        <Alert isInline variant=\"warning\" title=\"Service Preview: Data is stored locally in your browser\" style={{ marginBottom: \"15px\"}}>\n            <p>\n                In the Service Preview release of OpenShift API Designer, all designs are stored locally in your\n                browser. Clearing your browser cache or switching to a new browser might result in loss of data.\n                Make sure you save your work by downloading your designs locally or by exporting them to a Red Hat\n                OpenShift Service Registry instance.\n            </p>\n        </Alert>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Select, SelectOption, SelectVariant} from \"@patternfly/react-core\";\nimport {SelectOptionObject} from \"@patternfly/react-core/src/components/Select/SelectOption\";\n\ninterface ObjectSelectOptionObject extends SelectOptionObject {\n    item: any;\n}\n\n/**\n * Properties\n */\nexport type ObjectSelectProps = {\n    value: any;\n    items: any[];\n    onSelect: (value: any) => void;\n    itemToString: (value: any) => string;\n    noSelectionLabel?: string;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline';\n    variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n};\n\n/**\n * A generic control that makes it easier to create a <Select> from an array of objects.\n */\nexport const ObjectSelect: FunctionComponent<ObjectSelectProps> = (\n    {value, items, onSelect, itemToString, noSelectionLabel, menuAppendTo, variant}: ObjectSelectProps) => {\n\n    const [isToggled, setToggled] = useState<boolean>(false);\n    const [selectObjects, setSelectObjects] = useState<ObjectSelectOptionObject[]>();\n    const [selections, setSelections] = useState<ObjectSelectOptionObject[]>();\n\n    const onSelectInternal = (event: React.MouseEvent | React.ChangeEvent, value: string | SelectOptionObject): void => {\n        setToggled(false);\n        onSelect((value as ObjectSelectOptionObject).item);\n    };\n\n    useEffect(() => {\n        const theItems: any[] = items || [];\n        const selectObjects: ObjectSelectOptionObject[] = theItems.map((item, index) => {\n            return {\n                item: item,\n                toString: () => {\n                    return itemToString(item)\n                }\n            }\n        });\n        if (noSelectionLabel !== undefined) {\n            const noSelection: ObjectSelectOptionObject = {\n                item: undefined,\n                toString(): string {\n                    return noSelectionLabel;\n                }\n            }\n            setSelectObjects([\n                noSelection, ...selectObjects\n            ]);\n        } else {\n            setSelectObjects(selectObjects);\n        }\n    }, [items]);\n\n    useEffect(() => {\n        const filtered: ObjectSelectOptionObject[]|undefined = selectObjects?.filter(soo => soo.item === value);\n        setSelections(filtered);\n    }, [value]);\n\n    return (\n        <Select menuAppendTo={menuAppendTo} variant={variant || SelectVariant.single} onToggle={setToggled} onSelect={onSelectInternal} isOpen={isToggled} selections={selections}>\n            {\n                selectObjects?.map((soo, index) => (\n                    <SelectOption isPlaceholder={soo.item === undefined} key={index} value={soo} />\n                ))\n            }\n        </Select>\n    )\n};\n","import {Basename, useBasename} from \"@rhoas/app-services-ui-shared\";\nimport {History} from \"history\";\nimport {useHistory} from \"react-router-dom\";\n\nexport const navigateTo: (path: string, basename: Basename, history: History) => void = (path: string, basename: Basename, history: History) => {\n    const to: string = `${basename.getBasename()}${path}`;\n    setTimeout(() => {\n        history.push(to);\n    }, 50);\n};\n\nexport type Navigation = {\n    navigateTo: (path: string) => void;\n};\n\nexport const useNavigation: () => Navigation = (): Navigation => {\n    const history: History = useHistory();\n    const basename: Basename = useBasename();\n\n    return {\n        navigateTo: (path: string) => {\n            return navigateTo(path, basename, history);\n        }\n    };\n}\n","\nexport class ArtifactTypes {\n\n    public static AVRO: string = \"AVRO\";\n    public static PROTOBUF: string = \"PROTOBUF\";\n    public static JSON: string = \"JSON\";\n    public static OPENAPI: string = \"OPENAPI\";\n    public static ASYNCAPI: string = \"ASYNCAPI\";\n    public static GRAPHQL: string = \"GRAPHQL\";\n    public static KCONNECT: string = \"KCONNECT\";\n    public static WSDL: string = \"WSDL\";\n    public static XSD: string = \"XSD\";\n    public static XML: string = \"XML\";\n\n}\n","\nexport class ContentTypes {\n\n    public static APPLICATION_JSON: string = \"application/json\";\n    public static APPLICATION_YAML: string = \"application/x-yaml\";\n    public static APPLICATION_XML: string = \"application/xml\";\n    public static APPLICATION_PROTOBUF: string = \"application/x-protobuf\";\n    public static APPLICATION_GRAPHQL: string = \"application/graphql\";\n\n    public static TEXT_XML: string = \"text/xml\";\n    public static APPLICATION_WSDL: string = \"application/wsdl+xml\";\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Dropdown, DropdownItem, DropdownToggle} from \"@patternfly/react-core\";\n\nexport enum ImportFrom {\n    FILE,\n    URL,\n    RHOSR\n};\n\n/**\n * Properties\n */\nexport type ImportDropdownProps = {\n    variant: \"long\"|\"short\";\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * A control to display the Import dropdown on the main page (used to select how to import content\n * into the API Designer).\n */\nexport const ImportDropdown: FunctionComponent<ImportDropdownProps> = ({variant, onImport}: ImportDropdownProps) => {\n    const [isToggled, setToggled] = useState(false);\n\n    const onToggle = (value: boolean): void => {\n        setToggled(value);\n    };\n\n    const toggle: React.ReactNode = (\n        <DropdownToggle id=\"import-toggle\" toggleVariant=\"secondary\" onToggle={onToggle}>\n            {variant === \"short\" ? \"Import\" : \"Import design\"}\n        </DropdownToggle>\n    );\n\n    const onMenuSelect: (event?: React.SyntheticEvent<HTMLDivElement>) => void = (event) => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setToggled(false);\n        switch (action) {\n            case \"action-file\":\n                onImport(ImportFrom.FILE);\n                return;\n            case \"action-url\":\n                onImport(ImportFrom.URL);\n                return;\n            case \"action-rhosr\":\n                onImport(ImportFrom.RHOSR);\n                return;\n        }\n    };\n\n    return (\n        <Dropdown\n            onSelect={onMenuSelect}\n            toggle={toggle}\n            isOpen={isToggled}\n            isPlain\n            dropdownItems={\n                [\n                    <DropdownItem key=\"action-rhosr\" data-id=\"action-rhosr\">Import from Service Registry</DropdownItem>,\n                    <DropdownItem key=\"action-url\" data-id=\"action-url\">Import from URL</DropdownItem>,\n                    <DropdownItem key=\"action-file\" data-id=\"action-file\">Import from file</DropdownItem>,\n                ]\n            }\n            position=\"right\"\n        />\n    );\n};\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactGroupProps = {\n    groupId: string|undefined;\n}\n\n/**\n * Displays a RHOSR artifact's group.\n */\nexport const ArtifactGroup: FunctionComponent<ArtifactGroupProps> = ({groupId}: ArtifactGroupProps) => {\n    const style = (): string => {\n        return !groupId ? \"nogroup\" : \"group\";\n    };\n\n    return (\n        <span className={style()}>{groupId}</span>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\n\n/**\n * Properties\n */\nexport type ArtifactNameProps = {\n    id: string;\n    name: string;\n}\n\n/**\n * Displays a RHOSR artifact's name.\n */\nexport const ArtifactName: FunctionComponent<ArtifactNameProps> = ({id, name}: ArtifactNameProps) => {\n    return name ? (\n        <React.Fragment>\n            <span className=\"name\">{name}</span>\n            <span className=\"id\">{id}</span>\n        </React.Fragment>\n    ) : (\n        <React.Fragment>\n            <span className=\"name\">{id}</span>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    ArtifactSearchResults,\n    CreateDesignContent,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedArtifact,\n    SearchedVersion\n} from \"@app/models\";\nimport {RhosrInstanceService, RhosrInstanceServiceFactory, useRhosrInstanceServiceFactory} from \"@app/services\";\nimport {ArtifactList, ArtifactListToolbar, ArtifactListToolbarCriteria} from \"@app/pages/components\";\nimport {IfNotEmpty, IsLoading, ListWithToolbar} from \"@app/components\";\nimport {EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title} from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport type ArtifactSelectorProps = {\n    registries: Registry[];\n    onSelected: (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n};\n\n/**\n * A control that allows the user to find and select a single version of a single artifact from\n * a service registry instance.\n */\nexport const ArtifactSelector: FunctionComponent<ArtifactSelectorProps> = ({registries, onSelected}: ArtifactSelectorProps) => {\n    const [ querying, setQuerying ] = useState(true);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<ArtifactListToolbarCriteria>({\n        filterValue: \"\",\n        ascending: true,\n        filterSelection: \"name\"\n    });\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ artifacts, setArtifacts ] = useState<ArtifactSearchResults|undefined>();\n    const [ rhosrInstance, setRhosrInstance ] = useState<RhosrInstanceService>();\n\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    const onRegistrySelected = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    const onCriteriaChange = (criteria: ArtifactListToolbarCriteria): void =>  {\n        setCriteria(criteria);\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n    };\n\n    const fetchArtifactVersions = (artifact: SearchedArtifact): Promise<SearchedVersion[]> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactVersions(artifact.groupId, artifact.id);\n    };\n\n    const fetchArtifactContent = (artifact: SearchedArtifact, version?: SearchedVersion): Promise<string> => {\n        const ri: RhosrInstanceService = rhosrInstance as RhosrInstanceService;\n        return ri.getArtifactContent(artifact.groupId, artifact.id, version?.version||\"latest\");\n    };\n\n    const onArtifactSelected = (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        onSelected(registry, artifact, version, content);\n    };\n\n    // Initialization\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, []);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    // Query for artifacts when relevant changes occur.\n    useEffect(() => {\n        if (rhosrInstance) {\n            const gac: GetArtifactsCriteria = {\n                sortAscending: criteria.ascending,\n                type: criteria.filterSelection,\n                value: criteria.filterValue\n            };\n            setQuerying(true);\n            rhosrInstance.getArtifacts(gac, paging).then(results => {\n                setArtifacts(results);\n                setQuerying(false);\n            }).catch(error => {\n                // TODO handle error\n                console.error(\"[RegistryPage] Error searching for artifacts: \", error);\n            });\n        }\n        onSelected(undefined, undefined, undefined);\n    }, [rhosrInstance, criteria, paging]);\n\n    const toolbar: React.ReactNode = (\n        <ArtifactListToolbar registries={registries} criteria={criteria} paging={paging}\n                             onRegistrySelected={onRegistrySelected}\n                             menuAppendTo={document.getElementById('artifact-selector')}\n                             onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange}\n                             artifacts={artifacts} />\n    );\n\n    const emptyState: React.ReactNode = (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n            <EmptyStateBody>{\"No artifacts found in the registry instance.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    const filteredEmptyState: React.ReactNode = (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{\"None found\"}</Title>\n            <EmptyStateBody>{\"No artifacts matched the filter criteria.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    const loadingComponent: React.ReactNode = (\n        <Spinner size=\"lg\" style={{marginTop: \"10px\"}} />\n    );\n\n    return (\n        <div id=\"artifact-selector\">\n            <ListWithToolbar toolbar={toolbar}\n                alwaysShowToolbar={true}\n                emptyState={emptyState}\n                filteredEmptyState={filteredEmptyState}\n                isFiltered={criteria.filterValue !== \"\"}\n                isLoading={querying}\n                loadingComponent={loadingComponent}\n                isEmpty={!artifacts || artifacts.count === 0}\n            >\n                <ArtifactList artifacts={artifacts?.artifacts} fetchArtifactContent={fetchArtifactContent}\n                    onArtifactSelected={onArtifactSelected}\n                    fetchArtifactVersions={fetchArtifactVersions} />\n            </ListWithToolbar>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./artifact-list.css\";\nimport {CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {ArtifactListItem} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type ArtifactListProps = {\n    artifacts?: SearchedArtifact[];\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n    onArtifactSelected: (artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent) => void;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactList: FunctionComponent<ArtifactListProps> = (\n    {artifacts, fetchArtifactVersions, fetchArtifactContent, onArtifactSelected}: ArtifactListProps) => {\n\n    const [selectedArtifact, setSelectedArtifact] = useState<SearchedArtifact>();\n\n    const onArtifactSelectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact selected: \", artifact);\n        setSelectedArtifact(artifact);\n    };\n\n    const onArtifactUnselectedInternal = (artifact: SearchedArtifact): void => {\n        console.debug(\"[ArtifactList] Artifact unselected: \", artifact);\n        setSelectedArtifact(undefined);\n        onArtifactSelected(undefined, undefined, undefined);\n    };\n\n    const onArtifactLoaded = (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent): void => {\n        console.debug(\"[ArtifactList] Artifact loaded: \", artifact);\n        console.debug(\"[ArtifactList] Selected Artifact: \", selectedArtifact);\n        if (artifact === selectedArtifact) {\n            onArtifactSelected(artifact, version, content);\n        }\n    };\n\n    return (\n        <div className=\"artifact-list\">\n            {\n                artifacts?.map( (artifact, idx) =>\n                    <ArtifactListItem artifact={artifact} key={idx}\n                                      onSelected={onArtifactSelectedInternal}\n                                      onUnselected={onArtifactUnselectedInternal}\n                                      fetchArtifactVersions={fetchArtifactVersions}\n                                      fetchArtifactContent={fetchArtifactContent}\n                                      onArtifactLoaded={onArtifactLoaded}\n                                      isSelected={selectedArtifact === artifact} />\n                )\n            }\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-item.css\";\nimport {ArtifactTypes, ContentTypes, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Badge, Radio, Spinner} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {ArtifactGroup, ArtifactName} from \"@app/pages/components\";\nimport {isJson, isXml, isYaml} from \"@app/utils\";\n\n/**\n * Properties\n */\nexport type ArtifactListItemProps = {\n    artifact: SearchedArtifact;\n    isSelected: boolean;\n    onSelected: (artifact: SearchedArtifact) => void;\n    onUnselected: (artifact: SearchedArtifact) => void;\n    onArtifactLoaded: (artifact: SearchedArtifact, version: SearchedVersion, content: CreateDesignContent) => void;\n    fetchArtifactVersions: (artifact: SearchedArtifact) => Promise<SearchedVersion[]>;\n    fetchArtifactContent: (artifact: SearchedArtifact, version?: SearchedVersion) => Promise<string>;\n}\n\n/**\n * A list of artifacts in a RHOSR instance.\n */\nexport const ArtifactListItem: FunctionComponent<ArtifactListItemProps> = (\n    {artifact, isSelected, onSelected, onUnselected, onArtifactLoaded, fetchArtifactVersions, fetchArtifactContent}: ArtifactListItemProps) => {\n\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [versions, setVersions] = useState<SearchedVersion[]>();\n    const [selectedVersion, setSelectedVersion] = useState<SearchedVersion>();\n    const [content, setContent] = useState<string>();\n    const [isContentLoaded, setContentLoaded] = useState<boolean>(false);\n\n    const labels = (): string[] => {\n        return artifact.labels ? artifact.labels : [];\n    };\n    const statuses = (): string[] => {\n        const rval: string[] = [];\n        if (artifact.state === \"DISABLED\") {\n            rval.push(\"Disabled\");\n        }\n        if (artifact.state === \"DEPRECATED\") {\n            rval.push(\"Deprecated\");\n        }\n        return rval;\n    };\n    const description = (): string => {\n        if (artifact.description) {\n            return artifact.description;\n        }\n        return `An artifact of type ${artifact.type} with no description.`;\n    };\n\n    const shouldLoadVersions = (): boolean => {\n        return versions === undefined || versions.length === 0;\n    };\n\n    const loadVersions = (): void => {\n        setContentLoaded(false);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Loading versions for ${artifact.id}`);\n        fetchArtifactVersions(artifact).then(versions => {\n            setVersions(versions);\n            setLoading(false);\n            onVersionSelect(undefined);\n        }).catch(error => {\n            // TODO handle errors\n        });\n    };\n\n    const onToggleSelected = (event: any): void => {\n        // Bit of a hack - if the user clicks the Version drop-down, don't do the\n        // artifact item toggling behavior.\n        if (event && event.target && event.target.localName === \"button\") {\n            return;\n        }\n\n        if (isSelected) {\n            onUnselected(artifact);\n        } else {\n            if (shouldLoadVersions()) {\n                loadVersions();\n            } else {\n                onVersionSelect(undefined);\n            }\n            onSelected(artifact);\n        }\n    };\n\n    const onVersionSelect = (version?: SearchedVersion): void => {\n        setSelectedVersion(version);\n        setLoading(true);\n        console.debug(`[ArtifactListItem] Version selected for ${artifact.id}, loading content. Version: `, version);\n        fetchArtifactContent(artifact, version).then(content => {\n            console.debug(\"[ArtifactListItem] Artifact content successfully fetched for: \", artifact.id)\n            setContent(content);\n            setLoading(false);\n            setContentLoaded(true);\n        }).catch(error => {\n            // TODO handle errors loading the artifact content\n        });\n    };\n\n    // Whenever the content changes, fire the \"onArtifactLoaded\" event.  Do this\n    // from inside useEffect() so that it's not happening from an async callback.\n    useEffect(() => {\n        if (content !== undefined) {\n            let contentType: string;\n            if (isJson(content)) {\n                contentType = ContentTypes.APPLICATION_JSON;\n            } else if (isYaml(content)) {\n                contentType = ContentTypes.APPLICATION_YAML;\n            } else if (isXml(content)) {\n                contentType = ContentTypes.APPLICATION_XML;\n            } else if (artifact.type === ArtifactTypes.PROTOBUF) {\n                contentType = ContentTypes.APPLICATION_PROTOBUF;\n            } else if (artifact.type === ArtifactTypes.GRAPHQL) {\n                contentType = ContentTypes.APPLICATION_GRAPHQL;\n            } else {\n                contentType = ContentTypes.APPLICATION_JSON;\n            }\n            const cdc: CreateDesignContent = {\n                contentType,\n                data: content\n            };\n            onArtifactLoaded(artifact, selectedVersion as SearchedVersion, cdc);\n        }\n    }, [content]);\n\n    return (\n        <div className={`artifact-list-item ${isSelected ? \"selected\" : \"\"} ${isContentLoaded ? \"loaded\" : \"\"}`}\n             onClick={onToggleSelected}>\n            <div className=\"artifact-list-item-radio\">\n                <IsLoading condition={isLoading} loadingComponent={(<Spinner size=\"sm\" />)}>\n                    <Radio id={`artifact-radio-${artifact.id}`} name=\"\" isChecked={isSelected} />\n                </IsLoading>\n            </div>\n            <div className=\"artifact-list-item-icon\">\n                <ArtifactTypeIcon type={artifact.type}/>\n            </div>\n            <div className=\"artifact-list-item-info\">\n                <div className=\"artifact-title\">\n                    <ArtifactGroup groupId={artifact.groupId} />\n                    <ArtifactName id={artifact.id} name={artifact.name} />\n                    {\n                        statuses().map( status =>\n                            <Badge className=\"status-badge\" key={status} isRead={true}>{status}</Badge>\n                        )\n                    }\n                </div>\n                <div className=\"artifact-description\">{description()}</div>\n            </div>\n            <div className=\"artifact-list-item-versions\">\n                <If condition={isSelected}>\n                    <ObjectSelect value={selectedVersion} items={versions as SearchedVersion[]}\n                                  noSelectionLabel=\"latest\" menuAppendTo=\"parent\"\n                                  onSelect={onVersionSelect} itemToString={version => version.version} />\n                </If>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./artifact-list-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    SelectVariant,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {ArtifactSearchResults, Paging} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {ObjectSelect} from \"@app/components/object-select\";\n\n\nexport interface ArtifactListToolbarCriteria {\n    filterSelection: string;\n    filterValue: string;\n    ascending: boolean;\n}\n\nexport type ArtifactListToolbarProps = {\n    registries: Registry[];\n    criteria: ArtifactListToolbarCriteria;\n    paging: Paging;\n    artifacts?: ArtifactSearchResults;\n    menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline' | undefined | null;\n    onRegistrySelected: (registry: Registry) => void;\n    onCriteriaChange: (criteria: ArtifactListToolbarCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n}\n\n\nexport const ArtifactListToolbar: FunctionComponent<ArtifactListToolbarProps> = ({registries, criteria, onCriteriaChange, paging,\n                                                                            onPagingChange, artifacts, onRegistrySelected, menuAppendTo}: ArtifactListToolbarProps) => {\n    const [ registry, setRegistry ] = useState<Registry>();\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    const onRegistrySelectInternal = (registry: Registry): void => {\n        setRegistry(registry);\n        onRegistrySelected(registry);\n    };\n\n    const onToggleAscending = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            ascending: !criteria.ascending\n        });\n    };\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    }\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    }\n\n    const totalArtifactCount = (): number => {\n        return artifacts?.count || 0;\n    };\n\n    useEffect(() => {\n        if (registries && registries.length > 0) {\n            setRegistry(registries[0]);\n        }\n    }, [registries]);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    return (\n        <Toolbar id=\"artifacts-toolbar-1\" className=\"artifacts-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <ObjectSelect value={registry} items={registries}\n                                  variant={SelectVariant.single}\n                                  onSelect={onRegistrySelectInternal}\n                                  menuAppendTo={menuAppendTo || 'parent'}\n                                  itemToString={item => item.name} />\n                </ToolbarItem>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter artifacts\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem className=\"sort-icon-item\">\n                    <Button variant=\"plain\" aria-label=\"edit\" data-testid=\"toolbar-btn-sort\" onClick={onToggleAscending}>\n                        {\n                            criteria.ascending ? <SortAlphaDownIcon/> : <SortAlphaDownAltIcon/>\n                        }\n                    </Button>\n                </ToolbarItem>\n                <ToolbarItem className=\"artifact-paging-item\">\n                    <Pagination\n                        style={{padding: \"5px\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalArtifactCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"artifact-list-pagination\"\n                        className=\"artifact-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Gallery,\n    GalleryItem,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, CreateDesign, Template} from \"@app/models\";\nimport {TemplatesService, useTemplatesService} from \"@app/services\";\nimport {If, ServicePreviewWarning} from \"@app/components\";\nimport {TemplateItem} from \"@app/pages/components\";\n\nexport type CreateDesignModalProps = {\n    isOpen: boolean|undefined;\n    onCreate: (event: CreateDesign, template: Template) => void;\n    onCancel: () => void;\n}\n\n\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        }\n    };\n});\n\n\nexport const CreateDesignModal: FunctionComponent<CreateDesignModalProps> = ({isOpen, onCreate, onCancel}: CreateDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState(ArtifactTypes.OPENAPI);\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [templates, setTemplates] = useState<Template[]>();\n    const [template, setTemplate] = useState<Template>();\n\n    const templatesSvc: TemplatesService = useTemplatesService();\n\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setType((selection as any).value);\n        setTypeSelection(selection);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Create button in the modal\n    const doCreate = (): void => {\n        const cd: CreateDesign = {\n            type,\n            name,\n            summary,\n            context: {\n                type: \"create\"\n            }\n        };\n        onCreate(cd, template as Template);\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        if (!template) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, template]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setName(\"\");\n        setSummary(\"\");\n        setType(ArtifactTypes.OPENAPI);\n        if (templates) {\n            setTemplate(templates[0]);\n        } else {\n            setTemplate(undefined);\n        }\n    }, [isOpen]);\n\n    // Whenever the type changes, load the templates for that type. If the type is\n    // OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI) {\n            setVersion(\"3.0.2\");\n        }\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [type]);\n\n    // Whenever the version changes, fetch the templates for the current type and version.\n    useEffect(() => {\n        templatesSvc.getTemplatesFor(type, version).then(setTemplates);\n    }, [version]);\n\n    // Whenever the templates changes, auto-select the first one\n    useEffect(() => {\n        if (templates && templates.length > 0) {\n            setTemplate(templates[0]);\n        }\n    }, [templates]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Create a design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doCreate}>\n                    Create\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <ServicePreviewWarning />\n\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"create-design-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"create-design-name\"\n                        name=\"create-design-name\"\n                        aria-describedby=\"create-design-name-helper\"\n                        value={name}\n                        onChange={(value) => {setName(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"create-design-description\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"create-design-description\"\n                        name=\"create-design-description\"\n                        aria-describedby=\"create-design-description-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value)}}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Type\" isRequired={true} fieldId=\"create-design-type\">\n                    <Select\n                        variant={SelectVariant.single}\n                        aria-label=\"Select type\"\n                        onToggle={() => {setTypeToggled(!isTypeToggled)}}\n                        onSelect={(event, selection) => onTypeSelect(selection)}\n                        isOpen={isTypeToggled}\n                        selections={typeSelection}\n                        menuAppendTo=\"parent\"\n                    >\n                        {\n                            TYPE_OPTIONS.map(to => <SelectOption key={(to as any).value} value={to} />)\n                        }\n                    </Select>\n                </FormGroup>\n                <If condition={type === ArtifactTypes.OPENAPI}>\n                    <FormGroup label=\"Version\" isRequired={true} fieldId=\"create-design-version\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select version\"\n                            onToggle={() => {setVersionToggled(!isVersionToggled)}}\n                            onSelect={(event, selection) => onVersionSelect(selection as string)}\n                            isOpen={isVersionToggled}\n                            selections={version}\n                            menuAppendTo=\"parent\"\n                        >\n                            <SelectOption value={\"3.0.2\"} />\n                            <SelectOption value={\"2.0\"} />\n                        </Select>\n                    </FormGroup>\n                </If>\n                <If condition={(templates && templates.length > 1) as boolean}>\n                    <FormGroup label=\"Template\" fieldId=\"create-design-template\">\n                        <Gallery hasGutter minWidths={{default: \"125px\"}} maxWidths={{default: \"125px\"}}>\n                        {\n                            templates?.map(t => (\n                                <GalleryItem key={t.id}>\n                                    <TemplateItem template={t} isSelected={t === template} onSelect={() => {\n                                        setTemplate(t)\n                                    }} />\n                                </GalleryItem>\n                            ))\n                        }\n                        </Gallery>\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, Text, TextContent} from \"@patternfly/react-core\";\nimport {Design} from \"@app/models\";\n\nexport type DeleteDesignModalProps = {\n    design: Design|undefined;\n    isOpen: boolean|undefined;\n    onDelete: (design: Design) => void;\n    onCancel: () => void;\n    onDownload: (design: Design) => void;\n}\n\nexport const DeleteDesignModal: FunctionComponent<DeleteDesignModalProps> = ({design, isOpen, onDelete, onDownload, onCancel}: DeleteDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    // Called when the user clicks the Delete button in the modal\n    const doDelete = (): void => {\n        onDelete(design as Design);\n    };\n\n    const doDownload = (): void => {\n        onDownload(design as Design);\n    };\n\n    useEffect(() => {\n        setValid(false);\n    }, [design, isOpen]);\n\n    return (\n        <Modal\n            variant={ModalVariant.small}\n            title=\"Delete design?\"\n            titleIconVariant=\"warning\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"delete\" variant=\"primary\" isDisabled={!isValid} onClick={doDelete}>\n                    Delete\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent style={{marginBottom: \"15px\"}}>\n                <Text component=\"p\">The following API or schema design will be deleted.</Text>\n            </TextContent>\n\n            <Form>\n                <FormGroup label=\"Name\" fieldId=\"delete-design-name\">\n                    <TextContent>{design?.name}</TextContent>\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"delete-design-description\">\n                    <TextContent>{design?.summary}</TextContent>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-warning\">\n                    <Alert isInline variant=\"info\" title=\"To save your data for future use, download the design.\">\n                        <p style={{lineHeight: \"18px\"}}>\n                            To ensure your data is successfully saved, wait for the download to complete\n                            before deleting the design.\n                        </p>\n                        <Button variant=\"link\" onClick={doDownload} style={{paddingLeft:\"0px\"}}>Download design</Button>\n                    </Alert>\n                </FormGroup>\n                <FormGroup fieldId=\"delete-design-confirm\">\n                    <Checkbox id=\"valid-checkbox\" name=\"\" label=\"I have downloaded the design or do not need to!\"\n                              isChecked={isValid} onChange={(checked) => setValid(checked)} />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-list.css\";\nimport {Design, DesignsSearchResults, DesignsSort} from \"@app/models\";\nimport {ResponsiveTable} from \"@rhoas/app-services-ui-components\";\nimport {ArtifactTypeIcon, DesignDescription, NavLink} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {KebabToggle} from \"@patternfly/react-core\";\nimport {IAction} from \"@patternfly/react-table\";\nimport {ThProps} from \"@patternfly/react-table/src/components/TableComposable/Th\";\nimport {CustomActionsToggleProps} from \"@patternfly/react-table/src/components/Table/ActionsColumn\";\nimport {DesignOriginLabel} from \"@app/pages/components\";\n\n\nexport type DesignListProps = {\n    designs: DesignsSearchResults;\n    selectedDesign: Design | undefined;\n    sort: DesignsSort;\n    onSort: (sort: DesignsSort) => void;\n    onRename: (design: Design) => void;\n    onEdit: (design: Design) => void;\n    onDelete: (design: Design) => void;\n    onRegister: (design: Design) => void;\n    onDownload: (design: Design) => void;\n    onSelect: (design: Design|undefined) => void;\n}\n\nexport const DesignList: FunctionComponent<DesignListProps> = (\n    {designs, selectedDesign, sort, onSort, onEdit, onRename, onDelete, onRegister, onDownload, onSelect}: DesignListProps) => {\n\n    const [sortByIndex, setSortByIndex] = useState<number>();\n\n    const columns: any[] = [\n        { index: 0, id: \"name\", label: \"Name\", width: 40, sortable: true },\n        { index: 1, id: \"type\", label: \"Type\", width: 15, sortable: false },\n        { index: 2, id: \"modified-on\", label: \"Time updated\", width: 15, sortable: true },\n        { index: 3, id: \"context\", label: \"Origin\", width: 25, sortable: false },\n    ];\n\n    const renderColumnData = (column: Design, colIndex: number): React.ReactNode => {\n        // Name.\n        if (colIndex === 0) {\n            return (\n                <div>\n                    <NavLink className=\"design-title\"\n                             location={`/designs/${column.id}/editor`}\n                             title={column.name}>{column.name}</NavLink>\n                    <DesignDescription className=\"design-summary\"\n                                       description={column.summary}\n                                       title={column.summary} />\n                </div>\n            );\n        }\n        // Type.\n        if (colIndex === 1) {\n            return <ArtifactTypeIcon type={column.type} isShowLabel={true} />\n        }\n        // Modified on.\n        if (colIndex === 2) {\n            return <Moment date={column.modifiedOn} fromNow={true} />\n        }\n        // Origin.\n        if (colIndex === 3) {\n            return <DesignOriginLabel design={column} />;\n        }\n        return <span />\n    };\n\n    const renderActionsToggle = (props: CustomActionsToggleProps): React.ReactNode => {\n        return <KebabToggle isDisabled={props.isDisabled} isOpen={props.isOpen} onToggle={(value, event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            props.onToggle(value);\n        }} />\n    }\n\n    const actionsFor = (design: any): IAction[] => {\n        return [\n            { title: \"View details\", onClick: () => onSelect(design) },\n            { isSeparator: true, },\n            { title: \"Edit design\", onClick: () => onEdit(design) },\n            { title: \"Rename design\", onClick: () => onRename(design) },\n            { title: \"Export to Service Registry\", onClick: () => onRegister(design) },\n            { title: \"Download design\", onClick: () => onDownload(design) },\n            { isSeparator: true, },\n            { title: \"Delete design\", onClick: () => onDelete(design) }\n        ];\n    }\n\n    const sortParams = (column: any): ThProps[\"sort\"] | undefined => {\n        return column.sortable ? {\n            sortBy: {\n                index: sortByIndex,\n                direction: sort.direction\n            },\n            onSort: (_event, index, direction) => {\n                const sort: DesignsSort = {\n                    by: index === 0 ? \"name\" : \"modified-on\",\n                    direction\n                };\n                onSort(sort);\n            },\n            columnIndex: column.index\n        } : undefined;\n    };\n\n    useEffect(() => {\n        setSortByIndex(sort.by === \"name\" ? 0 : 2);\n    }, [sort]);\n\n    return (\n        <div className=\"design-list\">\n            <ResponsiveTable\n                ariaLabel=\"list of designs\"\n                columns={columns}\n                data={designs.designs}\n                expectedLength={designs.count}\n                minimumColumnWidth={350}\n                onRowClick={(row) => onSelect(row.row.id === selectedDesign?.id ? undefined : row.row)}\n                renderHeader={({ column, Th, key }) => (\n                    <Th sort={sortParams(column)}\n                        className=\"design-list-header\"\n                        key={`header-${column.id}`}\n                        width={column.width}\n                        modifier=\"truncate\">{column.label}</Th>\n                )}\n                renderCell={({ column, row, colIndex, Td, key }) => (\n                    <Td className=\"design-list-cell\" key={`cell-${colIndex}-${row.id}`} children={renderColumnData(row as Design, colIndex)} />\n                )}\n                renderActions={({row, ActionsColumn}) => (\n                    <ActionsColumn key={`actions-${row['id']}`}\n                                   actionsToggle={renderActionsToggle}\n                                   items={actionsFor(row)}/>\n                )}\n                isRowSelected={({ row }) => row.id === selectedDesign?.id}\n            />\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs.panel.css\";\nimport {Alert, AlertActionCloseButton, Card, CardBody} from \"@patternfly/react-core\";\nimport {\n    AlertsService,\n    DesignsService,\n    DownloadService, LocalStorageService, useAlertsService,\n    useDesignsService,\n    useDownloadService,\n    useLocalStorageService\n} from \"@app/services\";\nimport {Design, DesignsSearchCriteria, DesignsSearchResults, DesignsSort, Paging} from \"@app/models\";\nimport {If, ListWithToolbar, RegistryNavLink} from \"@app/components\";\nimport {\n    DeleteDesignModal,\n    DesignList,\n    DesignsEmptyState,\n    DesignsEmptyStateFiltered,\n    DesignsToolbar,\n    ExportToRhosrData,\n    ExportToRhosrModal,\n    ImportFrom,\n    RenameData,\n    RenameModal\n} from \"@app/pages/components\";\nimport {Navigation, useNavigation} from \"@app/contexts/navigation\";\nimport {contentTypeForDesign, convertToValidFilename, fileExtensionForDesign} from \"@app/utils\";\nimport {AlertVariant, useAlert} from \"@rhoas/app-services-ui-shared\";\n\n\nexport type DesignsPanelProps = {\n    selectedDesign: Design | undefined;\n    onDesignSelected: (design: Design | undefined) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n}\n\n\nexport const DesignsPanel: FunctionComponent<DesignsPanelProps> = ({selectedDesign, onDesignSelected, onCreate, onImport}: DesignsPanelProps) => {\n    const [ isLoading, setLoading ] = useState(false);\n    const [ showDataWarning, setShowDataWarning ] = useState(true);\n    const [ refresh, setRefresh ] = useState(1);\n    const [ isFiltered, setFiltered ] = useState(false);\n    const [ paging, setPaging ] = useState<Paging>({\n        pageSize: 20,\n        page: 1\n    });\n    const [ criteria, setCriteria ] = useState<DesignsSearchCriteria>({\n        filterValue: \"\",\n        filterOn: \"name\"\n    });\n    const [ sort, setSort ] = useState<DesignsSort>({\n        by: \"modified-on\",\n        direction: \"desc\"\n    });\n    const [ designs, setDesigns ] = useState<DesignsSearchResults>();\n    const [ designToDelete, setDesignToDelete ] = useState<Design>();\n    const [ isDeleteModalOpen, setDeleteModalOpen ] = useState(false);\n    const [ designToRegister, setDesignToRegister ] = useState<Design>();\n    const [ isRegisterModalOpen, setRegisterModalOpen ] = useState(false);\n    const [ designToRename, setDesignToRename ] = useState<Design>();\n    const [ isRenameModalOpen, setRenameModalOpen ] = useState(false);\n\n    const designsSvc: DesignsService = useDesignsService();\n    const downloadSvc: DownloadService = useDownloadService();\n    const nav: Navigation = useNavigation();\n    const alerts: AlertsService = useAlertsService();\n    const local: LocalStorageService = useLocalStorageService();\n\n    const doRefresh = (): void => {\n        setRefresh(refresh + 1);\n    };\n\n    const onEditDesign = (design: Design): void => {\n        nav.navigateTo(`/designs/${design.id}/editor`);\n    };\n\n    const onRenameDesign = (design: Design): void => {\n        setDesignToRename(design);\n        setRenameModalOpen(true);\n    };\n\n    const doRenameDesign = (event: RenameData): void => {\n        designsSvc.renameDesign(designToRename?.id as string, event.name, event.summary).then(() => {\n            if (designToRename) {\n                designToRename.name = event.name;\n                designToRename.summary = event.summary;\n            }\n            setRenameModalOpen(false);\n            alerts.designRenamed(event);\n        }).catch(e => {\n            // TODO error handling\n        })\n    };\n\n    const onDeleteDesign = (design: Design): void => {\n        setDesignToDelete(design);\n        setDeleteModalOpen(true);\n    };\n\n    const onDeleteDesignConfirmed = (design: Design): void => {\n        designsSvc.deleteDesign(design.id).then(() => {\n            doRefresh();\n            alerts.designDeleted(design);\n        }).catch(error => {\n            console.error(\"[DesignsPanel] Error deleting design: \", error);\n            alerts.designDeleteFailed(design, error);\n        });\n        setDeleteModalOpen(false);\n    };\n\n    const onRegisterDesign = (design: Design): void => {\n        setDesignToRegister(design);\n        setRegisterModalOpen(true);\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        alerts.designExportedToRhosr(event);\n    };\n\n    const onDownloadDesign = (design: Design): void => {\n        designsSvc.getDesignContent(design.id).then(content => {\n            const filename: string = `${convertToValidFilename(design.name)}.${fileExtensionForDesign(design, content)}`;\n            const contentType: string = contentTypeForDesign(design, content);\n            const theContent: string = typeof content.data === \"object\" ? JSON.stringify(content.data, null, 4) : content.data as string;\n            downloadSvc.downloadToFS(design, theContent, contentType, filename);\n        });\n    };\n\n    const onCriteriaChange = (criteria: DesignsSearchCriteria): void =>  {\n        setCriteria(criteria);\n        setPaging({\n            page: 1,\n            pageSize: paging.pageSize\n        });\n        setFiltered(criteria.filterValue != undefined && criteria.filterValue.trim().length > 0);\n        doRefresh();\n    };\n\n    const onSortDesigns = (sort: DesignsSort): void => {\n        setSort(sort);\n        doRefresh();\n    };\n\n    const onPagingChange = (paging: Paging): void => {\n        setPaging(paging);\n        doRefresh();\n    };\n\n    useEffect(() => {\n        setShowDataWarning(\"true\" === local.getConfigProperty(\"designs.panel.show-data-warning\", \"true\"));\n    }, []);\n\n    useEffect(() => {\n        setLoading(true);\n        onDesignSelected(undefined);\n        designsSvc.searchDesigns(criteria, paging, sort).then(designs => {\n            console.debug(\"[DesignsPanel] Designs loaded: \", designs);\n            setDesigns(designs);\n            setLoading(false);\n        }).catch(error => {\n            // TODO need error handling\n            console.error(error);\n        });\n    }, [refresh]);\n\n    const emptyState: React.ReactNode = (\n        <DesignsEmptyState onCreate={onCreate} onImport={onImport} />\n    );\n\n    const emptyStateFiltered: React.ReactNode = (\n        <DesignsEmptyStateFiltered onClear={() => {\n            onCriteriaChange({\n                filterValue: \"\",\n                filterOn: \"\"\n            });\n        }} />\n    );\n\n    const toolbar: React.ReactNode = (\n        <DesignsToolbar designs={designs} criteria={criteria} paging={paging}\n                        onCreate={onCreate} onImport={onImport}\n                        onCriteriaChange={onCriteriaChange} onPagingChange={onPagingChange} />\n    );\n\n    const onCloseDataWarning = (): void => {\n        setShowDataWarning(false);\n        local.setConfigProperty(\"designs.panel.show-data-warning\", \"false\");\n    };\n\n    return (\n        <React.Fragment>\n            <Card isSelectable={false}>\n                <CardBody className=\"panel-body\">\n                    <ListWithToolbar toolbar={toolbar}\n                                     emptyState={emptyState}\n                                     filteredEmptyState={emptyStateFiltered}\n                                     isLoading={isLoading}\n                                     isFiltered={isFiltered}\n                                     isEmpty={!designs || designs.count === 0}>\n                        <If condition={showDataWarning}>\n                            <Alert className=\"panel-alert\"\n                                   isInline={true}\n                                   variant=\"info\"\n                                   title=\"Service Preview: Data is stored locally in your browser\"\n                                   actionClose={<AlertActionCloseButton onClose={onCloseDataWarning} />}\n                                   style={{ marginBottom: \"15px\"}}>\n                                <p>\n                                    In the Service Preview release of OpenShift API Designer, all designs are stored\n                                    locally in your browser. Clearing your browser cache or switching to a new browser\n                                    might result in loss of data. Make sure you save your work by downloading your\n                                    designs locally or by exporting them to a Red Hat OpenShift Service Registry instance.\n                                </p>\n                            </Alert>\n                        </If>\n                        <DesignList designs={designs as DesignsSearchResults}\n                                    selectedDesign={selectedDesign}\n                                    sort={sort}\n                                    onSelect={onDesignSelected}\n                                    onSort={onSortDesigns}\n                                    onEdit={onEditDesign}\n                                    onRename={onRenameDesign}\n                                    onDownload={onDownloadDesign}\n                                    onRegister={onRegisterDesign}\n                                    onDelete={onDeleteDesign} />\n                    </ListWithToolbar>\n                </CardBody>\n            </Card>\n            <DeleteDesignModal design={designToDelete}\n                              isOpen={isDeleteModalOpen}\n                              onDelete={onDeleteDesignConfirmed}\n                              onDownload={onDownloadDesign}\n                              onCancel={() => setDeleteModalOpen(false)} />\n            <ExportToRhosrModal design={designToRegister as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n            <RenameModal design={designToRename}\n                         isOpen={isRenameModalOpen}\n                         onRename={doRenameDesign}\n                         onCancel={() => setRenameModalOpen(false)} />\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    Title\n} from \"@patternfly/react-core\";\nimport {AddCircleOIcon} from \"@patternfly/react-icons\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateProps = {\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyState: FunctionComponent<DesignsEmptyStateProps> = ({onCreate, onImport}: DesignsEmptyStateProps) => {\n    return (\n        <EmptyState>\n            <EmptyStateIcon icon={AddCircleOIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                Welcome to API Designer\n            </Title>\n            <EmptyStateBody>\n                Create and edit designs, such as APIs (OpenAPI, AsyncAPI) and schemas (Apache Avro,\n                Google Protobuf, JSON Schema), with API Designer. To get started, create or import a design.\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={onCreate}>Create design</Button>\n            <EmptyStateSecondaryActions>\n                <ImportDropdown variant=\"long\" onImport={onImport} />\n            </EmptyStateSecondaryActions>\n        </EmptyState>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {\n    Bullseye,\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title\n} from \"@patternfly/react-core\";\nimport {SearchIcon} from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport type DesignsEmptyStateFilteredProps = {\n    onClear: () => void;\n};\n\n/**\n * The empty state UI shown to the user when no designs are available, either due to\n * filtering or because no designs have been created yet.\n */\nexport const DesignsEmptyStateFiltered: FunctionComponent<DesignsEmptyStateFilteredProps> = ({onClear}: DesignsEmptyStateFilteredProps) => {\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.small}>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    No matching designs\n                </Title>\n                <EmptyStateBody>Adjust your filters and try again.</EmptyStateBody>\n                <Button variant=\"link\" onClick={onClear}>Clear all filters</Button>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./designs-toolbar.css\";\nimport {\n    Button,\n    OnPerPageSelect,\n    OnSetPage,\n    Pagination,\n    SearchInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport {SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {DesignsSearchCriteria, DesignsSearchResults, Paging} from \"@app/models\";\nimport {ImportDropdown, ImportFrom} from \"@app/pages/components\";\n\n\n/**\n * Properties\n */\nexport type DesignsToolbarProps = {\n    criteria: DesignsSearchCriteria;\n    paging: Paging;\n    designs?: DesignsSearchResults;\n    onCriteriaChange: (criteria: DesignsSearchCriteria) => void;\n    onPagingChange: (paging: Paging) => void;\n    onCreate: () => void;\n    onImport: (from: ImportFrom) => void;\n};\n\n\n/**\n * The toolbar to filter (and paginate) the collection of designs.\n */\nexport const DesignsToolbar: FunctionComponent<DesignsToolbarProps> = (\n    {criteria, paging, designs, onCriteriaChange, onPagingChange, onCreate, onImport}: DesignsToolbarProps) => {\n\n    const [ filterValue, setFilterValue ] = useState(criteria.filterValue);\n\n    useEffect(() => {\n        setFilterValue(criteria.filterValue);\n    }, [criteria]);\n\n    const onSetPage: OnSetPage = (event: any, newPage: number, perPage?: number): void => {\n        onPagingChange({\n            ...paging,\n            page: newPage,\n            pageSize: perPage ? perPage : paging.pageSize\n        });\n    };\n\n    const onPerPageSelect: OnPerPageSelect = (event: any, newPerPage: number): void => {\n        onPagingChange({\n            ...paging,\n            pageSize: newPerPage\n        });\n    };\n\n    const onFilterChange = (value: string): void => {\n        setFilterValue(value);\n    };\n\n    const onSearch = (): void => {\n        onCriteriaChange({\n            ...criteria,\n            filterValue\n        })\n    };\n\n    const onClear = (): void => {\n        setFilterValue(\"\");\n        onCriteriaChange({\n            ...criteria,\n            filterValue: \"\"\n        })\n    };\n\n    const totalDesignCount = (): number => {\n        return designs?.count || 0;\n    };\n\n    return (\n        <Toolbar id=\"designs-toolbar\" className=\"designs-toolbar\">\n            <ToolbarContent>\n                <ToolbarItem variant=\"search-filter\">\n                    <SearchInput aria-label=\"Filter designs\" value={filterValue} onChange={onFilterChange} onSearch={onSearch} onClear={onClear} />\n                </ToolbarItem>\n                <ToolbarItem>\n                    <Button variant=\"primary\" onClick={onCreate}>Create design</Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                    <ImportDropdown variant=\"long\" onImport={onImport} />\n                </ToolbarItem>\n                <ToolbarItem className=\"design-paging-item\">\n                    <Pagination\n                        style={{padding: \"0\"}}\n                        variant=\"bottom\"\n                        dropDirection=\"down\"\n                        isCompact={true}\n                        itemCount={totalDesignCount()}\n                        perPage={paging.pageSize}\n                        page={paging.page}\n                        onSetPage={onSetPage}\n                        onPerPageSelect={onPerPageSelect}\n                        widgetId=\"design-list-pagination\"\n                        className=\"design-list-pagination\"\n                    />\n                </ToolbarItem>\n            </ToolbarContent>\n        </Toolbar>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {\n    Button,\n    FileUpload,\n    Form,\n    FormGroup,\n    Modal,\n    ModalVariant,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextArea,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {ArtifactTypes, ContentTypes, CreateDesign, CreateDesignContent} from \"@app/models\";\nimport {If, ServicePreviewWarning} from \"@app/components\";\nimport {ImportFrom, UrlUpload} from \"@app/pages/components\";\nimport {isJson, isProto, isWsdl, isXml, isXsd, isYaml, parseJson, parseYaml} from \"@app/utils\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\n\n\nexport type ImportDesignModalProps = {\n    importType: ImportFrom;\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nconst PLACEHOLDER_TYPE_OPTION: SelectOptionObject = {\n    // @ts-ignore\n    value: undefined,\n    label: \"Select a type...\",\n    toString: () => {\n        return \"Select a type...\";\n    },\n    compareTo(selectOption: any): boolean {\n        return selectOption === this;\n    }\n}\nconst TYPE_OPTIONS: SelectOptionObject[] = [\n    {\n        value: ArtifactTypes.OPENAPI,\n        label: \"OpenAPI\"\n    },\n    {\n        value: ArtifactTypes.ASYNCAPI,\n        label: \"AsyncAPI\"\n    },\n    {\n        value: ArtifactTypes.AVRO,\n        label: \"Apache Avro\"\n    },\n    {\n        value: ArtifactTypes.JSON,\n        label: \"JSON Schema\"\n    },\n    {\n        value: ArtifactTypes.PROTOBUF,\n        label: \"Google Protocol Buffers\"\n    },\n].map(item => {\n    return {\n        value: item.value,\n        label: item.label,\n        toString: () => {\n            return item.label;\n        },\n        compareTo(selectOption: any): boolean {\n            return this.value === selectOption.value;\n        }\n    };\n});\n\n\ntype DetectionInfo = {\n    type?: string;\n    contentType?: string;\n    version?: string;\n    name?: string;\n    summary?: string;\n}\n\n\nexport const ImportDesignModal: FunctionComponent<ImportDesignModalProps> = ({importType, isOpen, onImport, onCancel}: ImportDesignModalProps) => {\n    const [isValid, setValid] = useState(false);\n\n    const [designContent, setDesignContent] = useState<string>();\n    const [fileName, setFileName] = useState<string>();\n    const [url, setUrl] = useState<string>();\n\n    const [name, setName] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [type, setType] = useState<string>();\n    const [typeSelection, setTypeSelection] = useState<SelectOptionObject>();\n    const [isTypeToggled, setTypeToggled] = useState(false);\n\n    const [version, setVersion] = useState(\"\");\n    const [isVersionToggled, setVersionToggled] = useState(false);\n\n    const [contentType, setContentType] = useState<string>();\n\n    const onFileChange = (value: string | File, fname: string): void => {\n        setDesignContent(value as string);\n        setFileName(fname);\n    };\n\n    const onUrlChange = (value: string|undefined, url: string|undefined): void => {\n        setDesignContent(value);\n        setUrl(url);\n    };\n\n    // Called when the user changes the \"type\" (dropdown)\n    const onTypeSelect = (selection: SelectOptionObject): void => {\n        setTheType((selection as any).value);\n        setTypeToggled(false);\n    };\n\n    // Called when the user changes the \"version\" (dropdown)\n    const onVersionSelect = (selection: string): void => {\n        setVersion(selection);\n        setVersionToggled(false);\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        const context: DesignContext = importType === ImportFrom.FILE ? {\n            type: \"file\",\n            file: {\n                fileName: fileName as string\n            }\n        } : {\n            type: \"url\",\n            url: {\n                url: url as string\n            }\n        };\n        const cd: CreateDesign = {\n            type: type as string,\n            name,\n            summary,\n            context\n        };\n        const cdc: CreateDesignContent = {\n            contentType: contentType as string,\n            data: designContent\n        };\n\n        console.debug(\"[ImportDesignModal] Importing design: \", cd);\n        console.debug(\"[ImportDesignModal] Importing content-type: \", contentType);\n        onImport(cd, cdc);\n    };\n\n    const hasDesignContent = (): boolean => {\n        return designContent !== undefined && designContent.trim().length > 0;\n    };\n\n    const title = (): string => {\n        if (importType === ImportFrom.FILE) {\n            return \"Import from file\";\n        } else {\n            return \"Import from URL\";\n        }\n    };\n\n    const detectJsonOrYamlInfo = (contentObj: any, contentType: string): DetectionInfo => {\n        if (contentObj.openapi) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"3.0.2\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.swagger) {\n            return {\n                type: ArtifactTypes.OPENAPI,\n                contentType: contentType,\n                version: \"2.0\",\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.asyncapi) {\n            return {\n                type: ArtifactTypes.ASYNCAPI,\n                contentType: contentType,\n                name: contentObj.info?.title,\n                summary: contentObj.info?.description\n            };\n        }\n        if (contentObj.$schema) {\n            return {\n                type: ArtifactTypes.JSON,\n                contentType: contentType,\n                name: contentObj.title,\n                summary: contentObj.description\n            };\n        }\n\n        return {\n            type: ArtifactTypes.AVRO,\n            contentType: contentType,\n            name: contentObj.name\n        }\n    }\n\n    const detectXmlInfo = (content: string): DetectionInfo => {\n        let type: string = ArtifactTypes.XML;\n        if (isWsdl(content)) {\n            type = ArtifactTypes.WSDL;\n        } else if (isXsd(content)) {\n            type = ArtifactTypes.XSD;\n        }\n        return {\n            type,\n            contentType: ContentTypes.TEXT_XML\n        };\n    }\n\n    const detectProtoInfo = (): DetectionInfo => {\n        return {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            type: ArtifactTypes.PROTOBUF\n        };\n    }\n\n    // Tries to figure out the type and meta-data of the content by parsing it and looking\n    // for key indicators.\n    const detectInfo = (content: string): DetectionInfo => {\n        if (isJson(content)) {\n            return detectJsonOrYamlInfo(parseJson(content), ContentTypes.APPLICATION_JSON);\n        } else if (isYaml(content)) {\n            return detectJsonOrYamlInfo(parseYaml(content), ContentTypes.APPLICATION_YAML);\n        } else if (isXml(content)) {\n            return detectXmlInfo(content);\n        } else if (isProto(content)) {\n            return detectProtoInfo();\n        }\n        console.warn(\"[ImportDesignModal] Failed to detect the type of the content.\");\n        // Default: nothing detected\n        return {\n        };\n\n        // TODO handle parsing of protobuf\n        // TODO handle parsing of GraphQL\n    };\n\n    const setTheType = (newType: string|undefined): void => {\n        if (newType === undefined) {\n            setType(undefined);\n            setTypeSelection(undefined);\n        } else {\n            setType(newType);\n            // @ts-ignore (there really is a value on the option)\n            const newTypeSelection: SelectOptionObject = TYPE_OPTIONS.filter(option => option.value === newType)[0];\n            setTypeSelection(newTypeSelection);\n        }\n    };\n\n    // Validate the form inputs.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!designContent) {\n            valid = false;\n        }\n        if (!name) {\n            valid = false;\n        }\n        if (!type) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary, type, designContent]);\n\n    // Whenever the modal is opened, set default values for the form.\n    useEffect(() => {\n        setDesignContent(undefined);\n        setName(\"\");\n        setSummary(\"\");\n        setFileName(undefined);\n        setTheType(undefined);\n    }, [isOpen]);\n\n    // Whenever the content changes (e.g. loaded from file) try to detect the\n    // type of the content.\n    useEffect(() => {\n        if (designContent && designContent.trim().length > 0) {\n            const info: DetectionInfo = detectInfo(designContent as string);\n            console.debug(\"[ImportDesignModal] Content detection: \", info);\n            console.debug(\"[ImportDesignModal] Version detected: \", info.version || \"\");\n\n            setTheType(info.type);\n            setVersion(info.version || \"\");\n            setName(info.name || \"\");\n            setSummary(info.summary || \"\");\n            setContentType(info.contentType);\n        } else {\n            console.debug(\"[ImportDesignModal] Content empty, resetting form fields.\");\n            setName(\"\");\n            setSummary(\"\");\n            setTheType(undefined);\n            setContentType(undefined);\n        }\n    }, [designContent]);\n\n    // Whenever the type changes to OpenAPI, set the version to \"3.0.2\".\n    useEffect(() => {\n        if (type === ArtifactTypes.OPENAPI && version === undefined) {\n            setVersion(\"3.0.2\");\n        }\n    }, [type]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title={title()}\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n                    Import\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <ServicePreviewWarning />\n\n            <Form>\n                <If condition={importType === ImportFrom.FILE}>\n                    <FormGroup label=\"File\" isRequired={true} fieldId=\"import-design-file\">\n                        <FileUpload\n                            isRequired={true}\n                            id=\"design-text-file\"\n                            type=\"text\"\n                            value={designContent}\n                            filename={fileName}\n                            filenamePlaceholder=\"Drag and drop a file or upload one\"\n                            onChange={onFileChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={importType === ImportFrom.URL}>\n                    <FormGroup label=\"URL\" isRequired={true} fieldId=\"import-design-url\">\n                        <UrlUpload\n                            id=\"design-text-url\"\n                            urlPlaceholder=\"Enter a valid and accessible URL\"\n                            onChange={onUrlChange}\n                        />\n                    </FormGroup>\n                </If>\n                <If condition={hasDesignContent}>\n                    <FormGroup label=\"Type\" isRequired={true} fieldId=\"import-design-type\">\n                        <Select\n                            variant={SelectVariant.single}\n                            aria-label=\"Select type\"\n                            onToggle={() => setTypeToggled(!isTypeToggled)}\n                            onSelect={(event, selection) => onTypeSelect(selection)}\n                            isOpen={isTypeToggled}\n                            selections={typeSelection}\n                            menuAppendTo=\"parent\"\n                        >\n                            {\n                                [\n                                    <SelectOption key={-1} value={PLACEHOLDER_TYPE_OPTION} isPlaceholder={true}/>,\n                                    ...TYPE_OPTIONS.map((to, index) => <SelectOption key={index} value={to}/>)\n                                ]\n                            }\n                        </Select>\n                    </FormGroup>\n                    <If condition={type === ArtifactTypes.OPENAPI}>\n                        <FormGroup label=\"Version\" isRequired={true} fieldId=\"import-design-version\">\n                            <Select\n                                variant={SelectVariant.single}\n                                aria-label=\"Select version\"\n                                onToggle={() => setVersionToggled(!isVersionToggled)}\n                                onSelect={(event, selection) => onVersionSelect(selection as string)}\n                                isOpen={isVersionToggled}\n                                selections={version}\n                                menuAppendTo=\"parent\"\n                            >\n                                <SelectOption key={1} value=\"3.0.2\"/>\n                                <SelectOption key={2} value=\"2.0\"/>\n                            </Select>\n                        </FormGroup>\n                    </If>\n                    <FormGroup label=\"Name\" isRequired={true} fieldId=\"import-design-name\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"import-design-name\"\n                            name=\"import-design-name\"\n                            aria-describedby=\"import-design-name-helper\"\n                            value={name}\n                            onChange={(value) => setName(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Description\" fieldId=\"import-design-description\">\n                        <TextArea\n                            type=\"text\"\n                            id=\"import-design-description\"\n                            name=\"import-design-description\"\n                            aria-describedby=\"import-design-description-helper\"\n                            value={summary}\n                            onChange={(value) => setSummary(value)}\n                        />\n                    </FormGroup>\n                </If>\n            </Form>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Button, Modal, ModalVariant} from \"@patternfly/react-core\";\nimport {CreateDesign, CreateDesignContent, SearchedArtifact, SearchedVersion} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {RhosrService, useRhosrService} from \"@app/services\";\nimport {IsLoading, ServicePreviewWarning} from \"@app/components\";\nimport {ArtifactSelector} from \"@app/pages/components\";\n\n\nexport type ImportFromRhosrModalProps = {\n    isOpen: boolean | undefined;\n    onImport: (event: CreateDesign, content: CreateDesignContent) => void;\n    onCancel: () => void;\n}\n\n\nexport const ImportFromRhosrModal: FunctionComponent<ImportFromRhosrModalProps> = ({isOpen, onImport, onCancel}: ImportFromRhosrModalProps) => {\n    const [isValid, setValid] = useState(false);\n    const [isLoading, setLoading] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [design, setDesign] = useState<CreateDesign>();\n    const [designContent, setDesignContent] = useState<CreateDesignContent>();\n\n    const rhosr: RhosrService = useRhosrService();\n\n    // Called when the user selects an artifact from the artifact selector.\n    const onArtifactSelected = (registry?: Registry, artifact?: SearchedArtifact, version?: SearchedVersion, content?: CreateDesignContent): void => {\n        if (artifact === undefined) {\n            setDesign(undefined);\n            setDesignContent(undefined);\n        } else {\n            const cd: CreateDesign = {\n                type: artifact.type,\n                name: artifact.name || artifact.id,\n                summary: artifact.description || \"\",\n                context: {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: artifact.groupId as string,\n                        artifactId: artifact.id,\n                        version: version?.version as string\n                    }\n                }\n            };\n            setDesign(cd);\n            setDesignContent(content);\n        }\n    };\n\n    // Called when the user clicks the Import button in the modal\n    const doImport = (): void => {\n        onImport(design as CreateDesign, designContent as CreateDesignContent);\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                setLoading(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[HomePage] Error getting registry list: \", error);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        let valid: boolean = true;\n        if (design === undefined) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [design, designContent]);\n\n    return (\n        <Modal\n            variant={ModalVariant.large}\n            title=\"Import from Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"create\" variant=\"primary\" isDisabled={!isValid} onClick={doImport}>\n                    Import\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <IsLoading condition={isLoading}>\n                <ServicePreviewWarning />\n                <ArtifactSelector registries={registries} onSelected={onArtifactSelected} />\n            </IsLoading>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Template} from \"@app/models\";\nimport \"./template-item.css\";\nimport {PlusCircleIcon} from \"@patternfly/react-icons\";\n\nexport type TemplateItemProps = {\n    template: Template;\n    isSelected: boolean;\n    onSelect: (template: Template) => void;\n}\n\nexport const TemplateItem: FunctionComponent<TemplateItemProps> = ({template, isSelected, onSelect}: TemplateItemProps) => {\n    const onClick = (): void => {\n        if (!isSelected) {\n            onSelect(template);\n        }\n    };\n\n    return (\n        <div className={`template-item ${isSelected ? \"selected\" : \"not-selected\"}`} onClick={onClick}>\n            <div className=\"icon\">\n                <PlusCircleIcon />\n            </div>\n            <div className=\"name\">{template.name}</div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./url-upload.css\";\nimport {Button, Spinner, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {If, IsLoading} from \"@app/components\";\nimport {UrlService, useUrlService} from \"@app/services\";\n\n/**\n * Properties\n */\nexport type UrlUploadProps = {\n    id: string|\"url-upload\";\n    urlPlaceholder: string|\"\";\n    onChange: (value: string|undefined, url: string|undefined) => void;\n};\n\n/**\n * A control similar to the FileUpload control from patternfly that allows uploading from\n * a URL instead of a file.\n */\nexport const UrlUpload: FunctionComponent<UrlUploadProps> = ({id, urlPlaceholder, onChange}: UrlUploadProps) => {\n    const [url, setUrl] = useState<string>();\n    const [previewContent, setPreviewContent] = useState<string>();\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [downloadError, setDownloadError] = useState<string>();\n\n    const urlService: UrlService = useUrlService();\n\n    const onTextInputChange = (value: string): void => {\n        setUrl(value);\n    };\n\n    const hasUrl = (): boolean => {\n        return url != undefined && url.trim().length > 0;\n    };\n\n    const hasError = (): boolean => {\n        return downloadError != undefined && downloadError.trim().length > 0;\n    };\n\n    const onFetch = (): void => {\n        setLoading(true);\n        urlService.fetchUrlContent(url as string).then(content => {\n            setDownloadError(undefined);\n            setPreviewContent(content);\n            setLoading(false);\n            onChange(content, url);\n        }).catch(error => {\n            setDownloadError(error.message);\n            setLoading(false);\n        });\n    };\n\n    const onClear = (): void => {\n        setUrl(\"\");\n        setPreviewContent(\"\");\n        onChange(undefined, undefined);\n    };\n\n    const spinner: React.ReactNode = (\n        <div className=\"url-upload-loading\">\n            <Spinner size=\"md\" className=\"spinner\" />\n            <span className=\"spinner-message\">Loading URL content</span>\n        </div>\n    );\n\n    return (\n        <div className=\"url-upload\">\n            <div className=\"url-upload-flex\">\n                <div className=\"url-upload-url\">\n                    <TextInput value={url} type=\"text\" placeholder={urlPlaceholder}\n                               onChange={onTextInputChange} aria-label=\"url input\" />\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onFetch}>Fetch</Button>\n                </div>\n                <div className=\"url-upload-button\">\n                    <Button variant=\"control\" isDisabled={!hasUrl()} onClick={onClear}>Clear</Button>\n                </div>\n            </div>\n            <div className=\"url-upload-preview\">\n                <IsLoading condition={isLoading} loadingComponent={spinner}>\n                    <If condition={hasError}>\n                        <div className=\"url-upload-error\">\n                            <div>\n                                Error getting content from URL.\n                            </div>\n                            <div>\n                                {downloadError}\n                            </div>\n                        </div>\n                    </If>\n                    <If condition={!hasError()}>\n                        <TextArea value={previewContent} isReadOnly={true}></TextArea>\n                    </If>\n                </IsLoading>\n            </div>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport \"./design-details-panel.css\";\nimport {Design} from \"@app/models\";\nimport {Flex, FlexItem, Form, FormGroup, Tab, Tabs, TabTitleText} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, DesignDescription} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {DesignEvents, DesignHistory, DesignOriginLabel} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignDetailsPanelProps = {\n    design: Design | undefined;\n};\n\n/**\n * Details panel with metadata and history about a single selected design.\n */\nexport const DesignDetailsPanel: FunctionComponent<DesignDetailsPanelProps> = ({design}: DesignDetailsPanelProps) => {\n\n    const [activeTabKey, setActiveTabKey] = useState<string>(\"details\");\n\n    return (\n        <React.Fragment>\n            <Tabs\n                activeKey={activeTabKey}\n                onSelect={(event, eventKey) => {setActiveTabKey(eventKey as string)}}\n                aria-label=\"Design panel detail tabs\"\n            >\n                <Tab eventKey=\"details\" title={<TabTitleText>Details</TabTitleText>}>\n                    <div className=\"design-details-grid\">\n                        <div className=\"design-details-label\">Description</div>\n                        <DesignDescription className=\"design-details-value\" description={design?.summary} />\n\n                        <div className=\"design-details-label\">Type</div>\n                        <div className=\"design-details-value\">\n                            <ArtifactTypeIcon type={design?.type as string} isShowLabel={true} isShowIcon={false} />\n                        </div>\n\n                        <div className=\"design-details-label\">Time created</div>\n                        <div className=\"design-details-value\"><Moment date={design?.createdOn} format=\"MMMM DD, YYYY h:mma\" /></div>\n\n                        <div className=\"design-details-label\">Time updated</div>\n                        <div className=\"design-details-value\"><Moment date={design?.modifiedOn} format=\"MMMM DD, YYYY h:mma\" /></div>\n\n                        <div className=\"design-details-label\">Origin</div>\n                        <div className=\"design-details-value\">\n                            <DesignOriginLabel design={design} />\n                        </div>\n                    </div>\n                </Tab>\n                <Tab eventKey=\"events\" title={<TabTitleText>Events</TabTitleText>}>\n                    <DesignEvents design={design as Design} />\n                </Tab>\n                <Tab eventKey=\"history\" title={<TabTitleText>History</TabTitleText>}>\n                    <DesignHistory design={design as Design} />\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-history.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport Moment from \"react-moment\";\nimport {IfNotEmpty, IsLoading} from \"@app/components\";\nimport {DesignEventType} from \"@app/pages/components\";\n\n/**\n * Properties\n */\nexport type DesignHistoryProps = {\n    design: Design;\n};\n\nexport const DesignHistory: FunctionComponent<DesignHistoryProps> = ({design}: DesignHistoryProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [events, setEvents] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setEvents(events);\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <IsLoading condition={isLoading}>\n            <IfNotEmpty collection={events}>\n                <div className=\"design-history\">\n                    {\n                        events?.map((event, idx) => (\n                            <React.Fragment key={idx}>\n                                <div key={`${idx}-type`} className=\"event-type\"><DesignEventType event={event} /></div>\n                                <div key={`${idx}-time`} className=\"event-time\"><Moment date={event.on} format=\"MMMM DD, YYYY h:mma\" /></div>\n                            </React.Fragment>\n                        ))\n                    }\n                </div>\n            </IfNotEmpty>\n        </IsLoading>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./design-events.css\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport Moment from \"react-moment\";\nimport {If, IfNotEmpty, IsLoading, RegistryNavLink} from \"@app/components\";\nimport {DesignEventType, DesignOriginLabel} from \"@app/pages/components\";\nimport {hasOrigin} from \"@app/utils\";\nimport {Divider} from \"@patternfly/react-core\";\n\n\nexport type DesignEventsProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignEvents: FunctionComponent<DesignEventsProps> = ({design}: DesignEventsProps) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [exports, setExports] = useState<DesignEvent[]>();\n\n    const designsService: DesignsService = useDesignsService();\n\n    const originGroupId = (): string => {\n        return design?.origin?.rhosr?.groupId || \"default\";\n    };\n    const originArtifactId = (): string => {\n        return design?.origin?.rhosr?.artifactId || \"Unknown\";\n    };\n    const originVersion = (): string => {\n        return design?.origin?.rhosr?.version || \"latest\";\n    };\n    const originFilename = (): string => {\n        return design?.origin?.file?.fileName || \"\";\n    };\n    const originUrl = (): string => {\n        return design?.origin?.url?.url || \"\";\n    };\n\n    useEffect(() => {\n        if (design) {\n            designsService.getEvents(design.id).then(events => {\n                setExports(events?.filter(event => event.type === \"download\" || event.type === \"register\"));\n                setLoading(false);\n            }).catch(error => {\n                // TODO error handling!\n            });\n        }\n    }, [design]);\n    return (\n        <React.Fragment>\n            <div className=\"design-events-origin\">\n                <div className=\"design-events-origin-label\">Origin</div>\n                <div className=\"design-events-origin-value\">\n                    <DesignOriginLabel design={design} />\n                </div>\n\n                <div className=\"design-events-origin-label\">Time created</div>\n                <div className=\"design-events-origin-value\"><Moment date={design?.createdOn} format=\"MMMM DD, YYYY h:mma\" /></div>\n\n                <If condition={hasOrigin(design, \"rhosr\")}>\n                    <div className=\"design-events-origin-label\">Group</div>\n                    <div className=\"design-events-origin-value\">{originGroupId()}</div>\n\n                    <div className=\"design-events-origin-label\">ID</div>\n                    <div className=\"design-events-origin-value\">{originArtifactId()}</div>\n\n                    <div className=\"design-events-origin-label\">Version</div>\n                    <div className=\"design-events-origin-value\">{originVersion()}</div>\n\n                    <div className=\"design-events-origin-colspan\">\n                        <RegistryNavLink context={design?.origin}>View artifact in Service Registry</RegistryNavLink>\n                    </div>\n                </If>\n\n                <If condition={hasOrigin(design, \"file\")}>\n                    <div className=\"design-events-origin-label\">File name</div>\n                    <div className=\"design-events-origin-value\">{originFilename()}</div>\n                </If>\n\n                <If condition={hasOrigin(design, \"url\")}>\n                    <div className=\"design-events-origin-label\">URL</div>\n                    <div className=\"design-events-origin-value\">\n                        <a href={originUrl()}>{originUrl()}</a>\n                    </div>\n                </If>\n            </div>\n            <Divider className=\"design-events-divider\" />\n            <IsLoading condition={isLoading}>\n                <div className=\"design-events-origin-exports\">\n                    <div className=\"design-events-origin-exports-label\">Exported to</div>\n                    <div></div>\n\n                    <IfNotEmpty collection={exports} emptyState={(\n                        <span>This design has not been exported.</span>\n                    )}>\n                        {\n                            exports?.map((event, idx) => (\n                                <React.Fragment key={idx}>\n                                    <div key={`${idx}-type`} className=\"design-events-origin-exports-item\"><DesignEventType event={event} variant=\"short\" /></div>\n                                    <div key={`${idx}-time`} className=\"design-events-origin-exports-time\"><Moment date={event.on} format=\"MMMM DD, YYYY h:mma\" /></div>\n                                </React.Fragment>\n                            ))\n                        }\n                    </IfNotEmpty>\n                </div>\n            </IsLoading>\n        </React.Fragment>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {DesignEvent} from \"@app/models\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {RegistryNavLink} from \"@app/components\";\n\n\nexport type DesignEventTypeProps = {\n    event: DesignEvent;\n    variant?: \"long\" | \"short\";  // Default is \"long\"\n};\n\n\nexport const DesignEventType: FunctionComponent<DesignEventTypeProps> = ({event, variant}: DesignEventTypeProps) => {\n    const typeLabel = (): React.ReactNode => {\n        switch (event.type) {\n            case \"download\":\n                return variant === \"short\" ? <span>File</span> : <span>Downloaded to file system</span>;\n            case \"create\":\n                return variant === \"short\" ? <span>New</span> : <span>Created new design</span>;\n            case \"import\":\n                return importTypeLabel();\n            case \"register\":\n                return variant === \"short\" ? <span>Service Registry</span> : <span>Exported to Service Registry</span>;\n            case \"update\":\n                return variant === \"short\" ? <span>Edited</span> : <span>Modified using the editor</span>;\n        }\n    };\n\n    const importTypeLabel = (): React.ReactNode => {\n        const context: DesignContext = event.data.context;\n        switch (context.type) {\n            case \"file\":\n                return variant === \"short\" ? <span>File</span> : <span>{`Imported from file ${context.file?.fileName}`}</span>;\n            case \"rhosr\":\n                return variant === \"short\" ? <span>Service Registry</span> : (\n                    <React.Fragment>\n                        <span>Imported from Service Registry </span>\n                        <RegistryNavLink context={context}>\n                            <span>(Group: {context.rhosr?.groupId || \"default\"} </span>\n                            <span>ID: {context.rhosr?.artifactId} </span>\n                            <span>Version: {context.rhosr?.version || \"latest\"})</span>\n                        </RegistryNavLink>\n                    </React.Fragment>\n                );\n            case \"url\":\n                return variant === \"short\" ? <span>URL</span> : (\n                    <React.Fragment>\n                        <span>Imported from URL: </span>\n                        <a href={context.url?.url}>{context.url?.url}</a>\n                    </React.Fragment>\n                );\n        }\n        return <span>Imported content</span>;\n    };\n\n    return <React.Fragment children={typeLabel()} />\n};\n","import React, {FunctionComponent} from \"react\";\nimport {Design} from \"@app/models\";\nimport {Label} from \"@patternfly/react-core\";\nimport {hasOrigin} from \"@app/utils\";\n\n\nexport type DesignOriginLabelProps = {\n    design: Design|undefined;\n};\n\n\nexport const DesignOriginLabel: FunctionComponent<DesignOriginLabelProps> = ({design}: DesignOriginLabelProps) => {\n\n    const label = (): string => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"File\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"Service Registry\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"URL\";\n            } else if (hasOrigin(design, \"create\")) {\n                return \"New design\";\n            }\n        }\n        return \"n/a\";\n    };\n\n    const color = (): \"blue\" | \"cyan\" | \"green\" | \"orange\" | \"purple\" | \"red\" | \"grey\" => {\n        if (design) {\n            if (hasOrigin(design, \"file\")) {\n                return \"purple\";\n            } else if (hasOrigin(design, \"rhosr\")) {\n                return \"blue\";\n            } else if (hasOrigin(design, \"url\")) {\n                return \"green\";\n            }\n        }\n        return \"grey\";\n    };\n\n    return (\n        <Label color={color()}>{label()}</Label>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./editor-context.css\";\nimport {ArtifactTypes, Design, TestRegistryErrorResponse} from \"@app/models\";\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Dropdown,\n    DropdownItem,\n    DropdownSeparator,\n    DropdownToggle,\n    GalleryItem,\n    Text,\n    TextContent\n} from \"@patternfly/react-core\";\nimport {ArtifactTypeIcon, DesignDescription, If, NavLink, RegistryNavLink, ToggleIcon} from \"@app/components\";\nimport Moment from \"react-moment\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {ExportToRhosrData, ExportToRhosrModal, TestRegistryModal} from \"@app/pages/components\";\nimport {AlertsService, LocalStorageService, useAlertsService, useLocalStorageService} from \"@app/services\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\n\n/**\n * Properties\n */\nexport type EditorContextProps = {\n    design: Design;\n    dirty: boolean;\n    artifactContent: string;\n    onSave: () => void;\n    onFormat: () => void;\n    onDelete: () => void;\n    onDownload: () => void;\n    onRename: () => void;\n    onExpandTestRegistryCausesPanel: (error: TestRegistryErrorResponse) => void;\n    onRegistrationTestRegistry: (registry: Registry, group: string | undefined, artifactId: string) => void;\n    isPanelOpen?: boolean;\n}\n\ntype EditorContextMenuItem = {\n    label?: string;\n    key: string;\n    isSeparator?: boolean;\n    accept?: (design: Design) => boolean;\n};\n\nconst menuActions: EditorContextMenuItem[] = [\n    {\n        label: \"Rename design\",\n        key: \"action-rename\",\n    },\n    {\n        label: \"Format content\",\n        key: \"action-format\",\n        accept: (design: Design) => { return [ArtifactTypes.AVRO, ArtifactTypes.JSON].includes(design.type); },\n    },\n    {\n        label: \"Show changes\",\n        key: \"action-compare\"\n    },\n    {\n        key: \"action-separator-1\",\n        isSeparator: true\n    },\n    {\n        label: \"Export to Service Registry\",\n        key: \"action-export-to-rhosr\",\n    },\n    {\n        label: \"Test using Service Registry\",\n        key: \"action-test-registry\"\n    },\n    {\n        label: \"Download design\",\n        key: \"action-download\"\n    },\n    {\n        key: \"action-separator-2\",\n        isSeparator: true\n    },\n    {\n        label: \"Delete design\",\n        key: \"action-delete\"\n    },\n];\n\n\n/**\n * The context of the design when editing a design on the editor page.\n */\nexport const EditorContext: FunctionComponent<EditorContextProps> = (\n    { design, dirty, onSave, onRegistrationTestRegistry, onFormat, onRename, onDownload, onDelete }: EditorContextProps) => {\n\n    const lss: LocalStorageService = useLocalStorageService();\n\n    const [designContext, setDesignContext] = useState<DesignContext>();\n    const [isActionMenuToggled, setActionMenuToggled] = useState(false);\n    const [isExpanded, setExpanded] = useState(lss.getConfigProperty(\"editor-context.isExpanded\", \"false\") === \"true\");\n    const [isRegisterModalOpen, setRegisterModalOpen] = useState(false);\n    const [isTestRegistryModalOpen, setIsTestRegistryModalOpen] = useState(false);\n\n    const alerts: AlertsService = useAlertsService();\n\n    const onActionMenuToggle = (value: boolean): void => {\n        setActionMenuToggled(value);\n    };\n\n    const onToggleExpand = (): void => {\n        const newExpanded: boolean = !isExpanded;\n        lss.setConfigProperty(\"editor-context.isExpanded\", \"\" + newExpanded);\n        setExpanded(newExpanded);\n    };\n\n    const actionMenuToggle: React.ReactNode = (\n        <DropdownToggle id=\"action-toggle\" toggleVariant=\"secondary\" onToggle={onActionMenuToggle}>Actions</DropdownToggle>\n    );\n\n    const onActionMenuSelect = (event?: React.SyntheticEvent<HTMLDivElement>): void => {\n        // @ts-ignore\n        const action: string = event?.target.attributes[\"data-id\"].value;\n        setActionMenuToggled(false);\n        switch (action) {\n            case \"action-compare\":\n                return;\n            case \"action-export-to-rhosr\":\n                setRegisterModalOpen(true);\n                return;\n            case \"action-format\":\n                onFormat();\n                return;\n            case \"action-rename\":\n                onRename();\n                return;\n            case \"action-delete\":\n                onDelete();\n                return;\n            case \"action-download\":\n                onDownload();\n                return;\n            case \"action-test-registry\":\n                setIsTestRegistryModalOpen(true);\n                return;\n        }\n    };\n\n    const typeForDisplay = (): string => {\n        switch (design.type) {\n            case ArtifactTypes.OPENAPI:\n                return \"OpenAPI\";\n            case ArtifactTypes.ASYNCAPI:\n                return \"AsyncAPI\";\n            case ArtifactTypes.AVRO:\n                return \"Apache Avro\";\n            case ArtifactTypes.JSON:\n                return \"JSON Schema\";\n            case ArtifactTypes.PROTOBUF:\n                return \"Google Protocol Buffers\";\n        }\n        return \"N/A\";\n    };\n\n    const hasRhosrContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"rhosr\";\n    };\n\n    const hasFileContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"file\";\n    };\n\n    const hasUrlContext = (): boolean => {\n        return designContext !== undefined && designContext.type && designContext.type === \"url\";\n    };\n\n    const onRegisterDesignConfirmed = (event: ExportToRhosrData): void => {\n        setRegisterModalOpen(false);\n        alerts.designExportedToRhosr(event);\n    };\n\n    useEffect(() => {\n        if (design) {\n            const context: DesignContext|undefined = design.origin;\n            setDesignContext(context);\n        }\n    }, [design]);\n\n    const menuItems: any[] = menuActions.filter(action => !action.accept ? true : action.accept(design)).map(action => (\n        action.isSeparator ? (\n            <DropdownSeparator key={action.key} />\n        ) : (\n            <DropdownItem key={action.key} data-id={action.key}>{action.label}</DropdownItem>\n        )\n    ));\n\n    return (\n        <React.Fragment>\n            <TestRegistryModal isOpen={isTestRegistryModalOpen}\n                               design={design}\n                               onCancel={() => setIsTestRegistryModalOpen(false)}\n                               onSubmit={(...params) => {\n                                    onRegistrationTestRegistry(...params);\n                                    setIsTestRegistryModalOpen(false);\n                               }} />\n            <div className=\"editor-context\">\n                <div className=\"editor-context-breadcrumbs\">\n                    <Breadcrumb style={{ marginBottom: \"10px\" }}>\n                        <BreadcrumbItem component=\"button\">\n                            <NavLink location=\"/\">API and Schema Designs</NavLink>\n                        </BreadcrumbItem>\n                        <BreadcrumbItem isActive={true}>{design?.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                </div>\n                <div className=\"editor-context-last-modified\">\n                    <span>Last modified:</span>\n                    <Moment date={design.modifiedOn} fromNow={true} />\n                </div>\n                <div className=\"editor-context-actions\">\n                    <Dropdown\n                        onSelect={onActionMenuSelect}\n                        toggle={actionMenuToggle}\n                        style={{ zIndex: 1000 }}\n                        isOpen={isActionMenuToggled}\n                        isPlain\n                        dropdownItems={menuItems}\n                    />\n                </div>\n                <div className=\"editor-context-save\">\n                    <Button className=\"btn-save\" variant=\"primary\" onClick={onSave} isDisabled={!dirty}>Save</Button>\n                </div>\n                <div className=\"editor-context-toggle\">\n                    <Button className=\"btn-toggle\" variant=\"plain\" onClick={onToggleExpand}>\n                        <ToggleIcon expanded={isExpanded} onClick={() => { setExpanded(!isExpanded) }} />\n                    </Button>\n                </div>\n            </div>\n            <If condition={isExpanded}>\n                <div className=\"editor-context-details\">\n                    <TextContent>\n                        <Text component=\"h1\" className=\"title\">{design?.name}</Text>\n                        <DesignDescription className=\"summary\" description={design?.summary} />\n                    </TextContent>\n                    <div className=\"metadata\">\n                        <DescriptionList isHorizontal={true} isCompact={true}>\n                            <DescriptionListGroup>\n                                <DescriptionListTerm>Type</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                    <ArtifactTypeIcon type={design.type} isShowLabel={true} isShowIcon={true} />\n                                </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <If condition={hasRhosrContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Artifact</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <span className=\"group\">{designContext?.rhosr?.groupId || \"default\"}</span>\n                                        <span> / </span>\n                                        <RegistryNavLink context={designContext}>\n                                            <span className=\"group\">{designContext?.rhosr?.artifactId}</span>\n                                            <span> </span>\n                                            <span>(</span>\n                                            <span className=\"group\">{designContext?.rhosr?.version || \"latest\"}</span>\n                                            <span>)</span>\n                                        </RegistryNavLink>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                            <If condition={hasFileContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>File name</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <span>{designContext?.file?.fileName}</span>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                            <If condition={hasUrlContext}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>URL</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <a href={designContext?.url?.url}>{designContext?.url?.url}</a>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                            </If>\n                        </DescriptionList>\n                    </div>\n                </div>\n            </If>\n            <ExportToRhosrModal design={design as Design}\n                                isOpen={isRegisterModalOpen}\n                                onExported={onRegisterDesignConfirmed}\n                                onCancel={() => setRegisterModalOpen(false)} />\n        </React.Fragment>\n    );\n};\n","import {useRhosrService} from \"@app/services\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, TextInput} from \"@patternfly/react-core\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport React, {useEffect, useState} from \"react\";\nimport {Design} from \"@app/models\";\nimport {IsLoading, ObjectSelect} from \"@app/components\";\nimport {cloneObject} from \"@app/utils\";\n\n\nexport interface TestRegistryModalProps {\n\tdesign: Design;\n\tisOpen?: boolean;\n\tonCancel: () => void;\n\tonSubmit: (registry: Registry, groupId: string | undefined, artifactId: string) => void;\n}\n\ntype ValidatedValue = \"error\" | \"default\" | \"warning\" | \"success\" | undefined;\n\nconst initialFormState = {\n\thasErrors: false,\n\tgroupValue: {\n\t\tvalue: \"\",\n\t\tvalidated: \"default\" as ValidatedValue,\n\t\terrorMessage: \"\"\n\t},\n\tartifactIdValue: {\n\t\tvalue: \"\",\n\t\tvalidated: \"default\" as ValidatedValue,\n\t\terrorMessage: \"\"\n\t}\n}\n\nexport const TestRegistryModal: React.FunctionComponent<TestRegistryModalProps> = ({design, isOpen, onCancel, onSubmit}) => {\n\tconst [isLoadingRegistries, setLoadingRegistries] = useState(true);\n\tconst [registries, setRegistries] = useState<Registry[]>([]);\n\tconst [registry, setRegistry] = useState<Registry>();\n\tconst [formState, setFormState] = useState(initialFormState);\n\tconst [isValid, setValid] = useState(false);\n\n\tconst rhosr = useRhosrService();\n\n\tconst defaultRegistry = (registries: Registry[]): Registry | undefined => {\n\t\tif (design?.origin?.type === \"rhosr\" && design.origin.rhosr?.instanceId) {\n\t\t\tconst filtered: Registry[] = registries.filter(registry => registry.id === design.origin.rhosr?.instanceId);\n\t\t\tif (filtered && filtered.length > 0) {\n\t\t\t\treturn filtered[0];\n\t\t\t}\n\t\t}\n\t\treturn registries.length > 0 ? registries[0] : undefined;\n\t}\n\n\n\tuseEffect(() => {\n\t\tif (isOpen) {\n\t\t\tsetLoadingRegistries(true);\n\t\t\t// Get the list of registries.\n\t\t\trhosr.getRegistries().then(registries => {\n\t\t\t\tsetRegistries(registries.sort((a, b) => {\n\t\t\t\t\tconst name1: string = a.name as string;\n\t\t\t\t\tconst name2: string = b.name as string;\n\t\t\t\t\treturn name1.localeCompare(name2);\n\t\t\t\t}));\n\t\t\t\tsetRegistry(defaultRegistry(registries));\n\t\t\t\tsetLoadingRegistries(false);\n\t\t\t}).catch(error => {\n\t\t\t\t// TODO handle this error case\n\t\t\t\tconsole.error(\"[HomePage] Error getting registry list: \", error);\n\t\t\t});\n\t\t}\n\t}, [isOpen]);\n\n\tuseEffect(() => {\n\t\tif (isOpen && design && design.origin && design.origin.type === \"rhosr\") {\n\t\t\tconst state: any = cloneObject(initialFormState);\n\t\t\tstate.groupValue.value = design.origin.rhosr?.groupId as string\n\t\t\tstate.artifactIdValue.value = design.origin.rhosr?.artifactId as string;\n\t\t\tsetFormState(state);\n\t\t} else {\n\t\t\tsetFormState(initialFormState);\n\t\t}\n\t}, [isOpen]);\n\n\tuseEffect(() => {\n\t\tsetValid(formState.artifactIdValue.value !== undefined && formState.artifactIdValue.value.length > 0);\n\t}, [formState]);\n\n\tconst setGroupValue = (val: string) => {\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\tgroupValue: {\n\t\t\t\t...formState.groupValue,\n\t\t\t\tvalidated: \"default\",\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t});\n\t}\n\n\tconst setArtifactIdValue = (val: string) => {\n\t\tconst hasErrors = !val;\n\n\t\tsetFormState({\n\t\t\t...formState,\n\t\t\thasErrors,\n\t\t\tartifactIdValue: {\n\t\t\t\t...formState.artifactIdValue,\n\t\t\t\tvalidated: hasErrors ? \"error\" : \"default\",\n\t\t\t\terrorMessage: \"ID is a required field.\",\n\t\t\t\tvalue: val\n\t\t\t}\n\t\t});\n\t}\n\n\treturn (\n\t\t<Modal\n\t\t\tvariant={ModalVariant.medium}\n\t\t\ttitle=\"Test using Service Registry\"\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onCancel}\n\t\t\tactions={[\n\t\t\t\t<Button key=\"confirm\" isDisabled={!isValid} variant=\"primary\" onClick={() => onSubmit(\n\t\t\t\t\tregistry as Registry,\n\t\t\t\t\tformState.groupValue.value,\n\t\t\t\t\tformState.artifactIdValue.value\n\t\t\t\t)}>\n\t\t\t\t\tTest\n\t\t\t\t</Button>,\n\t\t\t\t<Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t]}\n\t\t>\n\t\t\t<IsLoading condition={isLoadingRegistries}>\n\t\t\t\t<Form>\n\t\t\t\t\t<FormGroup\n\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\tlabel=\"Registry instance\"\n\t\t\t\t\t\tfieldId=\"test-in-registry-registry-instance\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ObjectSelect value={registry} items={registries} onSelect={setRegistry} itemToString={item => item.name} />\n\t\t\t\t\t</FormGroup>\n\t\t\t\t\t<FormGroup\n\t\t\t\t\t\tlabel=\"Group\"\n\t\t\t\t\t\tvalidated={formState.groupValue.validated}\n\t\t\t\t\t\thelperTextInvalid={formState.groupValue.errorMessage}\n\t\t\t\t\t\tfieldId=\"test-in-registry-group\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tid=\"test-in-registry-group\"\n\t\t\t\t\t\t\tvalue={formState.groupValue.value}\n\t\t\t\t\t\t\tplaceholder=\"Enter group (optional) or leave blank for default group\"\n\t\t\t\t\t\t\tonChange={setGroupValue} />\n\t\t\t\t\t</FormGroup>\n\t\t\t\t\t<FormGroup\n\t\t\t\t\t\tlabel=\"ID\"\n\t\t\t\t\t\tvalidated={formState.artifactIdValue.validated}\n\t\t\t\t\t\thelperTextInvalid={formState.artifactIdValue.errorMessage}\n\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\tfieldId=\"test-in-registry-artifactId\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tid=\"test-in-registry-artifactId\"\n\t\t\t\t\t\t\tplaceholder=\"Enter ID of artifact\"\n\t\t\t\t\t\t\tvalue={formState.artifactIdValue.value}\n\t\t\t\t\t\t\tonChange={setArtifactIdValue} />\n\t\t\t\t\t</FormGroup>\n\t\t\t\t</Form>\n\t\t\t</IsLoading>\n\t\t</Modal>\n\t);\n}\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, SelectVariant, Spinner, TextInput} from \"@patternfly/react-core\";\nimport {Design, DesignEvent} from \"@app/models\";\nimport {Registry} from \"@rhoas/registry-management-sdk\";\nimport {\n    DesignsService,\n    RhosrInstanceService,\n    RhosrInstanceServiceFactory,\n    RhosrService,\n    useDesignsService,\n    useRhosrInstanceServiceFactory,\n    useRhosrService\n} from \"@app/services\";\nimport {If, IsLoading, ObjectSelect} from \"@app/components\";\nimport {DesignContext} from \"@app/models/designs/design-context.model\";\nimport {CreateOrUpdateArtifactData} from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\nexport type ExportToRhosrData = {\n    registry: Registry;\n    design: Design;\n    context: DesignContext;\n};\n\nexport type ExportToRhosrModalProps = {\n    design: Design;\n    isOpen: boolean | undefined;\n    onExported: (event: ExportToRhosrData) => void;\n    onCancel: () => void;\n}\n\n\nexport const ExportToRhosrModal: FunctionComponent<ExportToRhosrModalProps> = (\n    {design, isOpen, onExported, onCancel}: ExportToRhosrModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [isExporting, setExporting] = useState(false);\n    const [isLoadingRegistries, setLoadingRegistries] = useState(true);\n    const [registries, setRegistries] = useState([] as Registry[]);\n    const [registry, setRegistry] = useState<Registry>();\n    const [group, setGroup] = useState<string>();\n    const [artifactId, setArtifactId] = useState<string>();\n    const [version, setVersion] = useState<string>();\n    const [rhosrInstance, setRhosrInstance] = useState<RhosrInstanceService>();\n\n    const designs: DesignsService = useDesignsService();\n    const rhosr: RhosrService = useRhosrService();\n    const rhosrInstanceFactory: RhosrInstanceServiceFactory = useRhosrInstanceServiceFactory();\n\n    // Called when the user clicks \"export\"\n    const doExport = () => {\n        setExporting(true);\n        designs.getDesignContent(design.id).then(content => {\n            const data: CreateOrUpdateArtifactData = {\n                type: design.type,\n                groupId: group,\n                id: artifactId,\n                version: version,\n                content: content.data,\n                contentType: content.contentType\n            };\n            rhosrInstance?.createOrUpdateArtifact(data).then(amd => {\n                const context: DesignContext = {\n                    type: \"rhosr\",\n                    rhosr: {\n                        instanceId: registry?.id as string,\n                        groupId: amd.groupId as string,\n                        artifactId: amd.id,\n                        version: amd.version\n                    }\n                };\n                const data: ExportToRhosrData = {\n                    registry: registry as Registry,\n                    design,\n                    context\n                };\n\n                const event: DesignEvent = {\n                    id: design.id,\n                    type: \"register\",\n                    on: new Date(),\n                    data: context.rhosr\n                };\n\n                // Create an event (add to the design's history).\n                designs.createEvent(event).then(() => {\n                    setExporting(false);\n                    onExported(data);\n                }).catch(error => {\n                    // TODO error handling\n                });\n            }).catch(error => {\n                // TODO error handling\n            });\n        }).catch(error => {\n            // TODO error handling\n        });\n    };\n\n    const onRegistrySelect = (registry: Registry): void => {\n        setRegistry(registry);\n    };\n\n    const defaultRegistry = (registries: Registry[]): Registry | undefined => {\n        if (design?.origin?.type === \"rhosr\" && design.origin.rhosr?.instanceId) {\n            const filtered: Registry[] = registries.filter(registry => registry.id === design.origin.rhosr?.instanceId);\n            if (filtered && filtered.length > 0) {\n                return filtered[0];\n            }\n        }\n        return registries.length > 0 ? registries[0] : undefined;\n    }\n\n    useEffect(() => {\n        if (isOpen) {\n            setLoadingRegistries(true);\n            // Get the list of registries.\n            rhosr.getRegistries().then(registries => {\n                setRegistries(registries.sort((a, b) => {\n                    const name1: string = a.name as string;\n                    const name2: string = b.name as string;\n                    return name1.localeCompare(name2);\n                }));\n                setRegistry(defaultRegistry(registries));\n                setLoadingRegistries(false);\n            }).catch(error => {\n                // TODO handle this error case\n                console.error(\"[HomePage] Error getting registry list: \", error);\n            });\n        }\n    }, [isOpen]);\n\n    useEffect(() => {\n        if (design && design.origin && design.origin.type === \"rhosr\") {\n            const context: DesignContext = design.origin;\n            setGroup(context.rhosr?.groupId);\n            setArtifactId(context.rhosr?.artifactId);\n            setVersion(context.rhosr?.version);\n        } else {\n            setGroup(undefined);\n            setArtifactId(undefined);\n            setVersion(undefined);\n        }\n    }, [design]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!registry) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [registry, group, artifactId, version]);\n\n    // Whenever the registry changes, create a rhosr instance service for it.\n    useEffect(() => {\n        if (registry) {\n            const rhosrInstance: RhosrInstanceService = rhosrInstanceFactory.createFor(registry as Registry);\n            setRhosrInstance(rhosrInstance);\n        }\n    }, [registry]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Export to Service Registry\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"export\" variant=\"primary\" isDisabled={!isValid || isExporting} onClick={doExport}>\n                    <If condition={isExporting}>\n                        <Spinner size=\"md\" className=\"export-spinner\" />\n                    </If>\n                    Export\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <IsLoading condition={isLoadingRegistries}>\n                <Form>\n                    <FormGroup label=\"Registry Instance\" isRequired={true} fieldId=\"export-registry-instance\">\n                        <ObjectSelect value={registry}\n                                      items={registries}\n                                      onSelect={onRegistrySelect}\n                                      variant={SelectVariant.single}\n                                      menuAppendTo=\"parent\"\n                                      itemToString={item => item.name} />\n                    </FormGroup>\n                    <FormGroup label=\"Group\" isRequired={false} fieldId=\"export-group\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-group\"\n                            name=\"export-group\"\n                            placeholder=\"Enter group (optional) or leave blank for default group\"\n                            aria-describedby=\"export-group-helper\"\n                            value={group}\n                            onChange={(value) => setGroup(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"ID\" isRequired={false} fieldId=\"export-artifact-id\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-artifact-id\"\n                            name=\"export-artifact-id\"\n                            placeholder=\"Enter ID (optional) or leave blank for generated ID\"\n                            aria-describedby=\"export-artifact-id-helper\"\n                            value={artifactId}\n                            onChange={(value) => setArtifactId(value)}\n                        />\n                    </FormGroup>\n                    <FormGroup label=\"Version\" isRequired={false} fieldId=\"export-version\">\n                        <TextInput\n                            isRequired\n                            type=\"text\"\n                            id=\"export-version\"\n                            name=\"export-version\"\n                            placeholder=\"Enter version (optional) or leave blank for generated version number\"\n                            aria-describedby=\"export-version-helper\"\n                            value={version}\n                            onChange={(value) => setVersion(value)}\n                        />\n                    </FormGroup>\n                </Form>\n            </IsLoading>\n        </Modal>\n    )\n};\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport \"./export-to-rhosr.modal.css\";\nimport {Button, Form, FormGroup, Modal, ModalVariant, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {Design} from \"@app/models\";\n\nexport type RenameData = {\n    name: string;\n    summary: string;\n};\n\nexport type RenameModalProps = {\n    design: Design|undefined;\n    isOpen: boolean | undefined;\n    onRename: (event: RenameData) => void;\n    onCancel: () => void;\n}\n\n\nexport const RenameModal: FunctionComponent<RenameModalProps> = (\n    {design, isOpen, onRename, onCancel}: RenameModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [name, setName] = useState<string>();\n    const [summary, setSummary] = useState<string>();\n\n    // Called when the user clicks \"edit\"\n    const doRename = () => {\n        onRename({\n            name: name as string,\n            summary: summary as string\n        });\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            setName(design?.name);\n            setSummary(design?.summary);\n        }\n    }, [isOpen]);\n\n    // Set the validity whenever one of the relevant state variables changes.\n    useEffect(() => {\n        let valid: boolean = true;\n        if (!name) {\n            valid = false;\n        }\n        setValid(valid);\n    }, [name, summary]);\n\n    return (\n        <Modal\n            variant={ModalVariant.medium}\n            title=\"Rename design\"\n            isOpen={isOpen}\n            onClose={onCancel}\n            actions={[\n                <Button key=\"edit\" variant=\"primary\" isDisabled={!isValid} onClick={doRename}>Save</Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>Cancel</Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label=\"Name\" isRequired={true} fieldId=\"edit-name\">\n                    <TextInput\n                        isRequired\n                        type=\"text\"\n                        id=\"edit-name\"\n                        name=\"edit-name\"\n                        placeholder=\"Enter new name for design\"\n                        aria-describedby=\"edit-name-helper\"\n                        value={name}\n                        onChange={(value) => setName(value)}\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"edit-description\">\n                    <TextArea\n                        type=\"text\"\n                        id=\"edit-description\"\n                        name=\"edit-description\"\n                        aria-describedby=\"edit-description-helper\"\n                        value={summary}\n                        onChange={(value) => {setSummary(value)}}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    )\n};\n","import { Auth, useAuth } from \"@rhoas/app-services-ui-shared\";\nimport {\n    ArtifactMetaData,\n    ArtifactSearchResults,\n    ContentTypes,\n    CreateArtifactData,\n    CreateVersionData,\n    GetArtifactsCriteria,\n    Paging,\n    SearchedVersion,\n    VersionMetaData\n} from \"@app/models\";\nimport { createEndpoint, createHref, createOptions, httpGet, httpPut, httpPostWithReturn } from \"@app/utils/rest.utils\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { isJson, isXml, isYaml } from \"@app/utils\";\nimport { CreateOrUpdateArtifactData } from \"@app/models/rhosr-instance/create-or-update-artifact-data.model\";\n\n\n/**\n * Determines the content type of the given content.\n * @param type\n * @param content\n */\nfunction determineContentType(type: string, content: string): string {\n    switch (type) {\n        case \"PROTOBUF\":\n            return ContentTypes.APPLICATION_PROTOBUF;\n        case \"WSDL\":\n        case \"XSD\":\n        case \"XML\":\n            return ContentTypes.APPLICATION_XML;\n        case \"GRAPHQL\":\n            return ContentTypes.APPLICATION_GRAPHQL;\n    }\n    if (isJson(content)) {\n        return ContentTypes.APPLICATION_JSON;\n    } else if (isXml(content)) {\n        return ContentTypes.APPLICATION_XML;\n    } else if (isYaml(content)) {\n        return ContentTypes.APPLICATION_YAML;\n    } else {\n        return \"application/octet-stream\";\n    }\n}\n\n\nfunction normalizeGroupId(groupId: string | undefined): string {\n    return groupId || \"default\";\n}\n\n\nasync function createArtifact(auth: Auth, basePath: string, data: CreateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts\", { groupId: data.groupId });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function createOrUpdateArtifact(auth: Auth, basePath: string, data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const endpoint: string = createEndpoint(basePath,\n        \"/groups/:groupId/artifacts\",\n        { groupId: data.groupId || \"default\" },\n        { ifExists: \"UPDATE\" }\n    );\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.id) {\n        headers[\"X-Registry-ArtifactId\"] = data.id;\n    }\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    if (data.version) {\n        headers[\"X-Registry-Version\"] = data.version;\n    }\n    headers[\"Content-Type\"] = data.contentType;\n    return httpPostWithReturn<any, ArtifactMetaData>(endpoint, data.content, createOptions(headers));\n};\n\n\nasync function createArtifactVersion(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId: groupId || \"default\",\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (data.type) {\n        headers[\"X-Registry-ArtifactType\"] = data.type;\n    }\n    headers[\"Content-Type\"] = determineContentType(data.type, data.content);\n    return httpPostWithReturn<any, VersionMetaData>(endpoint, data.content, createOptions(headers));\n}\n\n\nasync function getArtifacts(auth: Auth, basePath: string, criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults> {\n    console.debug(\"[RhosrInstanceService] Getting artifacts: \", criteria, paging);\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    const start: number = (paging.page - 1) * paging.pageSize;\n    const end: number = start + paging.pageSize;\n    const queryParams: any = {\n        limit: end,\n        offset: start,\n        order: criteria.sortAscending ? \"asc\" : \"desc\",\n        orderby: \"name\"\n    };\n    if (criteria.value) {\n        if (criteria.type == \"everything\") {\n            queryParams[\"name\"] = criteria.value;\n            queryParams[\"description\"] = criteria.value;\n            queryParams[\"labels\"] = criteria.value;\n        } else {\n            queryParams[criteria.type] = criteria.value;\n        }\n    }\n    const endpoint: string = createEndpoint(basePath, \"/search/artifacts\", {}, queryParams);\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<ArtifactSearchResults>(endpoint, createOptions(headers), (data) => {\n        const results: ArtifactSearchResults = {\n            artifacts: data.artifacts,\n            count: data.count,\n            page: paging.page,\n            pageSize: paging.pageSize\n        };\n        return results;\n    });\n}\n\n\nasync function getArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, version: string): Promise<string> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    let endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions/:version\", {\n        groupId,\n        artifactId,\n        version\n    });\n    const headers: any = {\n        \"Accept\": \"*\",\n        \"Authorization\": `Bearer ${token}`\n    };\n    if (version === \"latest\") {\n        endpoint = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId\", { groupId, artifactId });\n    }\n\n    const options: any = createOptions(headers);\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\nasync function getArtifactVersions(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Getting the list of versions for artifact: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/versions\", {\n        groupId,\n        artifactId\n    }, {\n        limit: 500,\n        offset: 0\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpGet<SearchedVersion[]>(endpoint, createOptions(headers), (data) => {\n        return data.versions;\n    });\n}\n\nasync function testUpdateArtifactContent(auth: Auth, basePath: string, groupId: string | undefined, artifactId: string, content: string): Promise<void> {\n    const token: string | undefined = auth?.apicurio_registry ? await auth?.apicurio_registry.getToken() : \"\";\n\n    groupId = normalizeGroupId(groupId);\n\n    console.info(\"[RhosrInstanceService] Testing updating of artifact content: \", groupId, artifactId);\n    const endpoint: string = createEndpoint(basePath, \"/groups/:groupId/artifacts/:artifactId/test\", {\n        groupId,\n        artifactId\n    });\n    const headers: any = {\n        \"Authorization\": `Bearer ${token}`\n    };\n    return httpPut<any>(endpoint, content, createOptions(headers));\n}\n\n\n/**\n * The RHOSR Instance service interface.\n */\nexport interface RhosrInstanceService {\n    createArtifact(data: CreateArtifactData): Promise<ArtifactMetaData>;\n    createArtifactVersion(groupId: string | undefined, artifactId: string, data: CreateVersionData): Promise<VersionMetaData>;\n    createOrUpdateArtifact(data: CreateOrUpdateArtifactData): Promise<ArtifactMetaData>;\n    getArtifacts(criteria: GetArtifactsCriteria, paging: Paging): Promise<ArtifactSearchResults>;\n    getArtifactContent(groupId: string | undefined, artifactId: string, version: string): Promise<string>;\n    getArtifactVersions(groupId: string | undefined, artifactId: string): Promise<SearchedVersion[]>;\n    testUpdateArtifactContent(groupId: string | undefined, artifactId: string, content: string): Promise<void>;\n}\n\n/**\n * Factory for creating RHOSR instance services.\n */\nexport interface RhosrInstanceServiceFactory {\n    createFor(registry: Registry): RhosrInstanceService;\n}\n\n\n/**\n * React hook to get the RHOSR instance service.\n */\nexport const useRhosrInstanceServiceFactory: () => RhosrInstanceServiceFactory = (): RhosrInstanceServiceFactory => {\n    const auth: Auth = useAuth();\n\n    return {\n        createFor: (registry) => {\n            const instanceUrl: string = createHref(registry.registryUrl as string, \"/apis/registry/v2\");\n            return {\n                createArtifact: (data) => createArtifact(auth, instanceUrl, data),\n                createArtifactVersion: (groupId, artifactId, data) => createArtifactVersion(auth, instanceUrl, groupId, artifactId, data),\n                createOrUpdateArtifact: (data: CreateOrUpdateArtifactData) => createOrUpdateArtifact(auth, instanceUrl, data),\n                getArtifacts: (criteria, paging) => getArtifacts(auth, instanceUrl, criteria, paging),\n                getArtifactContent: (groupId, artifactId, version) => getArtifactContent(auth, instanceUrl, groupId, artifactId, version),\n                getArtifactVersions: (groupId, artifactId) => getArtifactVersions(auth, instanceUrl, groupId, artifactId),\n                testUpdateArtifactContent: (groupId, artifactId, content) => testUpdateArtifactContent(auth, instanceUrl, groupId, artifactId, content)\n\n            };\n        }\n    };\n};\n","import {\n    CreateDesign,\n    CreateDesignContent,\n    Design,\n    DesignContent,\n    DesignEvent,\n    DesignsSearchCriteria,\n    DesignsSearchResults,\n    DesignsSort,\n    Paging\n} from \"@app/models\";\nimport Dexie from \"dexie\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {cloneObject, limit} from \"@app/utils\";\n\n\nconst db = new Dexie(\"designsDB\");\ndb.version(4).stores({\n    designs: \"++id, type, name, createdOn, modifiedOn\", // Primary key and indexed props\n    content: \"++id\",\n    events: \"++eventId, id, type, on\"\n});\n\n\nasync function createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design> {\n    const id: string = uuidv4();\n    const newDesign: Design = {\n        id,\n        name: limit(cd.name, 64) as string,\n        summary: limit(cd.summary, 256),\n        type: cd.type,\n        createdOn: new Date(),\n        modifiedOn: new Date(),\n        origin: cloneObject(cd.context)\n    };\n    const newDesignContent: DesignContent = {\n        id,\n        contentType: cdc.contentType,\n        data: cdc.data\n    };\n    const newEvent: DesignEvent = {\n        id,\n        type: \"create\",\n        on: new Date(),\n        data: {}\n    };\n    if (cd.context) {\n        newEvent.data.context = cloneObject(cd.context);\n        if (cd.context.type !== \"create\") {\n            newEvent.type = \"import\";\n        }\n    }\n    // Make sure the ID is properly set always.\n    newEvent.id = id;\n\n    return Promise.all([\n        // @ts-ignore\n        db.designs.add(newDesign),\n        // @ts-ignore\n        db.content.add(newDesignContent),\n        createEvent(newEvent)\n    ]).then(() => newDesign);\n}\n\nasync function getDesigns(): Promise<Design[]> {\n    // @ts-ignore\n    return db.designs.toArray();\n}\n\nasync function searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults> {\n    console.debug(\"[DesignsService] Searching for designs: \", criteria, paging);\n    const accept = (design: Design): boolean => {\n        let matches: boolean = false;\n        if (!criteria.filterValue || criteria.filterValue.trim().length === 0) {\n            matches = true;\n        } else if (design.name.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.summary && design.summary.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        } else if (design.type.toLowerCase().indexOf(criteria.filterValue.toLowerCase()) >= 0) {\n            matches = true;\n        }\n        return matches;\n    };\n\n    return getDesigns().then(designs => {\n        // TODO Explore whether we can use dexie to filter and page the results.\n\n        // filter and sort the results\n        const filteredDesigns: Design[] = designs.filter(accept).sort((design1, design2) => {\n            let rval: number = sort.by === \"name\" ? (\n                design1.name.localeCompare(design2.name)\n            ) : (\n                design1.modifiedOn.getTime() - design2.modifiedOn.getTime()\n            );\n            if (sort.direction !== \"asc\") {\n                rval *= -1;\n            }\n            return rval;\n        });\n        // get the total count\n        const totalCount: number = filteredDesigns.length;\n        // get the subset of results based on paging\n        const start: number = (paging.page - 1) * paging.pageSize;\n        const end: number = start + paging.pageSize;\n        const pagedDesigns: Design[] = filteredDesigns.slice(start, end);\n        return {\n            designs: pagedDesigns,\n            page: paging.page,\n            pageSize: paging.pageSize,\n            count: totalCount\n        }\n    });\n}\n\n\nasync function getDesign(id: string): Promise<Design> {\n    // @ts-ignore\n    return db.designs.where(\"id\").equals(id).first();\n}\n\nasync function deleteDesign(id: string): Promise<void> {\n    return Promise.all([\n        // @ts-ignore\n        db.designs.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.content.where(\"id\").equals(id).delete(),\n        // @ts-ignore\n        db.events.where(\"id\").equals(id).delete(),\n    ]).then(r => {});\n}\n\nasync function renameDesign(id: string, newName: string, newSummary?: string): Promise<void> {\n    // @ts-ignore\n    return db.designs.update(id, {\n        name: limit(newName, 64) as string,\n        summary: limit(newSummary, 256),\n    });\n}\n\nasync function getDesignContent(id: string): Promise<DesignContent> {\n    // @ts-ignore\n    return db.content.where(\"id\").equals(id).first();\n}\n\nasync function updateDesignContent(content: DesignContent): Promise<void> {\n    const newEvent: DesignEvent = {\n        id: content.id,\n        type: \"update\",\n        on: new Date(),\n        data: {}\n    };\n\n    return Promise.all([\n        // @ts-ignore\n        db.content.update(content.id, {\n            data: content.data\n        }),\n        // @ts-ignore\n        db.designs.update(content.id, {\n            modifiedOn: new Date()\n        }),\n        createEvent(newEvent)\n    ]).then(() => {});\n}\n\n\nasync function getEvents(id: string): Promise<DesignEvent[]> {\n    // @ts-ignore\n    return db.events.where(\"id\").equals(id).reverse().sortBy(\"on\");\n}\n\n\nasync function createEvent(event: DesignEvent): Promise<void> {\n    event.eventId = uuidv4();\n    // @ts-ignore\n    return db.events.add(event);\n}\n\n\n/**\n * The Designs Service interface.\n */\nexport interface DesignsService {\n    createDesign(cd: CreateDesign, cdc: CreateDesignContent): Promise<Design>;\n    getDesigns(): Promise<Design[]>;\n    getDesign(id: string): Promise<Design>;\n    searchDesigns(criteria: DesignsSearchCriteria, paging: Paging, sort: DesignsSort): Promise<DesignsSearchResults>;\n    deleteDesign(id: string): Promise<void>;\n    renameDesign(id: string, newName: string, newSummary?: string): Promise<void>;\n    getDesignContent(id: string): Promise<DesignContent>;\n    updateDesignContent(content: DesignContent): Promise<void>;\n    getEvents(id: string): Promise<DesignEvent[]>;\n    createEvent(event: DesignEvent): Promise<void>;\n}\n\n\n/**\n * React hook to get the Designs service.\n */\nexport const useDesignsService: () => DesignsService = (): DesignsService => {\n    return {\n        createDesign,\n        getDesigns,\n        searchDesigns,\n        getDesign,\n        deleteDesign,\n        renameDesign,\n        getDesignContent,\n        updateDesignContent,\n        getEvents,\n        createEvent\n    };\n};\n","import {ContentTypes, Template} from \"@app/models\";\nimport ASYNCAPI_2_BLANK from \"./asyncapi/asyncapi-2-blank.json\";\nimport ASYNCAPI_2_STREETLIGHTS from \"./asyncapi/asyncapi-2-streetlights.json\";\n\nexport const ASYNCAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"asyncapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_BLANK\n        }\n    },\n    {\n        id: \"asyncapi_2_streetlights\",\n        name: \"Street Lights Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: ASYNCAPI_2_STREETLIGHTS\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport OPENAPI_3_BLANK from \"./openapi/openapi-3-blank.json\";\nimport OPENAPI_3_PETSTORE from \"./openapi/openapi-3-petstore.json\";\nimport OPENAPI_3_USPTO from \"./openapi/openapi-3-uspto.json\";\nimport OPENAPI_2_BLANK from \"./openapi/openapi-2-blank.json\";\nimport OPENAPI_2_PETSTORE from \"./openapi/openapi-2-petstore.json\";\n\n\nexport const OPENAPI_3_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_3_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_BLANK\n        }\n    },\n    {\n        id: \"openapi_3_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_PETSTORE\n        }\n    },\n    {\n        id: \"openapi_3_uspto\",\n        name: \"USPTO Dataset API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_3_USPTO\n        }\n    }\n]\n\nexport const OPENAPI_2_TEMPLATES: Template[] = [\n    {\n        id: \"openapi_2_blank\",\n        name: \"Blank API\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_BLANK\n        }\n    },\n    {\n        id: \"openapi_2_petstore\",\n        name: \"Pet Store Example\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: OPENAPI_2_PETSTORE\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport JSON_BLANK from \"./json/json-blank.json\";\n\nexport const JSON_TEMPLATES: Template[] = [\n    {\n        id: \"json_blank\",\n        name: \"Blank JSON Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: JSON_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport AVRO_BLANK from \"./avro/avro-blank.json\";\n\nexport const AVRO_TEMPLATES: Template[] = [\n    {\n        id: \"avro_blank\",\n        name: \"Blank Avro Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_JSON,\n            data: AVRO_BLANK\n        }\n    }\n]\n","import {ContentTypes, Template} from \"@app/models\";\nimport PROTOBUF_BLANK from \"./protobuf/protobuf-blank.json\";\n\nexport const PROTOBUF_TEMPLATES: Template[] = [\n    {\n        id: \"protobuf_blank\",\n        name: \"Blank Protobuf Schema\",\n        content: {\n            contentType: ContentTypes.APPLICATION_PROTOBUF,\n            data: PROTOBUF_BLANK.template\n        }\n    }\n]\n","import {Template} from \"@app/models/templates/template.model\";\nimport {\n    ASYNCAPI_2_TEMPLATES,\n    AVRO_TEMPLATES,\n    JSON_TEMPLATES,\n    OPENAPI_2_TEMPLATES,\n    OPENAPI_3_TEMPLATES,\n    PROTOBUF_TEMPLATES\n} from \"@app/services/_templates\";\nimport {ArtifactTypes} from \"@app/models\";\n\n\nasync function getTemplatesFor(type: string, version?: string): Promise<Template[]> {\n    if (type === ArtifactTypes.AVRO) {\n        return Promise.resolve(AVRO_TEMPLATES);\n    }\n    if (type === ArtifactTypes.PROTOBUF) {\n        return Promise.resolve(PROTOBUF_TEMPLATES);\n    }\n    if (type === ArtifactTypes.JSON) {\n        return Promise.resolve(JSON_TEMPLATES);\n    }\n    if (type === ArtifactTypes.ASYNCAPI) {\n        return Promise.resolve(ASYNCAPI_2_TEMPLATES);\n    }\n    if (type === ArtifactTypes.OPENAPI) {\n        if (version && version.startsWith(\"3\")) {\n            return Promise.resolve(OPENAPI_3_TEMPLATES);\n        } else {\n            return Promise.resolve(OPENAPI_2_TEMPLATES);\n        }\n    }\n    return Promise.reject(`No templates found for type ${type} and version ${version}.`);\n}\n\n\n/**\n * The Templates Service interface.\n */\nexport interface TemplatesService {\n    getTemplatesFor(type: string, version?: string): Promise<Template[]>;\n}\n\n\n/**\n * React hook to get the Templates service.\n */\nexport const useTemplatesService: () => TemplatesService = (): TemplatesService => {\n    return {\n        getTemplatesFor\n    };\n};\n","/**\n * Downloads the given content to the filesystem using the given content type and\n * file name.\n * @param content\n * @param contentType\n * @param filename\n */\nimport {DesignsService, useDesignsService} from \"@app/services/designs\";\nimport {Design, DesignEvent} from \"@app/models\";\n\n\nasync function downloadToFS(designsSvc: DesignsService, design: Design, content: string, contentType: string, filename: string): Promise<void> {\n    console.info(\"[DownloadService] Downloading a design.\");\n    const _w: any = window;\n\n    if (_w.chrome !== undefined) {\n        // Chrome version\n        let link = document.createElement('a');\n        let blob = new Blob([content], { type: contentType });\n        link.href = _w.URL.createObjectURL(blob);\n        link.download = filename;\n        link.click();\n    } else if (_w.navigator !== undefined && _w.navigator.msSaveBlob !== undefined) {\n        // IE version\n        let blob = new Blob([content], { type: contentType });\n        _w.navigator.msSaveBlob(blob, filename);\n    } else {\n        // Firefox version\n        let file = new File([content], filename, { type: 'application/force-download' });\n        _w.open(URL.createObjectURL(file));\n    }\n\n    // Create an event for this download\n    const event: DesignEvent = {\n        id: design.id,\n        type: \"download\",\n        on: new Date(),\n        data: {\n            filename\n        }\n    };\n    designsSvc.createEvent(event);\n}\n\n\n/**\n * The Download Service interface.\n */\nexport interface DownloadService {\n    downloadToFS(design: Design, content: string, contentType: string, filename: string): Promise<void>;\n}\n\n\n/**\n * React hook to get the Download service.\n */\nexport const useDownloadService: () => DownloadService = (): DownloadService => {\n    // Note: inject the designs services so that events can be created.\n    const designsSvc: DesignsService = useDesignsService();\n    return {\n        downloadToFS: (design: Design, content: string, contentType: string, filename: string): Promise<void> => {\n            return downloadToFS(designsSvc, design, content, contentType, filename);\n        }\n    };\n};\n","import {createOptions, httpGet} from \"@app/utils\";\n\nconst githubRegex: RegExp = /^https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/blob\\/([^\\/]+)\\/(.+)$/;\n\n\nasync function fetchUrlContent(url: string): Promise<string> {\n    const match: RegExpMatchArray | null = url.match(githubRegex);\n    if (match !== null) {\n        const org: string = match[1];\n        const repo: string = match[2];\n        const branch: string = match[3];\n        const path: string = match[4];\n\n        url = `https://raw.githubusercontent.com/${org}/${repo}/${branch}/${path}`;\n    }\n\n    console.info(\"[UrlService] Fetching content from a URL: \", url);\n\n    let endpoint: string = url;\n    const options: any = createOptions({\n        \"Accept\": \"*\"\n    });\n    options.maxContentLength = \"5242880\"; // TODO 5MB hard-coded, make this configurable?\n    options.responseType = \"text\";\n    options.transformResponse = (data: any) => data;\n    return httpGet<string>(endpoint, options);\n}\n\n\n/**\n * The URL Service interface.\n */\nexport interface UrlService {\n    fetchUrlContent(url: string): Promise<string>;\n}\n\n\n/**\n * React hook to get the URL service.\n */\nexport const useUrlService: () => UrlService = (): UrlService => {\n    return {\n        fetchUrlContent\n    };\n};\n","import {AlertVariant, useAlert} from \"@rhoas/app-services-ui-shared\";\nimport {Design} from \"@app/models\";\nimport {ExportToRhosrData, RenameData} from \"@app/pages/components\";\nimport React from \"react\";\nimport {RegistryNavLink} from \"@app/components\";\n\n\nexport interface AlertsService {\n    designDeleted(design: Design): void;\n    designDeleteFailed(design: Design, error: any): void;\n    designSaved(design: Design): void;\n    designRenamed(event: RenameData): void;\n    designExportedToRhosr(event: ExportToRhosrData): void;\n}\n\n\n/**\n * React hook to get the Alerts service.\n */\nexport const useAlertsService: () => AlertsService = (): AlertsService => {\n    const { addAlert } = useAlert() || {};\n\n    return {\n        designDeleted(design: Design): void {\n            addAlert({\n                title: \"Delete successful\",\n                description: `Design '${design.name}' was successfully deleted.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-deleted\"\n            });\n        },\n\n        designDeleteFailed(design: Design, error: any): void {\n            addAlert({\n                title: \"Delete failed\",\n                description: `Failed to delete design '${design.name}'.  ${error}`,\n                variant: AlertVariant.danger,\n                dataTestId: \"toast-design-delete-error\"\n            });\n        },\n\n        designRenamed(event: RenameData): void {\n            addAlert({\n                title: \"Details successfully changed\",\n                description: `Details (name, summary) of design '${event.name}' were successfully changed.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-renamed\"\n            });\n        },\n\n        designSaved(design: Design): void {\n            addAlert({\n                title: \"Save successful\",\n                description: `Design '${design?.name}' was successfully saved.`,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-saved\"\n            });\n        },\n\n        designExportedToRhosr(event: ExportToRhosrData): void {\n            const description: React.ReactNode = (\n                <React.Fragment>\n                    <div>{`Design '${event.design.name}' was successfully exported to Service Registry.`}</div>\n                    <RegistryNavLink registry={event.registry} context={event.context}>View artifact in Service Registry</RegistryNavLink>\n                </React.Fragment>\n            );\n\n            addAlert({\n                title: \"Export successful\",\n                description,\n                variant: AlertVariant.success,\n                dataTestId: \"toast-design-registered\"\n            });\n        },\n    };\n};\n","\nfunction setConfigProperty(propertyName: string, propertyValue: string | object): void {\n    console.info(`[LocalStorageService] Setting config property ${propertyName} to value ${propertyValue}.`);\n    const value: string = typeof propertyValue === \"string\" ? propertyValue as string : JSON.stringify(propertyValue);\n    localStorage.setItem(\"apicurio-studio.\" + propertyName, value);\n}\n\nfunction getConfigProperty(propertyName: string, defaultValue: string | object | undefined): string | object | undefined {\n    console.info(`[LocalStorageService] Getting config property ${propertyName}`);\n    const value: string|null = localStorage.getItem(\"apicurio-studio.\" + propertyName);\n    if (!value) {\n        return defaultValue;\n    }\n    if (value.startsWith(\"{\")) {\n        return JSON.parse(value);\n    }\n    return value as string;\n}\n\n\n/**\n * The Local Storage Service interface.\n */\nexport interface LocalStorageService {\n    setConfigProperty(propertyName: string, propertyValue: string | object): void;\n    getConfigProperty(propertyName: string, defaultValue: string | object | undefined): string | object | undefined;\n}\n\n\n/**\n * React hook to get the LocalStorage service.\n */\nexport const useLocalStorageService: () => LocalStorageService = (): LocalStorageService => {\n    return {\n        setConfigProperty,\n        getConfigProperty\n    };\n};\n","import {Configuration, Registry, RegistriesApi, RegistryList} from '@rhoas/registry-management-sdk';\nimport {Auth, useAuth, Config, useConfig} from \"@rhoas/app-services-ui-shared\";\nimport {LocalStorageService, useLocalStorageService} from \"@app/services/local-storage\";\n\nconst RHOSR_MOCK_DATA: Registry[] = [\n    {\n        id: \"1\",\n        name: \"Local Registry 1 (localhost:8081)\",\n        registryUrl: \"http://localhost:8081/\",\n        browserUrl: \"http://localhost:8081/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"2\",\n        name: \"Local Registry 2 (localhost:8082)\",\n        registryUrl: \"http://localhost:8082/\",\n        browserUrl: \"http://localhost:8082/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n]\n\nconst RHOSR_MOCK_DATA_OF: Registry[] = [\n    {\n        id: \"101\",\n        name: \"Operate First Registry 1\",\n        registryUrl: \"http://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/\",\n        browserUrl: \"http://apicurio-registry-mem-one.apps.smaug.na.operate-first.cloud/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    },\n    {\n        id: \"201\",\n        name: \"Operate First Registry 2\",\n        registryUrl: \"http://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/\",\n        browserUrl: \"http://apicurio-registry-mem-two.apps.smaug.na.operate-first.cloud/ui/\",\n        status: \"ready\",\n        created_at: \"2022-01-01T12:00:00Z\",\n        updated_at: \"2022-01-01T12:00:00Z\",\n        instance_type: \"standard\"\n    }\n]\n\n\n/**\n * Async function to get the RHOSR instances.  Uses a provided auth token and API\n * base path to create a RHOSR SDK instance.\n * @param auth the application auth\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistries(auth: Auth, basePath: string): Promise<Registry[]> {\n    console.debug(\"[RhosrService] Getting a list of registries from: \", basePath);\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistries().then(res => {\n        const registries: RegistryList = res?.data;\n        return registries.items;\n    });\n}\n\n/**\n * Gets information about a single registry instances by its unique ID.\n * @param auth the application auth\n * @param local the local storage service\n * @param id the registry instance ID\n * @param basePath base path of the fleet manager API\n */\nasync function getRegistry(auth: Auth, local: LocalStorageService, id: string, basePath: string): Promise<Registry> {\n    console.debug(\"[RhosrService] Getting a single registry from: \", basePath);\n    const cacheKey: string = `services.rhosr.getRegistry.${id}`;\n    const cachedRegistry: Registry | undefined = local.getConfigProperty(cacheKey, undefined) as Registry | undefined;\n\n    if (cachedRegistry) {\n        // TODO limit the TTL of the cache entry somehow\n        console.debug(\"[RhosrService] Cache hit for registry with ID: \", id);\n        return Promise.resolve(cachedRegistry);\n    }\n\n    const token: string | undefined = auth?.srs ? await auth?.srs.getToken() : \"\";\n    const api: RegistriesApi = new RegistriesApi(\n        new Configuration({\n            accessToken: token,\n            basePath,\n        })\n    );\n    return api.getRegistry(id).then(res => {\n        const registry: Registry = res?.data as Registry;\n        local.setConfigProperty(cacheKey, registry);\n        return registry;\n    });\n}\n\n\n/**\n * The RHOSR Service interface.\n */\nexport interface RhosrService {\n    getRegistries(): Promise<Registry[]>;\n    getRegistry(id: string): Promise<Registry>;\n}\n\n\n/**\n * A mock version of the RHOSR service.\n */\nfunction createMockService(mockData: Registry[]): RhosrService {\n    return {\n        getRegistries(): Promise<Registry[]> {\n            return Promise.resolve(mockData);\n        },\n        getRegistry(id: string): Promise<Registry> {\n            const matching: Registry[] = mockData.filter(registry => registry.id === id);\n            if (matching && matching.length > 0) {\n                return Promise.resolve(matching[0]);\n            } else {\n                return Promise.resolve({} as Registry);\n            }\n        }\n    };\n}\n\nlet mockWarningSent: boolean = false;\nconst mockWarning = (message: string): void => {\n    if (!mockWarningSent) {\n        console.info(\"[RhosrService] ----------------------------------\");\n        console.info(\"[RhosrService]\", message);\n        console.info(\"[RhosrService] ----------------------------------\");\n        mockWarningSent = true;\n    }\n};\n\n/**\n * React hook to get the RHOSR service.\n */\nexport const useRhosrService: () => RhosrService = (): RhosrService => {\n    const auth: Auth = useAuth();\n    const cfg: Config = useConfig();\n    const local: LocalStorageService = useLocalStorageService();\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"local-mock\")) {\n        mockWarning(\"RHOSR mocking enabled.\");\n        return createMockService(RHOSR_MOCK_DATA);\n    }\n\n    if (cfg.srs.apiBasePath && cfg.srs.apiBasePath.startsWith(\"operate-first-mock\")) {\n        mockWarning(\"RHOSR mocking enabled (Operate First).\");\n        return createMockService(RHOSR_MOCK_DATA_OF);\n    }\n\n    return {\n        getRegistries: () => getRegistries(auth, cfg.srs.apiBasePath),\n        getRegistry: (id) => getRegistry(auth, local, id, cfg.srs.apiBasePath),\n    };\n};\n","/**\n * Clones an object by stringifying it and then parsing it.  Not efficient\n * but effective.  Use sparingly.\n * @param object\n */\nexport function cloneObject(object: any): any {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Function to search a JS object for a property value that matches a criteria (from) and\n * replaces it with a new value (to);\n * @param object\n * @param from\n * @param to\n */\nexport function propertyReplace(object: any, from: string, to: string): void {\n    Object.keys(object).forEach(key => {\n        let value: any = object[key];\n        if (typeof value === \"object\") {\n            propertyReplace(value, from, to);\n        } else if (value === from) {\n            object[key] = to;\n        }\n    })\n}\n","import YAML from \"yaml\";\nimport {IParserResult, parse} from \"protobufjs\";\nimport {ArtifactTypes, ContentTypes, Design, DesignContent} from \"@app/models\";\n\n/**\n * Returns true if the given content is JSON formatted.\n * @param content the content to check\n */\nexport function isJson(content: string): boolean {\n    try {\n        JSON.parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nexport function parseJson(content: string): any {\n    return JSON.parse(content);\n}\nexport function toJsonString(content: any): string {\n    return JSON.stringify(content, null, 4);\n}\n\n\n/**\n * Returns true if the given content is YAML formatted.\n * @param content the content to check\n */\nexport function isYaml(content: string): boolean {\n    try {\n        const result: any = YAML.parse(content);\n        if (typeof result === \"object\") {\n            return true;\n        }\n    } catch (e) {\n    }\n    return false;\n}\nexport function parseYaml(content: string): any {\n    return YAML.parse(content);\n}\nexport function toYamlString(content: any): string {\n    return YAML.stringify(content, null, 4);\n}\n\n/**\n * Returns true if the given content is XML formatted.\n * @param content the content to check\n */\nexport function isXml(content: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isXmlWithRootNode(content: string, namespace: string, localName: string): boolean {\n    try {\n        const xmlParser: DOMParser = new DOMParser();\n        const dom: Document = xmlParser.parseFromString(content, \"application/xml\");\n        const isParseError: boolean = dom.getElementsByTagName(\"parsererror\").length !== 0;\n        return !isParseError &&\n               dom.documentElement.namespaceURI === namespace &&\n               dom.documentElement.localName === localName;\n    } catch (e) {\n        return false;\n    }\n}\nexport function isWsdl(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://schemas.xmlsoap.org/wsdl/\", \"definitions\");\n}\nexport function isXsd(content: string): boolean {\n    return isXmlWithRootNode(content, \"http://www.w3.org/2001/XMLSchema\", \"schema\");\n}\n\n\n/**\n * Returns true if the given content is PROTO formatted.\n * @param content the content to check\n */\nexport function isProto(content: string): boolean {\n    try {\n        const result: IParserResult = parse(content);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n\nexport function fileExtensionForDesign(design: Design, content: DesignContent): string {\n    // If the design was originally imported from a file, let's just use the extension\n    // from that file.\n    if (design.origin && design.origin.type === \"file\") {\n        const filename: string = design.origin.file?.fileName as string;\n        if (filename.indexOf(\".\") > 0) {\n            const split: string[] = filename.split(\".\");\n            return split[split.length - 1];\n        }\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return \"proto\";\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return \"wsdl\";\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return \"xsd\";\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return \"xml\";\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return \"graphql\";\n    }\n\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_JSON) {\n        return \"json\";\n    }\n    if (content.contentType && content.contentType === ContentTypes.APPLICATION_YAML) {\n        return \"yaml\";\n    }\n\n    return \"txt\";\n}\n\nexport function contentTypeForDesign(design: Design, content: DesignContent): string {\n    if (content.contentType) {\n        return content.contentType;\n    }\n\n    if (design.type === ArtifactTypes.PROTOBUF) {\n        return ContentTypes.APPLICATION_PROTOBUF;\n    }\n    if (design.type === ArtifactTypes.WSDL) {\n        return ContentTypes.APPLICATION_WSDL;\n    }\n    if (design.type === ArtifactTypes.XSD) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.XML) {\n        return ContentTypes.TEXT_XML;\n    }\n    if (design.type === ArtifactTypes.GRAPHQL) {\n        return ContentTypes.APPLICATION_GRAPHQL;\n    }\n\n    return ContentTypes.APPLICATION_JSON;\n}\n\n\n/**\n * Called to format (pretty print) the given content.  For example, if the content is JSON\n * then the content will be parsed and then stringified with better whitespace.\n * @param value\n * @param contentType\n */\nexport function formatContent(value: string, contentType: string): string {\n    try {\n        if (contentType === ContentTypes.APPLICATION_JSON) {\n            const parsed: any = JSON.parse(value);\n            return JSON.stringify(parsed, null, 4);\n        }\n    } catch (e) {\n        console.error(e);\n        return value;\n    }\n    return value;\n}\n\n/**\n * Converts a given string to something that's allowed in a filename.\n * @param value\n */\nexport function convertToValidFilename(value: string): string {\n    return (value.replace(/[\\/|\\\\:*?\"<>]/g, \"\"));\n}\n","import {Design} from \"@app/models\";\nimport {DesignContextType} from \"@app/models/designs/design-context.model\";\n\n\nexport function hasOrigin(design: Design|undefined, contextType: DesignContextType): boolean {\n    return design?.origin?.type === contextType;\n};\n\n\nexport function limit(value: string | undefined, length: number): string | undefined {\n    if (!value || value.length < length) {\n        return value;\n    }\n    return value.substring(0, length - 3) + \"...\";\n}\n","import {ContentTypes} from \"@app/models/rhosr-instance\";\nimport axios, {AxiosRequestConfig} from \"axios\";\n\nconst AXIOS = axios.create();\n\n\nfunction createAxiosConfig(method: string, url: string, options: any, data?: any): AxiosRequestConfig {\n    if (typeof data === \"string\") {\n        data = new Blob([data]);\n    }\n    return {\n        ...{\n            data,\n            method,\n            url,\n            validateStatus: (status) => {\n                return status >= 200 && status < 300;\n            }\n        }, ...options\n    };\n}\n\n\nfunction unwrapErrorData(error: any): any {\n    console.debug(\"Error detected, unwrapping...\");\n    if (error && error.response && error.response.data) {\n        return {\n            message: error.message,\n            ...error.response.data,\n            status: error.response.status\n        }\n    } else if (error && error.response) {\n        return {\n            message: error.message,\n            status: error.response.status\n        }\n    } else if (error) {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: error.message,\n            status: 500\n        }\n    } else {\n        console.error(\"Unknown error detected: \", error);\n        return {\n            message: \"Unknown error\",\n            status: 500\n        }\n    }\n}\n\n/**\n * Creates an endpoint to use when making a REST call.  Supports path params and query params.\n * @param baseHref\n * @param path\n * @param params\n * @param queryParams\n */\nexport function createEndpoint(baseHref: string, path: string, params?: any, queryParams?: any): string {\n    if (params) {\n        Object.keys(params).forEach(key => {\n            const value: string = encodeURIComponent(params[key]);\n            path = path.replace(\":\" + key, value);\n        });\n    }\n    let rval: string = createHref(baseHref, path);\n    if (queryParams) {\n        let first: boolean = true;\n        for (const key in queryParams) {\n            if (queryParams[key]) {\n                const value: string = encodeURIComponent(queryParams[key]);\n                if (first) {\n                    rval = rval + \"?\" + key;\n                } else {\n                    rval = rval + \"&\" + key;\n                }\n                if (value !== null && value !== undefined) {\n                    rval = rval + \"=\" + value;\n                }\n                first = false;\n            }\n        }\n    }\n    return rval;\n}\n\n/**\n * Creates the request options used by the HTTP service when making API calls.\n * @param headers\n */\nexport function createOptions(headers: { [header: string]: string }): AxiosRequestConfig {\n    const options: AxiosRequestConfig = {headers};\n    return options;\n}\n\n\n/**\n * Performs an HTTP GET operation to the given URL with the given options.  Returns\n * a Promise to the HTTP response data.\n */\nexport function httpGet<T>(url: string, options?: AxiosRequestConfig, successCallback?: (value: any) => T): Promise<T> {\n    console.info(\"[BaseService] Making a GET request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Accept\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"get\", url, options);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: T = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n * @param successCallback\n * @param progressCallback\n */\nexport function httpPost<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void,\n                            progressCallback?: (progressEvent: any) => void): Promise<void> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    if (progressCallback) {\n        const fiftyMB: number = 50 * 1024 * 1024;\n        config.onUploadProgress = progressCallback;\n        config.maxContentLength = fiftyMB;\n        config.maxBodyLength = fiftyMB;\n    }\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPostWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: any) => O): Promise<O> {\n    console.info(\"[BaseService] Making a POST request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"post\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to null (no response data expected).\n * @param url\n * @param body\n * @param options\n */\nexport function httpPut<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void): Promise<void> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\"Content-Type\": ContentTypes.APPLICATION_JSON});\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(() => {\n            if (successCallback) {\n                return successCallback();\n            } else {\n                return;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n * a Promise to the HTTP response data.\n * @param url\n * @param body\n * @param options\n */\nexport function httpPutWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: O) => O): Promise<O> {\n    console.info(\"[BaseService] Making a PUT request to: \", url);\n\n    if (!options) {\n        options = createOptions({\n            \"Accept\": ContentTypes.APPLICATION_JSON,\n            \"Content-Type\": ContentTypes.APPLICATION_JSON\n        });\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"put\", url, options, body);\n    return AXIOS.request(config)\n        .then(response => {\n            const data: O = response.data;\n            if (successCallback) {\n                return successCallback(data);\n            } else {\n                return data;\n            }\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\n/**\n * Performs an HTTP DELETE operation to the given URL with the given body and options.\n * @param url\n * @param options\n */\nexport function httpDelete<T>(url: string, options?: AxiosRequestConfig, successCallback?: () => T): Promise<T> {\n    console.info(\"[BaseService] Making a DELETE request to: \", url);\n\n    if (!options) {\n        options = {};\n    }\n\n    const config: AxiosRequestConfig = createAxiosConfig(\"delete\", url, options);\n// @ts-ignore\n    return AXIOS.request(config)\n        .then(() => {\n            return successCallback ? successCallback() : null;\n        }).catch(error => {\n            return Promise.reject(unwrapErrorData(error));\n        });\n}\n\nexport function stripTrailingSlash(baseHref: string | undefined): string {\n    if (!baseHref) {\n        return \"\";\n    }\n    if (baseHref.endsWith(\"/\")) {\n        return baseHref.substring(0, baseHref.length - 1);\n    }\n    return baseHref;\n}\n\nexport function createHref(baseHref: string, path: string): string {\n    let url: string =  baseHref;\n    if (url.endsWith(\"/\")) {\n        url = url.substring(0, url.length - 1);\n    }\n    url += path;\n    return url;\n}\n\n"],"names":["If","condition","children","NavLink","location","title","className","basename","useBasename","to","getBasename","Link","ArtifactTypeIcon","type","isShowIcon","isShowLabel","classes","getClassNames","getTitle","getLabel","IsLoading","loadingComponent","lc","Spinner","IfNotEmpty","collection","emptyState","emptyStateTitle","emptyStateMessage","empty","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","EmptyStateBody","length","ListWithToolbar","toolbar","alwaysShowToolbar","filteredEmptyState","isLoading","isEmpty","isFiltered","ToggleIcon","expanded","ChevronDownIcon","ChevronRightIcon","DesignDescription","description","RegistryNavLink","registry","context","useState","href","setHref","rhosr","undefined","setHrefFrom","group","groupId","id","artifactId","browserUrl","useEffect","getRegistry","instanceId","then","ServicePreviewWarning","Alert","isInline","style","marginBottom","ObjectSelect","value","items","onSelect","itemToString","noSelectionLabel","menuAppendTo","isToggled","setToggled","selectObjects","setSelectObjects","selections","setSelections","map","item","index","toString","noSelection","filtered","filter","soo","Select","SelectVariant","onToggle","event","isOpen","SelectOption","isPlaceholder","key","useNavigation","history","useHistory","navigateTo","path","setTimeout","push","AVRO","PROTOBUF","JSON","OPENAPI","ASYNCAPI","GRAPHQL","KCONNECT","WSDL","XSD","XML","APPLICATION_JSON","APPLICATION_YAML","APPLICATION_XML","APPLICATION_PROTOBUF","APPLICATION_GRAPHQL","TEXT_XML","APPLICATION_WSDL","ImportFrom","ArtifactGroup","ArtifactName","name","ArtifactSelector","registries","onSelected","querying","setQuerying","pageSize","page","paging","setPaging","filterValue","ascending","filterSelection","criteria","setCriteria","setRegistry","artifacts","setArtifacts","rhosrInstance","setRhosrInstance","rhosrInstanceFactory","createFor","gac","sortAscending","getArtifacts","results","catch","error","console","ArtifactListToolbar","onRegistrySelected","document","getElementById","onCriteriaChange","onPagingChange","marginTop","count","ArtifactList","fetchArtifactContent","artifact","version","getArtifactContent","onArtifactSelected","content","fetchArtifactVersions","getArtifactVersions","selectedArtifact","setSelectedArtifact","onArtifactSelectedInternal","debug","onArtifactUnselectedInternal","onArtifactLoaded","idx","ArtifactListItem","onUnselected","isSelected","rval","setLoading","versions","setVersions","selectedVersion","setSelectedVersion","setContent","isContentLoaded","setContentLoaded","onVersionSelect","contentType","data","onClick","target","localName","Radio","isChecked","state","status","Badge","isRead","setFilterValue","Toolbar","ToolbarContent","ToolbarItem","SearchInput","onChange","onSearch","onClear","Button","SortAlphaDownIcon","SortAlphaDownAltIcon","Pagination","padding","dropDirection","isCompact","itemCount","perPage","onSetPage","newPage","onPerPageSelect","newPerPage","widgetId","TYPE_OPTIONS","label","CreateDesignModal","onCreate","onCancel","isValid","setValid","setName","summary","setSummary","setType","typeSelection","setTypeSelection","isTypeToggled","setTypeToggled","setVersion","isVersionToggled","setVersionToggled","templates","setTemplates","template","setTemplate","templatesSvc","valid","getTemplatesFor","Modal","ModalVariant","onClose","actions","isDisabled","Form","FormGroup","isRequired","fieldId","TextInput","TextArea","selection","onTypeSelect","Gallery","hasGutter","minWidths","default","maxWidths","t","GalleryItem","TemplateItem","DeleteDesignModal","design","onDelete","onDownload","titleIconVariant","TextContent","Text","component","lineHeight","paddingLeft","Checkbox","checked","DesignList","designs","selectedDesign","sort","onSort","onEdit","onRename","onRegister","sortByIndex","setSortByIndex","renderColumnData","column","colIndex","date","modifiedOn","fromNow","DesignOriginLabel","renderActionsToggle","props","KebabToggle","preventDefault","stopPropagation","sortParams","sortable","sortBy","direction","_event","by","columnIndex","ResponsiveTable","ariaLabel","columns","width","expectedLength","minimumColumnWidth","onRowClick","row","renderHeader","Th","modifier","renderCell","Td","renderActions","ActionsColumn","actionsToggle","isSeparator","isRowSelected","DesignsPanel","onDesignSelected","onImport","showDataWarning","setShowDataWarning","refresh","setRefresh","setFiltered","filterOn","setSort","setDesigns","designToDelete","setDesignToDelete","isDeleteModalOpen","setDeleteModalOpen","designToRegister","setDesignToRegister","isRegisterModalOpen","setRegisterModalOpen","designToRename","setDesignToRename","isRenameModalOpen","setRenameModalOpen","designsSvc","downloadSvc","nav","alerts","local","doRefresh","onDownloadDesign","getDesignContent","filename","theContent","stringify","downloadToFS","trim","getConfigProperty","searchDesigns","DesignsEmptyState","emptyStateFiltered","DesignsEmptyStateFiltered","DesignsToolbar","Card","isSelectable","CardBody","actionClose","AlertActionCloseButton","setConfigProperty","deleteDesign","designDeleted","designDeleteFailed","ExportToRhosrModal","onExported","designExportedToRhosr","RenameModal","renameDesign","designRenamed","e","EmptyStateIcon","icon","AddCircleOIcon","EmptyStateSecondaryActions","ImportDropdown","Bullseye","SearchIcon","PLACEHOLDER_TYPE_OPTION","compareTo","selectOption","this","ImportDesignModal","importType","designContent","setDesignContent","fileName","setFileName","url","setUrl","setContentType","detectJsonOrYamlInfo","contentObj","openapi","info","swagger","asyncapi","$schema","detectInfo","detectXmlInfo","warn","setTheType","newType","newTypeSelection","option","FILE","file","cd","cdc","FileUpload","filenamePlaceholder","fname","URL","UrlUpload","urlPlaceholder","toggle","DropdownToggle","toggleVariant","Dropdown","action","attributes","RHOSR","isPlain","dropdownItems","DropdownItem","position","ImportFromRhosrModal","setRegistries","setDesign","getRegistries","a","b","name1","name2","localeCompare","PlusCircleIcon","previewContent","setPreviewContent","downloadError","setDownloadError","urlService","hasUrl","hasError","spinner","placeholder","fetchUrlContent","message","isReadOnly","DesignDetailsPanel","activeTabKey","setActiveTabKey","Tabs","activeKey","eventKey","Tab","TabTitleText","createdOn","format","DesignEvents","DesignHistory","events","setEvents","designsService","getEvents","DesignEventType","on","exports","setExports","originUrl","origin","originGroupId","originArtifactId","originVersion","originFilename","Divider","importTypeLabel","typeLabel","Label","color","menuActions","accept","includes","EditorContext","dirty","onSave","onRegistrationTestRegistry","onFormat","lss","designContext","setDesignContext","isActionMenuToggled","setActionMenuToggled","isExpanded","setExpanded","isTestRegistryModalOpen","setIsTestRegistryModalOpen","actionMenuToggle","menuItems","DropdownSeparator","TestRegistryModal","onSubmit","params","Breadcrumb","BreadcrumbItem","isActive","zIndex","newExpanded","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","initialFormState","hasErrors","groupValue","validated","errorMessage","artifactIdValue","isLoadingRegistries","setLoadingRegistries","formState","setFormState","defaultRegistry","helperTextInvalid","val","isExporting","setExporting","setGroup","setArtifactId","createOrUpdateArtifact","amd","Date","createEvent","determineContentType","normalizeGroupId","useRhosrInstanceServiceFactory","auth","useAuth","instanceUrl","registryUrl","createArtifact","basePath","Promise","apicurio_registry","getToken","token","endpoint","headers","createArtifactVersion","ifExists","start","end","queryParams","limit","offset","order","orderby","options","maxContentLength","responseType","transformResponse","testUpdateArtifactContent","db","createDesign","newDesign","newDesignContent","newEvent","all","add","getDesigns","toArray","matches","toLowerCase","indexOf","filteredDesigns","design1","design2","getTime","totalCount","slice","getDesign","where","equals","first","delete","r","newName","newSummary","update","updateDesignContent","reverse","eventId","stores","useDesignsService","ASYNCAPI_2_TEMPLATES","OPENAPI_3_TEMPLATES","OPENAPI_2_TEMPLATES","JSON_TEMPLATES","AVRO_TEMPLATES","PROTOBUF_TEMPLATES","resolve","startsWith","reject","useTemplatesService","useDownloadService","_w","window","chrome","link","createElement","blob","Blob","createObjectURL","download","click","navigator","msSaveBlob","File","open","githubRegex","match","org","repo","branch","useUrlService","useAlertsService","addAlert","useAlert","AlertVariant","dataTestId","designSaved","propertyName","propertyValue","localStorage","setItem","defaultValue","getItem","parse","useLocalStorageService","RHOSR_MOCK_DATA","created_at","updated_at","instance_type","RHOSR_MOCK_DATA_OF","createMockService","mockData","matching","mockWarningSent","mockWarning","useRhosrService","cfg","useConfig","srs","apiBasePath","RegistriesApi","Configuration","accessToken","res","cacheKey","cachedRegistry","cloneObject","object","propertyReplace","from","Object","keys","forEach","isJson","parseJson","toJsonString","isYaml","parseYaml","toYamlString","isXml","DOMParser","parseFromString","getElementsByTagName","isXmlWithRootNode","namespace","dom","documentElement","namespaceURI","isWsdl","isXsd","isProto","fileExtensionForDesign","split","contentTypeForDesign","formatContent","parsed","convertToValidFilename","replace","hasOrigin","contextType","substring","AXIOS","createAxiosConfig","method","validateStatus","unwrapErrorData","response","createEndpoint","baseHref","encodeURIComponent","createHref","createOptions","httpGet","successCallback","config","request","httpPostWithReturn","body","httpPut","stripTrailingSlash","endsWith"],"sourceRoot":""}