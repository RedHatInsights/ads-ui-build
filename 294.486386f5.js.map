{"version":3,"file":"294.486386f5.js","mappings":"kOA8BaA,EAA6C,SAAC,GACjD,OAA4C,IAAAC,WAAS,GAAnDC,EAAiB,KAAEC,EAAkB,KACvC,GAA4C,IAAAF,WAAS,GAAnDG,EAAiB,KAAEC,EAAkB,KACvC,GAA8D,IAAAJ,WAAS,GAArEK,EAA0B,KAAEC,EAA2B,KACzD,GAAgC,IAAAN,UAAqB,WAAnDO,EAAU,KAAEC,EAAa,KAE3BC,GAA6B,UAC7BC,GAAkB,SA+BlBC,EAAe,SAAOC,EAAqBC,GAA4B,6BAAGC,SAAO,W,iCACnF,MAAO,CAAP,EAAOL,EAAWM,aAAaH,EAAOC,GAASG,MAAK,SAACC,GACjDb,GAAmB,GACnBM,EAAIQ,WAAW,mBAAYD,EAAOE,GAAE,eACrCC,OAAM,SAAAC,GAELC,QAAQD,MAAMA,cAItB,OACI,kBAAC,aAAc,KACX,kBAAC,EAAAE,YAAW,CAACC,QAAS,EAAAC,oBAAA,MAA2BC,UAAU,WACvD,kBAAC,EAAAC,YAAW,CAACD,UAAU,iCACnB,kBAAC,EAAAE,KAAI,KACD,kBAAC,EAAAC,SAAQ,KACL,kBAAC,EAAAC,KAAI,CAACC,UAAU,KAAKL,UAAU,SAAO,gBAE1C,kBAAC,EAAAG,SAAQ,KACL,kBAAC,EAAAG,QAAO,cACO,mBACXC,cAAe,kDACfC,YAAa,qOAEb,kBAAC,EAAAC,OAAM,CAACX,QAAQ,SAAQ,kBAAC,EAAAY,mBAAkB,WAiB3D,kBAAC,KAAiB,CAACC,OAAQpC,EAAmBqC,SA7DrC,SAAOC,EAAoBC,GAAkB,6BAAG1B,SAAO,W,uCAWxE,MANuB,iBAJnB2B,EAA0B,CAC1BC,YAAaF,EAAS3B,QAAQ6B,YAC9BC,MAAM,QAAYH,EAAS3B,QAAQ8B,QAEzBA,KACVF,EAAGE,KAAOF,EAAGE,KAAKC,QAAQ,QAASL,EAAKM,MAAMD,QAAQ,WAAYL,EAAKO,SAAS,MAEhF,QAAgBL,EAAGE,KAAM,QAASJ,EAAKM,OACvC,QAAgBJ,EAAGE,KAAM,WAAYJ,EAAKO,SAAS,KAEhD,CAAP,EAAOrC,EAAWM,aAAawB,EAAME,GAAIzB,MAAK,SAACC,GAC3Cf,GAAmB,GACnBQ,EAAIQ,WAAW,mBAAYD,EAAOE,GAAE,eACrCC,OAAM,SAAAC,GAELC,QAAQD,MAAMA,cA6C4D0B,SAAU,WAAO7C,GAAmB,MAC1G,kBAAC,KAAiB,CAACmC,OAAQlC,EAAmB6C,SAAUrC,EAAcoC,SAAU,WAAO3C,GAAmB,IACxFG,WAAYA,IAC9B,kBAAC,KAAoB,CAAC8B,OAAQhC,EAA4B2C,SAAUrC,EAAcoC,SAAU,WAAOzC,GAA4B,OAEnI,kBAAC,EAAAiB,YAAW,CAACC,QAAS,EAAAC,oBAAA,QAA6BwB,UAAU,GACzD,kBAAC,EAAAC,KAAI,CAACC,WAAW,GACb,kBAAC,EAAAC,SAAQ,CAACC,KAAM,IACZ,kBAAC,KAAY,CAACf,SAAU,WAAOpC,GAAmB,IACpC8C,SA/EjB,SAACM,GACd9C,EAAc8C,GACVA,IAAS,WACTlD,GAAmB,GAEnBE,GAA4B,WClCxC,QAJ2E,WACvE,OAAQ,kBAACP,EAAQ","sources":["webpack://ads-ui/./src/app/pages/home.tsx","webpack://ads-ui/./src/app/pages/home-federated.tsx"],"sourcesContent":["import React, {FunctionComponent, useState} from \"react\";\nimport \"./home.css\";\nimport {\n    Button,\n    Flex,\n    FlexItem,\n    Grid,\n    GridItem,\n    PageSection,\n    PageSectionVariants,\n    Popover,\n    Text,\n    TextContent\n} from \"@patternfly/react-core\";\nimport {\n    CreateDesignModal,\n    DesignsPanel,\n    ImportDesignModal,\n    ImportFrom,\n    ImportFromRhosrModal\n} from \"@app/pages/components\";\nimport {CreateDesign, CreateDesignContent, Template} from \"@app/models\";\nimport {cloneObject, propertyReplace} from \"@app/utils\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport {Navigation, useNavigation} from \"@app/contexts/navigation\";\nimport {QuestionCircleIcon} from \"@patternfly/react-icons\";\n\nexport type HomePageProps = {\n};\n\nexport const HomePage: FunctionComponent<HomePageProps> = ({}: HomePageProps) => {\n    const [ isCreateModalOpen, setCreateModalOpen ] = useState(false);\n    const [ isImportModalOpen, setImportModalOpen ] = useState(false);\n    const [ isImportFromRhosrModalOpen, setImportFromRhosrModalOpen ] = useState(false);\n    const [ importType, setImportType ] = useState<ImportFrom>(ImportFrom.FILE);\n\n    const designsSvc: DesignsService = useDesignsService();\n    const nav: Navigation = useNavigation();\n\n    const onImport = (from: ImportFrom): void => {\n        setImportType(from);\n        if (from !== ImportFrom.RHOSR) {\n            setImportModalOpen(true);\n        } else {\n            setImportFromRhosrModalOpen(true);\n        }\n    };\n\n    const createDesign = async (info: CreateDesign, template: Template): Promise<void> => {\n        let dc: CreateDesignContent = {\n            contentType: template.content.contentType,\n            data: cloneObject(template.content.data)\n        }\n        if (typeof dc.data === \"string\") {\n            dc.data = dc.data.replace(\"$NAME\", info.name).replace(\"$SUMMARY\", info.summary||\"\");\n        } else {\n            propertyReplace(dc.data, \"$NAME\", info.name);\n            propertyReplace(dc.data, \"$SUMMARY\", info.summary||\"\");\n        }\n        return designsSvc.createDesign(info, dc).then((design) => {\n            setCreateModalOpen(false);\n            nav.navigateTo(`/designs/${design.id}/editor`);\n        }).catch(error => {\n            // TODO handle error\n            console.error(error);\n        });\n    };\n\n    const importDesign = async (event: CreateDesign, content: CreateDesignContent): Promise<void> => {\n        return designsSvc.createDesign(event, content).then((design) => {\n            setImportModalOpen(false);\n            nav.navigateTo(`/designs/${design.id}/editor`);\n        }).catch(error => {\n            // TODO handle error\n            console.error(error);\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <PageSection variant={PageSectionVariants.light} className=\"summary\">\n                <TextContent className=\"summary-title-and-description\">\n                    <Flex>\n                        <FlexItem>\n                            <Text component=\"h1\" className=\"title\">API Designs</Text>\n                        </FlexItem>\n                        <FlexItem>\n                            <Popover\n                                aria-label=\"More information\"\n                                headerContent={<div>API Designer Help</div>}\n                                bodyContent={<div>A tool to design your APIs (OpenAPI, AsyncAPI) and schemas (Apache Avro, Google Protobuf, JSON Schema). Manage your collection of API and schema designs below by creating, importing, and editing.</div>}\n                            >\n                                <Button variant=\"plain\"><QuestionCircleIcon /></Button>\n                            </Popover>\n                        </FlexItem>\n                    </Flex>\n                </TextContent>\n                {/*<Grid hasGutter={true}>*/}\n                {/*    <GridItem span={11}>*/}\n                {/*        <ActionList className=\"summary-actions\">*/}\n                {/*            <ActionListItem>*/}\n                {/*                <Button className=\"btn-create\" variant=\"primary\" onClick={() => setCreateModalOpen(true)}>Create a schema or API design</Button>*/}\n                {/*            </ActionListItem>*/}\n                {/*            <ActionListItem>*/}\n                {/*                <ImportDropdown onImportFromFile={onImportFromFile} onImportFromUrl={onImportFromUrl} onImportFromRhosr={onImportFromRhosr} />*/}\n                {/*            </ActionListItem>*/}\n                {/*        </ActionList>*/}\n                {/*    </GridItem>*/}\n                {/*</Grid>*/}\n                <CreateDesignModal isOpen={isCreateModalOpen} onCreate={createDesign} onCancel={() => {setCreateModalOpen(false)}} />\n                <ImportDesignModal isOpen={isImportModalOpen} onImport={importDesign} onCancel={() => {setImportModalOpen(false)}}\n                                  importType={importType} />\n                <ImportFromRhosrModal isOpen={isImportFromRhosrModalOpen} onImport={importDesign} onCancel={() => {setImportFromRhosrModalOpen(false)}} />\n            </PageSection>\n            <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                <Grid hasGutter={true}>\n                    <GridItem span={12}>\n                        <DesignsPanel onCreate={() => {setCreateModalOpen(true)}}\n                                      onImport={onImport} />\n                    </GridItem>\n                </Grid>\n            </PageSection>\n        </React.Fragment>\n    );\n}\n","import React from \"react\";\nimport {FederatedProps} from \"@app/contexts\";\nimport {HomePage, HomePageProps} from \"@app/pages/home\";\n\ntype FederatedHomePageProps = HomePageProps & FederatedProps;\n\nconst FederatedHomePage: React.FunctionComponent<FederatedHomePageProps> = () => {\n    return (<HomePage />);\n}\n\nexport default FederatedHomePage;\n"],"names":["HomePage","useState","isCreateModalOpen","setCreateModalOpen","isImportModalOpen","setImportModalOpen","isImportFromRhosrModalOpen","setImportFromRhosrModalOpen","importType","setImportType","designsSvc","nav","importDesign","event","content","Promise","createDesign","then","design","navigateTo","id","catch","error","console","PageSection","variant","PageSectionVariants","className","TextContent","Flex","FlexItem","Text","component","Popover","headerContent","bodyContent","Button","QuestionCircleIcon","isOpen","onCreate","info","template","dc","contentType","data","replace","name","summary","onCancel","onImport","isFilled","Grid","hasGutter","GridItem","span","from"],"sourceRoot":""}