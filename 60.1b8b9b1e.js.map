{"version":3,"file":"60.1b8b9b1e.js","mappings":"yOAQaA,EAA2B,SAAC,G,IAACC,EAAO,UAAEC,EAAQ,WACnDC,EAAuB,GAM3B,OAJIA,EADwB,iBAAjBF,EAAQG,KACAH,EAAQG,KAERC,KAAKC,UAAUL,EAAQG,KAAgB,KAAM,GAG5D,kBAAC,IAAM,CACHG,UAAU,cACVC,gBAAgB,OAChBL,aAAcA,EACdD,SAAUA,EACVO,QAAS,CACLC,iBAAiB,EACjBC,SAAU,S,qBCLbC,EAA8B,SAAC,G,IAACX,EAAO,UAAEC,EAAQ,WAAEK,EAAS,YAC/DM,EAAsB,gBACtBC,GAAc,IAAAC,cAEpB,IAAAC,YAAU,WACNC,QAAQC,KAAK,gDAAiDJ,EAAIK,IAAIC,iBAEtE,IAAMC,EAAqB,SAACC,GACxB,GAAIA,EAAMlB,MAA4B,sBAApBkB,EAAMlB,KAAKmB,KAA8B,CACvD,IAAIC,EAAkBF,EAAMlB,KAAKA,KAAKH,QACZ,iBAAfuB,EACHvB,EAAQwB,cAAgB,sBACxBR,QAAQC,KAAK,sEACbM,GAAa,QAAaA,KAE1BP,QAAQC,KAAK,sEACbM,GAAa,QAAaA,IAED,iBAAfA,GAA2BvB,EAAQwB,cAAgB,uBACjER,QAAQC,KAAK,+DACbM,GAAa,SAAa,QAAUA,KAExCtB,EAASsB,KAIjB,OADAE,OAAOC,iBAAiB,UAAWN,GAAe,GAC3C,WACHK,OAAOE,oBAAoB,UAAWP,GAAe,MAE1D,IAoCH,OACI,4BAAQQ,GAAG,uBACHhB,IAAMA,EACNN,UAAYA,GAAwB,gCACpCuB,OAlCW,WAEnB,IAAIC,EACwB,iBAAjB9B,EAAQG,MACfa,QAAQC,KAAK,kFACba,GAAQ,QAAa9B,EAAQG,OACE,iBAAjBH,EAAQG,MAAqBH,EAAQwB,cAAgB,sBACnER,QAAQC,KAAK,qFACba,GAAQ,SAAa,QAAU9B,EAAQG,SAEvCa,QAAQC,KAAK,iFACba,EAAQ9B,EAAQG,MAEpB,IAAM4B,EAAe,CACjBT,KAAM,uBAENnB,KAAM,CACFH,QAAS,CACLsB,KAAM,UACNQ,MAAOA,GAEXE,SAAU,CACNC,wBAAwB,EACxBC,cAAc,KAI1BtB,EAAIuB,QAAQC,cAAcC,YAAYN,EAAS,MAQvCO,IAtCDzB,EAAIK,IAAIC,mBC3CVoB,EAA4B,SAAC,G,IAACvC,EAAO,UAAEC,EAAQ,WAEpDC,EAAuB,GAEvBA,EADwB,iBAAjBF,EAAQG,KACAH,EAAQG,KAERC,KAAKC,UAAUL,EAAQG,KAAgB,KAAM,GA8FhE,OACI,kBAAC,IAAM,CACHqC,YA7Fc,SAACC,GACnBA,EAAOC,UAAUC,SAAS,CAACf,GAAI,aAC/Ba,EAAOC,UAAUE,yBAAyB,WAAY,CAClDC,SAAU,CACN,SAAU,SAAU,UAAW,UAAW,UAC1C,WAAY,MAAO,UAAW,SAAU,OAAQ,QAAS,YAE7DC,aAAc,CACV,SAAU,QAAS,QAAS,QAAS,SACrC,SAAU,SAAU,SAAU,UAAW,UACzC,WAAY,WAAY,OAAQ,SAAU,SAE9CC,UAAW,CACP,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KACrD,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3D,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACvD,KAAM,MAAO,MAAO,QAExBC,QAAS,uBACTC,QAAS,wEACTC,UAAW,CACPC,KAAM,CACF,CAAC,gBAAiB,CACdC,MAAO,CACH,gBAAiB,cACjB,YAAa,UACb,WAAY,gBAGpB,CAAC,cAAe,mBAChB,CAACC,QAAS,eAGV,CAAC,aAAc,aACf,CAAC,mBAAoB,aACrB,CAAC,WAAY,CACTD,MAAO,CACH,aAAc,WACd,WAAY,MAIpB,CAAC,uBAAwB,CAACE,MAAO,aAAcC,IAAK,yBAEpD,CAAC,2BAA4B,gBAC7B,CAAC,oBAAqB,cACtB,CAAC,MAAO,UAER,CAAC,QAAS,aAEV,CAAC,kBAAmB,kBACpB,CAAC,IAAK,CAACD,MAAO,eAAgBE,QAAS,QAASC,KAAM,YAEtD,CAAC,WAAY,UACb,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,WACjD,CAAC,IAAK,mBAEVC,QAAS,CACL,CAAC,UAAW,WACZ,CAAC,OAAQ,UAAW,SACpB,CAAC,OAAQ,UAAW,QACpB,CAAC,QAAS,YAEdC,OAAQ,CACJ,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,IAAK,CAACL,MAAO,eAAgBE,QAAS,SAAUC,KAAM,UAE3DG,WAAY,CACR,CAAC,aAAc,SACf,CAAC,OAAQ,UAAW,YACpB,CAAC,UAAW,eAIxBnB,EAAOoB,OAAOC,YAAY,WAAY,CAClCC,KAAM,KACNC,SAAS,EACTC,MAAO,CACH,CAACX,MAAO,UAAWY,WAAY,UAC/B,CAACZ,MAAO,cAAeY,WAAY,SAAUC,UAAW,UACxD,CAACb,MAAO,aAAcY,WAAY,SAAUC,UAAW,QACvD,CAACb,MAAO,kBAAmBY,WAAY,SAAUC,UAAW,QAC5D,CAACb,MAAO,UAAWY,WAAY,UAC/B,CAACZ,MAAO,SAAUY,WAAY,SAAUC,UAAW,UACnD,CAACb,MAAO,SAAUa,UAAW,cAQjC7D,UAAU,cACVC,gBAAgB,WAChBL,aAAcA,EACdD,SAAUA,EACVmE,OAAO,OACP5D,QAAS,CACLC,iBAAiB,M,WClGpB4D,EAA+B,SAAC,G,IAACrE,EAAO,UAAEC,EAAQ,WAAEK,EAAS,YAChEM,EAAsB,gBACtBC,GAAc,IAAAC,cAGpB,IAAAC,YAAU,WACN,IAAMK,EAAqB,SAACC,GACxB,GAAIA,EAAMlB,MAA4B,sBAApBkB,EAAMlB,KAAKmB,KAA8B,CACvD,IAAIC,EAAkBF,EAAMlB,KAAKA,KAAKH,QACZ,iBAAfuB,EACHvB,EAAQwB,cAAgB,sBACxBR,QAAQC,KAAK,uEACbM,GAAa,QAAaA,KAE1BP,QAAQC,KAAK,uEACbM,GAAa,QAAaA,IAED,iBAAfA,GAA2BvB,EAAQwB,cAAgB,uBACjER,QAAQC,KAAK,gEACbM,GAAa,SAAa,QAAUA,KAExCtB,EAASsB,KAIjB,OADAE,OAAOC,iBAAiB,UAAWN,GAAe,GAC3C,WACHK,OAAOE,oBAAoB,UAAWP,GAAe,MAE1D,IAoCH,OACI,4BAAQQ,GAAG,wBACHhB,IAAMA,EACNN,UAAYA,GAAwB,iCACpCuB,OAlCW,WAEnB,IAAIC,EACwB,iBAAjB9B,EAAQG,MACfa,QAAQC,KAAK,mFACba,GAAQ,QAAa9B,EAAQG,OACE,iBAAjBH,EAAQG,MAAqBH,EAAQwB,cAAgB,sBACnER,QAAQC,KAAK,sFACba,GAAQ,SAAa,QAAU9B,EAAQG,SAEvCa,QAAQC,KAAK,kFACba,EAAQ9B,EAAQG,MAEpB,IAAM4B,EAAe,CACjBT,KAAM,uBAENnB,KAAM,CACFH,QAAS,CACLsB,KAAM,WACNQ,MAAOA,GAEXE,SAAU,CACNC,wBAAwB,EACxBC,cAAc,KAI1BtB,EAAIuB,QAAQC,cAAcC,YAAYN,EAAS,MAQvCO,IAtCDzB,EAAIK,IAAIC,mBCbVmD,EAAiD,SAAC,G,IAAEC,EAAM,SAC7D,GAA0B,IAAAC,WAAS,GAAlCC,EAAS,KAAEC,EAAU,KACtB,GAAsB,IAAAF,YAArBG,EAAM,KAAEC,EAAS,KAClB,GAAoC,IAAAJ,YAAnCK,EAAa,KAAEC,EAAgB,KAChC,GAAsC,IAAAN,YAArCO,EAAc,KAAEC,EAAiB,KAClC,GAAsB,IAAAR,WAAS,GAA9BS,EAAO,KAAEC,EAAQ,KAClB,GAAgC,IAAAV,YAA/BW,EAAW,KAAEC,EAAc,KAC5B,GAAwD,IAAAZ,YAAvDa,EAAuB,KAAEC,EAA0B,KACpD,GAAoD,IAAAd,WAAS,GAA5De,EAAqB,KAAEC,EAAwB,KAChD,GAA0D,IAAAhB,WAAS,GAAlEiB,EAAwB,KAAEC,EAA2B,KAEtDC,GAAY,IAAAC,UAEZC,GAAiC,UACjCC,GAAuB,UAEvBC,GAAkB,UAGxB,IAAAhF,YAAU,WACN2D,GAAW,GACX,IAAMsB,EAAmBzB,EAAiB,SAE1CsB,EAAeI,UAAUD,GAAUE,MAAK,SAAAvB,GACpCC,EAAUD,MACXwB,OAAM,SAAAC,GAELpF,QAAQoF,MAAM,oDAA6CJ,EAAQ,MAAMI,QAG9E,CAAC7B,KAGJ,IAAAxD,YAAU,WACN,IAAMiF,EAAmBzB,EAAiB,SAC1CsB,EAAeQ,iBAAiBL,GAAUE,MAAK,SAAAlG,GAC3C8E,EAAiB9E,GACjB0E,GAAW,GACXQ,GAAS,GACTF,EAAkBhF,EAAQG,SAC3BgG,OAAM,SAAAC,GAELpF,QAAQoF,MAAM,4DAAqDJ,EAAQ,MAAMI,QAEtF,CAACzB,IAGJ,IAsF4ByB,EAtFtBE,EAAiB,SAACxE,GACpBkD,EAAkBlD,GAClBoD,GAAS,IAwBPqB,EACF,kBAACxG,EAAU,CAACC,QAAS6E,EAAgC5E,SAAUqG,IAG7DE,EACF,kBAACjE,EAAW,CAACvC,QAAS6E,EAAgC5E,SAAUqG,IAG9DG,EACF,kBAAC9F,EAAa,CAACX,QAAS6E,EAAgC5E,SAAUqG,IAGhEI,EACF,kBAACrC,EAAc,CAACrE,QAAS6E,EAAgC5E,SAAUqG,IAiBjEK,EAA0B,SAACC,EAAkBhF,GAE/CZ,QAAQuC,IAAI,UAAG3B,EAAE,8BAAsBgF,KAGrCC,EAA6B,SAACC,EAAoBC,EAA6BC,GACjFxB,GAAyB,GAEzBF,EAA2B,CAAEwB,SAAQ,EAAEC,QAAO,EAAEC,WAAU,IAC1DlB,EAAqBmB,UAAUH,GAC1BI,0BAA0BH,EAASC,EAAYjC,GAC/CmB,MAAK,WACFiB,QACDhB,OAAM,SAACC,GACNe,GAAsBf,OAI5Be,GAAwB,SAACf,GAC3BV,GAA4B,GAC5BN,EAAegB,GACfZ,GAAyB,IAGvB4B,GAAyB,WAC3B1B,GAA4B,GAC5BF,GAAyB,GACzBJ,OAAeiC,IA4BbC,GAAkB,SAAClB,G,MACrB,OAAIb,EACO,kBAAC,EAAAgC,QAAO,CAACjH,UAAU,YACnB8F,EACA,kBAAC,EAAAoB,gBAAe,CAACC,cAAY,GAChB,2BAAfrB,EAAMsB,OAAiD,QAAZ,EAAAtB,EAAMuB,cAAM,eAAEC,QAAS,EAC/DxB,EAAMuB,OAAOE,KAAI,SAACC,EAAOC,GACrB,yBAAC,aAAc,CAACC,IAAK,SAAWD,GAC5B,kBAAC,EAAAE,qBAAoB,KACjB,kBAAC,EAAAC,oBAAmB,aACpB,kBAAC,EAAAC,2BAA0B,KAAEL,EAAMM,aACnC,kBAAC,EAAAF,oBAAmB,gBACpB,kBAAC,EAAAC,2BAA0B,KAAC,6BAAML,EAAMO,WAE5C,kBAAC,EAAAC,QAAO,UAEZ,kBAAC,EAAAC,UAAS,KACV,kBAAC,EAAAC,cAAa,CAAC5G,GAAG,gBAAgBwE,EAAMqC,UAKjD,uFAGX,OACI,kBAAC,KAAS,CAACC,UAAWjE,GAClB,kBAAC,EAAAkE,YAAW,CAACC,QAAS,EAAAC,oBAAA,MAA2BjH,GAAG,mBAChD,kBAAC,KAAa,CACV+C,OAAQA,EACRmE,MAAO7D,EACP8D,OAxID,WACXlD,EAAemD,qBAAoB,oBAC5BnE,GAA8B,CACjC1E,KAAM4E,KACPmB,MAAK,WACJtB,GAAU,oBACHD,GAAM,CACTsE,WAAY,IAAIC,WAErB/C,OAAM,SAAAC,GAELpF,QAAQoF,MAAM,+CAAgDA,OA8HtD+C,SAzHC,WACbpD,EAAIqD,WAAW,MAyHHC,YAAa5D,EACb6D,qBAAsBzC,EACtB0C,0BAA2B,SAACnD,GAA+B,OAAAe,GAAsBf,IACjFoD,gBAAiBzE,KAIzB,kBAAC,EAAA4D,YAAW,CAACC,QAAS,EAAAC,oBAAA,MAA2BjH,GAAG,kBAChD,kBAAC,EAAA6H,OAAM,CAACC,WAAYjE,EAA0BkE,UAAQ,EAACC,SAAS,SAC5D,kBAAC,EAAAC,cAAa,CAACC,cAnEH1D,EAmEoCjB,EAjExD,kBAAC,EAAA4E,mBAAkB,CAACC,aAAW,EAACC,SAAUtD,EAAyBuD,QAAQ,MAAMtI,GAAG,wBAChF,kBAAC,EAAAuI,WAAU,KACP,wBAAI7J,UAAU,sBAAsB8J,SAAU3E,EAA2B,GAAK,EAAG7E,IAAK+E,GAAgB,+BAGtG,kBAAC,EAAA0E,cAAa,KACV,kBAAC,EAAAC,OAAM,CAAC1B,QAAQ,YAAY2B,QAAS,WAAM,OAAA1D,EACvCxB,MAAAA,OAAuB,EAAvBA,EAAyByB,SACzBzB,MAAAA,OAAuB,EAAvBA,EAAyB0B,QACzB1B,MAAAA,OAAuB,EAAvBA,EAAyB2B,cAC5B,SAED,kBAAC,EAAAwD,kBAAiB,CAACD,QAASnD,OAGpC,kBAAC,EAAAkB,QAAO,MACR,kBAAC,EAAAmC,gBAAe,KACXnD,GAAgBlB,OAiDb,yBAAK9F,UAAU,kBA/G3BqE,MAAAA,OAAM,EAANA,EAAQrD,QAAS,YACVmF,GACA9B,MAAAA,OAAM,EAANA,EAAQrD,QAAS,aACjBoF,GACA/B,MAAAA,OAAM,EAANA,EAAQrD,QAAS,aACjBkF,EAKJD,QC9Hf,QAJ+E,SAACmE,GAC5E,OAAQ,kBAACpG,GAAU,WAAKoG","sources":["webpack://ads-ui/./src/app/editors/editor-text.tsx","webpack://ads-ui/./src/app/editors/editor-openapi.tsx","webpack://ads-ui/./src/app/editors/editor-proto.tsx","webpack://ads-ui/./src/app/editors/editor-asyncapi.tsx","webpack://ads-ui/./src/app/pages/editor.tsx","webpack://ads-ui/./src/app/pages/editor-federated.tsx"],"sourcesContent":["import React from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport Editor from \"@monaco-editor/react\";\n\n/**\n * Simple text editor.  This is a fallback editor for any text based content\n * we might want to edit.\n */\nexport const TextEditor: DesignEditor = ({content, onChange}: EditorProps) => {\n    let defaultValue: string = \"\";\n    if (typeof content.data === \"string\") {\n        defaultValue = content.data as string;\n    } else {\n        defaultValue = JSON.stringify(content.data as string, null, 4);\n    }\n    return (\n        <Editor\n            className=\"text-editor\"\n            defaultLanguage=\"json\"\n            defaultValue={defaultValue}\n            onChange={onChange}\n            options={{\n                automaticLayout: true,\n                wordWrap: 'on'\n            }}\n        />\n    );\n};\n","import React, {RefObject, useEffect} from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport \"./editor-openapi.css\";\nimport {Config, useConfig} from \"@rhoas/app-services-ui-shared\";\nimport {parseJson, parseYaml, toJsonString, toYamlString} from \"@app/utils\";\nimport {ContentTypes} from \"@app/models\";\n\n\nexport type OpenApiEditorProps = {\n    className?: string;\n} & EditorProps;\n\n\n/**\n * OpenAPI editor.  The actual editor logic is written in Angular as a separate application\n * and loaded via an iframe.  This component is a bridge - it acts as a React component that\n * bridges to the iframe.\n */\nexport const OpenApiEditor: DesignEditor = ({content, onChange, className}: OpenApiEditorProps) => {\n    const ref: RefObject<any> = React.createRef();\n    const cfg: Config = useConfig();\n\n    useEffect(() => {\n        console.info(\"[OpenApiEditor] URL location of ads-editors: \", cfg.ads.editorsBasePath);\n\n        const eventListener: any = (event) => {\n            if (event.data && event.data.type === \"apicurio_onChange\") {\n                let newContent: any = event.data.data.content;\n                if (typeof newContent === \"object\") {\n                    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n                        console.info(\"[OpenApiEditor] New content is 'object', converting to YAML string\");\n                        newContent = toYamlString(newContent);\n                    } else {\n                        console.info(\"[OpenApiEditor] New content is 'object', converting to JSON string\");\n                        newContent = toJsonString(newContent);\n                    }\n                } else if (typeof newContent === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n                    console.info(\"[OpenApiEditor] Converting from JSON string to YAML string.\")\n                    newContent = toYamlString(parseJson(newContent as string));\n                }\n                onChange(newContent);\n            }\n        };\n        window.addEventListener(\"message\", eventListener, false);\n        return () => {\n            window.removeEventListener(\"message\", eventListener, false);\n        };\n    }, []);\n\n    const editorAppUrl = (): string => {\n        return cfg.ads.editorsBasePath;\n    };\n\n    const onEditorLoaded = (): void => {\n        // Now it's OK to post a message to iframe with the content to edit.\n        let value: string;\n        if (typeof content.data === \"object\") {\n            console.info(\"[OpenApiEditor] Loading editor data from 'object' - converting to JSON string.\");\n            value = toJsonString(content.data);\n        } else if (typeof content.data === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n            console.info(\"[OpenApiEditor] Loading editor data from 'string' - converting from YAML to JSON.\");\n            value = toJsonString(parseYaml(content.data as string));\n        } else {\n            console.info(\"[OpenApiEditor] Loading editor data from 'string' without content conversion.\");\n            value = content.data as string;\n        }\n        const message: any = {\n            type: \"apicurio-editingInfo\",\n            // tslint:disable-next-line:object-literal-sort-keys\n            data: {\n                content: {\n                    type: \"OPENAPI\",\n                    value: value\n                },\n                features: {\n                    allowCustomValidations: false,\n                    allowImports: false\n                }\n            }\n        }\n        ref.current.contentWindow.postMessage(message, \"*\");\n    };\n\n    return (\n        <iframe id=\"openapi-editor-frame\"\n                ref={ ref }\n                className={ className ? className : \"editor-openapi-flex-container\" }\n                onLoad={ onEditorLoaded }\n                src={ editorAppUrl() } />\n    );\n};\n","import React from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport Editor from \"@monaco-editor/react\";\n\n/**\n * Protobuf text editor with support for syntax hint and highlight.\n */\nexport const ProtoEditor: DesignEditor = ({content, onChange}: EditorProps) => {\n\n    let defaultValue: string = \"\";\n    if (typeof content.data === \"string\") {\n        defaultValue = content.data as string;\n    } else {\n        defaultValue = JSON.stringify(content.data as string, null, 4);\n    }\n\n    const registerProto = (monaco) => {\n        monaco.languages.register({id: 'protobuf'});\n        monaco.languages.setMonarchTokensProvider('protobuf', {\n            keywords: [\n                'import', 'option', 'message', 'package', 'service',\n                'optional', 'rpc', 'returns', 'return', 'true', 'false', 'required'\n            ],\n            typeKeywords: [\n                'double', 'float', 'int32', 'int64', 'uint32',\n                'uint64', 'sint32', 'sint64', 'fixed32', 'fixed64',\n                'sfixed32', 'sfixed64', 'bool', 'string', 'bytes'\n            ],\n            operators: [\n                '=', '>', '<', '!', '~', '?', ':', '==', '<=', '>=', '!=',\n                '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%',\n                '<<', '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=', '^=',\n                '%=', '<<=', '>>=', '>>>='\n            ],\n            symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n            escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n            tokenizer: {\n                root: [\n                    [/[a-z_$][\\w$]*/, {\n                        cases: {\n                            '@typeKeywords': 'typeKeyword',\n                            '@keywords': 'keyword',\n                            '@default': 'identifier'\n                        }\n                    }],\n                    [/[A-Z][\\w$]*/, 'type.identifier'],\n                    {include: '@whitespace'},\n\n                    // delimiters and operators\n                    [/[{}()\\[\\]]/, '@brackets'],\n                    [/[<>](?!@symbols)/, '@brackets'],\n                    [/@symbols/, {\n                        cases: {\n                            '@operators': 'operator',\n                            '@default': ''\n                        }\n                    }],\n                    // @ annotations.\n                    [/@\\s*[a-zA-Z_$][\\w$]*/, {token: 'annotation', log: 'annotation token: $0'}],\n                    // numbers\n                    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n                    [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n                    [/\\d+/, 'number'],\n                    // delimiter: after number because of .\\d floats\n                    [/[;,.]/, 'delimiter'],\n                    // strings\n                    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n                    [/\"/, {token: 'string.quote', bracket: '@open', next: '@string'}],\n                    // characters\n                    [/'[^\\\\']'/, 'string'],\n                    [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n                    [/'/, 'string.invalid']\n                ],\n                comment: [\n                    [/[^\\/*]+/, 'comment'],\n                    [/\\/\\*/, 'comment', '@push'], // nested comment\n                    [\"\\\\*/\", 'comment', '@pop'],\n                    [/[\\/*]/, 'comment']\n                ],\n                string: [\n                    [/[^\\\\\"]+/, 'string'],\n                    [/@escapes/, 'string.escape'],\n                    [/\\\\./, 'string.escape.invalid'],\n                    [/\"/, {token: 'string.quote', bracket: '@close', next: '@pop'}]\n                ],\n                whitespace: [\n                    [/[ \\t\\r\\n]+/, 'white'],\n                    [/\\/\\*/, 'comment', '@comment'],\n                    [/\\/\\/.*$/, 'comment']\n                ]\n            }\n        });\n        monaco.editor.defineTheme('protobuf', {\n            base: 'vs',\n            inherit: true,\n            rules: [\n                {token: 'keyword', foreground: 'DB2121'},\n                {token: 'typeKeyword', foreground: 'F84842', fontStyle: 'italic'},\n                {token: 'identifier', foreground: '0C5ED7', fontStyle: 'bold'},\n                {token: 'type.identifier', foreground: '00CA8C', fontStyle: 'bold'},\n                {token: 'comment', foreground: '7A7A7A'},\n                {token: 'number', foreground: '000000', fontStyle: 'italic'},\n                {token: 'string', fontStyle: 'italic'}\n            ]\n        });\n    }\n\n    return (\n        <Editor\n            beforeMount={registerProto}\n            className=\"text-editor\"\n            defaultLanguage=\"protobuf\"\n            defaultValue={defaultValue}\n            onChange={onChange}\n            height=\"100%\"\n            options={{\n                automaticLayout: true\n            }}\n        />\n    );\n};\n","import React, {RefObject, useEffect} from \"react\";\nimport {Editor as DesignEditor, EditorProps} from \"@app/editors/editor-types\";\nimport \"./editor-asyncapi.css\";\nimport {Config, useConfig} from \"@rhoas/app-services-ui-shared\";\nimport {parseJson, parseYaml, toJsonString, toYamlString} from \"@app/utils\";\nimport {ContentTypes} from \"@app/models\";\n\n\nexport type AsyncApiEditorProps = {\n    className?: string;\n} & EditorProps;\n\n\n/**\n * AsyncAPI editor.  The actual editor logic is written in Angular as a separate application\n * and loaded via an iframe.  This component is a bridge - it acts as a React component that\n * bridges to the iframe.\n */\nexport const AsyncApiEditor: DesignEditor = ({content, onChange, className}: AsyncApiEditorProps) => {\n    const ref: RefObject<any> = React.createRef();\n    const cfg: Config = useConfig();\n\n    // TODO we have a lot of common functionality between the asyncapi and openapi editors.  Need to share!\n    useEffect(() => {\n        const eventListener: any = (event) => {\n            if (event.data && event.data.type === \"apicurio_onChange\") {\n                let newContent: any = event.data.data.content;\n                if (typeof newContent === \"object\") {\n                    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n                        console.info(\"[AsyncApiEditor] New content is 'object', converting to YAML string\");\n                        newContent = toYamlString(newContent);\n                    } else {\n                        console.info(\"[AsyncApiEditor] New content is 'object', converting to JSON string\");\n                        newContent = toJsonString(newContent);\n                    }\n                } else if (typeof newContent === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n                    console.info(\"[AsyncApiEditor] Converting from JSON string to YAML string.\")\n                    newContent = toYamlString(parseJson(newContent as string));\n                }\n                onChange(newContent);\n            }\n        };\n        window.addEventListener(\"message\", eventListener, false);\n        return () => {\n            window.removeEventListener(\"message\", eventListener, false);\n        };\n    }, []);\n\n    const editorAppUrl = (): string => {\n        return cfg.ads.editorsBasePath;\n    };\n\n    const onEditorLoaded = (): void => {\n        // Now it's OK to post a message to iframe with the content to edit.\n        let value: string;\n        if (typeof content.data === \"object\") {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'object' - converting to JSON string.\");\n            value = toJsonString(content.data);\n        } else if (typeof content.data === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'string' - converting from YAML to JSON.\");\n            value = toJsonString(parseYaml(content.data as string));\n        } else {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'string' without content conversion.\");\n            value = content.data as string;\n        }\n        const message: any = {\n            type: \"apicurio-editingInfo\",\n            // tslint:disable-next-line:object-literal-sort-keys\n            data: {\n                content: {\n                    type: \"ASYNCAPI\",\n                    value: value\n                },\n                features: {\n                    allowCustomValidations: false,\n                    allowImports: false\n                }\n            }\n        }\n        ref.current.contentWindow.postMessage(message, \"*\");\n    };\n\n    return (\n        <iframe id=\"asyncapi-editor-frame\"\n                ref={ ref }\n                className={ className ? className : \"editor-asyncapi-flex-container\" }\n                onLoad={ onEditorLoaded }\n                src={ editorAppUrl() } />\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport \"./editor.css\";\nimport { Button, CodeBlock, CodeBlockCode, DescriptionList, DescriptionListDescription, DescriptionListGroup, DescriptionListTerm, Divider, Drawer, DrawerActions, DrawerCloseButton, DrawerContent, DrawerHead, DrawerPanelBody, DrawerPanelContent, List, ListItem, PageSection, PageSectionVariants, SimpleListGroup, Spinner } from \"@patternfly/react-core\";\nimport { DesignsService, useDesignsService, useRhosrInstanceServiceFactory } from \"@app/services\";\nimport { ArtifactTypes, Design, DesignContent } from \"@app/models\";\nimport { IsLoading } from \"@app/components\";\nimport { EditorContext } from \"@app/pages/components\";\nimport { OpenApiEditor, ProtoEditor, TextEditor } from \"@app/editors\";\nimport { Navigation, useNavigation } from \"@app/contexts/navigation\";\nimport { AsyncApiEditor } from \"@app/editors/editor-asyncapi\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\n\nexport type EditorPageProps = {\n    params: any;\n    toggleExpandDryRunIssuesDrawer: (isExpanded: boolean) => void;\n};\n\nexport interface DryRunErrorResponse {\n    causes: [\n        {\n            description: string,\n            context: string\n        }\n    ],\n    message: string,\n    error_code: number,\n    detail: string,\n    name: string\n}\n\ninterface DryRunRequestParams {\n    registry: Registry\n    groupId: string | undefined\n    artifactId: string\n}\n\nexport const EditorPage: FunctionComponent<EditorPageProps> = ({ params }: EditorPageProps) => {\n    const [isLoading, setLoading] = useState(true);\n    const [design, setDesign] = useState<Design>();\n    const [designContent, setDesignContent] = useState<DesignContent>();\n    const [currentContent, setCurrentContent] = useState<any>();\n    const [isDirty, setDirty] = useState(false);\n    const [dryRunError, setDryRunError] = useState<DryRunErrorResponse>();\n    const [registryDryRunArgsCache, setRegistryDryRunArgsCache] = useState<DryRunRequestParams>();\n    const [isDryRunIssuesLoading, setDryRunIssuesIsLoading] = useState(false);\n    const [isDryRunIssuesDrawerOpen, setDryRunIssuesDrawerIsOpen] = useState(false);\n\n    const drawerRef = useRef<HTMLDivElement>();\n\n    const designsService: DesignsService = useDesignsService();\n    const rhosrInstanceFactory = useRhosrInstanceServiceFactory();\n\n    const nav: Navigation = useNavigation();\n\n    // Load the design based on the design ID (from the path param).\n    useEffect(() => {\n        setLoading(true);\n        const designId: string = params[\"designId\"];\n\n        designsService.getDesign(designId).then(design => {\n            setDesign(design);\n        }).catch(error => {\n            // TODO handle error\n            console.error(`[EditorPage] Failed to get design with id ${designId}: `, error);\n        })\n\n    }, [params]);\n\n    // Load the design content\n    useEffect(() => {\n        const designId: string = params[\"designId\"];\n        designsService.getDesignContent(designId).then(content => {\n            setDesignContent(content);\n            setLoading(false);\n            setDirty(false);\n            setCurrentContent(content.data);\n        }).catch(error => {\n            // TODO handle error\n            console.error(`[EditorPage] Failed to get design content with id ${designId}: `, error);\n        });\n    }, [design])\n\n    // Called when the user makes an edit in the editor.\n    const onEditorChange = (value: any): void => {\n        setCurrentContent(value);\n        setDirty(true);\n    }\n\n    // Called when the user makes an edit in the editor.\n    const onSave = (): void => {\n        designsService.updateDesignContent({\n            ...designContent as DesignContent,\n            data: currentContent\n        }).then(() => {\n            setDesign({\n                ...design,\n                modifiedOn: new Date()\n            } as Design);\n        }).catch(error => {\n            // TODO handle error\n            console.error(\"[EditorPage] Failed to save design content: \", error);\n        });\n    };\n\n    // Called when the user makes an edit in the editor.\n    const onCancel = (): void => {\n        nav.navigateTo(\"/\");\n    };\n\n    const textEditor: React.ReactElement = (\n        <TextEditor content={designContent as DesignContent} onChange={onEditorChange} />\n    );\n\n    const protoEditor: React.ReactElement = (\n        <ProtoEditor content={designContent as DesignContent} onChange={onEditorChange} />\n    );\n\n    const openapiEditor: React.ReactElement = (\n        <OpenApiEditor content={designContent as DesignContent} onChange={onEditorChange} />\n    );\n\n    const asyncapiEditor: React.ReactElement = (\n        <AsyncApiEditor content={designContent as DesignContent} onChange={onEditorChange} />\n    );\n\n    const editor = (): React.ReactElement => {\n        if (design?.type === ArtifactTypes.OPENAPI) {\n            return openapiEditor;\n        } else if (design?.type === ArtifactTypes.ASYNCAPI) {\n            return asyncapiEditor;\n        } else if (design?.type === ArtifactTypes.PROTOBUF) {\n            return protoEditor;\n        }\n\n        // TODO create different text editors depending on the content type?  Or assume\n        // that the text editor can configure itself appropriately?\n        return textEditor;\n    };\n\n    const onResizeDryRunSidepanel = (newWidth: number, id: string) => {\n        // eslint-disable-next-line no-console\n        console.log(`${id} has new width of: ${newWidth}`);\n    };\n\n    const artifactRegistrationDryRun = (registry: Registry, groupId: string | undefined, artifactId: string) => {\n        setDryRunIssuesIsLoading(true);\n        // cache registry used during dry-run to allow for a retry from the sidepanel\n        setRegistryDryRunArgsCache({ registry, groupId, artifactId });\n        rhosrInstanceFactory.createFor(registry)\n            .testUpdateArtifactContent(groupId, artifactId, currentContent)\n            .then(() => {\n                openDryRunIssuesPanel();\n            }).catch((error: DryRunErrorResponse) => {\n                openDryRunIssuesPanel(error);\n            });\n    }\n\n    const openDryRunIssuesPanel = (error?: DryRunErrorResponse) => {\n        setDryRunIssuesDrawerIsOpen(true);\n        setDryRunError(error);\n        setDryRunIssuesIsLoading(false);\n    }\n\n    const closeDryRunIssuesPanel = () => {\n        setDryRunIssuesDrawerIsOpen(false);\n        setDryRunIssuesIsLoading(false);\n        setDryRunError(undefined);\n    }\n\n    const renderPanelContent = (error?: DryRunErrorResponse) => {\n        return (\n            <DrawerPanelContent isResizable onResize={onResizeDryRunSidepanel} minSize='35%' id=\"dry-run-issues-panel\">\n                <DrawerHead>\n                    <h2 className=\"pf-c-title pf-m-2xl\" tabIndex={isDryRunIssuesDrawerOpen ? 0 : -1} ref={drawerRef as any}>\n                        Registration dry-run issues\n                    </h2>\n                    <DrawerActions>\n                        <Button variant='secondary' onClick={() => artifactRegistrationDryRun(\n                            registryDryRunArgsCache?.registry as Registry,\n                            registryDryRunArgsCache?.groupId,\n                            registryDryRunArgsCache?.artifactId as string\n                        )\n                        }>Retry</Button>\n                        <DrawerCloseButton onClick={closeDryRunIssuesPanel} />\n                    </DrawerActions>\n                </DrawerHead>\n                <Divider />\n                <DrawerPanelBody>\n                    {renderPanelBody(error)}\n                </DrawerPanelBody>\n            </DrawerPanelContent>\n        )\n    };\n\n    const renderPanelBody = (error?: DryRunErrorResponse) => {\n        if (isDryRunIssuesLoading) {\n            return <Spinner className='spinner' />\n        } else if (error) {\n            return <DescriptionList isHorizontal>\n                {error.name === 'RuleViolationException' && error.causes?.length > 0 ?\n                    error.causes.map((cause, i) =>\n                        <React.Fragment key={'issue-' + i}>\n                            <DescriptionListGroup>\n                                <DescriptionListTerm>Code</DescriptionListTerm>\n                                <DescriptionListDescription>{cause.description}</DescriptionListDescription>\n                                <DescriptionListTerm>Context</DescriptionListTerm>\n                                <DescriptionListDescription><pre>{cause.context}</pre></DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <Divider />\n                        </React.Fragment>\n                    ) : <CodeBlock>\n                        <CodeBlockCode id=\"code-content\">{error.detail}</CodeBlockCode>\n                    </CodeBlock>}\n            </DescriptionList>\n        }\n\n        return <p>Artifact registration dry-run completed with no issues.</p>;\n    }\n\n    return (\n        <IsLoading condition={isLoading}>\n            <PageSection variant={PageSectionVariants.light} id=\"section-context\">\n                <EditorContext\n                    design={design as Design}\n                    dirty={isDirty}\n                    onSave={onSave}\n                    onCancel={onCancel}\n                    isPanelOpen={isDryRunIssuesDrawerOpen}\n                    onRegistrationDryRun={artifactRegistrationDryRun}\n                    onExpandDryRunCausesPanel={(error: DryRunErrorResponse) => openDryRunIssuesPanel(error)}\n                    artifactContent={currentContent}\n\n                />\n            </PageSection>\n            <PageSection variant={PageSectionVariants.light} id=\"section-editor\">\n                <Drawer isExpanded={isDryRunIssuesDrawerOpen} isInline position='right'>\n                    <DrawerContent panelContent={renderPanelContent(dryRunError)}>\n                        <div className=\"editor-parent\">\n                            {editor()}\n                        </div>\n                    </DrawerContent>\n                </Drawer>\n            </PageSection>\n        </IsLoading>\n    );\n}","import React from \"react\";\nimport {FederatedProps} from \"@app/contexts\";\nimport {EditorPage, EditorPageProps} from \"@app/pages/editor\";\n\ntype FederatedEditorPageProps = EditorPageProps & FederatedProps;\n\nconst FederatedEditorPage: React.FunctionComponent<FederatedEditorPageProps> = (props: FederatedEditorPageProps) => {\n    return (<EditorPage {...props}/>);\n}\n\nexport default FederatedEditorPage;\n"],"names":["TextEditor","content","onChange","defaultValue","data","JSON","stringify","className","defaultLanguage","options","automaticLayout","wordWrap","OpenApiEditor","ref","cfg","useConfig","useEffect","console","info","ads","editorsBasePath","eventListener","event","type","newContent","contentType","window","addEventListener","removeEventListener","id","onLoad","value","message","features","allowCustomValidations","allowImports","current","contentWindow","postMessage","src","ProtoEditor","beforeMount","monaco","languages","register","setMonarchTokensProvider","keywords","typeKeywords","operators","symbols","escapes","tokenizer","root","cases","include","token","log","bracket","next","comment","string","whitespace","editor","defineTheme","base","inherit","rules","foreground","fontStyle","height","AsyncApiEditor","EditorPage","params","useState","isLoading","setLoading","design","setDesign","designContent","setDesignContent","currentContent","setCurrentContent","isDirty","setDirty","dryRunError","setDryRunError","registryDryRunArgsCache","setRegistryDryRunArgsCache","isDryRunIssuesLoading","setDryRunIssuesIsLoading","isDryRunIssuesDrawerOpen","setDryRunIssuesDrawerIsOpen","drawerRef","useRef","designsService","rhosrInstanceFactory","nav","designId","getDesign","then","catch","error","getDesignContent","onEditorChange","textEditor","protoEditor","openapiEditor","asyncapiEditor","onResizeDryRunSidepanel","newWidth","artifactRegistrationDryRun","registry","groupId","artifactId","createFor","testUpdateArtifactContent","openDryRunIssuesPanel","closeDryRunIssuesPanel","undefined","renderPanelBody","Spinner","DescriptionList","isHorizontal","name","causes","length","map","cause","i","key","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","description","context","Divider","CodeBlock","CodeBlockCode","detail","condition","PageSection","variant","PageSectionVariants","dirty","onSave","updateDesignContent","modifiedOn","Date","onCancel","navigateTo","isPanelOpen","onRegistrationDryRun","onExpandDryRunCausesPanel","artifactContent","Drawer","isExpanded","isInline","position","DrawerContent","panelContent","DrawerPanelContent","isResizable","onResize","minSize","DrawerHead","tabIndex","DrawerActions","Button","onClick","DrawerCloseButton","DrawerPanelBody","props"],"sourceRoot":""}