{"version":3,"file":"60.72f54510.js","mappings":"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","sources":["webpack://ads-ui/./src/app/editors/editor-text.tsx","webpack://ads-ui/./src/app/editors/editor-openapi.tsx","webpack://ads-ui/./src/app/editors/editor-asyncapi.tsx","webpack://ads-ui/./src/app/editors/editor-proto.tsx","webpack://ads-ui/./src/app/pages/editor.tsx","webpack://ads-ui/./src/app/pages/editor-federated.tsx"],"sourcesContent":["import React, { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { Editor as DesignEditor, EditorProps } from \"@app/editors/editor-types\";\nimport Editor from \"@monaco-editor/react\";\nimport { ContentTypes, DesignContent } from \"@app/models\";\nimport { editor } from \"monaco-editor\";\nimport { contentToString } from \"@app/utils\";\nimport IStandaloneCodeEditor = editor.IStandaloneCodeEditor;\n\n\nexport const designContentToString = (content: DesignContent): string => {\n    return contentToString(content.data);\n};\n\n\nexport const designContentToLanguage = (content: DesignContent): string => {\n    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n        return \"yaml\";\n    } else if (content.contentType === ContentTypes.APPLICATION_XML) {\n        return \"xml\";\n    } else if (content.contentType === ContentTypes.TEXT_XML) {\n        return \"xml\";\n    } else if (content.contentType === ContentTypes.APPLICATION_WSDL) {\n        return \"xml\";\n    }\n    return \"json\";\n};\n\n\n/**\n * Simple text editor.  This is a fallback editor for any text based content\n * we might want to edit.\n */\nexport const TextEditor: DesignEditor = ({ content, onChange }: EditorProps) => {\n    const defaultValue: string = designContentToString(content);\n    const defaultLanguage: string = designContentToLanguage(content);\n\n    const [value, setValue] = useState<string>(defaultValue);\n    const [language, setLanguage] = useState<string>(defaultLanguage);\n\n    const editorRef: MutableRefObject<IStandaloneCodeEditor|undefined> = useRef<IStandaloneCodeEditor>();\n\n    useEffect(() => {\n        const contentString: string = designContentToString(content);\n        const lang: string = designContentToLanguage(content);\n\n        setValue(contentString);\n        setLanguage(lang);\n\n        if (editorRef.current) {\n            editorRef.current?.setValue(contentString);\n        }\n    }, [content]);\n\n    return (\n        <Editor\n            className=\"text-editor\"\n            language={language}\n            value={value}\n            onChange={onChange}\n            options={{\n                automaticLayout: true,\n                wordWrap: \"on\"\n            }}\n            onMount={(editor) => {\n                editorRef.current = editor;\n            }}\n        />\n    );\n};\n","import React, { RefObject, useEffect } from \"react\";\nimport { Editor as DesignEditor, EditorProps } from \"@app/editors/editor-types\";\nimport \"./editor-openapi.css\";\nimport { Config, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { parseJson, parseYaml, toJsonString, toYamlString } from \"@app/utils\";\nimport { ContentTypes } from \"@app/models\";\n\n\nexport type OpenApiEditorProps = {\n    className?: string;\n} & EditorProps;\n\n\n/**\n * OpenAPI editor.  The actual editor logic is written in Angular as a separate application\n * and loaded via an iframe.  This component is a bridge - it acts as a React component that\n * bridges to the iframe.\n */\nexport const OpenApiEditor: DesignEditor = ({ content, onChange, className }: OpenApiEditorProps) => {\n    const ref: RefObject<any> = React.createRef();\n    const cfg: Config = useConfig();\n\n    useEffect(() => {\n        console.info(\"[OpenApiEditor] URL location of ads-editors: \", cfg.ads.editorsBasePath);\n\n        const eventListener: any = (event) => {\n            if (event.data && event.data.type === \"apicurio_onChange\") {\n                let newContent: any = event.data.data.content;\n                if (typeof newContent === \"object\") {\n                    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n                        console.info(\"[OpenApiEditor] New content is 'object', converting to YAML string\");\n                        newContent = toYamlString(newContent);\n                    } else {\n                        console.info(\"[OpenApiEditor] New content is 'object', converting to JSON string\");\n                        newContent = toJsonString(newContent);\n                    }\n                } else if (typeof newContent === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n                    console.info(\"[OpenApiEditor] Converting from JSON string to YAML string.\");\n                    newContent = toYamlString(parseJson(newContent as string));\n                }\n                onChange(newContent);\n            }\n        };\n        window.addEventListener(\"message\", eventListener, false);\n        return () => {\n            window.removeEventListener(\"message\", eventListener, false);\n        };\n    }, []);\n\n    const editorAppUrl = (): string => {\n        return cfg.ads.editorsBasePath;\n    };\n\n    const onEditorLoaded = (): void => {\n        // Now it's OK to post a message to iframe with the content to edit.\n        let value: string;\n        if (typeof content.data === \"object\") {\n            console.info(\"[OpenApiEditor] Loading editor data from 'object' - converting to JSON string.\");\n            value = toJsonString(content.data);\n        } else if (typeof content.data === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n            console.info(\"[OpenApiEditor] Loading editor data from 'string' - converting from YAML to JSON.\");\n            value = toJsonString(parseYaml(content.data as string));\n        } else {\n            console.info(\"[OpenApiEditor] Loading editor data from 'string' without content conversion.\");\n            value = content.data as string;\n        }\n        const message: any = {\n            type: \"apicurio-editingInfo\",\n            // tslint:disable-next-line:object-literal-sort-keys\n            data: {\n                content: {\n                    type: \"OPENAPI\",\n                    value: value\n                },\n                features: {\n                    allowCustomValidations: false,\n                    allowImports: false\n                }\n            }\n        };\n        ref.current.contentWindow.postMessage(message, \"*\");\n    };\n\n    return (\n        <iframe id=\"openapi-editor-frame\"\n            ref={ ref }\n            className={ className ? className : \"editor-openapi-flex-container\" }\n            onLoad={ onEditorLoaded }\n            src={ editorAppUrl() } />\n    );\n};\n","import React, { RefObject, useEffect } from \"react\";\nimport { Editor as DesignEditor, EditorProps } from \"@app/editors/editor-types\";\nimport \"./editor-asyncapi.css\";\nimport { Config, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { parseJson, parseYaml, toJsonString, toYamlString } from \"@app/utils\";\nimport { ContentTypes } from \"@app/models\";\n\n\nexport type AsyncApiEditorProps = {\n    className?: string;\n} & EditorProps;\n\n\n/**\n * AsyncAPI editor.  The actual editor logic is written in Angular as a separate application\n * and loaded via an iframe.  This component is a bridge - it acts as a React component that\n * bridges to the iframe.\n */\nexport const AsyncApiEditor: DesignEditor = ({ content, onChange, className }: AsyncApiEditorProps) => {\n    const ref: RefObject<any> = React.createRef();\n    const cfg: Config = useConfig();\n\n    // TODO we have a lot of common functionality between the asyncapi and openapi editors.  Need to share!\n    useEffect(() => {\n        const eventListener: any = (event) => {\n            if (event.data && event.data.type === \"apicurio_onChange\") {\n                let newContent: any = event.data.data.content;\n                if (typeof newContent === \"object\") {\n                    if (content.contentType === ContentTypes.APPLICATION_YAML) {\n                        console.info(\"[AsyncApiEditor] New content is 'object', converting to YAML string\");\n                        newContent = toYamlString(newContent);\n                    } else {\n                        console.info(\"[AsyncApiEditor] New content is 'object', converting to JSON string\");\n                        newContent = toJsonString(newContent);\n                    }\n                } else if (typeof newContent === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n                    console.info(\"[AsyncApiEditor] Converting from JSON string to YAML string.\");\n                    newContent = toYamlString(parseJson(newContent as string));\n                }\n                onChange(newContent);\n            }\n        };\n        window.addEventListener(\"message\", eventListener, false);\n        return () => {\n            window.removeEventListener(\"message\", eventListener, false);\n        };\n    }, []);\n\n    const editorAppUrl = (): string => {\n        return cfg.ads.editorsBasePath;\n    };\n\n    const onEditorLoaded = (): void => {\n        // Now it's OK to post a message to iframe with the content to edit.\n        let value: string;\n        if (typeof content.data === \"object\") {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'object' - converting to JSON string.\");\n            value = toJsonString(content.data);\n        } else if (typeof content.data === \"string\" && content.contentType === ContentTypes.APPLICATION_YAML) {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'string' - converting from YAML to JSON.\");\n            value = toJsonString(parseYaml(content.data as string));\n        } else {\n            console.info(\"[AsyncApiEditor] Loading editor data from 'string' without content conversion.\");\n            value = content.data as string;\n        }\n        const message: any = {\n            type: \"apicurio-editingInfo\",\n            // tslint:disable-next-line:object-literal-sort-keys\n            data: {\n                content: {\n                    type: \"ASYNCAPI\",\n                    value: value\n                },\n                features: {\n                    allowCustomValidations: false,\n                    allowImports: false\n                }\n            }\n        };\n        ref.current.contentWindow.postMessage(message, \"*\");\n    };\n\n    return (\n        <iframe id=\"asyncapi-editor-frame\"\n            ref={ ref }\n            className={ className ? className : \"editor-asyncapi-flex-container\" }\n            onLoad={ onEditorLoaded }\n            src={ editorAppUrl() } />\n    );\n};\n","import React, { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { Editor as DesignEditor, EditorProps } from \"@app/editors/editor-types\";\nimport Editor from \"@monaco-editor/react\";\nimport { designContentToString } from \"@app/editors/editor-text\";\nimport { editor } from \"monaco-editor\";\nimport IStandaloneCodeEditor = editor.IStandaloneCodeEditor;\n\n/**\n * Protobuf text editor with support for syntax hint and highlight.\n */\nexport const ProtoEditor: DesignEditor = ({ content, onChange }: EditorProps) => {\n    const defaultValue: string = designContentToString(content);\n    const [value, setValue] = useState<string>(defaultValue);\n\n    const editorRef: MutableRefObject<IStandaloneCodeEditor|undefined> = useRef<IStandaloneCodeEditor>();\n\n    useEffect(() => {\n        const contentString: string = designContentToString(content);\n        setValue(contentString);\n\n        if (editorRef.current) {\n            editorRef.current?.setValue(contentString);\n        }\n    }, [content]);\n\n    const registerProto = (monaco) => {\n        monaco.languages.register({ id: \"protobuf\" });\n        monaco.languages.setMonarchTokensProvider(\"protobuf\", {\n            keywords: [\n                \"import\", \"option\", \"message\", \"package\", \"service\",\n                \"optional\", \"rpc\", \"returns\", \"return\", \"true\", \"false\", \"required\"\n            ],\n            typeKeywords: [\n                \"double\", \"float\", \"int32\", \"int64\", \"uint32\",\n                \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\",\n                \"sfixed32\", \"sfixed64\", \"bool\", \"string\", \"bytes\"\n            ],\n            operators: [\n                \"=\", \">\", \"<\", \"!\", \"~\", \"?\", \":\", \"==\", \"<=\", \">=\", \"!=\",\n                \"&&\", \"||\", \"++\", \"--\", \"+\", \"-\", \"*\", \"/\", \"&\", \"|\", \"^\", \"%\",\n                \"<<\", \">>\", \">>>\", \"+=\", \"-=\", \"*=\", \"/=\", \"&=\", \"|=\", \"^=\",\n                \"%=\", \"<<=\", \">>=\", \">>>=\"\n            ],\n            symbols: /[=><!~?:&|+\\-*/^%]+/,\n            escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n            tokenizer: {\n                root: [\n                    [/[a-z_$][\\w$]*/, {\n                        cases: {\n                            \"@typeKeywords\": \"typeKeyword\",\n                            \"@keywords\": \"keyword\",\n                            \"@default\": \"identifier\"\n                        }\n                    }],\n                    [/[A-Z][\\w$]*/, \"type.identifier\"],\n                    { include: \"@whitespace\" },\n\n                    // delimiters and operators\n                    [/[{}()[\\]]/, \"@brackets\"],\n                    [/[<>](?!@symbols)/, \"@brackets\"],\n                    [/@symbols/, {\n                        cases: {\n                            \"@operators\": \"operator\",\n                            \"@default\": \"\"\n                        }\n                    }],\n                    // @ annotations.\n                    [/@\\s*[a-zA-Z_$][\\w$]*/, { token: \"annotation\", log: \"annotation token: $0\" }],\n                    // numbers\n                    [/\\d*\\.\\d+([eE][-+]?\\d+)?/, \"number.float\"],\n                    [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n                    [/\\d+/, \"number\"],\n                    // delimiter: after number because of .\\d floats\n                    [/[;,.]/, \"delimiter\"],\n                    // strings\n                    [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], // non-teminated string\n                    [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\n                    // characters\n                    [/'[^\\\\']'/, \"string\"],\n                    [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n                    [/'/, \"string.invalid\"]\n                ],\n                comment: [\n                    [/[^/*]+/, \"comment\"],\n                    [/\\/\\*/, \"comment\", \"@push\"], // nested comment\n                    [\"\\\\*/\", \"comment\", \"@pop\"],\n                    [/[/*]/, \"comment\"]\n                ],\n                string: [\n                    [/[^\\\\\"]+/, \"string\"],\n                    [/@escapes/, \"string.escape\"],\n                    [/\\\\./, \"string.escape.invalid\"],\n                    [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n                ],\n                whitespace: [\n                    [/[ \\t\\r\\n]+/, \"white\"],\n                    [/\\/\\*/, \"comment\", \"@comment\"],\n                    [/\\/\\/.*$/, \"comment\"]\n                ]\n            }\n        });\n        monaco.editor.defineTheme(\"protobuf\", {\n            base: \"vs\",\n            inherit: true,\n            rules: [\n                { token: \"keyword\", foreground: \"DB2121\" },\n                { token: \"typeKeyword\", foreground: \"F84842\", fontStyle: \"italic\" },\n                { token: \"identifier\", foreground: \"0C5ED7\", fontStyle: \"bold\" },\n                { token: \"type.identifier\", foreground: \"00CA8C\", fontStyle: \"bold\" },\n                { token: \"comment\", foreground: \"7A7A7A\" },\n                { token: \"number\", foreground: \"000000\", fontStyle: \"italic\" },\n                { token: \"string\", fontStyle: \"italic\" }\n            ]\n        });\n    };\n\n    return (\n        <Editor\n            beforeMount={registerProto}\n            className=\"text-editor\"\n            defaultLanguage=\"protobuf\"\n            defaultValue={value}\n            onChange={onChange}\n            height=\"100%\"\n            options={{\n                automaticLayout: true\n            }}\n            onMount={(editor) => {\n                editorRef.current = editor;\n            }}\n        />\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport \"./editor.css\";\nimport {\n    Button,\n    CodeBlock,\n    CodeBlockCode,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Divider,\n    Drawer,\n    DrawerActions,\n    DrawerCloseButton,\n    DrawerContent,\n    DrawerHead,\n    DrawerPanelBody,\n    DrawerPanelContent,\n    PageSection,\n    PageSectionVariants,\n    Spinner\n} from \"@patternfly/react-core\";\nimport {\n    AlertsService,\n    DesignsService,\n    DownloadService,\n    useAlertsService,\n    useDesignsService,\n    useDownloadService,\n    useRhosrInstanceServiceFactory\n} from \"@app/services\";\nimport { ArtifactTypes, ContentTypes, Design, DesignContent, TestRegistryErrorResponse } from \"@app/models\";\nimport { IsLoading } from \"@app/components\";\nimport { CompareModal, DeleteDesignModal, EditorContext, RenameData, RenameModal } from \"@app/pages/components\";\nimport { OpenApiEditor, ProtoEditor, TextEditor } from \"@app/editors\";\nimport { AsyncApiEditor } from \"@app/editors/editor-asyncapi\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { contentTypeForDesign, convertToValidFilename, fileExtensionForDesign, formatContent } from \"@app/utils\";\nimport { Prompt } from \"react-router-dom\";\nimport { Navigation, useNavigation } from \"@app/contexts/navigation\";\n\n\nexport type EditorPageProps = {\n    params: any;\n    toggleExpandTestRegistryIssuesDrawer: (isExpanded: boolean) => void;\n};\n\n\ninterface TestRegistryRequestParams {\n    registry: Registry\n    groupId: string | undefined\n    artifactId: string\n}\n\n\n// Event listener used to prevent navigation when the editor is dirty\nconst onBeforeUnload = (e): void => {\n    // Cancel the event\n    e.preventDefault();\n    // Chrome requires returnValue to be set\n    e.returnValue = \"\";\n};\n\n\nexport const EditorPage: FunctionComponent<EditorPageProps> = ({ params }: EditorPageProps) => {\n    const [isLoading, setLoading] = useState(true);\n    const [design, setDesign] = useState<Design>();\n    const [designContent, setDesignContent] = useState<DesignContent>();\n    const [currentContent, setCurrentContent] = useState<any>();\n    const [isDirty, setDirty] = useState(false);\n    const [testRegistryError, setTestRegistryError] = useState<TestRegistryErrorResponse>();\n    const [testRegistryArgsCache, setTestRegistryArgsCache] = useState<TestRegistryRequestParams>();\n    const [isTestRegistryIssuesLoading, setTestRegistryIssuesIsLoading] = useState(false);\n    const [isTestRegistryIssuesDrawerOpen, setTestRegistryIssuesDrawerIsOpen] = useState(false);\n    const [isRenameModalOpen, setRenameModalOpen] = useState(false);\n    const [isCompareModalOpen, setCompareModalOpen] = useState(false);\n    const [isDeleteModalOpen, setDeleteModalOpen] = useState(false);\n\n    const drawerRef = useRef<HTMLDivElement>();\n\n    const designsService: DesignsService = useDesignsService();\n    const rhosrInstanceFactory = useRhosrInstanceServiceFactory();\n    const downloadSvc: DownloadService = useDownloadService();\n    const navigation: Navigation = useNavigation();\n    const alerts: AlertsService = useAlertsService();\n\n    useEffect(() => {\n        // Cleanup any possible event listener we might still have registered\n        return () => {\n            window.removeEventListener(\"beforeunload\", onBeforeUnload);\n        };\n    }, []);\n\n    // Load the design based on the design ID (from the path param).\n    useEffect(() => {\n        setLoading(true);\n        const designId: string = params[\"designId\"];\n\n        designsService.getDesign(designId).then(design => {\n            setDesign(design);\n        }).catch(error => {\n            // TODO handle error\n            console.error(`[EditorPage] Failed to get design with id ${designId}: `, error);\n        });\n    }, [params]);\n\n    // Add browser hook to prevent navigation and tab closing when the editor is dirty\n    useEffect(() => {\n        if (isDirty) {\n            window.addEventListener(\"beforeunload\", onBeforeUnload);\n        } else {\n            window.removeEventListener(\"beforeunload\", onBeforeUnload);\n        }\n    }, [isDirty]);\n\n    // Load the design content\n    useEffect(() => {\n        const designId: string = params[\"designId\"];\n        designsService.getDesignContent(designId).then(content => {\n            setDesignContent(content);\n            setLoading(false);\n            setDirty(false);\n            setCurrentContent(content.data);\n        }).catch(error => {\n            // TODO handle error\n            console.error(`[EditorPage] Failed to get design content with id ${designId}: `, error);\n        });\n    }, [design]);\n\n    // Called when the user makes an edit in the editor.\n    const onEditorChange = (value: any): void => {\n        setCurrentContent(value);\n        setDirty(true);\n    };\n\n    // Called when the user makes an edit in the editor.\n    const onSave = (): void => {\n        designsService.updateDesignContent({\n            ...designContent as DesignContent,\n            data: currentContent\n        }).then(() => {\n            if (design) {\n                design.modifiedOn = new Date();\n                setDesign({\n                    ...design,\n                    modifiedOn: new Date(),\n                });\n                setDesignContent({\n                    ...(designContent as DesignContent),\n                    data: currentContent\n                });\n                setDirty(false);\n            }\n            alerts.designSaved(design as Design);\n        }).catch(error => {\n            // TODO handle error\n            console.error(\"[EditorPage] Failed to save design content: \", error);\n        });\n    };\n\n    const onFormat = (): void => {\n        console.info(\"[EditorPage] Formatting content.\");\n        const formattedContent: string = formatContent(currentContent, designContent?.contentType || ContentTypes.APPLICATION_JSON);\n        console.info(\"[EditorPage] New content is: \", formattedContent);\n        setDesignContent({\n            ...designContent as DesignContent,\n            data: formattedContent\n        });\n        setCurrentContent(formattedContent);\n    };\n\n    const onDelete = (): void => {\n        setDeleteModalOpen(true);\n    };\n\n    const onDeleteDesignConfirmed = (design: Design): void => {\n        designsService.deleteDesign(design.id).then(() => {\n            alerts.designDeleted(design as Design);\n            navigation.navigateTo(\"/\");\n        }).catch(error => {\n            console.error(\"[Editor] Design delete failed: \", error);\n            alerts.designDeleteFailed(design as Design, error);\n        });\n        setDeleteModalOpen(false);\n    };\n\n    const onDownload = (): void => {\n        if (design && designContent) {\n            const filename: string = `${convertToValidFilename(design.name)}.${fileExtensionForDesign(design, designContent)}`;\n            const contentType: string = contentTypeForDesign(design, designContent);\n            const theContent: string = typeof currentContent === \"object\" ? JSON.stringify(currentContent, null, 4) : currentContent as string;\n            downloadSvc.downloadToFS(design, theContent, contentType, filename);\n        }\n    };\n\n    const doRenameDesign = (event: RenameData): void => {\n        designsService.renameDesign(design?.id as string, event.name, event.summary).then(() => {\n            if (design) {\n                design.name = event.name;\n                design.summary = event.summary;\n            }\n            setRenameModalOpen(false);\n            alerts.designRenamed(event);\n        }).catch(() => {\n            // TODO error handling\n        });\n    };\n\n    const textEditor: React.ReactElement = (\n        <TextEditor content={designContent as DesignContent} onChange={onEditorChange}/>\n    );\n\n    const protoEditor: React.ReactElement = (\n        <ProtoEditor content={designContent as DesignContent} onChange={onEditorChange}/>\n    );\n\n    const openapiEditor: React.ReactElement = (\n        <OpenApiEditor content={designContent as DesignContent} onChange={onEditorChange}/>\n    );\n\n    const asyncapiEditor: React.ReactElement = (\n        <AsyncApiEditor content={designContent as DesignContent} onChange={onEditorChange}/>\n    );\n\n    const editor = (): React.ReactElement => {\n        if (design?.type === ArtifactTypes.OPENAPI) {\n            return openapiEditor;\n        } else if (design?.type === ArtifactTypes.ASYNCAPI) {\n            return asyncapiEditor;\n        } else if (design?.type === ArtifactTypes.PROTOBUF) {\n            return protoEditor;\n        }\n\n        // TODO create different text editors depending on the content type?  Or assume\n        // that the text editor can configure itself appropriately?\n        return textEditor;\n    };\n\n    const onResizeTestRegistrySidepanel = (newWidth: number, id: string) => {\n        // eslint-disable-next-line no-console\n        console.log(`${id} has new width of: ${newWidth}`);\n    };\n\n    const onCompareContent = () => {\n        setCompareModalOpen(true);\n    };\n\n    const closeCompareEditor = () => {\n        setCompareModalOpen(false);\n    };\n\n    const testArtifactRegistration = (registry: Registry, groupId: string | undefined, artifactId: string) => {\n        setTestRegistryIssuesIsLoading(true);\n        openTestRegistryIssuesPanel();\n        // cache registry used during registry test to allow for a retry from the sidepanel\n        setTestRegistryArgsCache({ registry, groupId, artifactId });\n        rhosrInstanceFactory.createFor(registry)\n            .testUpdateArtifactContent(groupId, artifactId, currentContent)\n            .then(() => {\n                // Nothing to do here.\n            }).catch((error: TestRegistryErrorResponse) => {\n                openTestRegistryIssuesPanel(error);\n            });\n    };\n\n    const openTestRegistryIssuesPanel = (error?: TestRegistryErrorResponse) => {\n        setTestRegistryIssuesDrawerIsOpen(true);\n        setTestRegistryError(error);\n        setTestRegistryIssuesIsLoading(false);\n    };\n\n    const closeTestRegistryIssuesPanel = () => {\n        setTestRegistryIssuesDrawerIsOpen(false);\n        setTestRegistryIssuesIsLoading(false);\n        setTestRegistryError(undefined);\n    };\n\n    const renderPanelContent = (error?: TestRegistryErrorResponse) => {\n        return (\n            <DrawerPanelContent isResizable onResize={onResizeTestRegistrySidepanel} minSize=\"35%\" id=\"test-registry-issues-panel\">\n                <DrawerHead>\n                    <h2 className=\"pf-c-title pf-m-2xl\" tabIndex={isTestRegistryIssuesDrawerOpen ? 0 : -1}\n                        ref={drawerRef as any}>\n                        Test Registration issues\n                    </h2>\n                    <DrawerActions>\n                        <Button variant=\"secondary\" onClick={() => testArtifactRegistration(\n                            testRegistryArgsCache?.registry as Registry,\n                            testRegistryArgsCache?.groupId,\n                            testRegistryArgsCache?.artifactId as string\n                        )\n                        }>Retry</Button>\n                        <DrawerCloseButton onClick={closeTestRegistryIssuesPanel}/>\n                    </DrawerActions>\n                </DrawerHead>\n                <Divider/>\n                <DrawerPanelBody>\n                    {renderPanelBody(error)}\n                </DrawerPanelBody>\n            </DrawerPanelContent>\n        );\n    };\n\n    const renderPanelBody = (error?: TestRegistryErrorResponse) => {\n        if (isTestRegistryIssuesLoading) {\n            return (\n                <Spinner className=\"spinner\"/>\n            );\n        } else if (error) {\n            return (\n                <DescriptionList isHorizontal>\n                    {error.name === \"RuleViolationException\" && error.causes?.length > 0 ?\n                        error.causes.map((cause, i) =>\n                            <React.Fragment key={`issue-${i}`}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Code</DescriptionListTerm>\n                                    <DescriptionListDescription>{cause.description}</DescriptionListDescription>\n                                    <DescriptionListTerm>Context</DescriptionListTerm>\n                                    <DescriptionListDescription>\n                                        <pre>{cause.context}</pre>\n                                    </DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <Divider/>\n                            </React.Fragment>\n                        ) : <CodeBlock>\n                            <CodeBlockCode id=\"code-content\">{error.detail}</CodeBlockCode>\n                        </CodeBlock>}\n                </DescriptionList>\n            );\n        }\n\n        return <p>Registry Test completed with no issues.</p>;\n    };\n\n    return (\n        <IsLoading condition={isLoading}>\n            <PageSection variant={PageSectionVariants.light} id=\"section-context\">\n                <EditorContext\n                    design={design as Design}\n                    dirty={isDirty}\n                    onSave={onSave}\n                    onFormat={onFormat}\n                    onDelete={onDelete}\n                    onDownload={onDownload}\n                    onRename={() => setRenameModalOpen(true)}\n                    isPanelOpen={isTestRegistryIssuesDrawerOpen}\n                    onRegistrationTestRegistry={testArtifactRegistration}\n                    onCompareContent={onCompareContent}\n                    onExpandTestRegistryCausesPanel={(error: TestRegistryErrorResponse) => openTestRegistryIssuesPanel(error)}\n                    artifactContent={currentContent}\n                />\n            </PageSection>\n            <PageSection variant={PageSectionVariants.light} id=\"section-editor\">\n                <Drawer isExpanded={isTestRegistryIssuesDrawerOpen} isInline={true} position=\"right\">\n                    <DrawerContent panelContent={renderPanelContent(testRegistryError)}>\n                        <div className=\"editor-parent\">\n                            {editor()}\n                        </div>\n                    </DrawerContent>\n                </Drawer>\n            </PageSection>\n            <CompareModal isOpen={isCompareModalOpen}\n                onClose={closeCompareEditor}\n                before={designContent?.data}\n                beforeName={design?.name || \"\"}\n                after={currentContent}\n                afterName={design?.name || \"\"}/>\n            <RenameModal design={design}\n                isOpen={isRenameModalOpen}\n                onRename={doRenameDesign}\n                onCancel={() => setRenameModalOpen(false)}/>\n            <DeleteDesignModal design={design}\n                isOpen={isDeleteModalOpen}\n                onDelete={onDeleteDesignConfirmed}\n                onDownload={onDownload}\n                onCancel={() => setDeleteModalOpen(false)}/>\n            <Prompt when={isDirty} message={ \"You have unsaved changes.  Do you really want to leave?\" }/>\n        </IsLoading>\n    );\n};\n","import React from \"react\";\nimport { FederatedProps } from \"@app/contexts\";\nimport { EditorPage, EditorPageProps } from \"@app/pages/editor\";\n\ntype FederatedEditorPageProps = EditorPageProps & FederatedProps;\n\nconst FederatedEditorPage: React.FunctionComponent<FederatedEditorPageProps> = (props: FederatedEditorPageProps) => {\n    return (<EditorPage {...props}/>);\n};\n\nexport default FederatedEditorPage;\n"],"names":["designContentToString","content","data","designContentToLanguage","contentType","TextEditor","onChange","defaultValue","defaultLanguage","useState","value","setValue","language","setLanguage","editorRef","useRef","useEffect","contentString","lang","current","className","options","automaticLayout","wordWrap","onMount","editor","OpenApiEditor","ref","cfg","useConfig","console","info","ads","editorsBasePath","eventListener","event","type","newContent","window","addEventListener","removeEventListener","id","onLoad","message","features","allowCustomValidations","allowImports","contentWindow","postMessage","src","AsyncApiEditor","ProtoEditor","beforeMount","monaco","languages","register","setMonarchTokensProvider","keywords","typeKeywords","operators","symbols","escapes","tokenizer","root","cases","include","token","log","bracket","next","comment","string","whitespace","defineTheme","base","inherit","rules","foreground","fontStyle","height","onBeforeUnload","e","preventDefault","returnValue","EditorPage","params","isLoading","setLoading","design","setDesign","designContent","setDesignContent","currentContent","setCurrentContent","isDirty","setDirty","testRegistryError","setTestRegistryError","testRegistryArgsCache","setTestRegistryArgsCache","isTestRegistryIssuesLoading","setTestRegistryIssuesIsLoading","isTestRegistryIssuesDrawerOpen","setTestRegistryIssuesDrawerIsOpen","isRenameModalOpen","setRenameModalOpen","isCompareModalOpen","setCompareModalOpen","isDeleteModalOpen","setDeleteModalOpen","drawerRef","designsService","rhosrInstanceFactory","downloadSvc","navigation","alerts","designId","getDesign","then","catch","error","getDesignContent","onEditorChange","onDownload","filename","name","theContent","JSON","stringify","downloadToFS","textEditor","protoEditor","openapiEditor","asyncapiEditor","onResizeTestRegistrySidepanel","newWidth","testArtifactRegistration","registry","groupId","artifactId","openTestRegistryIssuesPanel","createFor","testUpdateArtifactContent","closeTestRegistryIssuesPanel","undefined","renderPanelBody","Spinner","DescriptionList","isHorizontal","causes","length","map","cause","i","key","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","description","context","Divider","CodeBlock","CodeBlockCode","detail","condition","PageSection","variant","PageSectionVariants","dirty","onSave","updateDesignContent","modifiedOn","Date","designSaved","onFormat","formattedContent","onDelete","onRename","isPanelOpen","onRegistrationTestRegistry","onCompareContent","onExpandTestRegistryCausesPanel","artifactContent","Drawer","isExpanded","isInline","position","DrawerContent","panelContent","DrawerPanelContent","isResizable","onResize","minSize","DrawerHead","tabIndex","DrawerActions","Button","onClick","DrawerCloseButton","DrawerPanelBody","isOpen","onClose","before","beforeName","after","afterName","renameDesign","summary","designRenamed","onCancel","deleteDesign","designDeleted","navigateTo","designDeleteFailed","Prompt","when","props"],"sourceRoot":""}