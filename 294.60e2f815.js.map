{"version":3,"file":"294.60e2f815.js","mappings":"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","sources":["webpack://ads-ui/./src/app/pages/home.tsx","webpack://ads-ui/./src/app/pages/home-federated.tsx"],"sourcesContent":["import React, {FunctionComponent, useRef, useState} from \"react\";\nimport \"./home.css\";\nimport {\n    Button,\n    Drawer,\n    DrawerActions,\n    DrawerCloseButton,\n    DrawerContent,\n    DrawerContentBody,\n    DrawerHead,\n    DrawerPanelBody,\n    DrawerPanelContent,\n    Flex,\n    FlexItem,\n    PageSection,\n    PageSectionVariants,\n    Popover,\n    Text,\n    TextContent,\n    TextVariants,\n    Title,\n    TitleSizes\n} from \"@patternfly/react-core\";\nimport {\n    CreateDesignModal, DesignDetailsPanel,\n    DesignsPanel,\n    ImportDesignModal,\n    ImportFrom,\n    ImportFromRhosrModal\n} from \"@app/pages/components\";\nimport {CreateDesign, CreateDesignContent, Design, DesignEvent, Template} from \"@app/models\";\nimport {cloneObject, propertyReplace} from \"@app/utils\";\nimport {DesignsService, useDesignsService} from \"@app/services\";\nimport {Navigation, useNavigation} from \"@app/contexts/navigation\";\nimport {QuestionCircleIcon} from \"@patternfly/react-icons\";\nimport {ArtifactTypeIcon} from \"@app/components\";\n\nexport type HomePageProps = {\n};\n\nexport const HomePage: FunctionComponent<HomePageProps> = ({}: HomePageProps) => {\n    const [ isDrawerExpanded, setDrawerExpanded ] = useState(true);\n    const [ isCreateModalOpen, setCreateModalOpen ] = useState(false);\n    const [ isImportModalOpen, setImportModalOpen ] = useState(false);\n    const [ isImportFromRhosrModalOpen, setImportFromRhosrModalOpen ] = useState(false);\n    const [ importType, setImportType ] = useState<ImportFrom>(ImportFrom.FILE);\n    const [ selectedDesign, setSelectedDesign ] = useState<Design>();\n\n    const drawerRef: any = useRef<HTMLSpanElement>();\n\n    const designsSvc: DesignsService = useDesignsService();\n    const nav: Navigation = useNavigation();\n\n    const onDrawerExpand = (): void => {\n        drawerRef.current && drawerRef.current.focus();\n    };\n\n    const onDesignSelected = (design: Design | undefined): void => {\n        setSelectedDesign(design);\n        if (design) {\n            setDrawerExpanded(true);\n        } else {\n            setDrawerExpanded(false);\n        }\n    };\n\n    const onImport = (from: ImportFrom): void => {\n        setImportType(from);\n        if (from !== ImportFrom.RHOSR) {\n            setImportModalOpen(true);\n        } else {\n            setImportFromRhosrModalOpen(true);\n        }\n    };\n\n    const createDesign = async (info: CreateDesign, template: Template): Promise<void> => {\n        let dc: CreateDesignContent = {\n            contentType: template.content.contentType,\n            data: cloneObject(template.content.data)\n        }\n        if (typeof dc.data === \"string\") {\n            dc.data = dc.data.replace(\"$NAME\", info.name).replace(\"$SUMMARY\", info.summary||\"\");\n        } else {\n            propertyReplace(dc.data, \"$NAME\", info.name);\n            propertyReplace(dc.data, \"$SUMMARY\", info.summary||\"\");\n        }\n        return designsSvc.createDesign(info, dc).then((design) => {\n            setCreateModalOpen(false);\n            nav.navigateTo(`/designs/${design.id}/editor`);\n        }).catch(error => {\n            // TODO handle error\n            console.error(error);\n        });\n    };\n\n    const importDesign = async (cd: CreateDesign, content: CreateDesignContent): Promise<void> => {\n        return designsSvc.createDesign(cd, content).then((design) => {\n            setImportModalOpen(false);\n            nav.navigateTo(`/designs/${design.id}/editor`);\n        }).catch(error => {\n            // TODO handle error\n            console.error(error);\n        });\n    };\n\n    // The content of the side panel.  This should be a details panel with metadata and history (for example).\n    const panelContent: React.ReactNode = (\n        <DrawerPanelContent>\n            <DrawerHead>\n                <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                        Name\n                    </Text>\n                    <Title\n                        headingLevel=\"h2\"\n                        size={TitleSizes['xl']}\n                        className=\"pf-u-mt-0\"\n                    >\n                        <div className=\"design-details-header\">\n                            <div className=\"design-icon\"><ArtifactTypeIcon type={selectedDesign?.type||\"AVRO\"} /></div>\n                            <div className=\"design-name\">{selectedDesign?.name}</div>\n                        </div>\n                    </Title>\n                </TextContent>\n                <DrawerActions>\n                    <DrawerCloseButton onClick={() => setDrawerExpanded(false)} />\n                </DrawerActions>\n            </DrawerHead>\n            <DrawerPanelBody>\n                <DesignDetailsPanel design={selectedDesign} />\n            </DrawerPanelBody>\n        </DrawerPanelContent>\n    );\n\n    return (\n        <React.Fragment>\n            <Drawer isStatic={false} position=\"right\" isInline={false} isExpanded={isDrawerExpanded} onExpand={onDrawerExpand}>\n                <DrawerContent panelContent={panelContent}>\n                    <DrawerContentBody>\n                        <PageSection variant={PageSectionVariants.light} className=\"summary\">\n                            <TextContent className=\"summary-title-and-description\">\n                                <Flex>\n                                    <FlexItem>\n                                        <Text component=\"h1\" className=\"title\">Schema and API Designs</Text>\n                                    </FlexItem>\n                                    <FlexItem>\n                                        <Popover\n                                            aria-label=\"More information\"\n                                            headerContent={<div>API Designer Help</div>}\n                                            bodyContent={<div>A tool to design your APIs (OpenAPI, AsyncAPI) and schemas (Apache Avro, Google Protobuf, JSON Schema). Manage your collection of schema and API designs below by creating, importing, and editing.</div>}\n                                        >\n                                            <Button variant=\"plain\"><QuestionCircleIcon /></Button>\n                                        </Popover>\n                                    </FlexItem>\n                                </Flex>\n                            </TextContent>\n                            <CreateDesignModal isOpen={isCreateModalOpen} onCreate={createDesign} onCancel={() => {setCreateModalOpen(false)}} />\n                            <ImportDesignModal isOpen={isImportModalOpen} onImport={importDesign} onCancel={() => {setImportModalOpen(false)}}\n                                              importType={importType} />\n                            <ImportFromRhosrModal isOpen={isImportFromRhosrModalOpen} onImport={importDesign} onCancel={() => {setImportFromRhosrModalOpen(false)}} />\n                        </PageSection>\n                        <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                            <DesignsPanel onCreate={() => {setCreateModalOpen(true)}}\n                                          onDesignSelected={onDesignSelected}\n                                          onImport={onImport} />\n                        </PageSection>\n                    </DrawerContentBody>\n                </DrawerContent>\n            </Drawer>\n        </React.Fragment>\n    );\n}\n","import React from \"react\";\nimport {FederatedProps} from \"@app/contexts\";\nimport {HomePage, HomePageProps} from \"@app/pages/home\";\n\ntype FederatedHomePageProps = HomePageProps & FederatedProps;\n\nconst FederatedHomePage: React.FunctionComponent<FederatedHomePageProps> = () => {\n    return (<HomePage />);\n}\n\nexport default FederatedHomePage;\n"],"names":["HomePage","useState","isDrawerExpanded","setDrawerExpanded","isCreateModalOpen","setCreateModalOpen","isImportModalOpen","setImportModalOpen","isImportFromRhosrModalOpen","setImportFromRhosrModalOpen","importType","setImportType","selectedDesign","setSelectedDesign","drawerRef","useRef","designsSvc","nav","importDesign","cd","content","Promise","createDesign","then","design","navigateTo","id","catch","error","console","panelContent","DrawerPanelContent","DrawerHead","TextContent","Text","component","TextVariants","className","Title","headingLevel","size","TitleSizes","type","name","DrawerActions","DrawerCloseButton","onClick","DrawerPanelBody","Drawer","isStatic","position","isInline","isExpanded","onExpand","current","focus","DrawerContent","DrawerContentBody","PageSection","variant","PageSectionVariants","Flex","FlexItem","Popover","headerContent","bodyContent","Button","QuestionCircleIcon","isOpen","onCreate","info","template","dc","contentType","data","replace","summary","onCancel","onImport","isFilled","onDesignSelected","from"],"sourceRoot":""}